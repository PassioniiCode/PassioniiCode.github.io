<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code Ant&#39;s Blog</title>
  
  <subtitle>“每天进步一点点”</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lijinhongpassion.github.io/"/>
  <updated>2020-09-27T11:47:52.796Z</updated>
  <id>https://lijinhongpassion.github.io/</id>
  
  <author>
    <name>Code Ant</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java面试宝典</title>
    <link href="https://lijinhongpassion.github.io/codeant/hmdy.html"/>
    <id>https://lijinhongpassion.github.io/codeant/hmdy.html</id>
    <published>2022-09-27T11:28:38.000Z</published>
    <updated>2020-09-27T11:47:52.796Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/hmdy/111.jpg" alt="Java面试宝典 : https://github.com/LiJinHongPassion/How-much-do-you-know-for-java/"></p><a id="more"></a><hr><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><hr><h3 id="点击下面连接-👇👇👇"><a href="#点击下面连接-👇👇👇" class="headerlink" title="点击下面连接   👇👇👇"></a>点击下面连接   👇👇👇</h3><p>Java面试宝典 : <a href="https://github.com/LiJinHongPassion/How-much-do-you-know-for-java/" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/How-much-do-you-know-for-java/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/hmdy/111.jpg&quot; alt=&quot;Java面试宝典 : https://github.com/LiJinHongPassion/How-much-do-you-know-for-java/&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>代写课程/毕设（包售后、远程调试）</title>
    <link href="https://lijinhongpassion.github.io/codeant/kcsj.html"/>
    <id>https://lijinhongpassion.github.io/codeant/kcsj.html</id>
    <published>2020-12-30T08:04:28.000Z</published>
    <updated>2020-03-17T07:24:00.783Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/kcsj/bd.webp" alt></p><a id="more"></a><hr><h1 id="目录见右下脚（看具体的毕设系统），联系方式见文末"><a href="#目录见右下脚（看具体的毕设系统），联系方式见文末" class="headerlink" title="目录见右下脚（看具体的毕设系统），联系方式见文末"></a><font color="#dd0000">目录见右下脚（看具体的毕设系统），联系方式见文末</font></h1><h1 id="页面中图片加载较慢，请耐心等待"><a href="#页面中图片加载较慢，请耐心等待" class="headerlink" title="页面中图片加载较慢，请耐心等待"></a><font color="#dd0000">页面中图片加载较慢，请耐心等待</font></h1><h1 id="写在前面（必读）"><a href="#写在前面（必读）" class="headerlink" title="写在前面（必读）"></a>写在前面（必读）</h1><p><strong>各毕设中使用的技术和系统用处不一定准确和全面，具体使用技术建议参考代码。</strong></p><p>文中的各毕设不一定每一个都非常的完美，有些包含代码+论文，选其中一个自己觉得不错的，用来做毕设。</p><p><strong>论文可以参考，但是不建议直接照搬，因为毕竟要查重</strong></p><h2 id="各毕设开发环境"><a href="#各毕设开发环境" class="headerlink" title="各毕设开发环境"></a>各毕设开发环境</h2><p>由于各个毕设的开发环境可能不同，包括各种编辑器，如：<code>IDEA</code>、<code>Eclipse</code>、<code>MyEclipse</code>，数据库：<code>Mysql</code>、<code>SQL Server</code>、<code>Oracle</code>等。</p><h1 id="业务范围"><a href="#业务范围" class="headerlink" title="业务范围"></a>业务范围</h1><p><strong>业务范围为：</strong></p><ul><li>Java<strong>课程设计</strong>（拥有大量的成品 <strong>【 源码+论文 】</strong>）<ul><li>Java web<strong>毕业设计</strong><ul><li>Python爬虫<ul><li>C/C++<ul><li><strong>大学各种小作业</strong>（sql编写、uml、html、计算机网络、数据结构、网络协议等大量成品）<ul><li><strong><font color="#dd0000">Java web商业单请加微信详谈</font> </strong></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><p><strong>学习资料有偿分享：</strong></p><p><strong>电脑实用工具：</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/kcsj/技巧工具.png" alt></p><p><strong>PPT成套模板：</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/kcsj/ppt.png" alt></p><p><strong>技术视频：</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/kcsj/视频.png" alt></p><hr><h1 id="最新毕设成品（2019-9-至今）"><a href="#最新毕设成品（2019-9-至今）" class="headerlink" title="最新毕设成品（2019.9~至今）"></a>最新毕设成品（2019.9~至今）</h1><font color="#dd0000">页面中图片加载较慢，请耐心等待</font><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/kcsj/new1.png" alt></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/kcsj/new2.png" alt></p><h1 id="毕业设计项目介绍"><a href="#毕业设计项目介绍" class="headerlink" title="毕业设计项目介绍"></a>毕业设计项目<strong>介绍</strong></h1><p>各毕业设计项目将按行业进行分类，从中选取你想选择的毕业设计即可。</p><p>产品保证能够正常运行</p><h2 id="互联网和移动互联网"><a href="#互联网和移动互联网" class="headerlink" title="[ 互联网和移动互联网 ]"></a>[ 互联网和移动互联网 ]</h2><hr><h3 id="项目一：jsp网上招标系统"><a href="#项目一：jsp网上招标系统" class="headerlink" title="项目一：jsp网上招标系统"></a>项目一：jsp网上招标系统</h3><p><strong>介绍</strong></p><blockquote><p>jsp网上招标系统主要用于实现会员的发布任务和接收任务的功能，<br>基本功能包括<br>（1）注册用户部分<br>  1：查看网站流程：查看与网站有关的流程信息，及相关的新闻公告。<br>  2：发布网站留言信息：根据系统提示，发布网站的留言信息。<br>  3：查看已发布的信息：以列表的形式查看已发布信息。<br>  4：发布威客在线信息：根据系统提示，发布网站的留言信息。<br>  5：查看网站成交记录：根据系统提示，查看成交记录信息。</p><p>（2） 管理员部分<br>  1：编辑系统用户信息：添加、编辑用户信息，包括发布者和管理员，以列表的形式显示；<br>  2：编辑网站留言信息：以列表的形式显示网站留言信息，并可对其进行删除等编辑操作；<br>  3：数据备份：不定期进行系统数据备份，以防万一。</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用的技术</strong>：Servlet + JDBC+ JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目二：城市公交查询系统"><a href="#项目二：城市公交查询系统" class="headerlink" title="项目二：城市公交查询系统"></a>项目二：城市公交查询系统</h3><p><strong>介绍</strong></p><blockquote><p>我国许多城市都有一些颇具设计感的公交站台,但我们却很难在这里找到我们出行需要的信息。因此，居民想要找到“静态线路信息”或者“动态实时信息”都感到十分困难。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用的技术：</strong>Servlet + JDBC+ JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目三：基于JSP动漫论坛"><a href="#项目三：基于JSP动漫论坛" class="headerlink" title="项目三：基于JSP动漫论坛"></a>项目三：基于JSP动漫论坛</h3><p><strong>介绍</strong></p><blockquote><p>动漫论坛项目主要用于实现动漫爱好者的互相交流，基本功能包括：注册用户、登录、浏览帖子、发布新帖、回复帖子、等。本系统结构如下：<br>（1）普通用户：<br>  注册用户：如果用户为非会员用户，通过注册，经审核通过之后成为会员，获得一个登陆身份；<br>  登录：如果用户已经是注册会员，可以进行登录，登陆后实现别的功能；<br>  浏览帖子：用户查看系统中的帖子，了解最新的资讯和各种动态等信息；<br>  发布新帖：用户可以发表一些帖子，来与其他论坛用户共享信息；<br>  回复帖子：对于自己或者别的会员发表的帖子，可以进行回复。<br>（2）管理员：<br>  管理员登录：对于已经登录的用户，若权限为管理员，可以进行管理员的登录，登陆之后才能有权限进行下一步操作；<br>  帖子管理：管理员可以对发表的帖子进行查询、修改、删除等操作，对好的帖子进行标识，删除或转移不适合的帖子；<br>  模块管理：论坛中的模块，管理员可对其进行添加、修改、删除等操作；<br>  用户管理：用户注册成功后，管理员可以对用户进行添加、删除操作。<br>（3）游客：<br>  游客可以对论坛进行访问，浏览帖子的功能，但不能参与回复操作，也没有发布帖子的权限。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Struts 1 + JDBC+ JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目四：个人博客系统"><a href="#项目四：个人博客系统" class="headerlink" title="项目四：个人博客系统"></a>项目四：个人博客系统</h3><p><strong>介绍</strong></p><blockquote><p>个人博客系统主要用于发表个人博客，记录个人生活日常，学习心得，技术分享等，供他人浏览，查阅，评论等。</p><p>（1）博主端：<br>  登录模块：登入后台管理系统：首先进入登录页面，需要输入账号和密码。它会使用Shiro进行安全管理，对前台输入的密码进行加密运算，然后与数据库中的进行比较。成功后才能登入后台系统。<br>  博客管理模块：博客管理功能分为写博客和博客信息管理。写博客是博主用来发表编写博客的，需要博客标题，然后选择博客类型，最后将博客内容填入百度的富文本编辑器中，点击发布博客按钮即可发布博客。<br>  博客类别管理模块：博主类别管理系统可以添加，修改和删除博客类型名称和排序序号。将会显示到首页的按日志类别区域。 游客可以从这里查找相关的感兴趣的博客内容<br>  评论信息管理模块：评论管理功能分为评论审核和评论信息管理两部分。评论审核是当有游客或自己发表了评论之后，博主需要在后台管理系统中审核评论。若想将此评论显示在页面上则点击审核通过，否则点击审核不通过。<br>  个人信息管理模块：修改博主的个人信息，可以修改昵称，个性签名，可以添加个人头像，修改个人简介；<br>  系统管理功能模块：友情<strong>链接</strong>管理，修改密码，刷新系统缓存和安全退出，友情<strong>链接</strong>管理可以添加，修改，删除友情<strong>链接</strong>网址<br>（2）游客端：<br>  查询博客：查询具体哪一篇博客<br>  查看博客内容：查看博客内容<br>  查看博主个人信息：查看博主个人简介<br>  发表评论：可以评论具体某篇博客<br>  友情链接：查看友情<strong>链接</strong></p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring + Spring MVC + Mybatis + JSP</li><li><strong>开发工具：</strong>未知</li></ul><hr><h3 id="项目五：网上拍卖系统"><a href="#项目五：网上拍卖系统" class="headerlink" title="项目五：网上拍卖系统"></a>项目五：网上拍卖系统</h3><p><strong>介绍</strong></p><blockquote><p>基于B2C的网上拍卖系统主要用于帮助人们应用互联网方便快捷买到自己所中意的商品，并参与到秒杀与竞拍当中。</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Spring + Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目六：电子书下载系统"><a href="#项目六：电子书下载系统" class="headerlink" title="项目六：电子书下载系统"></a>项目六：电子书下载系统</h3><p><strong>介绍</strong></p><blockquote><p>基于JAVA_JSP电子书下载系统主要用功能包括：</p><p>（1）后台管理:<br>  个人信息管理：实现个密码信息的修改<br>  会员信息管理：实现会员信息的查询、删除<br>  点券充值管理：实现充值信息的查询、审核、删除<br>  类别信息管理：实现图书类别信息增加、删除、修改、查看功能<br>  电子书信息管理：实现电子书信息的增加、删除、修改、查看功能<br>  留言公告管理：实现公告信息的增加、删除、修改、查看功能实现留言信息的查询和删除<br>（2）前台管理：<br>  实现电子书信息的分类查询、作者、书名查询<br>  实现用户信息的注册<br>  实现用户的登录和退出<br>  实现登录用户的留言、重置、书籍下载</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目七：影视创作论坛"><a href="#项目七：影视创作论坛" class="headerlink" title="项目七：影视创作论坛"></a>项目七：影视创作论坛</h3><p><strong>介绍</strong></p><blockquote><p>基于Javaee的影视创作论坛主要用功能包括：</p><p>（1）后台管理:<br>  管理模块：管理员的登录与退出、管理员个人信息的设置<br>  电影管理模块：电影信息的增加、删除、修改、电影分类信息的增加、删除、修改、查看功能<br>  影评管理模块：实现影评信息的增加、删除、修改、查看功能<br>  预告管理模块：实现预告片信息的增加、删除、修改、查看功能<br>  海报管理模块：实现海报信息的增加、删除、修改、查看功能<br>  公告管理模块：实现公告信息的增加、删除、修改、查看功能<br>（2）前台管理：<br>  实现网站首页数据展示、海报展示、预告片浏览、公告预览等<br>  实现电影影评的评论发表、查询评论<br>  站内数据搜索<br>  用户的登录和退出</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目八：Java记账管理系统"><a href="#项目八：Java记账管理系统" class="headerlink" title="项目八：Java记账管理系统"></a>项目八：Java记账管理系统</h3><p><strong>介绍</strong></p><blockquote><p>Java记账管理系统主要用于财务人员可以从账务中判断公司的发展方向。对个人和家庭而言，通过记账可以制定日后的 消费计划，这样才能为理财划出清晰合理的线条。<br>（1）用户注册：<br>  用户通过注册功能注册成功后跳转至登录页面方便登录<br>（2）用户登录：<br>  用户登录成功后：<br>  信息管理：用户可以修改个人的信息<br>  财务管理：用户可以查看自己的财务信息和做一些新的财务记录<br>  财务统计：用户可以查看自己的月收支或年收支，以便做到心里有数<br>（3）管理员登录：<br>  管理员信息管理：可以对管理员信息进行一些基本操作<br>  用户信息管理：可以对用户进行查询和删除等操作，以便管理用户群</p></blockquote><ul><li><strong>数据库：</strong>Oracle</li><li><strong>使用技术：</strong>Servlet + Mybatis + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目九：新闻发布及管理系统"><a href="#项目九：新闻发布及管理系统" class="headerlink" title="项目九：新闻发布及管理系统"></a>项目九：新闻发布及管理系统</h3><p><strong>介绍</strong></p><blockquote><p>Java新闻发布系统新闻发布及管理系统就是一个能够在网上实现新闻的发布及管理，让人们更好的获取更新的新闻资讯。<br>（1）用户管理：<br>  用户注册：新用户注册<br>  用户登录：新用户登录<br>  找回密码：忘记密码找回密码<br>  用户评论：发表对新闻的评论<br>（2）管理员管理：<br>  系统账号管理：管理员管理系统现有账号，进行删除停用等操作<br>  系统公告管理：系统公告的发布和删除<br>  新闻栏目管理：新闻栏目的新增和删除<br>  新闻资讯管理：新闻资讯的新增和删除<br>  注册用户管理：注册用户的删除和冻结<br>  友情链接管理：添加和删除友情<strong>链接</strong>功能<br>  新闻评论管理：删除用户不当评论</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC+ JSP</li><li><strong>开发工具：</strong>未知</li></ul><hr><h3 id="项目十：任务调度系统"><a href="#项目十：任务调度系统" class="headerlink" title="项目十：任务调度系统"></a>项目十：任务调度系统</h3><p><strong>介绍</strong></p><blockquote><p>任务调度试系统，基本功能包括：用户的注册、用户的登录、发起项目、项目详细及搜索等。本系统结构如下：<br>（1）用户的注册登录：<br>  注册模块：完成用户注册功能；<br>  登录模块：完成用户登录功能；<br>（2）发起项目：<br>  发起项目模块：完成了项目及项目下一个或者多个任务的添加；<br>  项目详细:点击项目名称，可以看到项目及任务详细信息;<br>  搜索项目:完成对项目名称的模糊搜索功能</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring+ Spring MVC + Hibernate + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目十一：基于网络爬虫技术的网络新闻分析"><a href="#项目十一：基于网络爬虫技术的网络新闻分析" class="headerlink" title="项目十一：基于网络爬虫技术的网络新闻分析"></a>项目十一：基于网络爬虫技术的网络新闻分析</h3><p><strong>介绍</strong></p><blockquote><p>基于网络爬虫技术的网络新闻分析主要用于网络数据爬取。本系统结构如下：<br>（1）网络爬虫模块。<br>（2）中文分词模块。<br>（3）中3文相似度判定模块。<br>（4）数据结构化存储模块。<br>（5）数据可视化展示模块。</p></blockquote><ul><li><strong>数据库：</strong>无（数据保存方式为直接生成图表）</li><li><strong>使用技术：</strong>HttpClietn + IK分词器 + 相似度算法</li><li><strong>开发工具：</strong>未知</li></ul><hr><h3 id="项目十二：旅游网站设计与实现"><a href="#项目十二：旅游网站设计与实现" class="headerlink" title="项目十二：旅游网站设计与实现"></a>项目十二：旅游网站设计与实现</h3><p><strong>介绍</strong></p><blockquote><p>塞北村镇旅游网站设计主要用于实现旅游景点信息管理，基本功能包括：主界面模块设计，用户注册模块，旅游景点模块，酒店预订模块，后台管理模块等。本系统结构如下：<br>（1）主界模块设计：<br>  首页效果、首页塞北人文、首页酒店信息、首页景点信息、自驾游路线<br>  首页天气预报、在线留言、用户注册、首页后台登录<br>（2）用户注册模块：<br>  用户注册完成后，经过管理员的审核以后方能成功登录。<br>  用户注册成功以后，可以进行预订管理，个人信息管理以及旅游路线管理等功能<br>（3）旅游景点模块：<br>  供用户快速便捷的搜索到自己想要的旅游景点信息。<br>  景点信息展示、景点名称查询、旅游景点效果图，该部分风景的查询与显示。<br>（4）酒店预定模块：<br>  客户登录，可以进行具体资料查看操作。<br>  酒店详细信息、酒店预订、酒店预订成功、酒店预订成功列表所示，可以清晰的展现出酒店订购模块的具体操作和运行效果。<br>（5）后台管理设计：<br>  管理员登录后，可以实施各种操作。实现对网站基本信息的管理。<br>  系统功能列表里主要包括：<br>      1.账号管理，在这里管理员可以修改个人信息，包括密码和个人资料等等。<br>      2.用户注册管理部分是对该网站的申请注册的用户进行验证通过，管理员可以对所有用户进行删除修改和审核。<br>      3.塞北人文添加模块主要是对该网站中塞北人文的管理，管理员可以对塞北人文进行更新修改和删除。<br>      4.塞北故事管理模块。<br>      5.塞北景点进行操作。<br>      6.自驾游路线管理。<br>      7.酒店信息管理模块。<br>      8.留言板管理较为简单。<br>      9.最后包括修改密码和退出登录模块。</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目十三：搜索引擎"><a href="#项目十三：搜索引擎" class="headerlink" title="项目十三：搜索引擎"></a>项目十三：搜索引擎</h3><p><strong>介绍</strong></p><blockquote><p>经过对搜索引擎的研究同时与Lucene自身的特性相结合，搜索引擎需要实现的功能阐述如下：<br>  （1）支持桌面文件搜索,格式包括txt、doc、xls和ppt;<br>  （2）支持分词查询<br>  （3）支持全文搜索<br>  （4）能够高亮显示搜索关键字<br>  （5）显示查询所用的时间<br>  （6）显示搜索历史、过滤关键字</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Lucene + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目十四：网上招聘系统"><a href="#项目十四：网上招聘系统" class="headerlink" title="项目十四：网上招聘系统"></a>项目十四：网上招聘系统</h3><p><strong>介绍</strong></p><blockquote><p>网上招聘系统，包含俩个角色：个人和公司角色。本系统结构如下：个人角色<br>  （1）首页：显示个人可以申请职位的公司信息，实现了查询、申请职位功能<br>  （2）个人信息修改：实现了对个人信息（简历）的修改<br>  （3）下载简历：实现对简历的下载<br>  （4）发布简历<br>  （5）撤销简历<br>  （6）消息通知：实现了对已申请公司是否通过功能<br>公司角色<br>  （1）首页：显示所有申请公司职位的求职者信息<br>  （2）公司信息修改：实现了对公司信息的修改<br>  （3）发布招聘信息<br>  （4）撤销招聘信息<br>  （5）求职者通知：实现了对已申请公司职位的求职者是否通过功能</p></blockquote><ul><li><strong>数据库：</strong>Oracle</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目十五：文章发布系统"><a href="#项目十五：文章发布系统" class="headerlink" title="项目十五：文章发布系统"></a>项目十五：文章发布系统</h3><p><strong>介绍</strong></p><blockquote><p>文章发布系统项目，基本功能包括：网站信息、基础信息、系统管理、个人信息等。本系统结构如下：<br>（1）网站信息：<br>  文章管理：实现添加文章，查询文章功能<br>  文章评论管理：实现根据评论信息查询功能<br>  联系我们：实现对公司信息的修改功能<br>  网站公告:实现对网站公告的修改功能<br>  留言板：实现对留言的回复、删除功能<br>（2）基础信息：<br>  会员管理：实现对会员的显示、查询功能<br>  文章类别管理：实现对文章类别的增加、删除、修改、查询功能<br>（3）系统管理：<br>  添加管理员：实现管理员的添加功能<br>  管理员维护：实现对管理员的修改、删除、查询功能</p><p>（4）个人信息：<br>  基本资料管理：实现对个人资料的修改功能<br>  修改登陆密码：实现修改旧密码功能</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring + Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目十六：物流信息网"><a href="#项目十六：物流信息网" class="headerlink" title="项目十六：物流信息网"></a>项目十六：物流信息网</h3><p><strong>介绍</strong></p><blockquote><p>物流信息网主要用于实现网上自主物流，基本功能包括：登录、查询、时效查询、价格查询、注册等。本系统结构如下：<br>（1）普通用户：<br>  登录：账号、密码；<br>  查询：通过快递编号进行查询；<br>  时效查询：根据出发地和接收地进行查询；<br>  价格查询：根据出发地，接收地以及重量进行查询；<br>  注册：用户进行注册；<br>  合作伙伴：和各个物流公司进行合作。<br>（2）管理员：<br>  管理员登录：对于已经登录的用户，若权限为管理员，可以进行管理员的登录，登陆之后才能有权限进行下一步操作；<br>  物流管理：对物流进行增删改查操作；<br>  地址管理：对物流的到达地址进行管理；<br>  用户管理：用户注册成功后，管理员可以对用户进行添加、删除操作。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目十七：项目管理平台"><a href="#项目十七：项目管理平台" class="headerlink" title="项目十七：项目管理平台"></a>项目十七：项目管理平台</h3><p><strong>介绍</strong></p><blockquote><p>在我国，某些高校或企业一直使用传统人工的方式管理文件档案，这种管理方式存在着许多缺点,如:效率低、保密性差,另外时间一长,将产生大量的文件和数据,这对于查找、更新和维护都带来了不少的困难。作为计算机应用的一部分,使用计算机对文件档案信息进行管理,具有手工管理所无法比拟的优点。所以建立项目管理系统，使管理自动化，提高信息处理的速度和准确性十分必要。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h2 id="企业管理系统"><a href="#企业管理系统" class="headerlink" title="[ 企业管理系统 ]"></a>[ 企业管理系统 ]</h2><hr><h3 id="项目一：CRM客户管理系统"><a href="#项目一：CRM客户管理系统" class="headerlink" title="项目一：CRM客户管理系统"></a>项目一：CRM客户管理系统</h3><p><strong>介绍</strong></p><blockquote><p>基本功能包括客户管理，角色管理以及产品管理。</p><p>（1）客户管理</p><p>​     客户的增加，修改，删除以及查询</p><p>（2）角色管理</p><p>角色的新增和修改。</p><p>（3）产品管理</p><p>​     产品的增加，修改，删除以及查询</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring + Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目二：企业合同管理系统"><a href="#项目二：企业合同管理系统" class="headerlink" title="项目二：企业合同管理系统"></a>项目二：企业合同管理系统</h3><p><strong>介绍</strong></p><blockquote><p>JAVA_JSP企业合同管理系统主要用于实现企业合同的管理，<br>基本功能包括：修改个人密码、合同信息管理、收款提醒模块、安全退出系统等。本系统结构如下：<br>（1）修改个人密码模块：<br>  修改个人密码：实现修改个人密码功能；<br>（2）合同信息管理模块：<br>  合同信息管理：实现合同信息的展示、删除、添加功能；<br>  合同信息录入：实现合同信息的添加功能；<br>  合同信息查询：实现合同信息的查询功能；<br>（3）收款提醒模块：<br>  添加收款提醒： 实现收款提醒的添加功能；<br>  添加收款管理： 实现收款提醒的展示、删除功能；</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>未知</li></ul><hr><h3 id="项目三：企业电子投票系统"><a href="#项目三：企业电子投票系统" class="headerlink" title="项目三：企业电子投票系统"></a>项目三：企业电子投票系统</h3><p><strong>介绍</strong></p><blockquote><p>javaEE健康管理系统主要功能包括：投票、查看投票结果、隐藏/公布投票结果、编辑投票主题等等。本系统结构如下：<br>1.普通用户模块：<br>  1).实现登录功能<br>  2).实现用户登录的退出<br>  3).用户可以对已经开放的主题投票<br>  4).用户可以查看所有已公布了结果的主题的投票结果<br>2.管理员模块：<br>  1).实现登录功能<br>  2).实现用户登录的退出<br>  3).在后台撤销/恢复某个主题，被撤销的主题在前台不可见<br>  4).永久删除某个主题<br>  5).公布/隐藏某主题的投票结果<br>  6).编辑投票主题<br>  7).发布新主题<br>  8).新增/删除用户</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>未知</li></ul><hr><h3 id="项目四：企业快信系统"><a href="#项目四：企业快信系统" class="headerlink" title="项目四：企业快信系统"></a>项目四：企业快信系统</h3><p><strong>介绍</strong></p><blockquote><p>javaEE健康管理系统主要功能包括：投票、查看投票结果、隐藏/公布投票结果、编辑投票主题等等。本系统结构如下：<br>1.普通用户模块：<br>  1).实现登录功能<br>  2).实现用户登录的退出<br>  3).用户可以对已经开放的主题投票<br>  4).用户可以查看所有已公布了结果的主题的投票结果<br>2.管理员模块：<br>  1).实现登录功能<br>  2).实现用户登录的退出<br>  3).在后台撤销/恢复某个主题，被撤销的主题在前台不可见<br>  4).永久删除某个主题<br>  5).公布/隐藏某主题的投票结果<br>  6).编辑投票主题<br>  7).发布新主题<br>  8).新增/删除用户</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Struts2 + JDBC + JSP</li><li><strong>开发工具：</strong>未知</li></ul><hr><h3 id="项目五：固定资产管理系统"><a href="#项目五：固定资产管理系统" class="headerlink" title="项目五：固定资产管理系统"></a>项目五：固定资产管理系统</h3><p><strong>介绍</strong></p><blockquote><p>187固定资产管理系统是对高校固定资产的一个信息化管理系统，基本功能包括：对固定资产的购进、接触、销毁，对物品的使用状态、借出状态、库存状态等进行标识，对各类物品进行编号，根据编号进行查询，根据名称进行查询等。本系统结构如下：<br>（1）系统登录：<br>  用户登录模块：登录功能<br>（2）系统用户管理：<br>  对系统用户的增加<br>  系统用户的权限修改<br>  系统用户的删除<br>  分配系统用户的权限<br>  修改本身登录密码<br>  资产的相关维护<br>（3）员工信息管理：<br>  教工的增加、修改、删除、查询<br>（4）资产入库管理：<br>  资产的录入<br>  资产的属性修改<br>  资产的报废删除<br>  资产的属性查询<br>（5）资产维护管理：<br>  物资的维修、维护物资的信息修改<br>（7）资产借还管理：<br>  增加借出资产<br>  查询借出资产<br>  归还已借出资产</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring + Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目六：企业车辆管理系统"><a href="#项目六：企业车辆管理系统" class="headerlink" title="项目六：企业车辆管理系统"></a>项目六：企业车辆管理系统</h3><p><strong>介绍</strong></p><blockquote><p>通过计算机，能够直接“透视”车辆使用情况，数据计算自动完成，尽量减少人工干预，可以使用车信息更加规范化、透明化。因此，开发一套高效率，无差错的企业车辆管理系统软件十分必要，因此设计了这个企业车辆管理系统。本系统结构如下：<br>(1) 系统管理模块：<br>  在该模块中定义了管理员信息的管理，其功能包括管理员信息添加、查询、删除等操作。<br>(2) 车辆信息管理模块：<br>  在该模块中定义了对车辆信息的管理，其功能包括车辆信息的添加、查询、修改、删除等操作。<br>(3) 驾驶员信息管理模块：<br>  在该模块中定义了对驾驶员信息的管理，其功能包括驾驶员信息的添加、查询、修改、删除等操作。<br>(4) 出车信息管理模块：<br>  在该模块中定义了对出车情况的管理，其功能包括出车情况的添加、查询、修改、删除等操作。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring + Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目七：企业员工信息管理系统"><a href="#项目七：企业员工信息管理系统" class="headerlink" title="项目七：企业员工信息管理系统"></a>项目七：企业员工信息管理系统</h3><p><strong>介绍</strong></p><blockquote><p>企业员工信息管理系统主要用于实现公司的员工相关信息管理，基本功能包括：密码修改、员工管理、部门管理、出勤管理、工资管理、请假审核、我的请假、我的工资等。本系统结构如下：<br>（1）管理员端<br>  密码修改：修改自己的密码。<br>  员工管理：对员工的基本信息进行管理,包括查询、删除、录入。<br>  部门管理：包括添加部门以及添加子部门，删除部门等操作，便于及时更新部门信息。<br>  出勤管理：用于对员工的出勤月份以及天数进行管理，便于计算员工的工资等。<br>  工资管理：用于对员工的每个月的工资进行管理，便于对员工的工资进行管理。<br>  请假审核：用于管理员对员工的请假进行审核并加以回复，便于对员工的请假进行管理。<br>（2）员工端<br>  密码修改：修改自己的密码。<br>  我的请假：查看请假记录和发起请假申请。<br>  我的工资：查看员工自己的工资记录。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring + Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目八：售后服务管理系统"><a href="#项目八：售后服务管理系统" class="headerlink" title="项目八：售后服务管理系统"></a>项目八：售后服务管理系统</h3><p><strong>介绍</strong></p><blockquote><p>本系统的主要任务是为基于JavaEE技术和SQL Server数据库的售后服务管理系统建立一个企业设计。主要技术要求包括:掌握web开发所需的技术,包括HTML和JSP动态网页编程技术,SQL Server数据库知识,等等。主要实现企业售后服务信息的增删改查,顾客信息的增删改查,顾客留言信息的及时反馈保存,管理员帐号增删、登录等。该系统还可以方便制造商跟踪产品的质量和服务和管理以及购买者对企业的建议提交。</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h2 id="电子政务"><a href="#电子政务" class="headerlink" title="[ 电子政务 ]"></a>[ 电子政务 ]</h2><hr><h3 id="项目一：土地档案管理系统"><a href="#项目一：土地档案管理系统" class="headerlink" title="项目一：土地档案管理系统"></a>项目一：土地档案管理系统</h3><p><strong>介绍</strong></p><blockquote><p>土地档案管理系统主要包含功能：</p><p>（1）用户管理</p><p>​     用户登陆与注册</p><p>（2）土地档案管理</p><p>​     土地档案的新增，删除，修改以及查询</p></blockquote><ul><li><strong>数据库：</strong>Oracle</li><li><strong>使用技术：</strong>Spring + Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目二：电子政务网"><a href="#项目二：电子政务网" class="headerlink" title="项目二：电子政务网"></a>项目二：电子政务网</h3><p><strong>介绍</strong></p><blockquote><p>JAVA、JSP电子政务网主要用于实现政府机关的政务管理，基本功能包括：前台管网展示、留言板、后台登陆、修改密码、网站公告、政府网站、领导信箱、表格下载、政务公开、便民电话、新闻动态、地区概况、留言管理等。本系统结构如下：</p><p>（1）电子政务网(前台):<br>  领导信箱模块：实现发送邮件信息功能；<br>  地区概况模块：实现地区概况查看功能；<br>  动态信息模块：实现公告公示功能；<br>  政务信息动态模块：实现政务信息动态查看功能；<br>  法律法规模块：实现法律法规查看功能；<br>  网上办事模块：实现办事指南，意见反馈，表格下载功能；<br>  政务公开模块：实现干部任免，政府文件，政府采购功能;<br>  便民服务模块：实现便民电话，投诉举报功能;<br>  政府部门网站模块：实现政府部门网站查看功能;<br>（2）电子政务网(后台):<br>  修改密码模块: 实现密码修改功能;<br>  网站公告模块: 实现公告查看、添加、删除功能；<br>  政府网站模块：实现网站查看、添加、删除功能；<br>  领导信箱模块：实现领导信箱查看、添加、删除功能；<br>  表格下载模块：实现表格下载查看、添加、删除功能；<br>  政务公开模块：实现政务公开查看、添加、删除功能；<br>  便民电话模块：实现电话查看、添加、删除功能；<br>  新闻动态模块：实现新闻查看、添加、删除功能；<br>  地区概况模块：实现地区概况修改功能；<br>  留言管理模块：实现新闻查看、删除功能；</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Struts2 + JDBC + JSP</li><li><strong>开发工具：</strong>未知</li></ul><hr><h3 id="项目三：户籍管理系统"><a href="#项目三：户籍管理系统" class="headerlink" title="项目三：户籍管理系统"></a>项目三：户籍管理系统</h3><p><strong>介绍</strong></p><blockquote><p>户籍管理管理系统设计主要涵盖两方面的意义：户籍方面，系统上线可以给户籍在管理上带来方便，可以及时了解户籍的状况，有无迁入迁出户籍情况，缴费，欠缴等情况统计，极大的提高了员工的工作效率及准确性；用户方面：可以与户籍管理处交流，可以及时了解户籍的最新动态，户籍的通知以及其他的一些相关申请，方便了查询，节省了时间。</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><p>（该项目服务器不是<code>tomcat</code>而是<code>WebLogic</code>）</p><hr><h2 id="Java基础项目"><a href="#Java基础项目" class="headerlink" title="[ Java基础项目 ]"></a>[ Java基础项目 ]</h2><hr><h3 id="项目一：Java聊天室"><a href="#项目一：Java聊天室" class="headerlink" title="项目一：Java聊天室"></a>项目一：Java聊天室</h3><p><strong>介绍</strong></p><blockquote><p>Java聊天室系统主要用于实现在线聊天，基本功能包括：服务端和客户端。本系统结构如下：<br>（1）服务端：<br>  1、能够开启和关闭服务器<br>  2、等待着客户端从特殊端口发送的请求<br>  3、监听的端口并不是固定的，服务端的端口是能够自定义的<br>  4、能够广播消息向所有连接到服务器的用户<br>（2）客户端：<br>  1、能够和服务端进行连接<br>  2、新的用户能够注册账号<br>  3、通过用户名以及密码完成用户的登陆，连接到聊天室<br>  4、用户能够在聊天室发送消息</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Socket</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目二：Java扫雷游戏"><a href="#项目二：Java扫雷游戏" class="headerlink" title="项目二：Java扫雷游戏"></a>项目二：Java扫雷游戏</h3><p><strong>介绍</strong></p><blockquote><p>简单玩法介绍：<br>当玩家点开第一个格子时雷区开始布雷同时计时开始。然后会在该格子上显示周围8个格子的雷数（如果没有雷则自动点开周围的格子），玩家就需要通过这些数字来判断雷的位置，将是雷的格子标记为小红旗。若玩家认为已标记的格子时错误的，可以再次右击该格子来取消标记。当某一格子被标记时，对于该格子的单击操作是无效的（防止玩家误点击导致游戏失败）。如果玩家将某一格周围8个格子中的雷标记了出来，双击该格子会自动将周围的格子点击一遍，这样可以简化玩家的操作。当玩家将全部的地雷标记出来并且其他的格子点开时，游戏结束。但是如果玩家不小心点到了地雷就会游戏失败，系统自动显示出所有的地雷。如果玩家标识的地雷数量超过了该难度下规定的雷数，计数区会以负数显示超出的雷数并且游戏不会结束。</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目三：俄罗斯方块"><a href="#项目三：俄罗斯方块" class="headerlink" title="项目三：俄罗斯方块"></a>项目三：俄罗斯方块</h3><p><strong>介绍</strong></p><blockquote><p>俄罗斯方块项目，基本功能包括：游戏主界面显示模块、方块及数据显示模块、方块移动控制模块、游戏界面颜色控制模块、游戏进度、等级控制模块等。本项目结构如下：<br>（1）游戏主界面显示模块：<br>  显示游戏和帮助两个菜单；<br>  游戏使用功能键盘，得分 等级；<br>（2）画布、方块显示模块：<br>  可以根据自己的需求来自己动手更改背景图片，在方块下落过程中，根据颜色的变化识别下落的方块。<br>（3）背景画布模块设计：<br>  游戏用继承自JPanel的GameCanvas类控制背景画布的显示，用rows代表画布的行数，cols代表画布的列数，行数和列数决定着画布拥有方格的数目；<br>（4）方块移动、旋转模块<br>  通过更改横坐标或纵坐标，然后重新绘制方块实现方块移动、旋转</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目四：Java即时通讯软件"><a href="#项目四：Java即时通讯软件" class="headerlink" title="项目四：Java即时通讯软件"></a>项目四：Java即时通讯软件</h3><p><strong>介绍</strong></p><blockquote><p>关于java博网即时通讯软件的设计与实现<br>Server方面：<br>  1 运行监控，打开Server,执行对其它用户的监控。<br>  2 关闭监控，关闭Server,不在对其它用户进行监控。<br>  3 阅览用户信息，阅览已登录用户信息。<br>  4 管理用户，强制使被选择的用户退出登录状态。<br>Client方面：<br>  1 申请账号功能，使用者有权限在启动客户端后进行注册以及登录。<br>  2 添加好友功能，用户将陌生人加为好友。<br>  3 删除好友功能，用户有权限可以删除好友。<br>  4 修改个人资料功能，用户有权限可以修改以往设置的所有基本信息。<br>  5 修改头像功能，用户有权限能够修改自己现在的头像。<br>  6 即时聊天功能，用户之间有权限与拥有账号的用户进行即时的聊天。<br>  7 查看聊天记录功能，用户有权限查看与好友过往的聊天记录。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Java Swing + Java Socket</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目五：出租车计价器"><a href="#项目五：出租车计价器" class="headerlink" title="项目五：出租车计价器"></a>项目五：出租车计价器</h3><p><strong>介绍</strong></p><blockquote><p>关于java出租车计价器设计与实现<br>（1）出租车计价系统可以实现出租车信息的管理。<br>  1.1出租车信息的查询：通过数据库查询出租车的车型，车号，以及是否可用<br>  1.2出租车信息的增加：向数据库中添加出租车的车型，车号，以及是否可用<br>  1.3出租车信息的修改：对数据库中已经存在的出租车的车型，车号，以及是否可用的信息进行修改<br>  1.4出租车信息的删除：删除数据库中已经存储的出租车的信息<br>（2）出租车计价系统可以实现司机信息的管理。<br>  2.1司机信息的查询：通过数据库查询出司机的年龄，性别，学历，名字等信息<br>  2.2司机信息的增加：向数据库中添加司机的年龄，性别，学历，名字等信息<br>  2.3司机信息的修改：对数据库中已经存在的司机的年龄，性别，学历，名字等信息进行修改<br>  2.4司机信息的删除：删除数据库中已经存储的司机的信息<br>（3）出租车计价系统可以实现出租车计价功能。<br>  3.1通过java多线程，模拟出租车在路上的情景<br>  3.2通过距离计费的方式，将订单的时间，乘客的信息，订单的价格等插入数据库中<br>（4）出租车计价系统可以实现订单信息的维护<br>  4.1订单信息的查询：通过数据库查询出订单的时间，价格等信息<br>  4.2订单信息的删除：删除数据库中已经存储的订单信息<br>  4.3订单信息的修改：对数据库中已经存在的订单的时间，价格等信息进行修改</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目六：QQ屏幕截图工具"><a href="#项目六：QQ屏幕截图工具" class="headerlink" title="项目六：QQ屏幕截图工具"></a>项目六：QQ屏幕截图工具</h3><p><strong>介绍</strong></p><blockquote><p>基于java的QQ截屏工具的设计和实现能够实现对屏幕的随机截取，复制，保存以及添加文字等操作，便于用户对数据的处理。<br>  （1）随机获取屏幕指定区域；<br>  （2）编辑（添加文字）截图；<br>  （3）存储截图；</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目七：马里奥游戏"><a href="#项目七：马里奥游戏" class="headerlink" title="项目七：马里奥游戏"></a>项目七：马里奥游戏</h3><p><strong>介绍</strong></p><blockquote><p>超级玛丽小游戏的JAVA程序，进入游戏后首先按空格键开始，利用方向键来控制的马里奥的移动，同时检测马里奥与场景中的障碍物和敌人的碰撞，并判断马里奥的可移动性和马里奥的生命值。当马里奥通过最后一个场景后游戏结束。<br>  （1）马里奥<br>  （2）障碍物<br>  （3）敌人</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目八：飞机大战游戏"><a href="#项目八：飞机大战游戏" class="headerlink" title="项目八：飞机大战游戏"></a>项目八：飞机大战游戏</h3><p><strong>介绍</strong></p><blockquote><p>基于Java的飞机大战游戏主要需要我方飞机和敌方飞机，还有子弹，特殊nPC，开始背景，结束背景，以及背景音乐。我方飞机可以随意移动，敌方飞机无规律出现。游戏玩家通过鼠标移动控制飞机移动，我方飞机在游戏开始时就一直能发射子弹，当我方子弹碰到敌方飞机时，敌方飞机消失。当玩家飞机碰到敌方子弹时，生命值减一，直到玩家飞机生命值为一时，游戏结束。基本模块包括：游戏状态控制功能模块、游戏难度的调整模块、游戏界面绘画功能模块、玩家游戏控制功能模块等。本系统结构如下：<br>  （1）游戏状态控制功能模块:游戏的状态控制包括运行及结束游戏，首先进入游戏的开始页面，在游戏进行时，玩家必须躲避或者击落敌方飞机，玩家飞机的生命值降低为0的时候游 戏就会结束，弹出游戏结束界面<br>  （2）游戏难度的调整模块:玩家玩的时间越长游戏的难度越高，敌方飞机的数量越多、敌方飞机出现的频率越高，玩家保证飞机的存活的难度越高，操作难度相应也高。<br>  （3）游戏界面绘画功能模块:左上角会显示玩家飞机当前生命值，游戏时间，当前分数，其他地方用来输出玩家对我方飞机的控制与敌方飞机的动作显示<br>  （4）玩家游戏控制功能模块: 玩家可以通过控制鼠标或者键盘来控制方飞机（Hero airplane）的移动。</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>IntelliJ IDEA</li></ul><hr><h3 id="项目九：愤怒的小鸟游戏"><a href="#项目九：愤怒的小鸟游戏" class="headerlink" title="项目九：愤怒的小鸟游戏"></a>项目九：愤怒的小鸟游戏</h3><p><strong>介绍</strong></p><blockquote><p>基于Java的愤怒的小鸟游戏的设计与实现，基本功能包括：新游戏、载入游戏、控制帮助、退出游戏等。本系统结构如下：<br>（1）新游戏：<br>  需要输入你的昵称；<br>  选择难度：容易、中等、困难、噩梦(每个级别都有5个关卡)<br>（2）载入游戏：<br>  选择你的角色；(会保留你之前的成绩)<br>  选择难度；<br>（3）控制帮助：<br>  抛出小鸟 鼠标控制弧线<br>  扔出鸟蛋 空格<br>  停止飞行 s键<br>  退出游戏 esc键</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目十：雷电游戏（飞机大战）"><a href="#项目十：雷电游戏（飞机大战）" class="headerlink" title="项目十：雷电游戏（飞机大战）"></a>项目十：雷电游戏（飞机大战）</h3><p><strong>介绍</strong></p><blockquote><p>基于java的雷电游戏基本功能包括：敌方飞机随机飞行、我方飞机手动控制飞行，射击比拼，游戏闯关等。本系统结构如下：<br>（1）雷电游戏状态调整功能：<br>  在游戏启动时，游戏会自动进行初始化的验证。<br>  若初始化成功后，界面会自动进行跳转，跳转到游戏开始界面。<br>  有开始、暂停、恢复游戏等选项。<br>（2）雷电游戏难度的升级：<br>  当进入游戏后，随着时间越来越长，游戏难度会越来越大。<br>  界面中敌机增多，对飞机造成伤害的子弹增多，游戏难度增加。<br>  最后会遇到一个血条较长的怪兽，攻击其至血条为0时，自动过关跳转到下一关卡。<br>（3）玩家对飞机的控制功能：<br>玩家可以对飞机进行操控，通过前后左右键来控制飞机的飞行路线。</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目十一：连连看游戏"><a href="#项目十一：连连看游戏" class="headerlink" title="项目十一：连连看游戏"></a>项目十一：连连看游戏</h3><p><strong>介绍</strong></p><blockquote><p>基于java的连连看游戏设计和实现，基本功能包括：消除模块，重新开始模块，刷新模块，选择难度模块，计时模块。本系统结构如下：<br>（1）消除模块：<br>  完成连连看游戏消除动作的模块。<br>（2）重新开始模块：<br>  完成连连看游戏中重新开始新一局游戏功能的模块。<br>（3）刷新模块：<br>  完成连连看游戏中，将游戏中未消除的图片个数记录并重新随机放置等数量图片的功能模块。<br>（4）选择难度模块：<br>  完成游戏中切换游戏难度并开始新一局游戏的模块。<br>（5）计时模块：<br>  完成游戏中倒计时并显示提示信息的模块。<br>（6）状态显示模块：<br>  完成游戏中对游戏得分、闯关数记录的模块。</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目十二：模拟写字板"><a href="#项目十二：模拟写字板" class="headerlink" title="项目十二：模拟写字板"></a>项目十二：模拟写字板</h3><p><strong>介绍</strong></p><blockquote><p>此系统是使用Java语言实现简易写字板程序，能够进行输入文字操作，并具有新建文件，打开文件，保存文件，退出，复制，粘贴，剪切，全选，撤销等多种基本功能。本系统结构如下：<br>（1）菜单栏：<br>  文件模块:要用于操作整个存储或未保存的文档,包括新建，打开，保存，另存为等功能；<br>  编辑模块:编辑模块是对文本内容的基本编辑，包括剪切，复制，粘贴，删除等功能；<br>  格式模块:用于对用户输入内容显示上的操作,包括换行,字体的相关设置等功能；<br>  帮助模块:帮助菜单是用来展示于写字板有关的一些信息；<br>（2）文本区域：<br>  文本区域主要用来承载用户输入的主要内容；</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目十三：推箱子游戏"><a href="#项目十三：推箱子游戏" class="headerlink" title="项目十三：推箱子游戏"></a>项目十三：推箱子游戏</h3><p><strong>介绍</strong></p><blockquote><p>基于JAVA的推箱子游戏系统主要用于实现游戏推箱子功能，提供多种不同难度的关卡。本系统结构如下：<br>（1）初始化模块: 该模块包括屏幕初始化和游戏第一关的初始化。屏幕初始化用于输出欢迎信息和操<br>（2）画图模块: 该模块主要是被其它模块调用，用于画墙、在空地画箱子、在目的地画箱子、画小人和画目的地。<br>（3）移动箱子模块: 该模块用于移动箱子，包括目的地之间、空地之间和目的地与空地之间的箱子移动。<br>（4）移动小人模块: 该模块用于控制小人移动，从而推动箱子到目的地。<br>（5）功能控制模块: 该模块是几个功能函数的集合，包括屏幕输出功能、指定位置状态判断功能和关卡重置功能。</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目十四：坦克大战游戏"><a href="#项目十四：坦克大战游戏" class="headerlink" title="项目十四：坦克大战游戏"></a>项目十四：坦克大战游戏</h3><p><strong>介绍</strong></p><blockquote><p>此系统是使用Java语言实现坦克大战游戏程序，玩家通过连接访问进入游戏，通过操纵坦克来守卫基地，玩家还可以获得超级武器来提升坦克的属性，摧毁全部敌方坦克来取得胜利。本系统结构如下：<br>（1）面板功能：<br>  对双方坦克、基地、河道、草坪、普通墙与铁墙等地图元素,还实现了页面按钮功能，玩家可以点击按钮来实现相应的功能。<br>（2）坦克功能：<br>  操作玩家坦克的方法，还设置了超级武器，玩家吃掉后会获得特殊技能。<br>（3）子弹功能：<br>  设置了子弹打中不同物体对象产生的不同效果。</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h2 id="ERP（进销存）系统"><a href="#ERP（进销存）系统" class="headerlink" title="[ ERP（进销存）系统 ]"></a>[ ERP（进销存）系统 ]</h2><hr><h3 id="项目一：百货中心供应链管理系统"><a href="#项目一：百货中心供应链管理系统" class="headerlink" title="项目一：百货中心供应链管理系统"></a>项目一：百货中心供应链管理系统</h3><p><strong>介绍</strong></p><blockquote><p>百货中心供应链管理系统主要用于实现了企业管理数据统计等。本系统结构如下：<br>（1）管理界面：<br>  登录模块：实现管理员登录功能；<br>  合作公司管理模块：实现合作公司信息的增加、修改、查看功能；<br>  采购管理模块：实现采购的增加、修改、查看功能；<br>  数据统计模块：实现数据的统计分析功能；</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring + Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目二：采购管理系统"><a href="#项目二：采购管理系统" class="headerlink" title="项目二：采购管理系统"></a>项目二：采购管理系统</h3><p><strong>介绍</strong></p><blockquote><p>本系统是一个独立的系统，用来解决企业采购信息的管理问题。采用JSP技术构建了一个有效而且实用的企业采购信息管理平台，目的是为高效地完成对企业采购信息的管理。经过对课题的深入分析，采购系统需实现以下功能模块：<br>1.用户登录<br>  对用户输入的用户名和密码进行匹配，只有合法的用户可以登录成功，进入主界面，进行操作。是系统安全性的第一层保护层。不同角色的用户登录（比如普通用户和超级管理员）的操作页面不一样。<br>2.供应商管理<br>  灵活管理供货商，及时添加及修改供货商信息，为采购计划的制定提供保障。<br>3.材料管理<br>  对材料进行管理，管理材料种类及库存，及时了解材料的库存信息，有助于做出正确的采购选择。<br>4.订单管理<br>  系统设计了多种订单。不同权限的操作员只能对其拥有权限操作的订单进行操作。<br>5.信息查询<br>  根据关键字快速检索信息。</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目三：仓库管理系统"><a href="#项目三：仓库管理系统" class="headerlink" title="项目三：仓库管理系统"></a>项目三：仓库管理系统</h3><p><strong>介绍</strong></p><blockquote><p>基于WEB的仓库管理系统主要用于实现仓库的出入库管理，基本功能包括：入库模块、出库模块、商品查看模块、用户注册模块、个人信息管理模块等。本系统结构如下：<br>  入库模块：入库新商品，或者是入库已有商品。<br>  出库模块：对已经入库的商品进行出库操作。<br>  商品查看模块：查看目前的库存商品信息。<br>  用户注册模块：进行帐号密码的注册，包括用户其他信息。<br>  个人信息管理模块：查看或者修个个人信息。</p></blockquote><ul><li><strong>数据库：</strong>Oracle</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目四：进销存管理系统"><a href="#项目四：进销存管理系统" class="headerlink" title="项目四：进销存管理系统"></a>项目四：进销存管理系统</h3><p><strong>介绍</strong></p><blockquote><p>进销存管理系统，实现对企业运作过程中的进货、销售、仓储的电子化操作，可以节省大量人力物力，可以说对企业的运作带来不可限量的好处。实现一个简单实用，操作界面友好的进销存管理系统是首要解决的任务。然后一是要实现对库存数据进行分析，对接下来的进货进行一些指导；二是实现对销售数据的采集分析，对企业决策者对下一个季度或者年份的销售计划提供一个参考的功能。系统肯定要具备对进销存的一些基本的增删改查操作。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring Boot（Spring + Spring MVC） + Spring Data JPA + JSP</li><li><strong>开发工具：</strong>Spring tool suit（STS）其实就是装了插件的Eclipse</li></ul><hr><h3 id="项目五：企业财务管理系统"><a href="#项目五：企业财务管理系统" class="headerlink" title="项目五：企业财务管理系统"></a>项目五：企业财务管理系统</h3><p><strong>介绍</strong></p><blockquote><p>企业财务管理系统主要用于实现公司的财务管理，基本功能包括：系统登录、部门信息管理、员工信息管理、资产、经营、费用信息管理等。本系统结构如下：<br>（1）职工端：<br>  登录模块：登录功能；<br>  个人信息模块：可修改个人的信息；<br>  个人工资模块：可查阅自己的工资；<br>  公司资产模块：可查看公司的资产信息；<br>  公司经营模块：可查看公司的经营信息；<br>  公司费用模块：可查看公司的费用信息；<br>  年终资产模块：可查看公司的总资产信息；<br>（2）超级管理员端：<br>  登录模块：实现管理员登录功能；<br>  个人信息模块：可修改个人的信息；<br>  部门信息管理模块：实现部门的增加、修改、删除、查看功能；<br>  职工信息管理模块：实现职工信息的增加、修改、删除、查看功能；<br>  职工工资管理模块：实现职工工资的增加、修改、查看功能；<br>  资产类别管理模块：实现资产类别的增加、删除、查看功能；<br>  资产信息管理模块：实现资产信息的增加、查看功能；<br>  经营信息管理模块：实现经营信息的增加、查看功能；<br>  费用信息管理模块：实现费用信息的增加、查看功能；<br>  年终资产分析模块：实现公司总资产的查看功能；</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Struts + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目六：商品供应管理系统"><a href="#项目六：商品供应管理系统" class="headerlink" title="项目六：商品供应管理系统"></a>项目六：商品供应管理系统</h3><p><strong>介绍</strong></p><blockquote><p>本系统是一个独立的系统，用来解决企业采购信息的管理问题。采用JSP技术构建了一个有效而且实用的企业采购信息管理平台，目的是为高效地完成对企业采购信息的管理。经过对课题的深入分析，采购系统需实现以下功能模块：<br>各个模块实现的功能如下：<br>1.用户登录<br>  对用户输入的用户名和密码进行匹配，只有合法的用户可以登录成功，进入主界面，进行操作。是系统安全性的第一层保护层。不同角色的用户登录（比如普通用户和超级管理员）的操作页面不一样。<br>2.供应商管理<br>  灵活管理供货商，及时添加及修改供货商信息，为采购计划的制定提供保障。<br>3.材料管理<br>  对材料进行管理，管理材料种类及库存，及时了解材料的库存信息，有助于做出正确的采购选择。<br>4.订单管理<br>  系统设计了多种订单。不同权限的操作员只能对其拥有权限操作的订单进行操作。<br>5.信息查询<br>  根据关键字快速检索信息。</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Struts + Hibernate + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目七：工厂进销存管理系统"><a href="#项目七：工厂进销存管理系统" class="headerlink" title="项目七：工厂进销存管理系统"></a>项目七：工厂进销存管理系统</h3><p><strong>介绍</strong></p><blockquote><p>本XXX陶瓷工厂的进销存管理系统是基于eclipse开发环境，前台采用的是Swing 和 AWT 相关组件进行的GUI设计，后台使用的是SQL Server数据库。且该XXX陶瓷工厂的进销存管理系统共分为六大模块，分别为<br>1.基础信息管理模块<br>客户，原料商品，供应商，产品信息的管理和维护<br>2.进货模块<br>  原料商品的进货和退货<br>3.销售模块<br>  产品的销售和销售退货<br>4.查询统计模块<br>  负责查询一些基础信息<br>5.库存管理模块<br>  原料商品的出库，产品的入库，库存盘点和价格修改<br>6.系统管理模块<br>  操作员管理和密码修改</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目八：物资管理系统"><a href="#项目八：物资管理系统" class="headerlink" title="项目八：物资管理系统"></a>项目八：物资管理系统</h3><p><strong>介绍</strong></p><blockquote><p>恒鑫租赁站长期大量出租各型钢管、扣件、塔吊等建筑施工设备。本系统为恒鑫租赁站提供了一个方便快捷的物资管理系统，方便出租物资的管理。系统功能主要包括：<br>  用户管理，包括管理员信息查看、管理员密码修改；<br>  正常订单管理：包括新增正常订单、修改有误订单、删除错误订单；<br>  资金结算管理：费用统计；<br>  材料租赁管理：包括订单出租查询、器材回收管理、日租金管理、仓库库存管理等。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h2 id="校园相关系统"><a href="#校园相关系统" class="headerlink" title="[ 校园相关系统 ]"></a>[ 校园相关系统 ]</h2><hr><h3 id="项目二：网络考试系统"><a href="#项目二：网络考试系统" class="headerlink" title="项目二：网络考试系统"></a>项目二：网络考试系统</h3><p><strong>介绍</strong></p><blockquote><p>网络考试系统主要用于实现高校在线考试，基本功能包括：自动组卷、试卷发布、试卷批阅、试卷成绩统计等。本系统结构如下：<br>（1）学生端：<br>  登录模块：登录功能；<br>  网络考试模块：可参加考试，并查看考试结果，提交试卷后老师允许的情况下查看错题；<br>（2）超级管理员端：<br>  登录模块：实现管理员登录功能；<br>  用户管理模块：实现用户信息的增加、修改、查看功能；<br>  角色权限管理模块：实现角色的增加、修改、查看功能；<br>  试卷管理模块：实现试卷信息的增加、修改、查看功能；<br>  试题管理模块：实现试题信息的增加、修改、查看功能；<br>（3）试题管理员端（老师）：<br>  试卷管理模块：实现试卷信息的增加、修改、查看功能；<br>  试题管理模块：实现试题信息的增加、修改、查看功能；</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h2 id="医疗项目"><a href="#医疗项目" class="headerlink" title="[ 医疗项目 ]"></a>[ 医疗项目 ]</h2><hr><h3 id="项目一：健康管理系统"><a href="#项目一：健康管理系统" class="headerlink" title="项目一：健康管理系统"></a>项目一：健康管理系统</h3><p><strong>介绍</strong></p><blockquote><p>javaEE健康管理系统主要功能包括：教师登录退出、教师饮食管理、教师健康日志、体检管理等等。本系统结构如下：<br>（1）用户模块：<br>  实现登录功能，退出，用户注册<br>（2）教师饮食管理：<br>  根据教师的相关信息，计算其每天所需热量，给出一周的推荐菜单。<br>（3）教师健康日志：<br>  用户可以记录自己健康日记，记录每一天的睡眠，饮酒，吸烟，血压，体重等情况。<br>（4）教师体检管理：<br>  教师可通过该平台查询每次的体检结果，显示部分项目随时间变化的曲线<br>（5）疾病预测评估：<br>  针对糖尿病和高血压两种疾病，利用数学线性回归的方法，模拟计算出教师患病概率。<br>(6) 后台管理员模块<br>  管理员用户登录功能：通过账号登录系统。<br>  管理员管理教师功能：可以增删改查教师基本信息。<br>  管理员管理体检结果：可以增删改查教师体检记录。<br>  健康新闻管理：可以发布或删除、编辑新闻</p></blockquote><ul><li><strong>数据库：</strong>Oracle</li><li><strong>使用技术：</strong>Spring + Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目二：牙科诊所管理系统"><a href="#项目二：牙科诊所管理系统" class="headerlink" title="项目二：牙科诊所管理系统"></a>项目二：牙科诊所管理系统</h3><p><strong>介绍</strong></p><blockquote><p>为适应医疗信息管理发展的需要，开发基于B/S结构的私人牙科诊所病例管理系统。该系统应具有以下功能：</p><p>（1）登陆模块，可分为管理员登陆和普通用户医生登录三个模块。</p><p>（2）用户注册模块，对用户注册的用户名的要求，不同的用户要求要有不同的用户名。</p><p>（3）系统管理模块，包括添加管理员，管理员密码的修改。</p><p>（4）挂号管理模块，包括患者的名字、性别、年龄、现住地址和患者简介。</p><p>（5）患者管理模块，对患者进行增加、患者删除、患者信息的修改。</p><p>（6）开药管理模块，对药品的增加、删除、修改、查询，患者病历查</p><p>（7）科室管理模块，管理员可以新建，修改，删除，科室信息</p><p>（8）留言管理，管理员可以新建，修改，删除留言信息</p><p>（9）预约挂号模块，用户可以在线进行预约挂号，用户可以选择普通号和专家号。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC+ JSP</li><li><strong>开发工具：</strong>未知</li></ul><hr><h3 id="项目三：医院在线挂号系统"><a href="#项目三：医院在线挂号系统" class="headerlink" title="项目三：医院在线挂号系统"></a>项目三：医院在线挂号系统</h3><p><strong>介绍</strong></p><blockquote><p>医院挂号系统主要用于实现医院的挂号。<br>本系统结构如下：<br>（1）前台功能：<br>  用户注册：注册功能；<br>  用户登录：登录功能；<br>  医院查询：选择医院、科室查询该医院下的医生信息<br>  挂号:选择医生后点击挂号，填写信息完成挂号<br>  管理中心:点击管理中心可以修改个人信息、取消挂号<br>（2）系统管理员：<br>  登录模块：实现管理员登录功能；<br>  医院管理模块：实现医院的增加、删除功能；<br>  科室管理模块：实现科室的增加、删除功能；<br>  公告管理模块：实现公告的增加、删除功能；<br>  退出系统模块：实现用户的退出功能；</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring + Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目四：住院管理系统"><a href="#项目四：住院管理系统" class="headerlink" title="项目四：住院管理系统"></a>项目四：住院管理系统</h3><p><strong>介绍</strong></p><blockquote><p>本系统主要分为六大模块，分别是医生管理模块、病人管理模块、病床管理模块、收费管理模块、统计分析模块和系统功能模块，医生、病人和医院的管理人员都可以通过此系统寻找出自己所需要的信息。</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Servlet + JDBC+ JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h2 id="其他细分行业项目"><a href="#其他细分行业项目" class="headerlink" title="[ 其他细分行业项目 ]"></a>[ 其他细分行业项目 ]</h2><hr><h3 id="项目一：码头船只出行管理系统"><a href="#项目一：码头船只出行管理系统" class="headerlink" title="项目一：码头船只出行管理系统"></a>项目一：码头船只出行管理系统</h3><p><strong>介绍</strong></p><blockquote><p>（1）用户登录模块：<br>  一般（查看）用户，权限只有修改个人信息和查看功能<br>  （操作）用户登录，可以修改自己的信息，还可以对系统内容进行增加、删除和修改<br>  系统管理员，可以修改自己的信息，并且不仅有查看、增删改的基本权限，还有对用户的管理和注册权限</p><p>（2）用户管理模块：<br>  该模块实现对用户的增加，删除和修改<br>（3）个人信息维护模块：<br>  该模块实现用户对自己的名字和密码等个人信息的修改<br>（4）新闻公告管理模块：<br>  该模块实现新闻公告的增加，删除和修改<br>（5）船只管理模块：<br>  该模块实现船只的增加，删除和修改<br>（6）路线管理模块：<br>  该模块实现路线的增加，删除和修改，以及船只与路线关系的管理<br>（7）货柜管理模块：<br>  该模块实现货柜的增加，删除和修改，以及船只与货柜关系的管理</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC+ JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目二：超市积分管理系统"><a href="#项目二：超市积分管理系统" class="headerlink" title="项目二：超市积分管理系统"></a>项目二：超市积分管理系统</h3><p><strong>介绍</strong></p><blockquote><p>超市会员积分管理系统主要用于实现了企业管理数据统计等。本系统结构如下：<br>（1）网络会员管理中心界面：<br>  会员修改密码信息模块：实现会员密码功能；<br>  会员登陆模块：实现会员登陆功能；<br>  会员注册模块：实现会员注册功能；<br>  留言板模块：实现留言板留言功能<br>（2）后台管理界面：<br>  系统用户管理模块：实现管理员的增加、查看功能；<br>  会员信息管理模块：实现会员信息的增加、修改、查看功能；<br>  注册用户管理模块：实现注册用户的增加、修改、查看功能；<br>  会员卡管理模块：实现会员卡信息的增加、查看功能；<br>  商品销售管理模块：实现商品信息的增加、查看功能；<br>  会员积分管理模块：实现合作公司信息的增加、查看功能；<br>  信息统计模块：实现数据统计报表功能；<br>  留言板模块：实现留言板信息的增加、修改、查看功能；</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Servlet + JDBC+ JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目三：保险业务管理系统"><a href="#项目三：保险业务管理系统" class="headerlink" title="项目三：保险业务管理系统"></a>项目三：保险业务管理系统</h3><p><strong>介绍</strong></p><blockquote><p>本系统主要是为了开发一个操作方便、使用快捷、处理高效的保险管理系统。因此，本系统是从人工操作容易产生错误、过程繁琐、工作效率不高，保密性差不足之处，对系统的可操作性、稳定性和实用性有一定的限制，并能安全地保存数据于数据库中来提高其系统的保密性。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring + Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目四：机场航班起降与协调管理系统"><a href="#项目四：机场航班起降与协调管理系统" class="headerlink" title="项目四：机场航班起降与协调管理系统"></a>项目四：机场航班起降与协调管理系统</h3><p><strong>介绍</strong></p><blockquote><p>此次项目是一个基于Java的机场航班起降与协调系统（机场航班调度系统）。通过此系统帮助机场地面指挥人员进行更加明确的航班调度和指令发送，尽可能减少航班调度的错误率，尽可能规避航班调度错误的风险，极大程度地避免空难的发生。减少地面指挥人员指令发布的失误率，与航班建立数据上的可视的指令发布，使航班在可能的无线电干扰的情况下可以正常起降。实时管理航班信息，<br>建立地面指挥员与机长之间的指令通信。<br>地面指挥员端：<br>  1.指挥员登录<br>  2.航班信息的浏览<br>  3.航班信息的操作：航班的删除，航班的添加，航班信息的修改，航班信息的搜索<br>  4.指挥信息的操作：指挥信息的查询，指令的发布，指令的修改，指令的删除<br>机长端：<br>  1.机长登录<br>  2.航班信息的查询<br>  3.航班指挥信息的操作：航班指挥信息查询，航班请求的发布，航班请求的删除，航班请求的修改</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC+ JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目五：敬老院管理系统"><a href="#项目五：敬老院管理系统" class="headerlink" title="项目五：敬老院管理系统"></a>项目五：敬老院管理系统</h3><p><strong>介绍</strong></p><blockquote><p>本系统主要是针对敬老院工作人员即管理员和员工设计的。敬老院管理系统将IT技术为养老院提供一个接口便于管理信息,存储老人个人信息和其他信息,查找和更新信息的养老院档案,节省了员工的劳动时间,大大降低了成本。其主要功能包括：<br>系统管理员用户功能介绍：<br>  用户管理员、员工登录、老人信息管理、床位分配管理、护工薪资管理、护工请假记录、老人请假记录、入住费用和事故记录管理。以及对这些功能的增、删、改、查处理<br>普通管理员用户 （护工身份）功能介绍：<br>  密码信息管理用例分析, 老人信息查看用例分析, 请假信息查看用例分析,护工薪资查看用例分析</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC+ JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目六：银行排号系统"><a href="#项目六：银行排号系统" class="headerlink" title="项目六：银行排号系统"></a>项目六：银行排号系统</h3><p><strong>介绍</strong></p><blockquote><p>（1）服务器端<br>  1）取号功能：打开服务器与终端进行通信。由于把服务器设置到了用户的一端，所以在服务器端进行取号，然后把号存到数据库中。<br>  2）统计功能：数据访问层从数据库中查出所有取票人数和等待人数在服务器端界面显示。<br>  3）删除功能：删除当前取票顾客的排号。<br>  4）查询功能：顾客可以从此处了解到所有顾客的取票情况及被处理状况。<br>  5）通知功能：从服务器端获得排号，通过服务器端通知<strong><em>用户到\</em></strong>工作台办理业务。<br>（2）客户端<br>  1） 登录功能：业务员从此处登录，业务员的姓名，密码是事先录入数据库的。<br>  2） 叫号功能：业务员点击处理按钮触发事件发送信息给服务器，服务器从数据库拿到号票，返回给业务员进行业务处理。<br>  3）统计功能：数据访问层从数据库查询总取票人数和查询未处理人数在业务端显示。<br>  4） 删除功能：业务员可以删除数据库中所有的记录，也可以选择删除某条记录。<br>  5）查询功能：业务员可以查询所有顾客的取票情况及业务员对号票的处理情况，这块主要为了能够及时掌握顾客取票信息及业务员处理情况。</p></blockquote><ul><li><strong>数据库：</strong>Oracle</li><li><strong>使用技术：</strong>Java Swing + JDBC</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目七：健身俱乐部会员系统"><a href="#项目七：健身俱乐部会员系统" class="headerlink" title="项目七：健身俱乐部会员系统"></a>项目七：健身俱乐部会员系统</h3><p><strong>介绍</strong></p><blockquote><p>健身俱乐部管理系统主要由六个模块组成。<br>1.会员管理子系统:包括会员个人信息的修改、会员的增加和删除、会员信息查询以及会员卡的管理。<br>2.预约管理子系统:包括健身预约信息的录入、和删除。<br>3.人事资料管理子系统:包括人事资料的添加、删除、修改功能。<br>4.器材管理子系统:包括器材信息的录入、增加和删除、修改、产品信息查询。<br>5.考勤、工资管理子系统:包括考勤、工资信息的录入、增加和删除、修改。<br>6.系统维护子系统:包括修改密码、修改用户名、删除管理员和增加管理员四个功能模块。<br>7.用户管理模块:管理员添加、删除、查询用户基本信息和设置用户权限。</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Servlet + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目八：停车场管理系统1"><a href="#项目八：停车场管理系统1" class="headerlink" title="项目八：停车场管理系统1"></a>项目八：停车场管理系统1</h3><p><strong>介绍</strong></p><blockquote><p>基于Web停车场管理系统主要用于实现停车场相关信息管理，基本功能包括：系统信息管理模块、车位信息管理模块、IC卡信息管理模块、固定车主停车管理模块、临时车辆信息管理模块、系统功能操模块等。本系统结构如下：<br>  (1)系统信息管理模块：角色的增加、删除、修改和查询；用户的增加、删除、修改和查询。<br>  (2)车位信息管理模块：车位信息的增加、删除、修改和查询。<br>  (3)IC卡信息管理模块：IC卡信息的增加、删除、修改和查询。<br>  (4)固定车主停车管理模块：对固定车主的停车信息进行增加、删除、修改和查询<br>  (5)临时车辆信息管理模块：对临时车辆的停车信息进行增加、删除、修改、查询和打印<br>  (6)系统功能操模块：退出登陆、修改密码。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring MVC + JDBC + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目九：停车场管理系统2"><a href="#项目九：停车场管理系统2" class="headerlink" title="项目九：停车场管理系统2"></a>项目九：停车场管理系统2</h3><p><strong>介绍</strong></p><blockquote><p>车场管理系统开发出来的目的是为了方便公共场所或者企业等单位的停车管理，管理系统的高效和经济优势巨大，现如今已经有不少的高档次场所都已经引入了这种管理方式，停车场的管理人员和使用人员无需去关注它的内部设计，只需要关注相关信息的呈现和操作，如车辆信息，车位情况，而直观的了解这些无疑可以使管理者迅速的掌握停车场的实施情况，使车辆的停留和出入管理都更加的方便快捷。</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目十：酒店管理系统"><a href="#项目十：酒店管理系统" class="headerlink" title="项目十：酒店管理系统"></a>项目十：酒店管理系统</h3><p><strong>介绍</strong></p><blockquote><p>按照总体设计的功能模块和需求分析，酒店管理系统的各个模块的数据字典：<br>1、系统管理员数据：包含的数据项用户名，密码。<br>2、客房类型数据：包含的数据项有id号，类型名称。<br>3、客房信息数据:包含的数据项有房间号，房间面积，房间简介，房间图片，房间类型。<br>4、房间预订数据：包含的数据项有预订客房，预订时间，预订用户的名字及电话，预订天数。<br>5、入住消费数据：包含的数据项有入住客房，入住时间，客户姓名及联系方式，预订天数和消费金额。<br>6、客户信息数据：包含的数据项有客户名字，地址，电话，E-mail。<br>7、特色餐品数据：包含的数据项有名称，描述，图片，价格。<br>8、餐桌预订数据：包含的数据项有预订时间，预订餐桌号，预订人。<br>9、餐饮消费数据：包含的数据项有消费时间，消费金额，消费者姓名。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目十一：挖掘机配件营销系统"><a href="#项目十一：挖掘机配件营销系统" class="headerlink" title="项目十一：挖掘机配件营销系统"></a>项目十一：挖掘机配件营销系统</h3><p><strong>介绍</strong></p><blockquote><p>挖掘机配件销售管理系统是根据挖掘机配件销售的过程来分析该系统，系统分为三大模块。<br>库存管理模块包括：<br>  （1）库存查看，在客户进行咨询或者需要购买的时候可以通过库存查询知道当前库存中有没有货。<br>  （2）配件信息管理，管理系统中所有的配件信息。<br>  （3）配件进货，根据实际情况，及时更新库存，扩大配件的供应量，增加库存。<br>销售管理模块包括：<br>  （1）配件销售，对配件进行销售。<br>  （2）配件退还，用户不满意或者在退换期内可以进行配件退还操作。<br>  （3）利润统计，对系统中销售的利润进行统计和查看，也可以导出EXCEL。<br>用户管理模块：<br>  （1）员工信息管理，该部分主要包含管理员和普通员工的信息。<br>  （2）客户信息录管理，该部分主要管理系统中所有的新老客户信息，方便后期进行跟踪记录和回访等。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目十二：银行业务绩效考核系统"><a href="#项目十二：银行业务绩效考核系统" class="headerlink" title="项目十二：银行业务绩效考核系统"></a>项目十二：银行业务绩效考核系统</h3><p><strong>介绍</strong></p><blockquote><p>业务绩效考核系统主要目的是使绩效考核信息管理清晰化，基本功能包括：权限处理模块、输入模块、处理模块、统计输出模块、维护模块等。本系统结构如下：<br>1.权限处理模块：<br>  管理员与普通柜员，管理员进入的是管理员页面，普通柜员进入普通柜员的界面。<br>2.输入模块<br>  2.1 普通柜员用户注册：普通柜员通过输入用户名（工号即用户名），名字，密码进行注册，获得进入本系统权限。<br>  2.2 柜员选择柜员身份登入：柜员进入后可以查看本人工作情况的信息。<br>  2.3 管理员界面：登入后，记录柜员工作情况：输入柜员工号，柜员名字，记录业务笔数，最后一栏并记录柜员员工加减分情况（笔数处于10的整数部分为加减分情况，以10分为上限）。除此之外，管理员还能对普通柜员的权限进行修改，删除不必要的用户。<br>  2.4 对管理员输入数据进行处理：比如工号只能为7位，开头必须是882；加分减分的值不能大于10等等。<br>3.处理模块<br>  3.1 查询：输入柜员工号，可以查询到该柜员的工作情况以及加分减分情况及薪酬情况；按日期查询，可以查询到该日期本合作银行每位柜员的工作情况及加减分情况。<br>  3.2 薪酬查询：柜员薪酬计算应计算考核薪酬除以10分为标准分值，考核实际得分乘以分值为可兑现年薪（总行班子成员18000元/季、中层正职12000元/季、中层副职9000元/季、员工6000元/季、短期合同工（三年以下）1500元/季。） 月总分/月天数/10*薪酬标准<br>  4.统计输出模块：比如可以统计本合作银行业务笔数由多到少排名，加减分情况排名。<br>  5.维护模块：对系统进行维护，定期对数据进行备份，对历史数据库进行备份，对密码口令进行维护。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>未知</li></ul><hr><h2 id="团队介绍"><a href="#团队介绍" class="headerlink" title="团队介绍"></a>团队介绍</h2><p>团队成员主要由毕业大学生组成，对于学生需求更加了解，会尽量满足学生<strong>需求</strong>，帮助同学们顺利<strong>答辩</strong>。</p><p>想<strong><font color="#dd0000">加入团队</font> </strong>的请<strong><font color="#dd0000">查看下方的联系方式</font> </strong></p><h2 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h2><blockquote><p><strong>QQ：1755497577（备注：代写 ）</strong></p></blockquote><div align="center" width="80%"><br>  <img width="30%" src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/kcsj/qq.jpg"><br></div><blockquote><p><strong>微信（备注：代写）</strong></p></blockquote><div align="center" width="80%"><br>  <img width="30%" src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/kcsj/wechat.png"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/kcsj/bd.webp&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="代写" scheme="https://lijinhongpassion.github.io/tags/%E4%BB%A3%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>Java-volatile原理</title>
    <link href="https://lijinhongpassion.github.io/codeant/2334.html"/>
    <id>https://lijinhongpassion.github.io/codeant/2334.html</id>
    <published>2020-08-20T10:16:21.000Z</published>
    <updated>2020-08-20T10:40:09.314Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1558980663-3685c1d673c4?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="0-volatile"><a href="#0-volatile" class="headerlink" title="0  volatile"></a>0  volatile</h2><blockquote><p>缓存可见性 , 指令有序性, 不保证原子性</p></blockquote><h2 id="1-可见性问题来源"><a href="#1-可见性问题来源" class="headerlink" title="1 可见性问题来源"></a>1 可见性问题来源</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">boolean</span> initFlag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> throw InterruptedException</span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread( ()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span>(!initFlag)&#123;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"end"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread( ()-&gt;&#123;</span><br><span class="line">            <span class="comment">//这里是为了先让线程t1先执行</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            initFlag = <span class="keyword">true</span>;</span><br><span class="line">            System.out.println(<span class="string">"initFlag = "</span> + initFlag);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>上诉代码按照咱们的理解, <code>t2</code>线程启动后, 将<code>initFlag</code>设置为<code>true</code>, <code>t1</code>线程就会结束<code>while</code>循环, 并打印<code>end</code>;  但结果并不是这样</p></blockquote><p><strong>不添加volatile</strong></p><blockquote><p><strong>多线程处理共享变量问题;  该图片是早期的<font color="red">JMM操作流程</font>;会有对<font color="yellow">总线加锁</font>的操作</strong> </p><p>图片中线程2展示了JMM原子操作第一次读取count值时，从主内存中读取count的值后写入到自己的工作内存中，再从工作内存中读取，<strong>待线程结束后将数据写会主存。</strong></p><p>其中线程1第一次读取count值时，从主内存中读取count的值后写入到自己的工作内存中，再从工作内存中读取，<strong>之后的读取的count值都是从自己的工作内存中读取</strong>，并没有发现更新count值的线程对count值的修改。<font color="greeen">出现了可见性的问题</font></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/2334/image-20200819162450398.png" alt="image-20200819162450398"></p><font color="red"><strong>因为加锁的粒度太大,对总线加锁 , 会将所有的线程串化, 失去了多线程的意义, 后期添加了MESI缓存一致性协议 , 只针对缓存行加锁, 可以指定变量开启该协议.</strong></font></blockquote><p><strong>添加volatile</strong></p><blockquote><p>线程2中设置为volatile的变量,<font color="grenn"><strong>在更改值后马上同步回主存, 线程2的后续代码在值写回主存完成后再执行</strong></font></p><p>所有CPU ( 这里指线程1 ) 会不断地<font color="red"><strong>监听总线是否有更新共享变量的操作</strong></font>, <font color="grenn">有更改操作就把所有CPU( 这里指线程1 )上的工作内存中的共享变量变为<strong>失效,  </strong></font><font color="yellow">然后线程1中执行的代码中用到了这个共享变量, 去工作区间拿这个共享变量, 发现该值已经失效, 就会重新去主存获取值</font></p></blockquote><h2 id="2-MESI缓存一致性协议-原理"><a href="#2-MESI缓存一致性协议-原理" class="headerlink" title="2 MESI缓存一致性协议 原理"></a>2 MESI缓存一致性协议 原理</h2><blockquote><p>参考文章 : <a href="https://www.cnblogs.com/yanlong300/p/8986041.html" target="_blank" rel="noopener">https://www.cnblogs.com/yanlong300/p/8986041.html</a></p><p>MESI 是指4种状态的首字母。每个Cache line有4个状态，可用2个bit表示，它们分别是：</p><blockquote><p><strong>缓存行（Cache line）</strong>:缓存存储数据的单元。</p></blockquote><table><thead><tr><th style="text-align:left">状态</th><th style="text-align:left">描述</th><th style="text-align:left">监听任务</th></tr></thead><tbody><tr><td style="text-align:left">M 修改 (Modified)</td><td style="text-align:left">该Cache line有效，数据被修改了，和内存中的数据不一致，数据只存在于本Cache中。</td><td style="text-align:left">缓存行必须时刻监听所有试图读该缓存行相对就主存的操作，这种操作必须在缓存将该缓存行写回主存并将状态变成S（共享）状态之前被延迟执行。</td></tr><tr><td style="text-align:left">E 独享、互斥 (Exclusive)</td><td style="text-align:left">该Cache line有效，数据和内存中的数据一致，数据只存在于本Cache中。</td><td style="text-align:left">缓存行也必须监听其它缓存读主存中该缓存行的操作，一旦有这种操作，该缓存行需要变成S（共享）状态。</td></tr><tr><td style="text-align:left">S 共享 (Shared)</td><td style="text-align:left">该Cache line有效，数据和内存中的数据一致，数据存在于很多Cache中。</td><td style="text-align:left">缓存行也必须监听其它缓存使该缓存行无效或者独享该缓存行的请求，并将该缓存行变成无效（Invalid）。</td></tr><tr><td style="text-align:left">I 无效 (Invalid)</td><td style="text-align:left">该Cache line无效。</td><td style="text-align:left">无</td></tr></tbody></table></blockquote><h2 id="3-volatile的底层-汇编"><a href="#3-volatile的底层-汇编" class="headerlink" title="3 volatile的底层 - 汇编"></a>3 volatile的底层 - 汇编</h2><blockquote><p>其实在变量前面添加<code>volatile</code>关键字, 在汇编语言层次上看, 也就是在未添加关键字的指令上多了一个<code>lock</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; //添加volatile</span><br><span class="line">&gt; lock add dword ptr [rsp]....</span><br><span class="line">&gt; //未添加</span><br><span class="line">&gt; add dword ptr [rsp]....</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>lock指令的作用</strong></p><ol><li>锁定当前<strong>缓存行</strong>区域, 并<strong>写回主内存</strong> ( 防止其他线程操作改变量 )</li><li>这些写回主存的操作会引起其他CPU中的工作内存的该变量失效( MESI协议 )</li></ol></blockquote><h2 id="4-如何保证原子性"><a href="#4-如何保证原子性" class="headerlink" title="4 如何保证原子性"></a>4 如何保证原子性</h2><blockquote><p>结合<code>synchronized</code>, 尽量原子操作类, juc下的atomic包下的类</p></blockquote><h2 id="示例-单例模式"><a href="#示例-单例模式" class="headerlink" title="示例 : 单例模式"></a>示例 : 单例模式</h2><p><strong>1. 不考虑线程安全的懒汉式单例模式</strong></p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">private</span> <span class="keyword">static</span> Test single = <span class="keyword">null</span>;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Test <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">&gt;   <span class="keyword">if</span> (single == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> Test();</span><br><span class="line">&gt;   <span class="keyword">return</span> single;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><strong>2. 考虑过线程安全问题的懒汉式单例模式( DCL double-checked- locking )</strong></p><blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">&gt;  </span><br><span class="line">&gt;  <span class="keyword">private</span> <span class="keyword">static</span> Test single = <span class="keyword">null</span>;</span><br><span class="line">&gt;  </span><br><span class="line">&gt;  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Test <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">&gt;     <span class="keyword">if</span>(single == <span class="keyword">null</span>)&#123;</span><br><span class="line">&gt;         <span class="keyword">synchronized</span>(Test.class)&#123;</span><br><span class="line">&gt;             <span class="keyword">if</span> (single == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> Test();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     <span class="keyword">return</span> single;</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p> <strong>字节码 : </strong>可根据字节码分析, 会发现有<code>有序性</code>的问题存在</p><p> <strong>锁粒度 : </strong><code>Test.class</code> - 类对象</p><p> <strong>问题 : </strong>大量线程访问时候, 虽然保证<code>synchronized</code>代码块里面的代码线程安全的问题, 但是对于<strong><code>synchronized</code>代码块外面的代码有序性无法保证</strong></p><p> 由于锁的粒度太大, 对<code>.class</code>加锁, <strong>阻塞时间会更长,阻塞线程会变得更多</strong>( <font color="red">需要细细体会加粗字体</font> )</p></blockquote><p><strong>3. 考虑过线程安全问题 / 锁粒度更小的懒汉式单例模式</strong></p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Test single = <span class="keyword">null</span>;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Test <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">&gt;   <span class="keyword">if</span>(single == <span class="keyword">null</span>)&#123;</span><br><span class="line">&gt;       <span class="keyword">synchronized</span>(single)&#123;</span><br><span class="line">&gt;           <span class="keyword">if</span> (single == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> Test();</span><br><span class="line">&gt;       &#125;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt; <span class="keyword">return</span> single;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>锁粒度 : </strong><code>single</code> - 类中的变量对象</p><p><strong>优势 : </strong><code>volatile</code>保证了变量的缓存可见性, 有序性, 但是不保证原子性, 所以这里添加 <code>synchronized</code>包装<code>single</code>的原子性, 并且在外层再添加了一个<code>if</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1558980663-3685c1d673c4?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
      <category term="volatile" scheme="https://lijinhongpassion.github.io/categories/java/volatile/"/>
    
      <category term="多线程" scheme="https://lijinhongpassion.github.io/categories/java/volatile/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Redis-利用Redis的原子操作-Incr实现秒杀</title>
    <link href="https://lijinhongpassion.github.io/codeant/f262.html"/>
    <id>https://lijinhongpassion.github.io/codeant/f262.html</id>
    <published>2020-08-18T10:51:32.000Z</published>
    <updated>2020-08-18T10:55:03.878Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1582079302063-33d56135e4e9?ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><blockquote><p>如果你对redis的CRUD操作还不是很熟悉, 可以去阅读<a href="https://github.com/LiJinHongPassion/springboot/tree/master/springboot-redis-demo" target="_blank" rel="noopener">springboot_redis_demo</a>：springboot整合redis数据库利用redistemplate实现CRUD</p></blockquote><blockquote><p>该篇文章主要是对秒杀中redis的increment介绍, 关于其他秒杀相关可以查看参考文献, 他们已经描述得很全面了</p><p>本文代码 : <a href="https://gitee.com/LiJinHongPassion/utils/tree/master/springboot-redis-incr-demo" target="_blank" rel="noopener">springboot-redis-incr-demo</a> </p></blockquote><hr><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><blockquote><p><strong>环境: </strong>redis, mysql, jdk</p></blockquote><hr><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>多个线程同时修改同一条数据 , MySQL和Redis怎么保证不会出现线程安全</p></blockquote><p><strong>什么是原子性 ?</strong> </p><blockquote><blockquote><p>参考: <a href="https://juejin.im/post/6844904080041574413" target="_blank" rel="noopener">https://juejin.im/post/6844904080041574413</a>     诡异的并发之原子性</p></blockquote><p><strong>一个或者多个操作在 CPU 执行的过程中不被中断的特性称为原子性 。</strong></p><p><strong>数据库事务中 </strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 原子性概念是这样子的：事务被当做一个不可分割的整体，包含在其中的操作要么全部执行，要么全部不执行。且事务在执行过程中如果发生错误，会被回滚到事务开始前的状态，就像这个事务没有执行一样。（也就是说：事务要么被执行，要么一个都没被执行）</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>多线程并发中</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; 原子性概念是这样子的：</span><br><span class="line">&gt; </span><br><span class="line">&gt; 第一种理解：一个线程或进程在执行过程中，没有发生上下文切换。</span><br><span class="line">&gt; 上下文切换：指CPU从一个进程/线程切换到另外一个进程/线程(切换的前提就是获取CPU的使用权)。</span><br><span class="line">&gt; </span><br><span class="line">&gt; 第二种理解：我们把一个线程中的一个或多个操作(不可分割的整体)，在CPU执行过程中不被中断的特性，称为原子性。(执行过程中，一旦发生中断，就会发生上下文切换)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>原子性是</strong>  拒绝<em>多线程操作</em>的,不论是多核还是单核,具有原子性的量 ,  <strong>同一时刻只能有一个线程来对它进行操作。</strong></p></blockquote><hr><h2 id="MySQL锁"><a href="#MySQL锁" class="headerlink" title="MySQL锁"></a>MySQL锁</h2><blockquote><ol><li><p>对于<code>UPDATE、DELETE、INSERT</code>语句，<strong>InnoDB</strong>会<strong>自动</strong>给涉及数据集加排他锁（X)</p></li><li><p><strong>InnoDB行锁和表锁都支持</strong>！</p><ol><li>表锁<ul><li>开销小，加锁快；不会出现死锁；锁定力度大，发生锁冲突概率高，并发度最低</li></ul></li><li>行锁<ul><li>开销大，加锁慢；会出现死锁；锁定粒度小，发生锁冲突的概率低，并发度高</li></ul></li></ol></li><li><p>InnoDB只有通过<strong>索引条件</strong>检索数据<strong>才使用行级锁</strong>，否则，InnoDB将使用<strong>表锁</strong></p></li><li><p><strong>表锁下又分为两种模式</strong>：</p><ul><li><p>表读锁（Table Read Lock）</p></li><li><p>表写锁（Table Write Lock）</p></li><li><p>从下图可以清晰看到，在表读锁和表写锁的环境下：</p></li></ul><p>读读不阻塞，读写阻塞，写写阻塞</p><ul><li>读读不阻塞：当前用户在读数据，其他的用户也在读数据，不会加锁</li></ul></li></ol><ul><li><p>读写阻塞：当前用户在读数据，其他的用户<strong>不能修改当前用户读的数据</strong>，会加锁！</p><ul><li>写写阻塞：当前用户在修改数据，其他的用户<strong>不能修改当前用户正在修改的数据</strong>，会加锁！</li></ul><ol start="5"><li><p>InnoDB实现了以下<strong>两种</strong>类型的行锁。</p><ul><li>共享锁（S锁）：允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁。<ul><li>也叫做<strong>读锁</strong>：读锁是<strong>共享</strong>的，多个客户可以<strong>同时读取同一个</strong>资源，但<strong>不允许其他客户修改</strong>。</li></ul></li><li>排他锁（X锁)：允许获得排他锁的事务更新数据，阻止其他事务取得相同数据集的共享读锁和排他写锁。<ul><li>也叫做<strong>写锁</strong>：写锁是排他的，<strong>写锁会阻塞其他的写锁和读锁</strong>。</li></ul></li></ul></li><li>数据库事务有不同的隔离级别，不同的隔离级别对锁的使用是不同的。MySQL默认使用的可重复读的隔离级别 , 可重复读会导致幻读 , 通过<strong>mvvc和gap锁解决了幻读</strong>( 参考: <a href="https://my.oschina.net/u/566591/blog/3162858?_from=gitee_rec" target="_blank" rel="noopener">https://my.oschina.net/u/566591/blog/3162858?_from=gitee_rec</a> )。<strong>其中mvvc是读写不阻塞的</strong></li></ol></li></ul></blockquote><blockquote><p><strong>结论 : </strong>MySQL对于<code>UPDATE、DELETE、INSERT</code>语句, <strong>都会加锁,</strong> <strong>导致其他的SQL语句阻塞( 也就是写写阻塞 ),</strong> 在高并发的情况下, <strong>虽然保证了数据安全</strong> , 但是数据库会承受大量的IO操作, 大量的操作就会阻塞, 可能会导致宕机等, 所以需要缓冲这些服务, 可以使用MQ来异步操作</p></blockquote><h2 id="Redis锁"><a href="#Redis锁" class="headerlink" title="Redis锁"></a>Redis锁</h2><blockquote><p><strong>参考 : </strong><a href="https://www.cnblogs.com/fengff/p/10913492.html" target="_blank" rel="noopener">https://www.cnblogs.com/fengff/p/10913492.html</a></p></blockquote><h5 id="命令INCR"><a href="#命令INCR" class="headerlink" title="命令INCR"></a>命令<code>INCR</code></h5><blockquote><p><strong>Redis Incr 和 Redis Incrby命令是原子操作</strong></p></blockquote><ul><li>Redis Incr 命令将 key 中储存的数字值增一，如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 INCR 操作。<ul><li>Redis Incrby 命令将 key 中储存的数字加上指定的增量值，如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 INCR 操作。</li><li>在rspringboot中直接是调用<code>redisTemplate.opsForValue().increment(String.valueOf(key), -(long) num)</code>就可以了</li></ul></li></ul><blockquote><p>适用场景 : 计数器，高并发生成订单号，秒杀类的业务逻辑等。</p></blockquote><p><strong>结合项目中的代码来讲: </strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> num 购买数量</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> key 购买的商品ID</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Transactional</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">buy1</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//1. 查询redis上的库存是否充足, 高并发情况下 检查库存 与 减少库存 不是原子性，  以 increment &gt; 0 为准      *</span></span><br><span class="line">       Integer redis_num = Integer.valueOf(</span><br><span class="line">               Objects.requireNonNull(</span><br><span class="line">                       redisTemplate.opsForValue().get(<span class="string">"1"</span>)</span><br><span class="line">               )</span><br><span class="line">       );</span><br><span class="line">       <span class="keyword">if</span> (redis_num &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="string">"库存不足!!"</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 2.减少库存</span></span><br><span class="line">       <span class="keyword">long</span> value = redisTemplate.opsForValue().increment(String.valueOf(key), -(<span class="keyword">long</span>) num);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 库存充足 可以异步操作,即使反馈购买成功的信息,并异步处理 扣减mysql数据库并生成订单</span></span><br><span class="line">       <span class="keyword">if</span> (value &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="comment">// update 数据库中商品库存和订单系统下单，单的状态未待支付</span></span><br><span class="line">           <span class="comment">// 分开两个系统处理时，可以用LCN做分布式事务，但是也是有概率会订单系统的网络超时</span></span><br><span class="line">           <span class="comment">// 也可以使用最终一致性的方式，更新库存成功后，发送mq，等待订单创建生成回调。</span></span><br><span class="line">           <span class="keyword">boolean</span> res = productDao.update(num, key) == <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">if</span> (res) &#123;</span><br><span class="line">               <span class="comment">//创建订单</span></span><br><span class="line">               <span class="comment">//createOrder(req);</span></span><br><span class="line">               <span class="comment">//记录购买日志</span></span><br><span class="line">               productLogDao.insert(<span class="keyword">new</span> CodeantProductLog( <span class="keyword">new</span> Date(), key, num ));</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> <span class="string">"成功购买"</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//恢复扣减的redis库存</span></span><br><span class="line">           redisTemplate.opsForValue().increment(String.valueOf(key), (<span class="keyword">long</span>) num);</span><br><span class="line">           <span class="keyword">return</span> <span class="string">"redis库存不够"</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><code>long value = redisTemplate.opsForValue().increment(String.valueOf(key), -(long) num);</code>在并发情况下是线程安全的 , 因为<code>increment</code>方法调用的是<code>Incrby</code>命令, <code>Incrby</code>是原子操作 ; 多线程的情况下 , 因为是原子操作 , 就只能有一个线程对Key进行修改 , 其他线程修改不了。</p><h5 id="锁SETNX"><a href="#锁SETNX" class="headerlink" title="锁SETNX"></a>锁<code>SETNX</code></h5><blockquote><p>使用<code>!SETNX</code>加锁 , 官方文档 : <a href="http://www.redis.cn/commands/setnx.html" target="_blank" rel="noopener">http://www.redis.cn/commands/setnx.html</a></p></blockquote><blockquote><p>适用场景 : 分布式锁</p></blockquote><h5 id="锁SET"><a href="#锁SET" class="headerlink" title="锁SET"></a>锁<code>SET</code></h5><pre><code>&gt;官方不推荐用来做为锁&gt;&gt;官方文档 : http://www.redis.cn/commands/set.html</code></pre><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><blockquote><p>阅读顺序</p><ol><li><a href="https://www.zhihu.com/question/54895548/answer/923987542" target="_blank" rel="noopener">如何设计秒杀</a></li><li><a href="https://blog.csdn.net/shendl/article/details/51092916?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase" target="_blank" rel="noopener">redis如何设计秒杀</a></li><li><a href="https://mp.weixin.qq.com/s/cdnRmiUFJTIYJVMfgJJw_Q" target="_blank" rel="noopener">redis如何方式超买超卖( 如何扣减库存 )</a></li><li><a href="https://copyfuture.com/blogs-details/20200510085548659corx8bjvdg9td64" target="_blank" rel="noopener">推荐使用redis原子操作+sql乐观锁实现</a></li><li><a href="https://www.cnblogs.com/jiawen010/articles/11350125.html" target="_blank" rel="noopener">redis分布式锁</a></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1582079302063-33d56135e4e9?ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Redis" scheme="https://lijinhongpassion.github.io/categories/Redis/"/>
    
    
      <category term="Redis" scheme="https://lijinhongpassion.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Java-为什么使用HashMap需要重写hashcode和equals方法？</title>
    <link href="https://lijinhongpassion.github.io/codeant/8cb1.html"/>
    <id>https://lijinhongpassion.github.io/codeant/8cb1.html</id>
    <published>2020-08-18T10:28:02.000Z</published>
    <updated>2020-08-18T10:45:45.021Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1597484661643-2f5fef640dd1?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1571&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><h4 id="代码一"><a href="#代码一" class="headerlink" title="代码一"></a><strong>代码一</strong></h4><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">&gt; map.put(<span class="string">"k1"</span>, <span class="string">"v1"</span>);</span><br><span class="line">&gt; System.out.println(map);</span><br><span class="line">&gt; <span class="comment">//结果</span></span><br><span class="line">&gt; &#123;k1=v1&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>上述代码是我们常用的<code>HashMap</code>的方式, 以<code>String</code>作为<code>key</code>, <code>Object</code>作为<code>value</code><br>我们在使用<code>HashMap</code>的时候, 一般都没有注意关于<code>HashMap</code>的<code>equals</code>和<code>hashCode</code>的重写问题</p></blockquote><h4 id="代码二"><a href="#代码二" class="headerlink" title="代码二"></a><strong>代码二</strong></h4><p><strong>问题来了, 首先</strong></p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">&gt; String k1 = <span class="keyword">new</span> String(<span class="string">"key"</span>);</span><br><span class="line">&gt; String k2 = <span class="keyword">new</span> String(<span class="string">"key"</span>);</span><br><span class="line">&gt; System.out.println(k1 == k2);</span><br><span class="line">&gt; map.put( k1, <span class="string">"v1"</span>);</span><br><span class="line">&gt; System.out.println(map);</span><br><span class="line">&gt; map.put( k2, <span class="string">"v2"</span>);</span><br><span class="line">&gt; </span><br><span class="line">&gt; System.out.println(map);</span><br><span class="line">&gt; <span class="comment">//结果</span></span><br><span class="line">&gt; <span class="keyword">false</span></span><br><span class="line">&gt; &#123;key=v1&#125;</span><br><span class="line">&gt; &#123;key=v2&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><code>==</code>是用于基本数据类型的值比较, 引用类型的地址比较, 在这里明显<code>k1</code>和<code>k2</code>是同不是一个<code>String</code>对象, 但是他们的值都是<code>key</code>, 所以按照常理来说利用<code>k2</code>也能改变<code>k1</code>的值</p><p>结果显示的确能够利用<code>k2</code>改变<code>k1</code></p></blockquote><h4 id="代码三"><a href="#代码三" class="headerlink" title="代码三"></a><strong>代码三</strong></h4><p><strong>但是</strong></p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">&gt;  </span><br><span class="line">&gt;  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">&gt; </span><br><span class="line">&gt;      Map&lt;CodeAntKey, Object&gt; map = <span class="keyword">new</span> HashMap&lt;CodeAntKey, Object&gt;();</span><br><span class="line">&gt;      CodeAntKey k1 = <span class="keyword">new</span> CodeAntKey(<span class="string">"key"</span>);</span><br><span class="line">&gt;      CodeAntKey k2 = <span class="keyword">new</span> CodeAntKey(<span class="string">"key"</span>);</span><br><span class="line">&gt;      System.out.println(k1 == k2);</span><br><span class="line">&gt;      map.put( k1, <span class="string">"v1"</span>);</span><br><span class="line">&gt;      System.out.println(map);</span><br><span class="line">&gt;      map.put( k2, <span class="string">"v2"</span>);</span><br><span class="line">&gt;      System.out.println(map);</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">CodeAntKey</span></span>&#123;</span><br><span class="line">&gt;  <span class="keyword">private</span> String key;</span><br><span class="line">&gt; </span><br><span class="line">&gt;  <span class="function"><span class="keyword">public</span> <span class="title">CodeAntKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">&gt;      <span class="keyword">this</span>.key = key;</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="comment">//结果</span></span><br><span class="line">&gt; <span class="keyword">false</span></span><br><span class="line">&gt; &#123;com.company.CodeAntKey@<span class="number">1</span>b6d3586=v1&#125;</span><br><span class="line">&gt; &#123;com.company.CodeAntKey@<span class="number">4554617</span>c=v2, com.company.CodeAntKey@<span class="number">1</span>b6d3586=v1&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>这里我自定义了一个类, 利用相同的属性<code>new</code>了两个对象, 所以这里他们不是同一个对象, 所以为<code>fasle</code></p><p>但是按照上面<code>String</code>的示例来说, 应该<code>k2</code>能够改变<code>k1</code>的值, 但是这里为什么失败了</p></blockquote><h4 id="代码四"><a href="#代码四" class="headerlink" title="代码四"></a><strong>代码四</strong></h4><p><strong>怎样解决</strong></p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">&gt;</span><br><span class="line">&gt;   Map&lt;CodeAntKey, Object&gt; map = <span class="keyword">new</span> HashMap&lt;CodeAntKey, Object&gt;();</span><br><span class="line">&gt;   CodeAntKey k1 = <span class="keyword">new</span> CodeAntKey(<span class="string">"key"</span>);</span><br><span class="line">&gt;   CodeAntKey k2 = <span class="keyword">new</span> CodeAntKey(<span class="string">"key"</span>);</span><br><span class="line">&gt;   System.out.println(k1 == k2);</span><br><span class="line">&gt;   map.put( k1, <span class="string">"v1"</span>);</span><br><span class="line">&gt;   System.out.println(map);</span><br><span class="line">&gt;   map.put( k2, <span class="string">"v2"</span>);</span><br><span class="line">&gt;   System.out.println(map);</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;<span class="class"><span class="keyword">class</span> <span class="title">CodeAntKey</span></span>&#123;</span><br><span class="line">&gt;<span class="keyword">private</span> String key;</span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="title">CodeAntKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">&gt;   <span class="keyword">this</span>.key = key;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="meta">@Override</span></span><br><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">&gt;   <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&gt;   <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> CodeAntKey)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&gt;   CodeAntKey that = (CodeAntKey) o;</span><br><span class="line">&gt;   <span class="keyword">return</span> key.equals(that.key);</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="meta">@Override</span></span><br><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&gt;   <span class="keyword">return</span> Objects.hash(key);</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;<span class="comment">//结果</span></span><br><span class="line">&gt;<span class="keyword">false</span></span><br><span class="line">&gt;&#123;com.company.CodeAntKey@<span class="number">19e7</span>e=v1&#125;</span><br><span class="line">&gt;&#123;com.company.CodeAntKey@<span class="number">19e7</span>e=v2&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>这里的代码跟上面的代码就多了<code>equals</code>和<code>hashCode</code>方法, 然后发现<code>k2</code>可以改变<code>k1</code>的值了</p></blockquote><p><strong>那到底是为什么呢, 下面慢慢道来…</strong></p><hr><h2 id="HashMap的存储方式-PUT"><a href="#HashMap的存储方式-PUT" class="headerlink" title="HashMap的存储方式 - PUT"></a>HashMap的存储方式 - PUT</h2><blockquote><p>在面试的时候经常问这个问题, 大家都是一通<code>jdk1.7之前是数组 + 链表</code>和<code>jdk1.8是数组 + 链表 + 红黑树( 链表长度超过8就使用红黑树 )</code>这样说, 其实也是没有错的</p></blockquote><p><strong>但是HashMap是怎样将数据放至进入他的数据结构中的呢 ? </strong></p><p><strong>先放部分源码, 有兴趣的可以阅读put全部源码的可以去<a href="https://www.cnblogs.com/captainad/p/10905184.html" target="_blank" rel="noopener">https://www.cnblogs.com/captainad/p/10905184.html</a></strong></p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">&gt;  <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&gt; &#125; </span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment">//计算hash值</span></span><br><span class="line">&gt; <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">&gt;  <span class="keyword">int</span> h;</span><br><span class="line">&gt;  <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">&gt;              <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">&gt;   Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">&gt;   <span class="comment">// 如果map还是空的，则先开始初始化，table是map中用于存放索引的表</span></span><br><span class="line">&gt;   <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>) &#123;</span><br><span class="line">&gt;       n = (tab = resize()).length;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   <span class="comment">// 使用hash与数组长度减一的值进行异或得到分散的数组下标，预示着按照计算现在的</span></span><br><span class="line">&gt;   <span class="comment">// key会存放到这个位置上，如果这个位置上没有值，那么直接新建k-v节点存放</span></span><br><span class="line">&gt;   <span class="comment">// 其中长度n是一个2的幂次数</span></span><br><span class="line">&gt;   <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>) &#123;</span><br><span class="line">&gt;       tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;   <span class="comment">// 如果走到else这一步，说明key索引到的数组位置上已经存在内容，即出现了碰撞</span></span><br><span class="line">&gt;   <span class="comment">// 这个时候需要更为复杂处理碰撞的方式来处理，如链表和树</span></span><br><span class="line">&gt;   <span class="keyword">else</span> &#123;</span><br><span class="line">&gt;       Node&lt;K,V&gt; e; K k;</span><br><span class="line">&gt;       <span class="comment">// 其中p已经在上面通过计算索引找到了，即发生碰撞那一个节点</span></span><br><span class="line">&gt;       <span class="comment">// 比较，如果该节点的hash和当前的hash相等，而且key也相等或者</span></span><br><span class="line">&gt;       <span class="comment">// 在key不等于null的情况下key的内容也相等，则说明两个key是</span></span><br><span class="line">&gt;       <span class="comment">// 一样的，则将当前节点p用临时节点e保存</span></span><br><span class="line">&gt;       <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">&gt;               ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">&gt;           e = p;</span><br><span class="line">&gt;       &#125;<span class="keyword">else</span> <span class="keyword">if</span>()&#123;</span><br><span class="line">&gt;           <span class="comment">//...省略</span></span><br><span class="line">&gt;       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">&gt;           <span class="comment">//...省略</span></span><br><span class="line">&gt;       &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;       <span class="comment">// 此时的e是保存的被碰撞的那个节点，即老节点</span></span><br><span class="line">&gt;       <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">&gt;           V oldValue = e.value;</span><br><span class="line">&gt;           <span class="comment">// onlyIfAbsent是方法的调用参数，表示是否替换已存在的值，</span></span><br><span class="line">&gt;           <span class="comment">// 在默认的put方法中这个值是false，所以这里会用新值替换旧值</span></span><br><span class="line">&gt;           <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">&gt;               e.value = value;</span><br><span class="line">&gt;           <span class="comment">// Callbacks to allow LinkedHashMap post-actions</span></span><br><span class="line">&gt;           afterNodeAccess(e);</span><br><span class="line">&gt;           <span class="keyword">return</span> oldValue;</span><br><span class="line">&gt;       &#125;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   <span class="comment">//...省略</span></span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>也就是说<code>hashMap</code>在<code>put</code>的时候是</p><ol><li>需要先计算<code>key</code>的<code>hash</code>值( <code>hash(key)</code> ), </li><li>然后利用<code>hash值</code>去寻址, </li><li>当地址上已经存在内容, 再利用<code>equals</code>比较对象的;</li></ol><p>自定义类在没有重写<code>hashCode</code>的方法时, 默认调用的是Object类的<code>equals()</code>和<code>hashCode()</code>, </p><p><strong><code>Object</code>中的<code>equals()</code>和<code>hashCode()</code></strong></p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">&gt;<span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>所以我们需要重写<code>equals()</code>和<code>hashCode()</code>方法, 不然就会造成<strong>代码四</strong>标题的问题</p><h2 id="HashMap的获取方式-GET"><a href="#HashMap的获取方式-GET" class="headerlink" title="HashMap的获取方式 - GET"></a>HashMap的获取方式 - GET</h2><font size="6px" color="red">为什么在重写equals方法的同时，必须重写hashCode方法</font><p><strong>上源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">    <span class="comment">//确保table不为空，并且计算得到的下标对应table的位置上有节点</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//判断第一个节点是不是要找的key</span></span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="comment">//如果第一个节点就查找链表或者红黑树</span></span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//红黑树上查找</span></span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="comment">//链表上查找</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们试图添加或者找到一个<code>key</code>的时候，方法会去判断哈希值是否相等和值是否相等，都相等的时候才会判断这个<code>key</code>就是要获取的<code>key</code>。也就是说，严格意义上，一个<code>HashMap</code>里是不允许出现相同的<code>key</code>的。</p><p>当我们使用对象作为<code>key</code>的时候，根据原本的<code>hashCode</code>和<code>equals</code>仍然能保证<code>key</code>的唯一性。但是当我们重写了<code>equals</code>方法而不重写<code>hashCode()</code>方法时，可能出现值相等但是因为地址不相等导致哈希值不同，最后导致出现两个相同的<code>key</code>的情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;CodeAnimal, Object&gt; map = <span class="keyword">new</span> HashMap&lt;CodeAnimal, Object&gt;();</span><br><span class="line">        CodeAnimal k1 = <span class="keyword">new</span> CodeAnimal(<span class="string">"ant"</span>, <span class="number">25</span>);</span><br><span class="line">        CodeAnimal k2 = <span class="keyword">new</span> CodeAnimal(<span class="string">"ant"</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"k1 == k2 : "</span> + (k1 == k2));</span><br><span class="line">        map.put( k1, <span class="string">"v1"</span>);</span><br><span class="line">        System.out.println(<span class="string">"1 ---- "</span> + map);</span><br><span class="line">        map.put( k2, <span class="string">"v2"</span>);</span><br><span class="line">        System.out.println(<span class="string">"2 ---- "</span> + map);</span><br><span class="line"></span><br><span class="line">        System.out.println(k1.hashCode());</span><br><span class="line">        System.out.println(k2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CodeAnimal</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CodeAnimal</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> CodeAnimal)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        CodeAnimal that = (CodeAnimal) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(getName(), that.getName()) &amp;&amp;</span><br><span class="line">                Objects.equals(getAge(), that.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">k1 == k2 : <span class="keyword">false</span></span><br><span class="line"><span class="number">1</span> ---- &#123;com.company.CodeAnimal@<span class="number">1</span>b6d3586=v1&#125;</span><br><span class="line"><span class="number">2</span> ---- &#123;com.company.CodeAnimal@<span class="number">4554617</span>c=v2, com.company.CodeAnimal@<span class="number">1</span>b6d3586=v1&#125;</span><br><span class="line"><span class="number">460141958</span></span><br><span class="line"><span class="number">1163157884</span></span><br></pre></td></tr></table></figure><p>上述代码得出, 在两个对象的值相同时, 两个对象分别存入<code>map</code>, 如果不重写<code>hashCode</code>方法 ,就会存在两个<code>key</code>相同</p><blockquote><p>如果调用equals方法得到的结果为true，则两个对象的hashcode值必定相等；</p><p>如果equals方法得到的结果为false，则两个对象的hashcode值不一定不同；</p><p>如果两个对象的hashcode值不等，则equals方法得到的结果必定为false；</p><p>如果两个对象的hashcode值相等，则equals方法得到的结果未知。</p></blockquote><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.cnblogs.com/captainad/p/10905184.html" target="_blank" rel="noopener">HashMap之put方法流程解读</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1597484661643-2f5fef640dd1?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1571&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java-tomcat频繁重启,频繁fullGC问题排查</title>
    <link href="https://lijinhongpassion.github.io/codeant/600c.html"/>
    <id>https://lijinhongpassion.github.io/codeant/600c.html</id>
    <published>2020-08-18T10:23:17.000Z</published>
    <updated>2020-08-18T10:45:45.018Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1597484661643-2f5fef640dd1?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=971&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><blockquote><p>上周周末，公司的服务器发生了一次线上事故， 在10000多的并发下，服务器宕机了，一下子就让我想到了调优的相关问题。</p></blockquote><blockquote><p>如何在高并发的情况下 , <strong>如何让tomcat达到性能最优 ?</strong> <strong>以及如何排查引起内存溢出的原因 ?</strong> </p></blockquote><hr><h2 id="可视化工具"><a href="#可视化工具" class="headerlink" title="可视化工具"></a><strong>可视化工具</strong></h2><p>对jvm监控的常见可视化工具，除了jdk本身提供的Jconsole和visualVm以外，还有第三方提供的jprofilter，perfino,Yourkit，Perf4j，JProbe，MAT等。这些工具都极大的丰富了我们定位以及优化jvm方式。</p><p>这些工具的使用，网上有很多教程提供，这里就不再过多介绍了。对于VisualVm来说，比较推荐使用，它除了对jvm的侵入性比较低以外，还是jdk团队自己开发的，相信以后功能会更加丰富和完善。jprofilter对于第三方监控工具，提供的功能和可视化最为完善，目前多数ide都支持其插件，对于上线前的调试以及性能调优可以配合使用。</p><p>另外对于线上dump的heap信息，应该尽量拉去到线下用于可视化工具来分析，这样分析更详细。如果对于一些紧急的问题，必须需要通过线上监控，可以采用 VisualVm的远程功能来进行，这需要使用tool.jar下的MAT功能。</p><hr><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>在排除Tomcat的问题后 , 一般都是考虑JVM的排查和调优 , 一般的步骤如下 : </p><p> <strong>1. 检查各种调优参数是否合理 , 例如检查年轻代和老年代的比例, 以及年轻代中  伊甸园:幸存0区:幸存1区 = 8:1:1</strong></p><p> <strong>2. 检查GC的频率 ( full gc 和young gc )</strong></p><pre><code>- FullGC一天超过一次肯定就不正常了- dump堆的命令 : jmap -dump , 转储内存到线下利用jprofile分析- 发现FullGC频繁的时候优先调查内存泄漏问题 ( 也就是无用对象因为逻辑问题被引用, 导致长时间无法回收 )</code></pre><p> <strong>3. 如果发现CPU持续偏高，排除代码问题后可以找运维咨询下阿里云客服，这次调查过程中就发现CPU 100%是由于服务器问题导致的，进行服务器迁移后就正常 了。数据查询的时候也是算作服务器的入口流量的，如果访问业务没有这么大量，而且没有攻击的问题的话可以往数据库方面调查</strong></p><hr><h2 id="正常参数"><a href="#正常参数" class="headerlink" title="正常参数"></a>正常参数</h2><p>CMS收集器默认分代年龄 : 6 ( YGC 6次后还存活的对象就会晋升到老年代 ) </p><p>Eden区，From Survivor区（简称S0），To Survivor区（简称S1区），三者的默认比例为 : 8:1:1</p><p>新生代和老年代的默认比例为 : 1:2</p><p><strong>FULL GC</strong></p><blockquote><p>时长 : 少则几百毫秒，多则几秒</p><p>频率 : 每隔几个小时甚至几天才执行一次</p></blockquote><p><strong>YOUNG GC</strong></p><blockquote><p>时长 : 总耗时在几十或者上百毫秒是比较正常的</p></blockquote><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><blockquote><p>阅读顺序</p><ol><li><a href="https://www.zhihu.com/question/19867883" target="_blank" rel="noopener">如何做并发测试 – 玩家翁伟</a></li><li><a href="https://segmentfault.com/a/1190000015918707" target="_blank" rel="noopener">TomCat优化</a></li><li><a href="https://mp.weixin.qq.com/s/Sjh9qFPKF250vLQGZig6nw" target="_blank" rel="noopener">线上服务的FGC问题排查，涨知识了</a> – <strong>推荐参考 : 本地有文件</strong></li><li><a href="https://www.ershicimi.com/p/e7fa0ed7ca58a52120420406f31462dd" target="_blank" rel="noopener">记一次线上商城系统高并发的优化 – Java团长</a></li><li><a href="https://segmentfault.com/a/1190000022638726" target="_blank" rel="noopener">一次JVM内存问题导致的线上事故 – 铂赛东</a></li><li><a href="https://blog.csdn.net/cml_blog/article/details/81057966" target="_blank" rel="noopener">一次线上JVM调优实践，FullGC40次/天到10天一次的优化过程</a></li><li><a href="https://segmentfault.com/a/1190000017226359" target="_blank" rel="noopener">十种JVM内存溢出的情况，你碰到过几种？– 煮酒科技</a></li><li><a href="https://my.oschina.net/u/1859679/blog/1552290?_from=gitee_rec" target="_blank" rel="noopener">jvm优化必知系列——监控工具</a></li><li><a href="https://my.oschina.net/feichexia/blog/196575" target="_blank" rel="noopener">JVM性能调优监控工具jps、jstack、jmap、jhat、jstat、hprof使用详解</a></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1597484661643-2f5fef640dd1?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=971&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
      <category term="线上" scheme="https://lijinhongpassion.github.io/categories/java/%E7%BA%BF%E4%B8%8A/"/>
    
      <category term="jvm" scheme="https://lijinhongpassion.github.io/categories/java/%E7%BA%BF%E4%B8%8A/jvm/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java锁汇总-15种锁功能的介绍( 转载 )</title>
    <link href="https://lijinhongpassion.github.io/codeant/4e7.html"/>
    <id>https://lijinhongpassion.github.io/codeant/4e7.html</id>
    <published>2020-07-29T13:44:15.000Z</published>
    <updated>2020-08-20T10:22:55.771Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="通行证" />    <label for="pass">通行证</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      摘要
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
      <category term="锁" scheme="https://lijinhongpassion.github.io/categories/java/%E9%94%81/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>MySQL-MySQL常用函数</title>
    <link href="https://lijinhongpassion.github.io/codeant/aeda.html"/>
    <id>https://lijinhongpassion.github.io/codeant/aeda.html</id>
    <published>2020-07-22T10:17:45.000Z</published>
    <updated>2020-07-22T10:25:57.954Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1595341595379-cf1cb694ea1f?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1042&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><p>[toc]</p><h2 id="0、前言"><a href="#0、前言" class="headerlink" title="0、前言"></a>0、前言</h2><p>mysql语句执行顺序分析: https:– <a href="http://www.cnblogs.com/xiaolovewei/p/8999623.html(该blog对每一种SQL语句都进行了分析,值得一看)" target="_blank" rel="noopener">www.cnblogs.com/xiaolovewei/p/8999623.html(该blog对每一种SQL语句都进行了分析,值得一看)</a></p><p><strong>MySQL语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>[<span class="keyword">distinct</span>]  </span><br><span class="line"><span class="keyword">from</span>  </span><br><span class="line"><span class="keyword">join</span>（如<span class="keyword">left</span> <span class="keyword">join</span>）  </span><br><span class="line"><span class="keyword">on</span>  </span><br><span class="line"><span class="keyword">where</span>  </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span>  </span><br><span class="line"><span class="keyword">having</span>  </span><br><span class="line"><span class="keyword">union</span>  </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span>  </span><br><span class="line"><span class="keyword">limit</span></span><br></pre></td></tr></table></figure><p><strong>MySQL执行顺序</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from  </span><br><span class="line">on  </span><br><span class="line">join  </span><br><span class="line">where  </span><br><span class="line">group by  </span><br><span class="line">having  </span><br><span class="line"><span class="keyword">select</span>  </span><br><span class="line"><span class="keyword">distinct</span>  </span><br><span class="line"><span class="keyword">union</span>  </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br></pre></td></tr></table></figure><h2 id="1、数学函数"><a href="#1、数学函数" class="headerlink" title="1、数学函数"></a>1、数学函数</h2><h4 id="1-1-绝对值-abs-x"><a href="#1-1-绝对值-abs-x" class="headerlink" title="1.1 绝对值 - abs(x)"></a>1.1 绝对值 - abs(x)</h4><blockquote><p>返回x的绝对值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ABS</span>( <span class="number">5</span> ),</span><br><span class="line"><span class="keyword">ABS</span>( - <span class="number">2.4</span> ),</span><br><span class="line"><span class="keyword">ABS</span>( - <span class="number">24</span> ),</span><br><span class="line"><span class="keyword">ABS</span>( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果:  52.4240</span></span><br></pre></td></tr></table></figure><h4 id="1-2-进制-bin-x"><a href="#1-2-进制-bin-x" class="headerlink" title="1.2 进制 - bin(x)"></a>1.2 进制 - bin(x)</h4><blockquote><p>返回x的二进制（OCT返回八进制，HEX返回十六进制）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">BIN</span>( <span class="number">23</span> ), <span class="comment"># 二进制</span></span><br><span class="line"><span class="keyword">OCT</span>( <span class="number">23</span> ), <span class="comment"># 八进制</span></span><br><span class="line"><span class="keyword">HEX</span>( <span class="number">23</span> ); <span class="comment"># 十六进制</span></span><br><span class="line"><span class="comment"># 结果:  101112717</span></span><br></pre></td></tr></table></figure><h4 id="1-3-最值-ceiling-x"><a href="#1-3-最值-ceiling-x" class="headerlink" title="1.3 最值 - ceiling(x)"></a>1.3 最值 - ceiling(x)</h4><blockquote><p>返回大于x的最小整数值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CEILING</span>(<span class="number">2.1</span>);</span><br><span class="line"><span class="comment"># 结果:  3</span></span><br></pre></td></tr></table></figure><h4 id="1-4-最值-floor-x"><a href="#1-4-最值-floor-x" class="headerlink" title="1.4 最值 - floor(x)"></a>1.4 最值 - floor(x)</h4><blockquote><p>返回小于x的最大整数值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">FLOOR</span>(<span class="number">2.1</span>);</span><br><span class="line"><span class="comment"># 结果:  2</span></span><br></pre></td></tr></table></figure><h4 id="1-5-e的次方-exp-x"><a href="#1-5-e的次方-exp-x" class="headerlink" title="1.5 e的次方 - exp(x)"></a>1.5 e的次方 - exp(x)</h4><blockquote><p>返回值e（自然对数的底）的x次方</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">exp</span>(<span class="number">2</span>),</span><br><span class="line"><span class="keyword">exp</span>(<span class="number">2.1</span>);</span><br><span class="line"><span class="comment"># 结果:  7.389056098930658.166169912567652</span></span><br></pre></td></tr></table></figure><h4 id="1-6-最值-greatest-x1-x2-…-xn"><a href="#1-6-最值-greatest-x1-x2-…-xn" class="headerlink" title="1.6 最值- greatest(x1,x2,…,xn)"></a>1.6 最值- greatest(x1,x2,…,xn)</h4><blockquote><p>返回集合中最大的值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">GREATEST</span>(<span class="number">2</span>,<span class="number">1</span>,<span class="number">34</span>,<span class="number">24</span>);</span><br><span class="line"><span class="comment"># 结果:  34</span></span><br></pre></td></tr></table></figure><h4 id="1-7-最值-least-x1-x2-…-xn"><a href="#1-7-最值-least-x1-x2-…-xn" class="headerlink" title="1.7 最值- least(x1,x2,…,xn)"></a>1.7 最值- least(x1,x2,…,xn)</h4><blockquote><p> 返回集合中最小的值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">LEAST</span>(<span class="number">2</span>,<span class="number">1</span>,<span class="number">34</span>,<span class="number">24</span>);</span><br><span class="line"><span class="comment"># 结果:  1</span></span><br></pre></td></tr></table></figure><h4 id="1-8-对数-ln-x"><a href="#1-8-对数-ln-x" class="headerlink" title="1.8 对数- ln(x)"></a>1.8 对数- ln(x)</h4><blockquote><p>返回x的自然对数</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">LN</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment"># 结果:  0.6931471805599453</span></span><br></pre></td></tr></table></figure><h4 id="1-9-对数-log-x-y"><a href="#1-9-对数-log-x-y" class="headerlink" title="1.9 对数- log(x,y)"></a>1.9 对数- log(x,y)</h4><blockquote><p>返回x的以y为底的对数</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">LOG</span>(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment"># 结果:  1.5849625007211563</span></span><br></pre></td></tr></table></figure><h4 id="1-10-余数-mod-x-y"><a href="#1-10-余数-mod-x-y" class="headerlink" title="1.10 余数 - mod(x,y)"></a>1.10 余数 - mod(x,y)</h4><blockquote><p>返回x/y的模（余数）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">MOD</span>(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment"># 结果:  2</span></span><br></pre></td></tr></table></figure><h4 id="1-11-圆周率-pi"><a href="#1-11-圆周率-pi" class="headerlink" title="1.11 圆周率 - pi()"></a>1.11 圆周率 - pi()</h4><blockquote><p>返回π的值（圆周率）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">PI</span>();</span><br><span class="line"><span class="comment"># 结果:  3.141593</span></span><br></pre></td></tr></table></figure><h4 id="1-12-随机值-rand"><a href="#1-12-随机值-rand" class="headerlink" title="1.12 随机值 - rand()"></a>1.12 随机值 - rand()</h4><blockquote><p>返回０到１内的随机值,可以通过提供一个参数(种子)使RAND()随机数生成器生成一个指定的值。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">rand</span>();</span><br><span class="line"><span class="comment"># 结果:  0.8417046338708183</span></span><br></pre></td></tr></table></figure><h4 id="1-13-四舍五入-round-x-y"><a href="#1-13-四舍五入-round-x-y" class="headerlink" title="1.13 四舍五入 - round(x,y)"></a>1.13 四舍五入 - round(x,y)</h4><blockquote><p>返回参数x的四舍五入的有y位小数的值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ROUND</span>(<span class="number">5.14591</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment"># 结果:  5.15</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ROUND</span>(<span class="number">5.14591</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment"># 结果:  5</span></span><br></pre></td></tr></table></figure><h4 id="1-14-正负零-sign-x"><a href="#1-14-正负零-sign-x" class="headerlink" title="1.14 正负零 - sign(x)"></a>1.14 正负零 - sign(x)</h4><blockquote><p>返回 X 的符号标志，负数 = -1，整数 = 1，零 = 0</p><p>也可以传字符串，中文 = 0，负数开头 = -1，正数开头 = 1，字母开头 = 0</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">SIGN</span>( - <span class="number">32</span> );<span class="comment"># -1</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">SIGN</span>( <span class="number">0</span> );<span class="comment"># 0</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">SIGN</span>( <span class="number">234</span> );<span class="comment"># 1</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">SIGN</span>( <span class="string">"-1s"</span> );<span class="comment"># -1</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">SIGN</span>( <span class="string">"1s1"</span> );<span class="comment"># 1</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">SIGN</span>( <span class="string">"中文"</span> );<span class="comment"># 0</span></span><br></pre></td></tr></table></figure><h4 id="1-15-平方根-sqrt-x"><a href="#1-15-平方根-sqrt-x" class="headerlink" title="1.15 平方根 - sqrt(x)"></a>1.15 平方根 - sqrt(x)</h4><blockquote><p>返回一个数的平方根</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">sqrt</span>(<span class="number">9</span>);<span class="comment"># 3</span></span><br></pre></td></tr></table></figure><h4 id="1-16-次方-POW-x-y-和-POWER-x-y"><a href="#1-16-次方-POW-x-y-和-POWER-x-y" class="headerlink" title="1.16 次方- POW(x,y) 和 POWER(x,y)"></a>1.16 次方- POW(x,y) 和 POWER(x,y)</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">POW</span>(<span class="number">3</span>,<span class="number">2</span>),<span class="comment"># 3的2次方  9</span></span><br><span class="line">  <span class="keyword">POWER</span>(<span class="number">2</span>,<span class="number">3</span>);<span class="comment"># 2的三次方  8</span></span><br></pre></td></tr></table></figure><h4 id="1-17-保留小数位数-truncate-x-y-和round-x-y"><a href="#1-17-保留小数位数-truncate-x-y-和round-x-y" class="headerlink" title="1.17 保留小数位数 - truncate(x,y)和round(x,y)"></a>1.17 保留小数位数 - truncate(x,y)和round(x,y)</h4><blockquote><p>返回数字x截短为y位小数的结果</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">TRUNCATE</span>(<span class="number">3.1534153</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment"># 结果:  3.15</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ROUND</span>(<span class="number">5.14591</span>,<span class="number">2</span>);<span class="comment"># 四舍五入</span></span><br><span class="line"><span class="comment"># 结果:  5.15</span></span><br></pre></td></tr></table></figure><h2 id="2、聚合函数-常用于GROUP-BY从句的SELECT查询中"><a href="#2、聚合函数-常用于GROUP-BY从句的SELECT查询中" class="headerlink" title="2、聚合函数(常用于GROUP BY从句的SELECT查询中)"></a>2、聚合函数(常用于GROUP BY从句的SELECT查询中)</h2><h4 id="注意执行顺序"><a href="#注意执行顺序" class="headerlink" title="注意执行顺序"></a>注意执行顺序</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.Customer,<span class="keyword">sum</span>(a.OrderPrice)  </span><br><span class="line"><span class="keyword">from</span> orders a  </span><br><span class="line"><span class="keyword">where</span> a.Customer=<span class="string">'Bush'</span> <span class="keyword">or</span> a.Customer = <span class="string">'Adams'</span>  </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a.Customer</span><br></pre></td></tr></table></figure><p>在from，where执行后，执行group by，同时也根据group by的字段，执行sum这个聚合函数。这样的话得到的记录对group by的字段来说是不重复的</p><hr><h4 id="2-1-AVG-col-平均值"><a href="#2-1-AVG-col-平均值" class="headerlink" title="2.1 AVG(col) - 平均值"></a>2.1 AVG(col) - 平均值</h4><blockquote><p>返回指定列的平均值</p></blockquote><h4 id="2-2-COUNT-col-计数"><a href="#2-2-COUNT-col-计数" class="headerlink" title="2.2 COUNT(col) - 计数"></a>2.2 COUNT(col) - 计数</h4><blockquote><p>返回指定列中非NULL值的个数</p></blockquote><h4 id="2-3-MIN-col-最小值-TOP-LIMIT关键字"><a href="#2-3-MIN-col-最小值-TOP-LIMIT关键字" class="headerlink" title="2.3 MIN(col) - 最小值 - TOP\LIMIT关键字"></a>2.3 MIN(col) - 最小值 - TOP\LIMIT关键字</h4><blockquote><p>返回指定列的最小值</p></blockquote><p>这个聚合函数的最值获取只能获取当方面的值, 获取当前课程的前5名的学生信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">2</span> * <span class="keyword">FROM</span> Persons <span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">asc</span></span><br></pre></td></tr></table></figure><h4 id="2-4-MAX-col-最大值-TOP-LIMIT关键字"><a href="#2-4-MAX-col-最大值-TOP-LIMIT关键字" class="headerlink" title="2.4 MAX(col) - 最大值 - TOP\LIMIT关键字"></a>2.4 MAX(col) - 最大值 - TOP\LIMIT关键字</h4><blockquote><p>返回指定列的最大值</p></blockquote><h4 id="2-5-SUM-col-计算集合"><a href="#2-5-SUM-col-计算集合" class="headerlink" title="2.5 SUM(col) - 计算集合"></a>2.5 SUM(col) - 计算集合</h4><blockquote><p>返回指定列的所有值之和</p></blockquote><h4 id="2-6-GROUP-CONCAT-col-……-组合每一组的这个字段"><a href="#2-6-GROUP-CONCAT-col-……-组合每一组的这个字段" class="headerlink" title="2.6 GROUP_CONCAT(col,……) - 组合每一组的这个字段"></a>2.6 GROUP_CONCAT(col,……) - 组合每一组的这个字段</h4><blockquote><p>返回由属于一组的几列的列值连接组合而成的结果(先拼接一行的几列,再把几行的这几列拼接起来)</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">id name type score</span><br><span class="line">1小红数学98</span><br><span class="line">1小红英语70</span><br><span class="line">1小红语文88</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span>,<span class="keyword">group_Concat</span>(<span class="keyword">type</span>,score) <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">id</span></span><br><span class="line">这里拼接的结果是 <span class="number">1</span>小红数学<span class="number">98</span>,英语<span class="number">70</span>,语文<span class="number">88</span></span><br></pre></td></tr></table></figure><h2 id="3、字符串函数"><a href="#3、字符串函数" class="headerlink" title="3、字符串函数"></a>3、字符串函数</h2><h4 id="3-1-连接字符串"><a href="#3-1-连接字符串" class="headerlink" title="3.1 连接字符串"></a>3.1 连接字符串</h4><blockquote><p>CONCAT(s1,s2…,sn)将s1,s2…,sn连接成字符串</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="keyword">CONCAT</span>(<span class="string">'1'</span>,<span class="string">'a'</span>,<span class="string">'65'</span>) <span class="comment">-- 1a65</span></span><br></pre></td></tr></table></figure><h4 id="3-2-连接字符串-–-加间隔"><a href="#3-2-连接字符串-–-加间隔" class="headerlink" title="3.2 连接字符串 – 加间隔"></a>3.2 连接字符串 – 加间隔</h4><blockquote><p>CONCAT_WS(sep,s1,s2…,sn)将s1,s2…,sn连接成字符串，并用sep字符间隔</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="keyword">CONCAT_WS</span>(<span class="string">','</span>,<span class="string">'a'</span>,<span class="string">'65'</span>) <span class="comment">-- a,65</span></span><br></pre></td></tr></table></figure><h4 id="3-3-截取字符串"><a href="#3-3-截取字符串" class="headerlink" title="3.3 截取字符串"></a>3.3 截取字符串</h4><ul><li>left(str,index) 从左边开始数, 截取第index位左边</li><li>right(str,index) 从右边开始数, 截取第index位右边</li><li>substring(str,index)当index&gt;0从左边开始截取直到结束  当index&lt;0从右边开始截取直到结束 当index=0返回空</li><li>substring(str,index,len) 截取str,从index开始，截取len长度</li><li>substring_index(str,delim,count)，str是要截取的字符串，delim是截取的字段 count是从哪里开始截取(为0则是左边第0个开始，1位左边开始第一个选取左边的，-1从右边第一个开始选取右边的</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">left</span>(<span class="string">'hello world'</span>,<span class="number">3</span>), <span class="comment">-- hel</span></span><br><span class="line"><span class="keyword">right</span>(<span class="string">'hello world'</span>,<span class="number">3</span>), <span class="comment">-- rld</span></span><br><span class="line"><span class="comment">-- substring索引从1开始</span></span><br><span class="line"><span class="keyword">substring</span>(<span class="string">'hello world'</span>, <span class="number">-3</span>), <span class="comment">-- rld</span></span><br><span class="line"><span class="keyword">substring</span>(<span class="string">'hello world'</span>, <span class="number">3</span>), <span class="comment">-- llo world</span></span><br><span class="line"><span class="keyword">substring</span>(<span class="string">'hello world'</span>,<span class="number">3</span>,<span class="number">5</span>) <span class="comment">-- llo w</span></span><br><span class="line">substring_index(<span class="string">'hello world'</span>,<span class="number">3</span>,<span class="number">5</span>) <span class="comment">-- llo w</span></span><br></pre></td></tr></table></figure><h4 id="3-4-替换字符串"><a href="#3-4-替换字符串" class="headerlink" title="3.4 替换字符串"></a>3.4 替换字符串</h4><h4 id="3-1-字符的ASCII码值"><a href="#3-1-字符的ASCII码值" class="headerlink" title="3.1 字符的ASCII码值"></a>3.1 字符的ASCII码值</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 语法: ASCII(char)</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ASCII</span>(<span class="string">'字'</span>)<span class="comment">-- 229</span></span><br></pre></td></tr></table></figure><p>ASCII(char)返回字符的ASCII码值<br>BIT_LENGTH(str)返回字符串的比特长度<br>INSERT(str,x,y,instr) 将字符串str从第x位置开始，y个字符长的子串替换为字符串instr，返回结果<br>FIND_IN_SET(str,list)分析逗号分隔的list列表，如果发现str，返回str在list中的位置<br>LCASE(str)或LOWER(str) 返回将字符串str中所有字符改变为小写后的结果</p><p>LTRIM(str) 从字符串str中切掉开头的空格<br>POSITION(substr,str) 返回子串substr在字符串str中第一次出现的位置<br>QUOTE(str) 用反斜杠转义str中的单引号<br>REPEAT(str,srchstr,rplcstr)返回字符串str重复x次的结果<br>REVERSE(str) 返回颠倒字符串str的结果<br>RIGHT(str,x) 返回字符串str中最右边的x个字符<br>RTRIM(str) 返回字符串str尾部的空格<br>STRCMP(s1,s2)比较字符串s1和s2<br>TRIM(str)去除字符串首部和尾部的所有空格<br>UCASE(str)或UPPER(str) 返回将字符串str中所有字符转变为大写后的结果</p><h2 id="4、日期和时间函数"><a href="#4、日期和时间函数" class="headerlink" title="4、日期和时间函数"></a>4、日期和时间函数</h2><h4 id="4-1-yyyy-MM-dd-当前的日期"><a href="#4-1-yyyy-MM-dd-当前的日期" class="headerlink" title="4.1 yyyy-MM-dd  -  当前的日期"></a>4.1 yyyy-MM-dd  -  当前的日期</h4><ul><li>CURDATE()</li><li>CURRENT_DATE() </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CURDATE</span>( ),<span class="comment">-- 2020-07-14</span></span><br><span class="line"><span class="keyword">CURRENT_DATE</span> ( )<span class="comment">-- 2020-07-14</span></span><br></pre></td></tr></table></figure><h4 id="4-2-HH-mm-ss-当前的时间"><a href="#4-2-HH-mm-ss-当前的时间" class="headerlink" title="4.2 HH:mm:ss  -  当前的时间"></a>4.2 HH:mm:ss  -  当前的时间</h4><p>yyyy-MM-dd hh:mm:ss   // 12小时制</p><p>yyyy-MM-dd HH:mm:ss  //24小时制</p><ul><li>CURTIME()</li><li>CURRENT_TIME()</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CURTIME</span>(),<span class="comment">-- 15:56:21</span></span><br><span class="line"><span class="keyword">CURRENT_TIME</span>()<span class="comment">-- 15:56:21</span></span><br></pre></td></tr></table></figure><h4 id="4-3-yyyy-MM-dd-HH-mm-ss-当前的完整时间"><a href="#4-3-yyyy-MM-dd-HH-mm-ss-当前的完整时间" class="headerlink" title="4.3 yyyy-MM-dd HH:mm:ss   -  当前的完整时间"></a>4.3 yyyy-MM-dd HH:mm:ss   -  当前的完整时间</h4><ul><li>NOW()</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">NOW</span>();<span class="comment">-- 2020-07-14 16:21:33</span></span><br></pre></td></tr></table></figure><h4 id="4-4-时间格式化"><a href="#4-4-时间格式化" class="headerlink" title="4.4 时间格式化"></a>4.4 时间格式化</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">DATE_FORMAT</span>( <span class="keyword">NOW</span>( ), <span class="string">'%b %d %Y %h:%i %p'</span> ),<span class="comment">-- Jul 14 2020 04:06 PM</span></span><br><span class="line"><span class="keyword">DATE_FORMAT</span>( <span class="keyword">NOW</span>( ), <span class="string">'%m-%d-%Y'</span> ),<span class="comment">-- 07-14-2020</span></span><br><span class="line"><span class="keyword">DATE_FORMAT</span>( <span class="keyword">NOW</span>( ), <span class="string">'%d %b %y'</span> ),<span class="comment">-- 14 Jul 20</span></span><br><span class="line"><span class="keyword">DATE_FORMAT</span>( <span class="keyword">NOW</span>( ), <span class="string">'%d %b %Y %T'</span> ),<span class="comment">-- 14 Jul 2020 16:06:36</span></span><br><span class="line"><span class="keyword">DATE_FORMAT</span>( <span class="keyword">NOW</span>( ), <span class="string">'%Y-%m-%d %T'</span> ),<span class="comment">-- 2020-07-14 16:06:36</span></span><br><span class="line"><span class="keyword">DATE_FORMAT</span>( <span class="keyword">NOW</span>( ), <span class="string">'%Y-%m-%d %H:%i:%S'</span> ),<span class="comment">-- 2020-07-14 16:06:36</span></span><br><span class="line"><span class="keyword">DATE_FORMAT</span>( <span class="string">'2020/07/14'</span>, <span class="string">'%Y-%m-%d'</span> )<span class="comment">-- 2020-07-14</span></span><br></pre></td></tr></table></figure><h4 id="4-4-日期加-减上指定天数-月数-年数"><a href="#4-4-日期加-减上指定天数-月数-年数" class="headerlink" title="4.4 日期加\减上指定天数\月数\年数"></a>4.4 日期加\减上指定天数\月数\年数</h4><blockquote><p>语法: DATE_ADD(date,INTERVAL int keyword)  – 加日期</p><p>​         DATE_SUB(date,INTERVAL int keyword)  – 减日期</p><p>参考: https:– <a href="http://www.w3school.com.cn/sql/func_date_add.asp" target="_blank" rel="noopener">www.w3school.com.cn/sql/func_date_add.asp</a></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CURRENT_DATE</span>,<span class="comment">-- 2020-07-14</span></span><br><span class="line"><span class="keyword">DATE_SUB</span>( <span class="keyword">CURRENT_DATE</span>, <span class="built_in">INTERVAL</span> <span class="number">6</span> <span class="keyword">MONTH</span> );<span class="comment">-- 2020-01-14   减少6个月</span></span><br></pre></td></tr></table></figure><h4 id="4-5-time时间差"><a href="#4-5-time时间差" class="headerlink" title="4.5 time时间差"></a>4.5 time时间差</h4><blockquote><p>subtime(expr1,expr2)  -  是两个时间相减</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">subtime</span>( <span class="string">'16:01:59'</span>, <span class="string">'16:02:59'</span> )  <span class="comment">--   -00:01:00</span></span><br></pre></td></tr></table></figure><h4 id="4-6-其他"><a href="#4-6-其他" class="headerlink" title="4.6 其他"></a>4.6 其他</h4><h5 id="4-5-1date是-一年的第几天-1-366"><a href="#4-5-1date是-一年的第几天-1-366" class="headerlink" title="4.5.1date是 一年的第几天(1~366)"></a>4.5.1date是 一年的第几天(1~366)</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">DAYOFYEAR</span>( <span class="string">'2020-02-05'</span> )<span class="comment">-- 36</span></span><br></pre></td></tr></table></figure><h5 id="4-5-2-date是-一年的第几周-0-53"><a href="#4-5-2-date是-一年的第几周-0-53" class="headerlink" title="4.5.2 date是 一年的第几周(0~53)"></a>4.5.2 date是 一年的第几周(0~53)</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CURDATE</span>( ),<span class="comment">-- 2020-07-14</span></span><br><span class="line"><span class="keyword">WEEK</span>(<span class="keyword">CURDATE</span>( ))<span class="comment">-- 28</span></span><br></pre></td></tr></table></figure><h5 id="4-5-3-date是-一年的第几月-1-12"><a href="#4-5-3-date是-一年的第几月-1-12" class="headerlink" title="4.5.3 date是 一年的第几月(1-12)"></a>4.5.3 date是 一年的第几月(1-12)</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CURDATE</span>( ),<span class="comment">-- 2020-07-14</span></span><br><span class="line"><span class="keyword">MONTH</span>(<span class="keyword">CURDATE</span>( ))<span class="comment">-- 7</span></span><br></pre></td></tr></table></figure><h5 id="4-5-4date是-一年的第几季度-1-4"><a href="#4-5-4date是-一年的第几季度-1-4" class="headerlink" title="4.5.4date是 一年的第几季度(1-4)"></a>4.5.4date是 一年的第几季度(1-4)</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CURDATE</span>( ),<span class="comment">-- 2020-07-14</span></span><br><span class="line"><span class="keyword">QUARTER</span>(<span class="keyword">CURDATE</span>( ))<span class="comment">-- 3</span></span><br></pre></td></tr></table></figure><h5 id="4-5-5date是-一月的第几天-1-31"><a href="#4-5-5date是-一月的第几天-1-31" class="headerlink" title="4.5.5date是 一月的第几天(1~31)"></a>4.5.5date是 一月的第几天(1~31)</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">DAYOFYEAR</span>( <span class="string">'2020-02-05'</span> )<span class="comment">-- 5</span></span><br></pre></td></tr></table></figure><h5 id="4-5-6date是-一周的第几天-1-7"><a href="#4-5-6date是-一周的第几天-1-7" class="headerlink" title="4.5.6date是 一周的第几天(1~7)"></a>4.5.6date是 一周的第几天(1~7)</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CURDATE</span>( ),<span class="comment">-- 2020-07-14</span></span><br><span class="line"><span class="keyword">DAYOFWEEK</span>( <span class="keyword">CURDATE</span>( ) )<span class="comment">-- 3</span></span><br></pre></td></tr></table></figure><h5 id="4-5-7date是-一周的星期几"><a href="#4-5-7date是-一周的星期几" class="headerlink" title="4.5.7date是 一周的星期几"></a>4.5.7date是 一周的星期几</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CURDATE</span>( ),<span class="comment">-- 2020-07-14</span></span><br><span class="line"><span class="keyword">date_format</span>( <span class="keyword">CURDATE</span>( ), <span class="string">'%W'</span> ),<span class="comment">-- Tuesday</span></span><br><span class="line"><span class="keyword">DAYNAME</span>(<span class="keyword">CURDATE</span>( ))<span class="comment">-- Tuesday</span></span><br></pre></td></tr></table></figure><h5 id="4-5-8-time的小时值-0-23"><a href="#4-5-8-time的小时值-0-23" class="headerlink" title="4.5.8 time的小时值(0~23)"></a>4.5.8 time的小时值(0~23)</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line"><span class="keyword">HOUR</span>( <span class="keyword">CURTIME</span>( ) )<span class="comment">-- 16</span></span><br></pre></td></tr></table></figure><h5 id="4-5-9-time的分钟值-0-59"><a href="#4-5-9-time的分钟值-0-59" class="headerlink" title="4.5.9 time的分钟值(0~59)"></a>4.5.9 time的分钟值(0~59)</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line"><span class="keyword">MINUTE</span>( <span class="keyword">CURTIME</span>( ) )<span class="comment">-- 52</span></span><br></pre></td></tr></table></figure><p>subtime(expr1,expr2)</p><h4 id="示例1-两个日期值之间的差值-月数"><a href="#示例1-两个日期值之间的差值-月数" class="headerlink" title="示例1 - 两个日期值之间的差值(月数)"></a>示例1 - 两个日期值之间的差值(月数)</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">PERIOD_DIFF</span>( <span class="number">200302</span>, <span class="number">199802</span> );<span class="comment">-- 60</span></span><br></pre></td></tr></table></figure><h4 id="示例2-计算年龄"><a href="#示例2-计算年龄" class="headerlink" title="示例2 - 计算年龄"></a>示例2 - 计算年龄</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">TO_DAYS</span>( <span class="keyword">NOW</span>( ) ),<span class="comment">-- 转化为天数737985</span></span><br><span class="line"><span class="keyword">FROM_DAYS</span>( <span class="keyword">TO_DAYS</span>( <span class="keyword">NOW</span>( ) ) - <span class="keyword">TO_DAYS</span>( <span class="string">'1997-07-14'</span> ) ),<span class="comment">-- 转化为年份0023-01-01</span></span><br><span class="line"><span class="keyword">DATE_FORMAT</span>( <span class="keyword">FROM_DAYS</span>( <span class="keyword">TO_DAYS</span>( <span class="keyword">NOW</span>( ) ) - <span class="keyword">TO_DAYS</span>( <span class="string">'1997-07-14'</span> ) ), <span class="string">'%Y'</span> ) + <span class="number">0</span> <span class="keyword">AS</span> age <span class="comment">-- 年龄</span></span><br></pre></td></tr></table></figure><h2 id="5、加密函数"><a href="#5、加密函数" class="headerlink" title="5、加密函数"></a>5、加密函数</h2><blockquote><p>AES_ENCRYPT(str,key)  返回用密钥key对字符串str利用高级加密标准算法加密后的结果，调用AES_ENCRYPT的结果是一个二进制字符串，以BLOB类型存储<br>AES_DECRYPT(str,key)  返回用密钥key对字符串str利用高级加密标准算法解密后的结果<br>DECODE(str,key)   使用key作为密钥解密加密字符串str<br>ENCRYPT(str,salt)   使用UNIXcrypt()函数，用关键词salt(一个可以惟一确定口令的字符串，就像钥匙一样)加密字符串str<br>ENCODE(str,key)   使用key作为密钥加密字符串str，调用ENCODE()的结果是一个二进制字符串，它以BLOB类型存储<br>MD5()    计算字符串str的MD5校验和<br>PASSWORD(str)   返回字符串str的加密版本，这个加密过程是不可逆转的，和UNIX密码加密过程使用不同的算法。<br>SHA()    计算字符串str的安全散列算法(SHA)校验和</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ENCRYPT</span>(<span class="string">'root'</span>,<span class="string">'salt'</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ENCODE</span>(<span class="string">'xufeng'</span>,<span class="string">'key'</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DECODE</span>(<span class="keyword">ENCODE</span>(<span class="string">'xufeng'</span>,<span class="string">'key'</span>),<span class="string">'key'</span>);<span class="comment">#加解密放在一起</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AES_ENCRYPT</span>(<span class="string">'root'</span>,<span class="string">'key'</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AES_DECRYPT</span>(<span class="keyword">AES_ENCRYPT</span>(<span class="string">'root'</span>,<span class="string">'key'</span>),<span class="string">'key'</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MD5</span>(<span class="string">'123456'</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SHA</span>(<span class="string">'123456'</span>);</span><br></pre></td></tr></table></figure><h2 id="6、控制流函数"><a href="#6、控制流函数" class="headerlink" title="6、控制流函数"></a>6、控制流函数</h2><p>MySQL有4个函数是用来进行条件操作的，这些函数可以实现SQL的条件逻辑，允许开发者将一些应用程序业务逻辑转换到数据库后台。</p><h4 id="6-1-IFNULL"><a href="#6-1-IFNULL" class="headerlink" title="6.1 IFNULL()"></a>6.1 IFNULL()</h4><blockquote><p>IFNULL(arg1,arg2)  –  如果arg1不是空，返回arg1，否则返回arg2</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">IFNULL</span>( <span class="number">1</span>, <span class="number">2</span> ),<span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">IFNULL</span>( <span class="literal">NULL</span>, <span class="number">10</span> ),<span class="comment">-- 10</span></span><br><span class="line"><span class="keyword">IFNULL</span>( <span class="number">4</span> * <span class="literal">NULL</span>, <span class="string">'false'</span> );<span class="comment">-- false</span></span><br></pre></td></tr></table></figure><h4 id="6-2-NULLIF"><a href="#6-2-NULLIF" class="headerlink" title="6.2 NULLIF()"></a>6.2 NULLIF()</h4><blockquote><p>NULLIF(arg1,arg2)   –  如果arg1=arg2返回NULL；否则返回arg1</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">NULLIF</span>( <span class="number">1</span>, <span class="number">1</span> ),<span class="comment">-- null</span></span><br><span class="line"><span class="keyword">NULLIF</span>( <span class="string">'A'</span>, <span class="string">'B'</span> ),<span class="comment">-- A</span></span><br><span class="line"><span class="keyword">NULLIF</span>( <span class="number">2</span>+<span class="number">3</span>, <span class="number">4</span>+<span class="number">1</span> );<span class="comment">-- null</span></span><br></pre></td></tr></table></figure><h4 id="6-3-IF"><a href="#6-3-IF" class="headerlink" title="6.3 IF()"></a>6.3 IF()</h4><blockquote><p>IF(test,t,f)  –  如果test是真，返回t；否则返回f</p><p>IF()函数在只有两种可能结果时才适合使用</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">IF</span></span><br><span class="line">( <span class="number">1</span> &lt; <span class="number">10</span>, <span class="number">2</span>, <span class="number">3</span> ),<span class="comment">-- 2</span></span><br><span class="line"><span class="keyword">IF</span></span><br><span class="line">( <span class="number">56</span> &gt; <span class="number">100</span>, <span class="string">'true'</span>, <span class="string">'false'</span> );<span class="comment">-- false</span></span><br></pre></td></tr></table></figure><h4 id="6-4-CASE-WHEN"><a href="#6-4-CASE-WHEN" class="headerlink" title="6.4 CASE WHEN"></a>6.4 CASE WHEN</h4><blockquote><p>CASE  WHEN[test1]   THEN [result1]…ELSE   [default]   END  –  如果testN是真，则返回resultN，否则返回default</p><p>CASE [test] WHEN[val1] THEN [result]…ELSE [default]  END  – 如果test和valN相等，则返回resultN，否则返回default</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CASE</span></span><br><span class="line"><span class="string">'green'</span> </span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">'red'</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="string">'stop'</span> </span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">'green'</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="string">'go'</span> <span class="keyword">END</span>;<span class="comment">-- go</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CASE</span> </span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">1</span> &gt; <span class="number">2</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="string">'stop'</span> </span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">5</span> &gt; <span class="number">4</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="string">'go'</span> <span class="keyword">END</span>;<span class="comment">-- go</span></span><br></pre></td></tr></table></figure><h2 id="7、格式化函数"><a href="#7、格式化函数" class="headerlink" title="7、格式化函数"></a>7、格式化函数</h2><h4 id="7-1-时间格式化"><a href="#7-1-时间格式化" class="headerlink" title="7.1 时间格式化"></a>7.1 时间格式化</h4><blockquote><p>DATE_FORMAT(date,fmt)  依照字符串fmt格式化日期date值</p></blockquote><h4 id="7-2-数字格式化"><a href="#7-2-数字格式化" class="headerlink" title="7.2 数字格式化"></a>7.2 数字格式化</h4><blockquote><p>FORMAT(x,y)   把x格式化为以逗号隔开的数字序列，y是结果的小数位数</p></blockquote><h4 id="7-3-IP地址转数字"><a href="#7-3-IP地址转数字" class="headerlink" title="7.3 IP地址转数字"></a>7.3 IP地址转数字</h4><blockquote><p>INET_ATON(ip)   返回IP地址的数字表示</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="keyword">INET_ATON</span>(<span class="string">'0.0.78.32'</span>) <span class="comment">-- 20000</span></span><br></pre></td></tr></table></figure><h4 id="7-4-数字转IP地址"><a href="#7-4-数字转IP地址" class="headerlink" title="7.4 数字转IP地址"></a>7.4 数字转IP地址</h4><blockquote><p>INET_NTOA(num)   返回数字所代表的IP地址</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="keyword">INET_NTOA</span>(<span class="number">20000</span>) <span class="comment">-- 0.0.78.32</span></span><br></pre></td></tr></table></figure><h2 id="8、类型转化函数"><a href="#8、类型转化函数" class="headerlink" title="8、类型转化函数"></a>8、类型转化函数</h2><p>为了进行数据类型转化，MySQL提供了CAST()函数，它可以把一个值转化为指定的数据类型。类型有：</p><ul><li>BINARY</li><li>CHAR  (字符串)</li><li>DATE</li><li>TIME</li><li>DATETIME</li><li>SIGNED  (正负数)</li><li>UNSIGNED  (非负数)</li></ul><p>示例：</p><p>SELECT CAST(NOW() AS SIGNED INTEGER),CURDATE()+0;</p><p>SELECT ‘f’=BINARY ‘F’,’f’=CAST(‘F’ AS BINARY);</p><h2 id="9、系统信息函数"><a href="#9、系统信息函数" class="headerlink" title="9、系统信息函数"></a>9、系统信息函数</h2><h4 id="9-1-当前数据库名-DATABASE"><a href="#9-1-当前数据库名-DATABASE" class="headerlink" title="9.1 当前数据库名 - DATABASE()"></a>9.1 当前数据库名 - DATABASE()</h4><blockquote><p>DATABASE()   返回当前数据库名</p></blockquote><h4 id="9-2-BENCHMARK-count-expr"><a href="#9-2-BENCHMARK-count-expr" class="headerlink" title="9.2 BENCHMARK(count,expr)"></a>9.2 BENCHMARK(count,expr)</h4><blockquote><p>BENCHMARK(count,expr)  将表达式expr重复运行count次</p></blockquote><h4 id="9-3-当前客户的连接ID-CONNECTION-ID"><a href="#9-3-当前客户的连接ID-CONNECTION-ID" class="headerlink" title="9.3 当前客户的连接ID  -  CONNECTION_ID()"></a>9.3 当前客户的连接ID  -  CONNECTION_ID()</h4><blockquote><p>CONNECTION_ID()   返回当前客户的连接ID</p></blockquote><h4 id="9-4-FOUND-ROWS"><a href="#9-4-FOUND-ROWS" class="headerlink" title="9.4 FOUND_ROWS()"></a>9.4 FOUND_ROWS()</h4><blockquote><p>FOUND_ROWS()   返回最后一个SELECT查询进行检索的总行数</p></blockquote><h4 id="9-5-当前登陆用户名-USER-SYSTEM-USER"><a href="#9-5-当前登陆用户名-USER-SYSTEM-USER" class="headerlink" title="9.5 当前登陆用户名  -  USER() \ SYSTEM_USER()"></a>9.5 当前登陆用户名  -  USER() \ SYSTEM_USER()</h4><blockquote><p>USER()或SYSTEM_USER()  返回当前登陆用户名</p></blockquote><h4 id="9-6-MySQL的版本-VERSION"><a href="#9-6-MySQL的版本-VERSION" class="headerlink" title="9.6 MySQL的版本  -  VERSION()"></a>9.6 MySQL的版本  -  VERSION()</h4><blockquote><p>VERSION()   返回MySQL服务器的版本</p></blockquote><p>示例：</p><p>SELECT DATABASE(),VERSION(),USER();</p><p>SELECTBENCHMARK(9999999,LOG(RAND()<em>PI()));#该例中,MySQL计算LOG(RAND()</em>PI())表达式9999999次。</p><h2 id="10、正则"><a href="#10、正则" class="headerlink" title="10、正则"></a>10、正则</h2><h4 id="10-1-REGEXP"><a href="#10-1-REGEXP" class="headerlink" title="10.1 REGEXP"></a>10.1 REGEXP</h4><blockquote><p>REGEXP BINARY 匹配区分大小写.  </p><p>REGEXP 不区分大小写的匹配</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> person_tbl <span class="keyword">WHERE</span> <span class="keyword">name</span> REGEXP <span class="string">'ok$'</span>;</span><br></pre></td></tr></table></figure><h4 id="10-2-REGEXP-BINARY"><a href="#10-2-REGEXP-BINARY" class="headerlink" title="10.2 REGEXP BINARY"></a>10.2 REGEXP BINARY</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> person_tbl <span class="keyword">WHERE</span> <span class="keyword">name</span> REGEXP <span class="built_in">BINARY</span> <span class="string">'ok$'</span>;</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ol><li>ID生成</li></ol><blockquote><p>需求: 课程前缀 + 0001 + 球会后缀,   数字部分个位逢4跳过,  当ID某一ID删除后, 下次生成可再使用</p></blockquote><blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; -- 建表sql</span><br><span class="line">&gt; CREATE TABLE `student_register_info_log` (</span><br><span class="line">&gt; `student_register_info_log_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '学员登记审核ID',</span><br><span class="line">&gt; `student_number` varchar(64) CHARACTER SET utf8 NOT NULL COMMENT '学籍卡号',</span><br><span class="line">&gt; `audit_status` tinyint(4) DEFAULT NULL COMMENT '审核状态(0待审核、1通过、2不通过)',</span><br><span class="line">&gt; PRIMARY KEY (`student_register_info_log_id`) USING BTREE</span><br><span class="line">&gt; ) ENGINE=InnoDB AUTO_INCREMENT=190 DEFAULT CHARSET=utf8mb4 COMMENT='学员审核信息管理';</span><br><span class="line">&gt; </span><br><span class="line">&gt; </span><br><span class="line">&gt; -- 添加数据</span><br><span class="line">&gt; INSERT INTO `golf_import`.`student_register_info_log`(`student_register_info_log_id`, `student_number`,`audit_status`) VALUES (166,'TDXXXS0001cqcs',0);</span><br><span class="line">&gt; INSERT INTO `golf_import`.`student_register_info_log`(`student_register_info_log_id`, `student_number`,`audit_status`) VALUES (167,'TDXXXS0003cqcs',0);</span><br><span class="line">&gt; INSERT INTO `golf_import`.`student_register_info_log`(`student_register_info_log_id`, `student_number`,`audit_status`) VALUES (168,'TDXXXS0005cqcs',0);</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&gt;-- 解决sql</span><br><span class="line">&gt;SELECT</span><br><span class="line">&gt;       LPAD( min( a.number ), 4, '0' ) AS number</span><br><span class="line">&gt;   FROM</span><br><span class="line">&gt;   (</span><br><span class="line">&gt;       SELECT</span><br><span class="line">&gt;       IF( exponent &gt; 0, number + POWER( 10, exponent - 1 ), number ) AS number</span><br><span class="line">&gt;       FROM</span><br><span class="line">&gt;       (</span><br><span class="line">&gt;           SELECT</span><br><span class="line">&gt;           locate( 4, REVERSE( CAST( SUBSTRING( student_number, 7, 4 ) AS SIGNED ) + 1 ) ) AS exponent,</span><br><span class="line">&gt;           CAST( SUBSTRING( student_number, 7, 4 ) AS SIGNED ) + 1 AS number</span><br><span class="line">&gt;           from</span><br><span class="line">&gt;           (</span><br><span class="line">&gt;               SELECT</span><br><span class="line">&gt;               student_number</span><br><span class="line">&gt;               FROM</span><br><span class="line">&gt;               student_register_info_log</span><br><span class="line">&gt;               WHERE</span><br><span class="line">&gt;               student_number REGEXP BINARY '^TDXXXS[0-9]&#123;4&#125;cqcs'</span><br><span class="line">&gt;               AND audit_status = 0</span><br><span class="line">&gt;               AND company_id = 826</span><br><span class="line">&gt;           ) a</span><br><span class="line">&gt;       ) a UNION</span><br><span class="line">&gt;       SELECT</span><br><span class="line">&gt;       1 AS number</span><br><span class="line">&gt;   ) a</span><br><span class="line">&gt;LEFT JOIN (</span><br><span class="line">&gt;                   SELECT</span><br><span class="line">&gt;                   CAST( SUBSTRING( student_number,7, 4 ) AS SIGNED ) AS number</span><br><span class="line">&gt;                   from</span><br><span class="line">&gt;                   (</span><br><span class="line">&gt;                       SELECT</span><br><span class="line">&gt;                       student_number</span><br><span class="line">&gt;                       FROM</span><br><span class="line">&gt;                       student_register_info_log</span><br><span class="line">&gt;                       WHERE</span><br><span class="line">&gt;                       student_number REGEXP BINARY '^TDXXXS[0-9]&#123;4&#125;cqcs'</span><br><span class="line">&gt;                       AND audit_status = 0</span><br><span class="line">&gt;                       AND company_id = 826</span><br><span class="line">&gt;                   ) a</span><br><span class="line">&gt;               ) b ON a.number = b.number</span><br><span class="line">&gt;   WHERE</span><br><span class="line">&gt;       a.number &lt; 10000</span><br><span class="line">&gt;       AND b.number IS NULL</span><br><span class="line">&gt;      </span><br><span class="line">&gt;-- 结果</span><br><span class="line">&gt;0002</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1595341595379-cf1cb694ea1f?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1042&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://lijinhongpassion.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://lijinhongpassion.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL-关于主从复制引发的对读写分离的思考</title>
    <link href="https://lijinhongpassion.github.io/codeant/zcfz.html"/>
    <id>https://lijinhongpassion.github.io/codeant/zcfz.html</id>
    <published>2020-07-21T04:23:22.000Z</published>
    <updated>2020-07-25T04:33:18.733Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1470506028280-a011fb34b6f7?ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=1049&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="0-简述"><a href="#0-简述" class="headerlink" title="0.简述"></a>0.简述</h2><blockquote><p>今天闲得无聊, 根据以前的笔记, 在服务器上搭建了MySQL的主从复制.</p><p><strong>这里先把结论说了:</strong>   搭建了主从复制后的读写分离, 不建议将从库的InnoDB搜索引擎换为MyISAM.  因为主库将数据同步到从库也是一个写操作.所以主从库的搜索引擎需要保持一致</p><p><strong>建议: </strong>如果你要解决<strong>数据库的读性能瓶颈</strong>, 可以先在<strong>缓存</strong>方面进行设计优化</p></blockquote><blockquote><p><strong>主从复制是干什么的:  </strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/zcfz/主从复制.bmp" alt></p><p>上图描述的是主从复制在项目中担任什么角色.</p><p>在你的项目中, 如果没有存在读写分离, 那上面写的MySQL从库的作用<strong>仅仅作为数据备份</strong>, 没有其他作用.</p><hr><p><strong>读写分离是干什么的:  </strong></p><p>因为读写都在一个数据库上, 会给数据库很大的压力. 所以我们可以让主库来专注于数据更新( 增删改 )操作,  从库来用于查询操作. </p><p>读写分离是用来解决<strong>数据库的读性能瓶颈</strong>的。</p><p>主库:  增删改操作</p><p>从库:  查询操作</p></blockquote><hr><h2 id="1-InnoDB和-MyISAM"><a href="#1-InnoDB和-MyISAM" class="headerlink" title="1.InnoDB和 MyISAM"></a>1.InnoDB和 MyISAM</h2><p>参考文献: <a href="https://www.runoob.com/w3cnote/mysql-different-nnodb-myisam.html" target="_blank" rel="noopener">MySQL存储引擎InnoDB与Myisam的六大区别</a></p><table><thead><tr><th style="text-align:center"></th><th style="text-align:left">MyISAM</th><th>InnoDB</th></tr></thead><tbody><tr><td style="text-align:center"><strong>SELECT  UPDATE,INSERT，Delete操作</strong></td><td style="text-align:left">如果执行大量的SELECT，MyISAM是更好的选择</td><td><strong>1.</strong>如果你的数据执行大量的<strong>INSERT或UPDATE</strong>，出于性能方面的考虑，应该使用InnoDB表<br><br> <strong>2.DELETE  FROM table</strong>时，InnoDB不会重新建立表，而是一行一行的删除。<br><br>  <strong>3.LOAD  TABLE FROM MASTER操作对InnoDB</strong>是不起作用的，解决方法是首先把InnoDB表改成MyISAM表，导入数据后再改成InnoDB表，但是对于使用的额外的InnoDB特性（例如外键）的表不适用</td></tr></tbody></table><blockquote><p>由上可知,  MyISAM适合于大量的读操作,  InnoDB适合大量的写操作</p><p>这里就引发出思考了,我是否可以将从库的搜索引擎更换为MyISAM</p></blockquote><hr><h2 id="2-问题"><a href="#2-问题" class="headerlink" title="2.问题"></a>2.问题</h2><p><strong>问题一: </strong></p><blockquote><p><strong>是否可以将从库的搜索引擎改为MyISAM ?  </strong>也就是</p><p>主库:  InnoDB</p><p>从库:  MyISAM </p></blockquote><blockquote><p><strong>结论: 不建议</strong></p><p><strong>原因: </strong>因为主库将数据同步到从库也是一个写操作.  当主库的写操作数量十分巨大的时候, 需要考虑MyISAM在大量写操作的情况下会造成什么样的后果. </p><hr></blockquote><p><strong>问题二: </strong></p><blockquote><p><strong>MyISAM在大量写操作的情况下会造成什么样的后果.</strong></p></blockquote><blockquote><p><strong>结论: 大量的写操作会造成锁表, 导致读写的效率都不高</strong></p><p><strong>原因:</strong>  </p><ul><li><strong>MyISAM</strong>在执行查询语句<code>SELECT</code>前，会<strong>自动</strong>给涉及的所有表加<strong>读锁</strong>，在执行更新操作（<code>UPDATE、DELETE、INSERT</code>等）前，会<strong>自动</strong>给涉及的表加<strong>写锁</strong>，这个过程并<strong>不需要用户干预</strong>，<strong>MyISAM</strong>常用于读操作</li><li><strong>MyISAM只支持表锁</strong>！</li><li><strong>表锁</strong><ul><li>开销小，加锁快；不会出现死锁；锁定力度大，发生锁冲突概率高，并发度最低</li></ul></li><li>在表读锁和表写锁的环境下：<strong>读读不阻塞，读写阻塞，写写阻塞</strong>！</li><li>读读不阻塞：当前用户在读数据，其他的用户也在读数据，不会加锁</li><li>读写阻塞：当前用户在读数据，其他的用户<strong>不能修改当前用户读的数据</strong>，会加锁！</li><li>写写阻塞：当前用户在修改数据，其他的用户<strong>不能修改当前用户正在修改的数据</strong>，会加锁！</li><li>如果某个进程想要获取读锁，<strong>同时</strong>另外一个进程想要获取写锁。在mysql里边，<strong>写锁是优先于读锁的</strong>！</li><li>写锁和读锁优先级的问题是可以通过参数调节的：<code>max_write_lock_count</code>和<code>low-priority-updates</code></li><li><strong>MyISAM可以</strong>支持查询和插入操作的<strong>并发</strong>进行。可以通过系统变量<code>concurrent_insert</code>来指定哪种模式，在<strong>MyISAM</strong>中它默认是：如果MyISAM表中没有空洞（即表的中间没有被删除的行），MyISAM允许在一个进程读表的同时，另一个进程从<strong>表尾</strong>插入记录。</li></ul><p><strong>参考文章:  </strong><a href="https://juejin.im/post/5b55b842f265da0f9e589e79#heading-11" target="_blank" rel="noopener">MySQL-锁</a> – 主要阅读关于MyISAM引擎 锁的相关知识</p><hr></blockquote><p><strong>所以, 主从复制读写分离,  还是老老实实的使用Innodb引擎吧 ! ! </strong></p><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.runoob.com/w3cnote/mysql-different-nnodb-myisam.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/mysql-different-nnodb-myisam.html</a>   MySQL存储引擎InnoDB与Myisam的六大区别</p><p><a href="https://juejin.im/post/5b55b842f265da0f9e589e79#heading-11" target="_blank" rel="noopener">https://juejin.im/post/5b55b842f265da0f9e589e79#heading-11</a> MySQL-锁</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1470506028280-a011fb34b6f7?ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1049&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://lijinhongpassion.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://lijinhongpassion.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>2020年上半年计划</title>
    <link href="https://lijinhongpassion.github.io/codeant/20201.html"/>
    <id>https://lijinhongpassion.github.io/codeant/20201.html</id>
    <published>2020-06-30T05:02:43.000Z</published>
    <updated>2020-02-02T03:52:54.492Z</updated>
    
    <content type="html"><![CDATA[<hr><p><blockquote><strong>2020年上半年计划</strong></blockquote></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/20201/2020年度计划.png" alt="2020年上半年计划"></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;&lt;blockquote&gt;&lt;strong&gt;2020年上半年计划&lt;/strong&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPa
      
    
    </summary>
    
    
      <category term="年度计划" scheme="https://lijinhongpassion.github.io/tags/%E5%B9%B4%E5%BA%A6%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Java-一二线城市知名 IT 互联网公司名单！</title>
    <link href="https://lijinhongpassion.github.io/codeant/ed00.html"/>
    <id>https://lijinhongpassion.github.io/codeant/ed00.html</id>
    <published>2020-05-25T01:02:47.000Z</published>
    <updated>2020-05-25T01:37:25.647Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="通行证" />    <label for="pass">通行证</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      仅作为参考
    
    </summary>
    
      <category term="招聘" scheme="https://lijinhongpassion.github.io/categories/%E6%8B%9B%E8%81%98/"/>
    
    
      <category term="招聘" scheme="https://lijinhongpassion.github.io/tags/%E6%8B%9B%E8%81%98/"/>
    
  </entry>
  
  <entry>
    <title>Java-文字转声音</title>
    <link href="https://lijinhongpassion.github.io/codeant/1e6a.html"/>
    <id>https://lijinhongpassion.github.io/codeant/1e6a.html</id>
    <published>2020-05-21T08:21:25.000Z</published>
    <updated>2020-05-21T08:54:06.211Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1589923188900-85dae523342b?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><p>[toc]</p><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h2><p>本文是利用Java代码，将文本转化为语音。其主要的流程是：录入文本-&gt;生成音频-&gt;播放音频。</p><p>Github：<a href="https://github.com/LiJinHongPassion/springboot/tree/master/vioce" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/springboot/tree/master/vioce</a></p><h2 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2 代码实现"></a>2 代码实现</h2><h4 id="2-1-POM"><a href="#2-1-POM" class="headerlink" title="2.1 POM"></a>2.1 POM</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.jacob/jacob 文字转语音 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hynnet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jacob<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-导入dll"><a href="#2-2-导入dll" class="headerlink" title="2.2 导入dll"></a>2.2 导入dll</h4><p>将<code>jacob-1.18-x64.dll</code>放入JDK的bin目录下。该文件在<a href="https://github.com/LiJinHongPassion/springboot/tree/master/vioce" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/springboot/tree/master/vioce</a></p><h4 id="2-3-main函数"><a href="#2-3-main函数" class="headerlink" title="2.3 main函数"></a>2.3 main函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.jacob.activeX.ActiveXComponent;</span><br><span class="line"><span class="keyword">import</span> com.jacob.com.Dispatch;</span><br><span class="line"><span class="keyword">import</span> com.jacob.com.Variant;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述: 文字转语音测试 jdk bin文件中需要导入jacob-1.17-M2-x64.dll</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH-1755497577 2020/5/21 15:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jacobtest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 语音转文字并播放</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">textToSpeech</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        ActiveXComponent ax = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ax = <span class="keyword">new</span> ActiveXComponent(<span class="string">"Sapi.SpVoice"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 运行时输出语音内容</span></span><br><span class="line">            Dispatch spVoice = ax.getObject();</span><br><span class="line">            <span class="comment">// 音量 0-100</span></span><br><span class="line">            ax.setProperty(<span class="string">"Volume"</span>, <span class="keyword">new</span> Variant(<span class="number">100</span>));</span><br><span class="line">            <span class="comment">// 语音朗读速度 -10 到 +10</span></span><br><span class="line">            ax.setProperty(<span class="string">"Rate"</span>, <span class="keyword">new</span> Variant(-<span class="number">2</span>));</span><br><span class="line">            <span class="comment">// 执行朗读</span></span><br><span class="line">            Dispatch.call(spVoice, <span class="string">"Speak"</span>, <span class="keyword">new</span> Variant(text));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 下面是构建文件流把生成语音文件</span></span><br><span class="line"></span><br><span class="line">            ax = <span class="keyword">new</span> ActiveXComponent(<span class="string">"Sapi.SpFileStream"</span>);</span><br><span class="line">            Dispatch spFileStream = ax.getObject();</span><br><span class="line"></span><br><span class="line">            ax = <span class="keyword">new</span> ActiveXComponent(<span class="string">"Sapi.SpAudioFormat"</span>);</span><br><span class="line">            Dispatch spAudioFormat = ax.getObject();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置音频流格式</span></span><br><span class="line">            Dispatch.put(spAudioFormat, <span class="string">"Type"</span>, <span class="keyword">new</span> Variant(<span class="number">22</span>));</span><br><span class="line">            <span class="comment">// 设置文件输出流格式</span></span><br><span class="line">            Dispatch.putRef(spFileStream, <span class="string">"Format"</span>, spAudioFormat);</span><br><span class="line">            <span class="comment">// 调用输出 文件流打开方法，创建一个.wav文件</span></span><br><span class="line">            Dispatch.call(spFileStream, <span class="string">"Open"</span>, <span class="keyword">new</span> Variant(<span class="string">"./text.wav"</span>), <span class="keyword">new</span> Variant(<span class="number">3</span>), <span class="keyword">new</span> Variant(<span class="keyword">true</span>));</span><br><span class="line">            <span class="comment">// 设置声音对象的音频输出流为输出文件对象</span></span><br><span class="line">            Dispatch.putRef(spVoice, <span class="string">"AudioOutputStream"</span>, spFileStream);</span><br><span class="line">            <span class="comment">// 设置音量 0到100</span></span><br><span class="line">            Dispatch.put(spVoice, <span class="string">"Volume"</span>, <span class="keyword">new</span> Variant(<span class="number">100</span>));</span><br><span class="line">            <span class="comment">// 设置朗读速度</span></span><br><span class="line">            Dispatch.put(spVoice, <span class="string">"Rate"</span>, <span class="keyword">new</span> Variant(-<span class="number">2</span>));</span><br><span class="line">            <span class="comment">// 开始朗读</span></span><br><span class="line">            Dispatch.call(spVoice, <span class="string">"Speak"</span>, <span class="keyword">new</span> Variant(text));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 关闭输出文件</span></span><br><span class="line">            Dispatch.call(spFileStream, <span class="string">"Close"</span>);</span><br><span class="line">            Dispatch.putRef(spVoice, <span class="string">"AudioOutputStream"</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            spAudioFormat.safeRelease();</span><br><span class="line">            spFileStream.safeRelease();</span><br><span class="line">            spVoice.safeRelease();</span><br><span class="line">            ax.safeRelease();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        textToSpeech(<span class="string">"hello, code ant"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-扩展"><a href="#3-扩展" class="headerlink" title="3 扩展"></a>3 扩展</h2><h4 id="3-1-缺陷"><a href="#3-1-缺陷" class="headerlink" title="3.1 缺陷"></a>3.1 缺陷</h4><p>因为该程序是需要生成音频文件的，文件需要存储在服务器端口。</p><h4 id="3-2-解决方式"><a href="#3-2-解决方式" class="headerlink" title="3.2 解决方式"></a>3.2 解决方式</h4><p>在后期在网站上添加该功能后，因为生成的音频也属于网站资源，所以在什么时候删除该资源是我们需要考虑的。</p><p><strong>方法一（懒汉式）</strong>：</p><p>客户端再加载资源的时候，不主动去加载该音频。</p><p>当资源被第一次请求后，服务器端处理完该请求就直接删除音频文件。若是该资源一直未被请求，则定时清除音频文件。</p><p><strong>方法二（饿汉式）</strong>：</p><p>在页面加载或者点击完按钮的时候，浏览器就主动去请求该资源，然后服务器接收到请求后，并处理完成后，服务器端就直接删除。</p><p>客户端在接收到服务器返回的音频资源后，<strong>可采用缓存（浏览器自带缓存功能）\持久化（保存在本地）存储文件</strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1589923188900-85dae523342b?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java-spring事务传播性（转载）</title>
    <link href="https://lijinhongpassion.github.io/codeant/b019.html"/>
    <id>https://lijinhongpassion.github.io/codeant/b019.html</id>
    <published>2020-04-23T12:21:17.000Z</published>
    <updated>2020-04-23T12:25:10.172Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1558981806-ec527fa84c39?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><p>本文转载于： <a href="https://segmentfault.com/a/1190000013341344" target="_blank" rel="noopener">https://segmentfault.com/a/1190000013341344</a> </p><p>##前言</p><p>Spring在TransactionDefinition接口中规定了7种类型的事务传播行为。事务传播行为是Spring框架独有的事务增强特性，他不属于的事务实际提供方数据库行为。这是Spring为我们提供的强大的工具箱，使用事务传播行可以为我们的开发工作提供许多便利。但是人们对他的误解也颇多，你一定也听过“service方法事务最好不要嵌套”的传言。要想正确的使用工具首先需要了解工具。本文对七种事务传播行为做详细介绍，内容主要代码示例的方式呈现。</p><h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><h2 id="1-什么是事务传播行为？"><a href="#1-什么是事务传播行为？" class="headerlink" title="1. 什么是事务传播行为？"></a>1. 什么是事务传播行为？</h2><p>事务传播行为用来描述由某一个事务传播行为修饰的方法被嵌套进另一个方法的时事务如何传播。</p><p>用伪代码说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void methodA()&#123;</span><br><span class="line">   methodB();</span><br><span class="line">   //doSomething</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Transaction(Propagation=XXX)</span><br><span class="line">public void methodB()&#123;</span><br><span class="line">   //doSomething</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中<code>methodA()</code>方法嵌套调用了<code>methodB()</code>方法，<code>methodB()</code>的事务传播行为由<code>@Transaction(Propagation=XXX)</code>设置决定。这里需要注意的是<code>methodA()</code>并没有开启事务，某一个事务传播行为修饰的方法并不是必须要在开启事务的外围方法中调用。</p><h2 id="2-Spring中七种事务传播行为"><a href="#2-Spring中七种事务传播行为" class="headerlink" title="2. Spring中七种事务传播行为"></a>2. Spring中七种事务传播行为</h2><table><thead><tr><th>事务传播行为类型</th><th>说明</th></tr></thead><tbody><tr><td>PROPAGATION_REQUIRED</td><td>如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。</td></tr><tr><td>PROPAGATION_SUPPORTS</td><td>支持当前事务，如果当前没有事务，就以非事务方式执行。</td></tr><tr><td>PROPAGATION_MANDATORY</td><td>使用当前的事务，如果当前没有事务，就抛出异常。</td></tr><tr><td>PROPAGATION_REQUIRES_NEW</td><td>新建事务，如果当前存在事务，把当前事务挂起。</td></tr><tr><td>PROPAGATION_NOT_SUPPORTED</td><td>以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</td></tr><tr><td>PROPAGATION_NEVER</td><td>以非事务方式执行，如果当前存在事务，则抛出异常。</td></tr><tr><td>PROPAGATION_NESTED</td><td>如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。</td></tr></tbody></table><p>定义非常简单，也很好理解，下面我们就进入代码测试部分，验证我们的理解是否正确。</p><h1 id="代码验证"><a href="#代码验证" class="headerlink" title="代码验证"></a>代码验证</h1><p>文中代码以传统三层结构中两层呈现，即Service和Dao层，由Spring负责依赖注入和注解式事务管理，DAO层由Mybatis实现，你也可以使用任何喜欢的方式，例如，Hibernate,JPA,JDBCTemplate等。数据库使用的是MySQL数据库，你也可以使用任何支持事务的数据库，并不会影响验证结果。</p><p>首先我们在数据库中创建两张表：</p><p><strong>user1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user1` (</span><br><span class="line">  `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` VARCHAR(45) NOT NULL DEFAULT &apos;&apos;,</span><br><span class="line">  PRIMARY KEY(`id`)</span><br><span class="line">)</span><br><span class="line">ENGINE = InnoDB;</span><br></pre></td></tr></table></figure><p><strong>user2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user2` (</span><br><span class="line">  `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` VARCHAR(45) NOT NULL DEFAULT &apos;&apos;,</span><br><span class="line">  PRIMARY KEY(`id`)</span><br><span class="line">)</span><br><span class="line">ENGINE = InnoDB;</span><br></pre></td></tr></table></figure><p>然后编写相应的Bean和DAO层代码：</p><p><strong>User1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class User1 &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line">   //get和set方法省略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>User2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class User2 &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line">   //get和set方法省略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>User1Mapper</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface User1Mapper &#123;</span><br><span class="line">    int insert(User1 record);</span><br><span class="line">    User1 selectByPrimaryKey(Integer id);</span><br><span class="line">    //其他方法省略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>User2Mapper</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface User2Mapper &#123;</span><br><span class="line">    int insert(User2 record);</span><br><span class="line">    User2 selectByPrimaryKey(Integer id);</span><br><span class="line">    //其他方法省略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后也是具体验证的代码由service层实现，下面我们分情况列举。</p><h2 id="1-PROPAGATION-REQUIRED"><a href="#1-PROPAGATION-REQUIRED" class="headerlink" title="1.PROPAGATION_REQUIRED"></a>1.PROPAGATION_REQUIRED</h2><p>我们为User1Service和User2Service相应方法加上<code>Propagation.REQUIRED</code>属性。</p><p><strong>User1Service方法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class User1ServiceImpl implements User1Service &#123;</span><br><span class="line">    //省略其他...</span><br><span class="line">    @Override</span><br><span class="line">    @Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line">    public void addRequired(User1 user)&#123;</span><br><span class="line">        user1Mapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>User2Service方法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class User2ServiceImpl implements User2Service &#123;</span><br><span class="line">    //省略其他...</span><br><span class="line">    @Override</span><br><span class="line">    @Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line">    public void addRequired(User2 user)&#123;</span><br><span class="line">        user2Mapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    @Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line">    public void addRequiredException(User2 user)&#123;</span><br><span class="line">        user2Mapper.insert(user);</span><br><span class="line">        throw new RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-场景一"><a href="#1-1-场景一" class="headerlink" title="1.1 场景一"></a>1.1 场景一</h3><p>此场景外围方法没有开启事务。</p><p><strong>验证方法1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void notransaction_exception_required_required()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addRequired(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addRequired(user2);</span><br><span class="line">    </span><br><span class="line">    throw new RuntimeException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>验证方法2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void notransaction_required_required_exception()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addRequired(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addRequiredException(user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别执行验证方法，结果：</p><table><thead><tr><th>验证方法序号</th><th>数据库结果</th><th>结果分析</th></tr></thead><tbody><tr><td>1</td><td>“张三”、“李四”均插入。</td><td>外围方法未开启事务，插入“张三”、“李四”方法在自己的事务中独立运行，外围方法异常不影响内部插入“张三”、“李四”方法独立的事务。</td></tr><tr><td>2</td><td>“张三”插入，“李四”未插入。</td><td>外围方法没有事务，插入“张三”、“李四”方法都在自己的事务中独立运行,所以插入“李四”方法抛出异常只会回滚插入“李四”方法，插入“张三”方法不受影响。</td></tr></tbody></table><p><strong>结论：通过这两个方法我们证明了在外围方法未开启事务的情况下<code>Propagation.REQUIRED</code>修饰的内部方法会新开启自己的事务，且开启的事务相互独立，互不干扰。</strong></p><h3 id="1-2-场景二"><a href="#1-2-场景二" class="headerlink" title="1.2 场景二"></a>1.2 场景二</h3><p>外围方法开启事务，这个是使用率比较高的场景。</p><p><strong>验证方法1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line"> @Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line"> public void transaction_exception_required_required()&#123;</span><br><span class="line">     User1 user1=new User1();</span><br><span class="line">     user1.setName(&quot;张三&quot;);</span><br><span class="line">     user1Service.addRequired(user1);</span><br><span class="line">     </span><br><span class="line">     User2 user2=new User2();</span><br><span class="line">     user2.setName(&quot;李四&quot;);</span><br><span class="line">     user2Service.addRequired(user2);</span><br><span class="line">     </span><br><span class="line">     throw new RuntimeException();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>验证方法2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line">public void transaction_required_required_exception()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addRequired(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addRequiredException(user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>验证方法3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Transactional</span><br><span class="line">@Override</span><br><span class="line">public void transaction_required_required_exception_try()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addRequired(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    try &#123;</span><br><span class="line">        user2Service.addRequiredException(user2);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        System.out.println(&quot;方法回滚&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别执行验证方法，结果：</p><table><thead><tr><th>验证方法序号</th><th>数据库结果</th><th>结果分析</th></tr></thead><tbody><tr><td>1</td><td>“张三”、“李四”均未插入。</td><td>外围方法开启事务，内部方法加入外围方法事务，外围方法回滚，内部方法也要回滚。</td></tr><tr><td>2</td><td>“张三”、“李四”均未插入。</td><td>外围方法开启事务，内部方法加入外围方法事务，内部方法抛出异常回滚，外围方法感知异常致使整体事务回滚。</td></tr><tr><td>3</td><td>“张三”、“李四”均未插入。</td><td>外围方法开启事务，内部方法加入外围方法事务，内部方法抛出异常回滚，即使方法被catch不被外围方法感知，整个事务依然回滚。</td></tr></tbody></table><p><strong>结论：以上试验结果我们证明在外围方法开启事务的情况下<code>Propagation.REQUIRED</code>修饰的内部方法会加入到外围方法的事务中，所有<code>Propagation.REQUIRED</code>修饰的内部方法和外围方法均属于同一事务，只要一个方法回滚，整个事务均回滚。</strong></p><h2 id="2-PROPAGATION-REQUIRES-NEW"><a href="#2-PROPAGATION-REQUIRES-NEW" class="headerlink" title="2.PROPAGATION_REQUIRES_NEW"></a>2.PROPAGATION_REQUIRES_NEW</h2><p>我们为User1Service和User2Service相应方法加上<code>Propagation.REQUIRES_NEW</code>属性。<br><strong>User1Service方法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class User1ServiceImpl implements User1Service &#123;</span><br><span class="line">    //省略其他...</span><br><span class="line">    @Override</span><br><span class="line">    @Transactional(propagation = Propagation.REQUIRES_NEW)</span><br><span class="line">    public void addRequiresNew(User1 user)&#123;</span><br><span class="line">        user1Mapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    @Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line">    public void addRequired(User1 user)&#123;</span><br><span class="line">        user1Mapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>User2Service方法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class User2ServiceImpl implements User2Service &#123;</span><br><span class="line">    //省略其他...</span><br><span class="line">    @Override</span><br><span class="line">    @Transactional(propagation = Propagation.REQUIRES_NEW)</span><br><span class="line">    public void addRequiresNew(User2 user)&#123;</span><br><span class="line">        user2Mapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    @Transactional(propagation = Propagation.REQUIRES_NEW)</span><br><span class="line">    public void addRequiresNewException(User2 user)&#123;</span><br><span class="line">        user2Mapper.insert(user);</span><br><span class="line">        throw new RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-场景一"><a href="#2-1-场景一" class="headerlink" title="2.1 场景一"></a>2.1 场景一</h3><p>外围方法没有开启事务。</p><p><strong>验证方法1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void notransaction_exception_requiresNew_requiresNew()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addRequiresNew(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addRequiresNew(user2);</span><br><span class="line">    throw new RuntimeException();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>验证方法2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void notransaction_requiresNew_requiresNew_exception()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addRequiresNew(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addRequiresNewException(user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别执行验证方法，结果：</p><table><thead><tr><th>验证方法序号</th><th>数据库结果</th><th>结果分析</th></tr></thead><tbody><tr><td>1</td><td>“张三”插入，“李四”插入。</td><td>外围方法没有事务，插入“张三”、“李四”方法都在自己的事务中独立运行,外围方法抛出异常回滚不会影响内部方法。</td></tr><tr><td>2</td><td>“张三”插入，“李四”未插入</td><td>外围方法没有开启事务，插入“张三”方法和插入“李四”方法分别开启自己的事务，插入“李四”方法抛出异常回滚，其他事务不受影响。</td></tr></tbody></table><p><strong>结论：通过这两个方法我们证明了在外围方法未开启事务的情况下<code>Propagation.REQUIRES_NEW</code>修饰的内部方法会新开启自己的事务，且开启的事务相互独立，互不干扰。</strong></p><h3 id="2-2-场景二"><a href="#2-2-场景二" class="headerlink" title="2.2 场景二"></a>2.2 场景二</h3><p>外围方法开启事务。</p><p><strong>验证方法1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line">public void transaction_exception_required_requiresNew_requiresNew()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addRequired(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addRequiresNew(user2);</span><br><span class="line">    </span><br><span class="line">    User2 user3=new User2();</span><br><span class="line">    user3.setName(&quot;王五&quot;);</span><br><span class="line">    user2Service.addRequiresNew(user3);</span><br><span class="line">    throw new RuntimeException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>验证方法2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line">public void transaction_required_requiresNew_requiresNew_exception()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addRequired(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addRequiresNew(user2);</span><br><span class="line">    </span><br><span class="line">    User2 user3=new User2();</span><br><span class="line">    user3.setName(&quot;王五&quot;);</span><br><span class="line">    user2Service.addRequiresNewException(user3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>验证方法3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line">public void transaction_required_requiresNew_requiresNew_exception_try()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addRequired(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addRequiresNew(user2);</span><br><span class="line">    User2 user3=new User2();</span><br><span class="line">    user3.setName(&quot;王五&quot;);</span><br><span class="line">    try &#123;</span><br><span class="line">        user2Service.addRequiresNewException(user3);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        System.out.println(&quot;回滚&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别执行验证方法，结果：</p><table><thead><tr><th>验证方法序号</th><th>数据库结果</th><th>结果分析</th></tr></thead><tbody><tr><td>1</td><td>“张三”未插入，“李四”插入，“王五”插入。</td><td>外围方法开启事务，插入“张三”方法和外围方法一个事务，插入“李四”方法、插入“王五”方法分别在独立的新建事务中，外围方法抛出异常只回滚和外围方法同一事务的方法，故插入“张三”的方法回滚。</td></tr><tr><td>2</td><td>“张三”未插入，“李四”插入，“王五”未插入。</td><td>外围方法开启事务，插入“张三”方法和外围方法一个事务，插入“李四”方法、插入“王五”方法分别在独立的新建事务中。插入“王五”方法抛出异常，首先插入 “王五”方法的事务被回滚，异常继续抛出被外围方法感知，外围方法事务亦被回滚，故插入“张三”方法也被回滚。</td></tr><tr><td>3</td><td>“张三”插入，“李四”插入，“王五”未插入。</td><td>外围方法开启事务，插入“张三”方法和外围方法一个事务，插入“李四”方法、插入“王五”方法分别在独立的新建事务中。插入“王五”方法抛出异常，首先插入“王五”方法的事务被回滚，异常被catch不会被外围方法感知，外围方法事务不回滚，故插入“张三”方法插入成功。</td></tr></tbody></table><p><strong>结论：在外围方法开启事务的情况下<code>Propagation.REQUIRES_NEW</code>修饰的内部方法依然会单独开启独立事务，且与外部方法事务也独立，内部方法之间、内部方法和外部方法事务均相互独立，互不干扰。</strong></p><h2 id="3-PROPAGATION-NESTED"><a href="#3-PROPAGATION-NESTED" class="headerlink" title="3.PROPAGATION_NESTED"></a>3.PROPAGATION_NESTED</h2><p>我们为User1Service和User2Service相应方法加上<code>Propagation.NESTED</code>属性。<br><strong>User1Service方法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class User1ServiceImpl implements User1Service &#123;</span><br><span class="line">    //省略其他...</span><br><span class="line">    @Override</span><br><span class="line">    @Transactional(propagation = Propagation.NESTED)</span><br><span class="line">    public void addNested(User1 user)&#123;</span><br><span class="line">        user1Mapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>User2Service方法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class User2ServiceImpl implements User2Service &#123;</span><br><span class="line">    //省略其他...</span><br><span class="line">    @Override</span><br><span class="line">    @Transactional(propagation = Propagation.NESTED)</span><br><span class="line">    public void addNested(User2 user)&#123;</span><br><span class="line">        user2Mapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    @Transactional(propagation = Propagation.NESTED)</span><br><span class="line">    public void addNestedException(User2 user)&#123;</span><br><span class="line">        user2Mapper.insert(user);</span><br><span class="line">        throw new RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-场景一"><a href="#3-1-场景一" class="headerlink" title="3.1 场景一"></a>3.1 场景一</h3><p>此场景外围方法没有开启事务。</p><p><strong>验证方法1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void notransaction_exception_nested_nested()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addNested(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addNested(user2);</span><br><span class="line">    throw new RuntimeException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>验证方法2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void notransaction_nested_nested_exception()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addNested(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addNestedException(user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别执行验证方法，结果：</p><table><thead><tr><th>验证方法序号</th><th>数据库结果</th><th>结果分析</th></tr></thead><tbody><tr><td>1</td><td>“张三”、“李四”均插入。</td><td>外围方法未开启事务，插入“张三”、“李四”方法在自己的事务中独立运行，外围方法异常不影响内部插入“张三”、“李四”方法独立的事务。</td></tr><tr><td>2</td><td>“张三”插入，“李四”未插入。</td><td>外围方法没有事务，插入“张三”、“李四”方法都在自己的事务中独立运行,所以插入“李四”方法抛出异常只会回滚插入“李四”方法，插入“张三”方法不受影响。</td></tr></tbody></table><p><strong>结论：通过这两个方法我们证明了在外围方法未开启事务的情况下<code>Propagation.NESTED</code>和<code>Propagation.REQUIRED</code>作用相同，修饰的内部方法都会新开启自己的事务，且开启的事务相互独立，互不干扰。</strong></p><h3 id="3-2-场景二"><a href="#3-2-场景二" class="headerlink" title="3.2 场景二"></a>3.2 场景二</h3><p>外围方法开启事务。</p><p><strong>验证方法1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Transactional</span><br><span class="line">@Override</span><br><span class="line">public void transaction_exception_nested_nested()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addNested(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addNested(user2);</span><br><span class="line">    throw new RuntimeException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>验证方法2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Transactional</span><br><span class="line">@Override</span><br><span class="line">public void transaction_nested_nested_exception()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addNested(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addNestedException(user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>验证方法3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Transactional</span><br><span class="line">@Override</span><br><span class="line">public void transaction_nested_nested_exception_try()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addNested(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    try &#123;</span><br><span class="line">        user2Service.addNestedException(user2);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        System.out.println(&quot;方法回滚&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别执行验证方法，结果：</p><table><thead><tr><th>验证方法序号</th><th>数据库结果</th><th>结果分析</th></tr></thead><tbody><tr><td>1</td><td>“张三”、“李四”均未插入。</td><td>外围方法开启事务，内部事务为外围事务的子事务，外围方法回滚，内部方法也要回滚。</td></tr><tr><td>2</td><td>“张三”、“李四”均未插入。</td><td>外围方法开启事务，内部事务为外围事务的子事务，内部方法抛出异常回滚，且外围方法感知异常致使整体事务回滚。</td></tr><tr><td>3</td><td>“张三”插入、“李四”未插入。</td><td>外围方法开启事务，内部事务为外围事务的子事务，插入“李四”内部方法抛出异常，可以单独对子事务回滚。</td></tr></tbody></table><p><strong>结论：以上试验结果我们证明在外围方法开启事务的情况下<code>Propagation.NESTED</code>修饰的内部方法属于外部事务的子事务，外围主事务回滚，子事务一定回滚，而内部子事务可以单独回滚而不影响外围主事务和其他子事务</strong></p><h2 id="4-REQUIRED-REQUIRES-NEW-NESTED异同"><a href="#4-REQUIRED-REQUIRES-NEW-NESTED异同" class="headerlink" title="4. REQUIRED,REQUIRES_NEW,NESTED异同"></a>4. REQUIRED,REQUIRES_NEW,NESTED异同</h2><p>由“1.2 场景二”和“3.2 场景二”对比，我们可知：<br><strong>NESTED和REQUIRED修饰的内部方法都属于外围方法事务，如果外围方法抛出异常，这两种方法的事务都会被回滚。但是REQUIRED是加入外围方法事务，所以和外围事务同属于一个事务，一旦REQUIRED事务抛出异常被回滚，外围方法事务也将被回滚。而NESTED是外围方法的子事务，有单独的保存点，所以NESTED方法抛出异常被回滚，不会影响到外围方法的事务。</strong></p><p>由“2.2 场景二”和“3.2 场景二”对比，我们可知：<br><strong>NESTED和REQUIRES_NEW都可以做到内部方法事务回滚而不影响外围方法事务。但是因为NESTED是嵌套事务，所以外围方法回滚之后，作为外围方法事务的子事务也会被回滚。而REQUIRES_NEW是通过开启新的事务实现的，内部事务和外围事务是两个事务，外围事务回滚不会影响内部事务。</strong></p><h2 id="5-其他事务传播行为"><a href="#5-其他事务传播行为" class="headerlink" title="5. 其他事务传播行为"></a>5. 其他事务传播行为</h2><p>鉴于文章篇幅问题，其他事务传播行为的测试就不在此一一描述了，感兴趣的读者可以去源码中自己寻找相应测试代码和结果解释。传送门：<a href="https://github.com/TmTse/transaction-test" target="_blank" rel="noopener">https://github.com/TmTse/tran…</a></p><h1 id="模拟用例"><a href="#模拟用例" class="headerlink" title="模拟用例"></a>模拟用例</h1><p>介绍了这么多事务传播行为，我们在实际工作中如何应用呢？下面我来举一个示例：</p><p>假设我们有一个注册的方法，方法中调用添加积分的方法，如果我们希望添加积分不会影响注册流程（即添加积分执行失败回滚不能使注册方法也回滚），我们会这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line">     </span><br><span class="line">     @Transactional</span><br><span class="line">     public void register(User user)&#123;</span><br><span class="line">                </span><br><span class="line">         try &#123;</span><br><span class="line">             membershipPointService.addPoint(Point point);</span><br><span class="line">         &#125; catch (Exception e) &#123;</span><br><span class="line">            //省略...</span><br><span class="line">         &#125;</span><br><span class="line">         //省略...</span><br><span class="line">     &#125;</span><br><span class="line">     //省略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还规定注册失败要影响<code>addPoint()</code>方法（注册方法回滚添加积分方法也需要回滚），那么<code>addPoint()</code>方法就需要这样实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class MembershipPointServiceImpl implements MembershipPointService&#123;</span><br><span class="line">     </span><br><span class="line">     @Transactional(propagation = Propagation.NESTED)</span><br><span class="line">     public void addPoint(Point point)&#123;</span><br><span class="line">                </span><br><span class="line">         try &#123;</span><br><span class="line">             recordService.addRecord(Record record);</span><br><span class="line">         &#125; catch (Exception e) &#123;</span><br><span class="line">            //省略...</span><br><span class="line">         &#125;</span><br><span class="line">         //省略...</span><br><span class="line">     &#125;</span><br><span class="line">     //省略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们注意到了在<code>addPoint()</code>中还调用了<code>addRecord()</code>方法，这个方法用来记录日志。他的实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class RecordServiceImpl implements RecordService&#123;</span><br><span class="line">     </span><br><span class="line">     @Transactional(propagation = Propagation.NOT_SUPPORTED)</span><br><span class="line">     public void addRecord(Record record)&#123;</span><br><span class="line">                </span><br><span class="line">        </span><br><span class="line">         //省略...</span><br><span class="line">     &#125;</span><br><span class="line">     //省略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们注意到<code>addRecord()</code>方法中<code>propagation = Propagation.NOT_SUPPORTED</code>，因为对于日志无所谓精确，可以多一条也可以少一条，所以<code>addRecord()</code>方法本身和外围<code>addPoint()</code>方法抛出异常都不会使<code>addRecord()</code>方法回滚，并且<code>addRecord()</code>方法抛出异常也不会影响外围<code>addPoint()</code>方法的执行。</p><p>通过这个例子相信大家对事务传播行为的使用有了更加直观的认识，通过各种属性的组合确实能让我们的业务实现更加灵活多样。</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>通过上面的介绍，相信大家对Spring事务传播行为有了更加深入的理解，希望大家日常开发工作有所帮助。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1558981806-ec527fa84c39?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
      <category term="spring" scheme="https://lijinhongpassion.github.io/categories/java/spring/"/>
    
      <category term="transaction" scheme="https://lijinhongpassion.github.io/categories/java/spring/transaction/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java-你真的懂了try{return}finally{return};吗？</title>
    <link href="https://lijinhongpassion.github.io/codeant/beee.html"/>
    <id>https://lijinhongpassion.github.io/codeant/beee.html</id>
    <published>2020-02-26T02:59:46.000Z</published>
    <updated>2020-02-26T15:01:42.400Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1580602972248-1f93dd762133?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1051&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>我们常知的<code>try catch finally</code>是捕获处理异常的，但是<code>try{return}finally{return};</code>的执行顺序是怎样的呢？<code>try{return}finally{};</code>呢？下面就来简单了解一下。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><strong>例一：try{return}finally{};</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    System.out.println(method1());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        ++x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果：1</strong></p><p><strong>例二：try{return}finally{return};</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    System.out.println(method1());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果：2</strong></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>根据jdk的官方描述，try里面遇到return的时候，先将值存储于<strong>常量池</strong>，再继续执行finally里面的代码。finally代码执行完毕后再返回<strong>常量池里的那个结果</strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1580602972248-1f93dd762133?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1051&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java-Java线程之守护线程&amp;用户进程</title>
    <link href="https://lijinhongpassion.github.io/codeant/25c3.html"/>
    <id>https://lijinhongpassion.github.io/codeant/25c3.html</id>
    <published>2020-02-11T09:02:19.000Z</published>
    <updated>2020-02-11T10:52:56.588Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1581405919332-d9f2f192dc6e?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>在Java中有两类线程：User Thread(用户线程)、Daemon Thread(守护线程) </p><p>用个比较通俗的比如，任何一个守护线程都是整个JVM中所有非守护线程的保姆：</p><p>只要当前JVM实例中尚存在任何一个非守护线程没有结束，守护线程就全部工作；只有当最后一个非守护线程结束时，守护线程随着JVM一同结束工作。<br>Daemon的作用是为其他线程的运行提供便利服务，守护线程最典型的应用就是 GC (垃圾回收器)，它就是一个很称职的守护者</p><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><blockquote><p>以下内容转载至： <a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1306580788183074" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/1252599548343744/1306580788183074</a> </p></blockquote><h4 id="什么是守护线程"><a href="#什么是守护线程" class="headerlink" title="什么是守护线程"></a>什么是守护线程</h4><p>Java程序入口就是由JVM启动<code>main</code>线程，<code>main</code>线程又可以启动其他线程。当所有线程都运行结束时，JVM退出，进程结束。</p><p>如果有一个线程没有退出，JVM进程就不会退出。所以，必须保证所有线程都能及时结束。</p><p>但是有一种线程的目的就是无限循环，例如，一个定时触发任务的线程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(LocalTime.now());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果这个线程不结束，JVM进程就无法结束。问题是，由谁负责结束这个线程？</p><p>然而这类线程经常没有负责人来负责结束它们。但是，当其他线程结束时，JVM进程又必须要结束，怎么办？</p><p>答案是使用守护线程（Daemon Thread）。</p><p>守护线程是指为其他线程服务的线程。在JVM中，所有非守护线程都执行完毕后，无论有没有守护线程，虚拟机都会自动退出。</p><p>因此，JVM退出时，不必关心守护线程是否已结束。</p><hr><h4 id="创建守护线程"><a href="#创建守护线程" class="headerlink" title="创建守护线程"></a>创建守护线程</h4><p>如何创建守护线程呢？方法和普通线程一样，只是在调用<code>start()</code>方法前，调用<code>setDaemon(true)</code>把该线程标记为守护线程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Thread t = <span class="keyword">new</span> MyThread();</span><br><span class="line">t.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure><p>在守护线程中，编写代码要注意：守护线程不能持有任何需要关闭的资源，例如打开文件等，因为虚拟机退出时，守护线程没有任何机会来关闭文件，这会导致数据丢失。</p><hr><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p> (1) thread.setDaemon(true)必须在thread.start()之前设置，否则会跑出一个IllegalThreadStateException异常。你不能把      正在运行的常规线程设置为守护线程。<br>(2) 在Daemon线程中产生的新线程也是Daemon的。<br>(3) 不要认为所有的应用都可以分配给Daemon来进行服务，比如读写操作或者计算逻辑。 </p><hr><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>守护线程是为其他线程服务的线程；</p><p>所有非守护线程都执行完毕后，虚拟机退出；</p><p>守护线程不能持有需要关闭的资源（如打开文件等）。</p><hr><h4 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h4><ul><li>定义：守护线程–也称“服务线程”，在没有用户线程可服务时会自动离开。</li><li>优先级：守护线程的优先级比较低，用于为系统中的其它对象和线程提供服务。</li><li>设置：通过setDaemon(true)来设置线程为“守护线程”；将一个用户线程设置为守护线程的方式是在线程对象创建之前 用线程对象的setDaemon方法。</li><li>example: 垃圾回收线程就是一个经典的守护线程，当我们的程序中不再有任何运行的Thread,程序就不会再产生垃圾，垃圾回收器也就无事可做，所以当垃圾回收线程是JVM上仅剩的线程时，垃圾回收线程会自动离开。它始终在低级别的状态中运行，用于实时监控和管理系统中的可回收资源。</li><li>生命周期：守护进程（Daemon）是运行在后台的一种特殊进程。它独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。也就是说守护线程不依赖于终端，但是依赖于系统，与系统“同生共死”。那Java的守护线程是什么样子的呢。当JVM中所有的线程都是守护线程的时候，JVM就可以退出了；如果还有一个或以上的非守护线程则JVM不会退出。 </li></ul><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/25c3/1.png" alt="Hotspot JVM 后台运行的主要系统线程"></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>参考文章中含有例子，可参考。</p><p><a href="https://blog.csdn.net/shimiso/article/details/8964414" target="_blank" rel="noopener">Java中守护线程的总结</a></p><p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1306580788183074" target="_blank" rel="noopener">廖雪峰 – 守护线程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1581405919332-d9f2f192dc6e?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="Java" scheme="https://lijinhongpassion.github.io/tags/Java/"/>
    
      <category term="thread" scheme="https://lijinhongpassion.github.io/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>Redis-redis为什么是单线程</title>
    <link href="https://lijinhongpassion.github.io/codeant/redis1.html"/>
    <id>https://lijinhongpassion.github.io/codeant/redis1.html</id>
    <published>2020-02-11T06:35:49.000Z</published>
    <updated>2020-02-12T05:27:26.266Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1581293738311-c1e14c2513dc?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>本文我们主要来了解redis和memcached的区别，以此深入了解redis为什么是单线程。</p><blockquote><p>开局一张图：客户端与 redis 的一次通信过程</p></blockquote><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/redis1/1.jpg" alt="客户端与 redis 的一次通信过程"></p><h2 id="redis-和-memcached-的区别"><a href="#redis-和-memcached-的区别" class="headerlink" title="redis 和 memcached 的区别"></a>redis 和 memcached 的区别</h2><p>对于 redis 和 memcached 我总结了下面四点。现在公司一般都是用 redis 来实现缓存，而且 redis 自身也越来越强大了！</p><ol><li><strong>redis支持更丰富的数据类型（支持更复杂的应用场景）</strong>：Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，zset，hash等数据结构的存储。memcache支持简单的数据类型，String。</li><li><strong>Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用,而Memecache把数据全部存在内存之中。</strong></li><li><strong>集群模式</strong>：memcached没有原生的集群模式，需要依靠客户端来实现往集群中分片写入数据；但是 redis 目前是原生支持 cluster 模式的.</li><li><strong>Memcached是多线程，非阻塞IO复用的网络模型；Redis使用单线程的多路 IO 复用模型。</strong></li></ol><blockquote><p>来自网络上的一张图，这里分享给大家！</p></blockquote><p><img src="http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-9-24/61603179.jpg" alt="redis 和 memcached 的区别"></p><h2 id="redis为什么是单线程"><a href="#redis为什么是单线程" class="headerlink" title="redis为什么是单线程"></a>redis为什么是单线程</h2><blockquote><p>以下内容来自： <a href="https://www.zhihu.com/search?type=content&amp;q=redis为什么是单线程的" target="_blank" rel="noopener">知乎 - redis为什么是单线程</a> </p></blockquote><p>以前一直有个误区，以为：高性能服务器 一定是 多线程来实现的</p><p>原因很简单因为误区二导致的：多线程 一定比 单线程 效率高。其实不然。</p><p>在说这个事前希望大家都能对 CPU 、 内存 、 硬盘的速度都有了解了，这样可能理解得更深刻一点，不了解的朋友点：CPU到底比内存跟硬盘快多少</p><p>redis 核心就是 如果我的数据全都在内存里，我单线程的去操作 就是效率最高的，为什么呢，因为多线程的本质就是 CPU 模拟出来多个线程的情况，这种模拟出来的情况就有一个代价，就是上下文的切换，对于一个内存的系统来说，它没有上下文的切换就是效率最高的。redis 用 单个CPU 绑定一块内存的数据，然后针对这块内存的数据进行多次读写的时候，都是在一个CPU上完成的，所以它是单线程处理这个事。在内存的情况下，这个方案就是最佳方案 —— 阿里 沈询</p><p>因为一次CPU上下文的切换大概在 1500ns 左右。</p><p>从内存中读取 1MB 的连续数据，耗时大约为 250us，假设1MB的数据由多个线程读取了1000次，那么就有1000次时间上下文的切换，</p><p>那么就有1500ns * 1000 = 1500us ，我单线程的读完1MB数据才250us ,你光时间上下文的切换就用了1500us了，我还不算你每次读一点数据 的时间，</p><p>那什么时候用多线程的方案呢？</p><p>答案是：下层的存储等慢速的情况。比如磁盘</p><blockquote><p>IOPS (Input/Output Per Second)即每秒的输入输出量(或读写次数)，是衡量磁盘性能的主要指标之一。IOPS是指单位时间内系统能处理的I/O请求数量，I/O请求通常为读或写数据操作请求。随机读写频繁的应用，如OLTP(Online Transaction Processing)，IOPS是关键衡量指标。</p></blockquote><blockquote><p>另一个重要指标是数据吞吐量(Throughput)，指单位时间内可以成功传输的数据数量。对于大量顺序读写的应用，如VOD(Video On Demand)，则更关注吞吐量指标。</p></blockquote><p>内存是一个 IOPS （ 每秒的读写次数 ）非常高的系统，因为我想申请一块内存就申请一块内存，销毁一块内存我就销毁一块内存，内存的申请和销毁是很容易的。而且内存是可以动态的申请大小的。</p><p>磁盘的特性是：IOPS很低很低，但吞吐量很高。这就意味着，大量的读写操作都必须攒到一起，再提交到磁盘的时候，性能最高。为什么呢？</p><p>如果我有一个事务组的操作（就是几个已经分开了的事务请求，比如写读写读写，这么五个操作在一起），在内存中，因为IOPS非常高，我可以一个一个的完成，但是如果在磁盘中也有这种请求方式的话，</p><p>我第一个写操作是这样完成的：我先在硬盘中寻址，大概花费10ms，然后我读一个数据可能花费1ms然后我再运算（忽略不计），再写回硬盘又是10ms ，总共21ms</p><p>第二个操作去读花了10ms, 第三个又是写花费了21ms ,然后我再读10ms, 写21ms ，五个请求总共花费83ms，这还是最理想的情况下，这如果在内存中，大概1ms不到。</p><p>所以对于磁盘来说，它吞吐量这么大，那最好的方案肯定是我将N个请求一起放在一个buff里，然后一起去提交。</p><p>方法就是用异步：将请求和处理的线程不绑定，请求的线程将请求放在一个buff里，然后等buff快满了，处理的线程再去处理这个buff。然后由这个buff 统一的去写入磁盘，或者读磁盘，这样效率就是最高。java里的 IO不就是这么干的么~</p><p>对于慢速设备，这种处理方式就是最佳的，慢速设备有磁盘，网络 ，SSD 等等，</p><p>多线程 ，异步的方式处理这些问题非常常见，大名鼎鼎的netty 就是这么干的。</p><p>终于把 redis 为什么是单线程说清楚了，把什么时候用单线程跟多线程也说清楚了，其实也是些很简单的东西，只是基础不好的时候，就真的尴尬。。。。</p><p>补一发大师语录：来说说，为何单核cpu绑定一块内存效率最高</p><p>“我们不能任由操作系统负载均衡，因为我们自己更了解自己的程序，所以我们可以手动地为其分配CPU核，而不会过多地占用CPU”，默认情况下单线程在进行系统调用的时候会随机使用CPU内核，为了优化Redis，我们可以使用工具为单线程绑定固定的CPU内核，减少不必要的性能损耗！</p><p>redis作为单进程模型的程序，为了充分利用多核CPU，常常在一台server上会启动多个实例。而为了减少切换的开销，有必要为每个实例指定其所运行的CPU。</p><p>Linux 上 taskset 可以将某个进程绑定到一个特定的CPU。你比操作系统更了解自己的程序，为了避免调度器愚蠢的调度你的程序，或是为了在多线程程序中避免缓存失效造成的开销。</p><p>顺便再提一句：redis 的瓶颈在网络上 。。。。</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h4 id="使用Redis有什么缺点？"><a href="#使用Redis有什么缺点？" class="headerlink" title="使用Redis有什么缺点？"></a><strong>使用Redis有什么缺点？</strong></h4><ul><li>缓存和数据库双写一致性问题</li><li>缓存雪崩问题</li><li>缓存击穿问题</li><li>缓存的并发竞争问题</li></ul><h4 id="单线程的Redis为什么这么快？"><a href="#单线程的Redis为什么这么快？" class="headerlink" title="单线程的Redis为什么这么快？"></a><strong>单线程的Redis为什么这么快？</strong></h4><ul><li>多路复用</li><li>Resp协议</li><li>单线程</li><li>内存操作</li></ul><p>（面试官会针对这几点详细提问）</p><h4 id="Redis的数据类型及使用场景（这5种类型你用到过几个？）"><a href="#Redis的数据类型及使用场景（这5种类型你用到过几个？）" class="headerlink" title="Redis的数据类型及使用场景（这5种类型你用到过几个？）"></a><strong>Redis的数据类型及使用场景</strong>（这5种类型你用到过几个？）</h4><p><strong>String：</strong>一般做一些复杂的计数功能的缓存；<br><strong>Hash：</strong>存储二维数据或对象；<br><strong>List：</strong>可实现队列，栈及有序的数据存储；<br><strong>Set：</strong>常用于黑名单，微信抽奖等功能，应用场景多变；<br><strong>SortedSet：</strong>做排行榜应用，取TOPN操作；延时任务；做范围查找。</p><h4 id="Redis过期策略和内存淘汰机制？"><a href="#Redis过期策略和内存淘汰机制？" class="headerlink" title="Redis过期策略和内存淘汰机制？"></a><strong>Redis过期策略和内存淘汰机制？</strong></h4><p>这个面试题，我只回答了定期删除，没答全，面试官提出一种惰性删除策略，有点懵，回去查了一下资料才搞明白；</p><h4 id="Redis和数据库双写一致性问题；"><a href="#Redis和数据库双写一致性问题；" class="headerlink" title="Redis和数据库双写一致性问题；"></a><strong>Redis和数据库双写一致性问题；</strong></h4><p>（最终一致性和强一致性）</p><h4 id="如何应对缓存穿透和缓存雪崩问题？"><a href="#如何应对缓存穿透和缓存雪崩问题？" class="headerlink" title="如何应对缓存穿透和缓存雪崩问题？"></a><strong>如何应对缓存穿透和缓存雪崩问题？</strong></h4><p>中小型的公司一般遇不到这些问题，但是大并发的项目，流量有几百万左右，这两个问题一定要深刻考虑。</p><h4 id="如何解决Redis并发竞争Key问题？"><a href="#如何解决Redis并发竞争Key问题？" class="headerlink" title="如何解决Redis并发竞争Key问题？"></a><strong>如何解决Redis并发竞争Key问题？</strong></h4><p>这个没答上来。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1581293738311-c1e14c2513dc?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="redis" scheme="https://lijinhongpassion.github.io/categories/redis/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="redis" scheme="https://lijinhongpassion.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Java-初探HBuilder开发APP</title>
    <link href="https://lijinhongpassion.github.io/codeant/hbuilder1.html"/>
    <id>https://lijinhongpassion.github.io/codeant/hbuilder1.html</id>
    <published>2020-02-02T06:03:08.000Z</published>
    <updated>2020-02-02T03:53:28.295Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1580489647132-f8a797717fa4?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1189&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>时隔几个月，中途都在找工作，没时间学习新东西，所以今天怀着好奇心，简单写个教程，供自己和大家一起查看，如果说有地方写的不对，欢迎大家来交谈。</p><h2 id="APP开发"><a href="#APP开发" class="headerlink" title="APP开发"></a>APP开发</h2><p>现在的安卓APP开发也无非是两种方式：</p><ul><li>原生安卓</li><li>H5</li></ul><p>之前我写过原生的安卓APP的demo，发现原生的安卓开发很繁琐（也因为自己原来十分的菜，当然现在也菜），后面一直想学习一下H5的APP开发，但是对于前端知识我一直不是很敏感，很排挤，所以一直就放下了。说远了，这里我就简单讲一下利用<code>hbuilder</code>开发一个<code>APP</code>并且安装到手机上的教程。<strong>这里不涉及到后端的开发</strong></p><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>jdk8</td><td>利用jdk的keytool生成证书</td></tr><tr><td>hbuilderx或hbuilder</td><td>开发页面并打包</td></tr><tr><td>MUI</td><td>开发APP所用的前端框架，可以了解</td></tr><tr><td>真机安卓手机一台</td><td>测试</td></tr></tbody></table><h4 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h4><h5 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h5><p>创建前端项目，选择mui前端框架中的带有登录和设置的模板</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/hbuilder1/1.png" alt></p><hr><h5 id="填写项目设置"><a href="#填写项目设置" class="headerlink" title="填写项目设置"></a>填写项目设置</h5><p>打开项目下的manifest.json，填写Dcloud appid，申请教程 <a href="https://ask.dcloud.net.cn/article/35907" target="_blank" rel="noopener">https://ask.dcloud.net.cn/article/35907</a> </p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/hbuilder1/2.png" alt></p><p>设置app图标</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/hbuilder1/2.png" alt></p><hr><h5 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h5><p>这里我编写了一个bat脚本，该脚本运行的前提是 你的java环境变量配置好了</p><p>密钥生成的参考网址为：<a href="https://blog.csdn.net/weixin_42036591/article/details/88752679" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42036591/article/details/88752679</a></p><p><strong>记住输入的密钥口令，后面填写需要</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">@title 证书生成 -- 前提 jdk8</span><br><span class="line"></span><br><span class="line">rem 本脚本编写逻辑参考一下网址：https://blog.csdn.net/weixin_42036591/article/details/88752679</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> java_home=%JAVA_HOME%;</span><br><span class="line"></span><br><span class="line">rem 截取字符串，去除分号</span><br><span class="line">rem 进入java的bin目录下</span><br><span class="line"><span class="built_in">cd</span> /d %java_home:~0,-1%<span class="string">"/bin"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rem 开始生成证书</span><br><span class="line">rem keytool  -genkey  -<span class="built_in">alias</span>  证书别名  -keyalg  RSA   -validity 100 -keystore ceshi.keystore</span><br><span class="line">keytool  -genkey  -<span class="built_in">alias</span>  ceshi  -keyalg  RSA   -validity 100 -keystore ceshi.keystore</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"在打开的文件夹中搜索.keystore后缀的密钥文件"</span></span><br><span class="line">start <span class="string">""</span> %java_home:~0,-1%<span class="string">"/bin"</span></span><br><span class="line"> </span><br><span class="line">pause</span><br></pre></td></tr></table></figure><hr><h5 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h5><p>打包也有两种打包方式：</p><ul><li>云打包（推荐）</li><li>本地打包</li></ul><p>这里说一下云打包，发行-&gt;原生app-云打包</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/hbuilder1/3.png" alt></p><hr><h5 id="打包成功"><a href="#打包成功" class="headerlink" title="打包成功"></a>打包成功</h5><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/hbuilder1/4.png" alt></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/hbuilder1/5.gif" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1580489647132-f8a797717fa4?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1189&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="Java" scheme="https://lijinhongpassion.github.io/tags/Java/"/>
    
      <category term="app" scheme="https://lijinhongpassion.github.io/tags/app/"/>
    
      <category term="hbuilder" scheme="https://lijinhongpassion.github.io/tags/hbuilder/"/>
    
      <category term="mui" scheme="https://lijinhongpassion.github.io/tags/mui/"/>
    
  </entry>
  
  <entry>
    <title>2019年下半年计划</title>
    <link href="https://lijinhongpassion.github.io/codeant/1231.html"/>
    <id>https://lijinhongpassion.github.io/codeant/1231.html</id>
    <published>2019-12-31T05:02:43.000Z</published>
    <updated>2019-10-12T01:23:34.781Z</updated>
    
    <content type="html"><![CDATA[<hr><p><blockquote><strong>2019下半年规划</strong></blockquote><br><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/1231/2019年度计划.png" alt="2019下半年规划"></p><p><blockquote>非常喜欢的视频，侵删！</blockquote></p><h2 id><a href="#" class="headerlink" title=" "></a><div style="position: relative;margin-bottom: 30px;float: left;width: 100%; height: 0;padding-bottom: 75%;"><iframe src="//player.youku.com/embed/XNDM4MzgxMzEzMg==" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute;width: 100%;height: 100%;left: 0;top: 0;"> </iframe></div></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;&lt;blockquote&gt;&lt;strong&gt;2019下半年规划&lt;/strong&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion
      
    
    </summary>
    
    
      <category term="年度计划" scheme="https://lijinhongpassion.github.io/tags/%E5%B9%B4%E5%BA%A6%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-Neo4j实战之入门案例理解neo4j</title>
    <link href="https://lijinhongpassion.github.io/codeant/neo4j2.html"/>
    <id>https://lijinhongpassion.github.io/codeant/neo4j2.html</id>
    <published>2019-11-14T07:16:10.000Z</published>
    <updated>2019-11-14T07:37:38.796Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1573666008508-3825beb91997?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="1-简述"><a href="#1-简述" class="headerlink" title="1 简述"></a>1 简述</h2><p>本文只介绍一个例子，参照更多示例可以查看书本第二章</p><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2 示例"></a>2 示例</h2><p>假设人与人之间并不是一种朋友的关系，而你感兴趣的是人群之间的关联模型。一个组可能包含几个人，并且一个人也可能属于多个组。在传统的关系数据库中，通常会使用三个表的模型表达这种情景：一个人员表、一个组表和一个用于连接人和组的多对多关系链接表，如图2-1所示。</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/neo4j2/2.1.1.png" alt></p><p>在Neo4j中，你可以将用户和组以同样的模型描述为节点，将组成员描述为节点之间的关系，如图2-2所示。</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/neo4j2/2.1.2.png" style="zoom:50%;"></p><p>在这里你大致可以看到节点是图形数据库的数据模型实体（与RDBMS的术语对应），而关系勿庸置疑是节点之间的关系或连接。用纯语言表达这个图表的关系就是“一个人属于一个组”。</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/neo4j2/2.1.3.png" style="zoom:50%;"></p><p>图2-2所示的模式出现在图2-3的几个地方。事实上，整个图2-3可以通过叠加几次图2-2得到。</p><p>当查询这个模型中的数据时，可能有两个问题需要回答。首先，对于一个给定的人，这个人属于哪个组？第二，对于一个给定的组，哪些人属于这个组？使用Neo4j的查询语言Cypher很容易实现。</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/neo4j2/code1.png" alt></p><p>看上去这种模式适合我们的实例。通过从“一个人属于一个组”的简单关系开始，我们仅仅通过重复这种关系就能生成一个复杂的图形。我们最初的图2-2实际上代表了整个图形</p><p>对于更复杂的模型，有时按相反的方向思考更容易理解。可以首先在系统中画一张图把例子中所有不同的东西表示为节点，然后绘制箭头表示出这些节点之间的所有不同种类的关系。一旦开始看到重复的图案，就可以把它们拉出来并把它们归属为更小的图片单元。</p><h2 id="3-复杂示例"><a href="#3-复杂示例" class="headerlink" title="3 复杂示例"></a>3 复杂示例</h2><p>让我们多看几个不同的例子，看看它是如何分解成更小的图案的。在大型组织中，基于用户不同的角色、不同的任务和不同的组别授予其权限访问不同的系统。下面是用户可能具有的访问权限示例。</p><ul><li>直接的——你有权限访问共享文件系统中你自己文件夹中的文件。</li><li>基于某任务——作为数据库的管理员，你有权限连接到数据库控制台。</li><li>基于组成员——作为市场和销售团队的成员，你有权限连接到联系人管理系统。</li><li>基于对组所有成员指定的任务——作为一个开发团队的成员，所有的成员都有源代码控制提交的任务，都有权限从源代码库中取出代码并进行修改后返回原代码库。</li></ul><p>图2-4是一个未连接的授予这些权限的访问控制系统图。</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/neo4j2/2.4.png" style="zoom:50%;"></p><p>图2-5显示了所绘实体之间可能存在的关系的同一图形。</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/neo4j2/2.5.png" style="zoom:50%;"></p><p>正如你所看到的，有几种从用户到权限的可能路径。为了找出一个用户所拥有的权限，你需要找出一个用户节点通过任何途径连接的所有权限节点。在传统的关系数据库中，这需要一个复杂的查询表达每一个不同路径的join操作。</p><ul><li>从用户直接到权限（一表join操作）。</li><li>从用户到组再到权限（二表join操作）。</li><li>从用户到任务再到权限（二表join操作）。</li><li>从用户到组、到任务再到权限（三表join操作）。</li></ul><p>使用Cypher，一个短的查询即可实现：</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/neo4j2/code2.png" alt></p><p>这将匹配任何第一个具有用户标签且其指定的属性值为姓名（name）的节点与第二个标记为权限节点的节点对，并且在它们之间有一个可以是任意长度的路径。最后，返回所有匹配了的权限名称。</p><p>现在假设你想对这个模型添加一个新功能，以反映组织的层次结构。用户不仅可以属于组，组还可以是较大组的下级组，例如，Tester、UXDesigner和Coder，可能隶属于开发组的小组。图2-6显示了在组之间具有下级组（subgroup_of）隶属关系扩展的新模型。</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/neo4j2/2.6.png" style="zoom:50%;"></p><p>要改变关系数据库的查询以支持此模型的方案可不是一件容易的事，而最初模型的Cypher查询也完全适合这一扩展的模型，因为对用户查询一个权限与查询一个关系没有任何区别。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>看见具体的案例过后，在关系复杂的实体类中，会发现确实比RDBMS方便很多，下一章节会对neo4j开发入门进行总结</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1573666008508-3825beb91997?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="neo4j" scheme="https://lijinhongpassion.github.io/categories/neo4j/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="neo4j" scheme="https://lijinhongpassion.github.io/tags/neo4j/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-Neo4j实战之Neo4j概述</title>
    <link href="https://lijinhongpassion.github.io/codeant/neo4j1.html"/>
    <id>https://lijinhongpassion.github.io/codeant/neo4j1.html</id>
    <published>2019-11-14T07:11:00.000Z</published>
    <updated>2019-11-14T07:38:23.399Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1571942676558-281b2f9b1f8d?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1189&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><p>读书笔记</p><h2 id="1-简述neo4j"><a href="#1-简述neo4j" class="headerlink" title="1 简述neo4j"></a>1 简述neo4j</h2><h4 id="1-1-特点"><a href="#1-1-特点" class="headerlink" title="1.1 特点"></a>1.1 特点</h4><ul><li>图数据库</li><li>支持事务</li><li>nosql数据库</li></ul><h4 id="1-2-组成元素"><a href="#1-2-组成元素" class="headerlink" title="1.2 组成元素"></a>1.2 组成元素</h4><ul><li>节点（表示实体，例如用户）</li><li>关系（实体类之间的关系，例如朋友关系）</li><li>属性（节点和关系都具有属性，例如节点有名字属性、类型属性）</li></ul><p><strong>例子：</strong></p><p>有用户和地址两种类型的<strong>节点</strong>，用户节点有名字（name）、年龄（age）、喜欢的颜色(favoriteColor)三个<strong>属性</strong>，用户和地址之间有<code>has_address</code><strong>关系</strong>，关系有是否为现住址（is_current）的<strong>属性</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/neo4j1/relation.png" alt></p><h4 id="1-3-作用领域"><a href="#1-3-作用领域" class="headerlink" title="1.3 作用领域"></a>1.3 作用领域</h4><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/neo4j1/1.6.5.png" alt></p><h4 id="1-4-性能（参照书本1-4章节）"><a href="#1-4-性能（参照书本1-4章节）" class="headerlink" title="1.4 性能（参照书本1.4章节）"></a>1.4 性能（参照书本1.4章节）</h4><p>通过比较，在大数据的环境下，对于社交网络的遍历，关系型数据库明显弱于图数据库，原因如下：</p><ul><li><strong>图数据库进行的是局部遍历</strong></li></ul><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/neo4j1/1.4-mysql.png" alt></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/neo4j1/1.4-neo4j.png" alt></p><h2 id="2-总结"><a href="#2-总结" class="headerlink" title="2 总结"></a>2 总结</h2><p>neo4j用户处理关系复杂的实体类，例如社交网络等，因为是<code>图</code>的数据结构，所以遍历（深度遍历和广度遍历）起来更加快速便捷，下一章节会举例说明。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1571942676558-281b2f9b1f8d?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1189&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="neo4j" scheme="https://lijinhongpassion.github.io/categories/neo4j/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="neo4j" scheme="https://lijinhongpassion.github.io/tags/neo4j/"/>
    
  </entry>
  
</feed>
