<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code Ant&#39;s Blog</title>
  
  <subtitle>“每天进步一点点”</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lijinhongpassion.github.io/"/>
  <updated>2020-03-17T07:24:00.783Z</updated>
  <id>https://lijinhongpassion.github.io/</id>
  
  <author>
    <name>Code Ant</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>代写课程/毕设（包售后、远程调试）</title>
    <link href="https://lijinhongpassion.github.io/codeant/kcsj.html"/>
    <id>https://lijinhongpassion.github.io/codeant/kcsj.html</id>
    <published>2020-12-30T08:04:28.000Z</published>
    <updated>2020-03-17T07:24:00.783Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/kcsj/bd.webp" alt></p><a id="more"></a><hr><h1 id="目录见右下脚（看具体的毕设系统），联系方式见文末"><a href="#目录见右下脚（看具体的毕设系统），联系方式见文末" class="headerlink" title="目录见右下脚（看具体的毕设系统），联系方式见文末"></a><font color="#dd0000">目录见右下脚（看具体的毕设系统），联系方式见文末</font></h1><h1 id="页面中图片加载较慢，请耐心等待"><a href="#页面中图片加载较慢，请耐心等待" class="headerlink" title="页面中图片加载较慢，请耐心等待"></a><font color="#dd0000">页面中图片加载较慢，请耐心等待</font></h1><h1 id="写在前面（必读）"><a href="#写在前面（必读）" class="headerlink" title="写在前面（必读）"></a>写在前面（必读）</h1><p><strong>各毕设中使用的技术和系统用处不一定准确和全面，具体使用技术建议参考代码。</strong></p><p>文中的各毕设不一定每一个都非常的完美，有些包含代码+论文，选其中一个自己觉得不错的，用来做毕设。</p><p><strong>论文可以参考，但是不建议直接照搬，因为毕竟要查重</strong></p><h2 id="各毕设开发环境"><a href="#各毕设开发环境" class="headerlink" title="各毕设开发环境"></a>各毕设开发环境</h2><p>由于各个毕设的开发环境可能不同，包括各种编辑器，如：<code>IDEA</code>、<code>Eclipse</code>、<code>MyEclipse</code>，数据库：<code>Mysql</code>、<code>SQL Server</code>、<code>Oracle</code>等。</p><h1 id="业务范围"><a href="#业务范围" class="headerlink" title="业务范围"></a>业务范围</h1><p><strong>业务范围为：</strong></p><ul><li>Java<strong>课程设计</strong>（拥有大量的成品 <strong>【 源码+论文 】</strong>）<ul><li>Java web<strong>毕业设计</strong><ul><li>Python爬虫<ul><li>C/C++<ul><li><strong>大学各种小作业</strong>（sql编写、uml、html、计算机网络、数据结构、网络协议等大量成品）<ul><li><strong><font color="#dd0000">Java web商业单请加微信详谈</font> </strong></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><p><strong>学习资料有偿分享：</strong></p><p><strong>电脑实用工具：</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/kcsj/技巧工具.png" alt></p><p><strong>PPT成套模板：</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/kcsj/ppt.png" alt></p><p><strong>技术视频：</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/kcsj/视频.png" alt></p><hr><h1 id="最新毕设成品（2019-9-至今）"><a href="#最新毕设成品（2019-9-至今）" class="headerlink" title="最新毕设成品（2019.9~至今）"></a>最新毕设成品（2019.9~至今）</h1><font color="#dd0000">页面中图片加载较慢，请耐心等待</font><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/kcsj/new1.png" alt></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/kcsj/new2.png" alt></p><h1 id="毕业设计项目介绍"><a href="#毕业设计项目介绍" class="headerlink" title="毕业设计项目介绍"></a>毕业设计项目<strong>介绍</strong></h1><p>各毕业设计项目将按行业进行分类，从中选取你想选择的毕业设计即可。</p><p>产品保证能够正常运行</p><h2 id="互联网和移动互联网"><a href="#互联网和移动互联网" class="headerlink" title="[ 互联网和移动互联网 ]"></a>[ 互联网和移动互联网 ]</h2><hr><h3 id="项目一：jsp网上招标系统"><a href="#项目一：jsp网上招标系统" class="headerlink" title="项目一：jsp网上招标系统"></a>项目一：jsp网上招标系统</h3><p><strong>介绍</strong></p><blockquote><p>jsp网上招标系统主要用于实现会员的发布任务和接收任务的功能，<br>基本功能包括<br>（1）注册用户部分<br>  1：查看网站流程：查看与网站有关的流程信息，及相关的新闻公告。<br>  2：发布网站留言信息：根据系统提示，发布网站的留言信息。<br>  3：查看已发布的信息：以列表的形式查看已发布信息。<br>  4：发布威客在线信息：根据系统提示，发布网站的留言信息。<br>  5：查看网站成交记录：根据系统提示，查看成交记录信息。</p><p>（2） 管理员部分<br>  1：编辑系统用户信息：添加、编辑用户信息，包括发布者和管理员，以列表的形式显示；<br>  2：编辑网站留言信息：以列表的形式显示网站留言信息，并可对其进行删除等编辑操作；<br>  3：数据备份：不定期进行系统数据备份，以防万一。</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用的技术</strong>：Servlet + JDBC+ JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目二：城市公交查询系统"><a href="#项目二：城市公交查询系统" class="headerlink" title="项目二：城市公交查询系统"></a>项目二：城市公交查询系统</h3><p><strong>介绍</strong></p><blockquote><p>我国许多城市都有一些颇具设计感的公交站台,但我们却很难在这里找到我们出行需要的信息。因此，居民想要找到“静态线路信息”或者“动态实时信息”都感到十分困难。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用的技术：</strong>Servlet + JDBC+ JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目三：基于JSP动漫论坛"><a href="#项目三：基于JSP动漫论坛" class="headerlink" title="项目三：基于JSP动漫论坛"></a>项目三：基于JSP动漫论坛</h3><p><strong>介绍</strong></p><blockquote><p>动漫论坛项目主要用于实现动漫爱好者的互相交流，基本功能包括：注册用户、登录、浏览帖子、发布新帖、回复帖子、等。本系统结构如下：<br>（1）普通用户：<br>  注册用户：如果用户为非会员用户，通过注册，经审核通过之后成为会员，获得一个登陆身份；<br>  登录：如果用户已经是注册会员，可以进行登录，登陆后实现别的功能；<br>  浏览帖子：用户查看系统中的帖子，了解最新的资讯和各种动态等信息；<br>  发布新帖：用户可以发表一些帖子，来与其他论坛用户共享信息；<br>  回复帖子：对于自己或者别的会员发表的帖子，可以进行回复。<br>（2）管理员：<br>  管理员登录：对于已经登录的用户，若权限为管理员，可以进行管理员的登录，登陆之后才能有权限进行下一步操作；<br>  帖子管理：管理员可以对发表的帖子进行查询、修改、删除等操作，对好的帖子进行标识，删除或转移不适合的帖子；<br>  模块管理：论坛中的模块，管理员可对其进行添加、修改、删除等操作；<br>  用户管理：用户注册成功后，管理员可以对用户进行添加、删除操作。<br>（3）游客：<br>  游客可以对论坛进行访问，浏览帖子的功能，但不能参与回复操作，也没有发布帖子的权限。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Struts 1 + JDBC+ JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目四：个人博客系统"><a href="#项目四：个人博客系统" class="headerlink" title="项目四：个人博客系统"></a>项目四：个人博客系统</h3><p><strong>介绍</strong></p><blockquote><p>个人博客系统主要用于发表个人博客，记录个人生活日常，学习心得，技术分享等，供他人浏览，查阅，评论等。</p><p>（1）博主端：<br>  登录模块：登入后台管理系统：首先进入登录页面，需要输入账号和密码。它会使用Shiro进行安全管理，对前台输入的密码进行加密运算，然后与数据库中的进行比较。成功后才能登入后台系统。<br>  博客管理模块：博客管理功能分为写博客和博客信息管理。写博客是博主用来发表编写博客的，需要博客标题，然后选择博客类型，最后将博客内容填入百度的富文本编辑器中，点击发布博客按钮即可发布博客。<br>  博客类别管理模块：博主类别管理系统可以添加，修改和删除博客类型名称和排序序号。将会显示到首页的按日志类别区域。 游客可以从这里查找相关的感兴趣的博客内容<br>  评论信息管理模块：评论管理功能分为评论审核和评论信息管理两部分。评论审核是当有游客或自己发表了评论之后，博主需要在后台管理系统中审核评论。若想将此评论显示在页面上则点击审核通过，否则点击审核不通过。<br>  个人信息管理模块：修改博主的个人信息，可以修改昵称，个性签名，可以添加个人头像，修改个人简介；<br>  系统管理功能模块：友情<strong>链接</strong>管理，修改密码，刷新系统缓存和安全退出，友情<strong>链接</strong>管理可以添加，修改，删除友情<strong>链接</strong>网址<br>（2）游客端：<br>  查询博客：查询具体哪一篇博客<br>  查看博客内容：查看博客内容<br>  查看博主个人信息：查看博主个人简介<br>  发表评论：可以评论具体某篇博客<br>  友情链接：查看友情<strong>链接</strong></p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring + Spring MVC + Mybatis + JSP</li><li><strong>开发工具：</strong>未知</li></ul><hr><h3 id="项目五：网上拍卖系统"><a href="#项目五：网上拍卖系统" class="headerlink" title="项目五：网上拍卖系统"></a>项目五：网上拍卖系统</h3><p><strong>介绍</strong></p><blockquote><p>基于B2C的网上拍卖系统主要用于帮助人们应用互联网方便快捷买到自己所中意的商品，并参与到秒杀与竞拍当中。</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Spring + Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目六：电子书下载系统"><a href="#项目六：电子书下载系统" class="headerlink" title="项目六：电子书下载系统"></a>项目六：电子书下载系统</h3><p><strong>介绍</strong></p><blockquote><p>基于JAVA_JSP电子书下载系统主要用功能包括：</p><p>（1）后台管理:<br>  个人信息管理：实现个密码信息的修改<br>  会员信息管理：实现会员信息的查询、删除<br>  点券充值管理：实现充值信息的查询、审核、删除<br>  类别信息管理：实现图书类别信息增加、删除、修改、查看功能<br>  电子书信息管理：实现电子书信息的增加、删除、修改、查看功能<br>  留言公告管理：实现公告信息的增加、删除、修改、查看功能实现留言信息的查询和删除<br>（2）前台管理：<br>  实现电子书信息的分类查询、作者、书名查询<br>  实现用户信息的注册<br>  实现用户的登录和退出<br>  实现登录用户的留言、重置、书籍下载</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目七：影视创作论坛"><a href="#项目七：影视创作论坛" class="headerlink" title="项目七：影视创作论坛"></a>项目七：影视创作论坛</h3><p><strong>介绍</strong></p><blockquote><p>基于Javaee的影视创作论坛主要用功能包括：</p><p>（1）后台管理:<br>  管理模块：管理员的登录与退出、管理员个人信息的设置<br>  电影管理模块：电影信息的增加、删除、修改、电影分类信息的增加、删除、修改、查看功能<br>  影评管理模块：实现影评信息的增加、删除、修改、查看功能<br>  预告管理模块：实现预告片信息的增加、删除、修改、查看功能<br>  海报管理模块：实现海报信息的增加、删除、修改、查看功能<br>  公告管理模块：实现公告信息的增加、删除、修改、查看功能<br>（2）前台管理：<br>  实现网站首页数据展示、海报展示、预告片浏览、公告预览等<br>  实现电影影评的评论发表、查询评论<br>  站内数据搜索<br>  用户的登录和退出</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目八：Java记账管理系统"><a href="#项目八：Java记账管理系统" class="headerlink" title="项目八：Java记账管理系统"></a>项目八：Java记账管理系统</h3><p><strong>介绍</strong></p><blockquote><p>Java记账管理系统主要用于财务人员可以从账务中判断公司的发展方向。对个人和家庭而言，通过记账可以制定日后的 消费计划，这样才能为理财划出清晰合理的线条。<br>（1）用户注册：<br>  用户通过注册功能注册成功后跳转至登录页面方便登录<br>（2）用户登录：<br>  用户登录成功后：<br>  信息管理：用户可以修改个人的信息<br>  财务管理：用户可以查看自己的财务信息和做一些新的财务记录<br>  财务统计：用户可以查看自己的月收支或年收支，以便做到心里有数<br>（3）管理员登录：<br>  管理员信息管理：可以对管理员信息进行一些基本操作<br>  用户信息管理：可以对用户进行查询和删除等操作，以便管理用户群</p></blockquote><ul><li><strong>数据库：</strong>Oracle</li><li><strong>使用技术：</strong>Servlet + Mybatis + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目九：新闻发布及管理系统"><a href="#项目九：新闻发布及管理系统" class="headerlink" title="项目九：新闻发布及管理系统"></a>项目九：新闻发布及管理系统</h3><p><strong>介绍</strong></p><blockquote><p>Java新闻发布系统新闻发布及管理系统就是一个能够在网上实现新闻的发布及管理，让人们更好的获取更新的新闻资讯。<br>（1）用户管理：<br>  用户注册：新用户注册<br>  用户登录：新用户登录<br>  找回密码：忘记密码找回密码<br>  用户评论：发表对新闻的评论<br>（2）管理员管理：<br>  系统账号管理：管理员管理系统现有账号，进行删除停用等操作<br>  系统公告管理：系统公告的发布和删除<br>  新闻栏目管理：新闻栏目的新增和删除<br>  新闻资讯管理：新闻资讯的新增和删除<br>  注册用户管理：注册用户的删除和冻结<br>  友情链接管理：添加和删除友情<strong>链接</strong>功能<br>  新闻评论管理：删除用户不当评论</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC+ JSP</li><li><strong>开发工具：</strong>未知</li></ul><hr><h3 id="项目十：任务调度系统"><a href="#项目十：任务调度系统" class="headerlink" title="项目十：任务调度系统"></a>项目十：任务调度系统</h3><p><strong>介绍</strong></p><blockquote><p>任务调度试系统，基本功能包括：用户的注册、用户的登录、发起项目、项目详细及搜索等。本系统结构如下：<br>（1）用户的注册登录：<br>  注册模块：完成用户注册功能；<br>  登录模块：完成用户登录功能；<br>（2）发起项目：<br>  发起项目模块：完成了项目及项目下一个或者多个任务的添加；<br>  项目详细:点击项目名称，可以看到项目及任务详细信息;<br>  搜索项目:完成对项目名称的模糊搜索功能</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring+ Spring MVC + Hibernate + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目十一：基于网络爬虫技术的网络新闻分析"><a href="#项目十一：基于网络爬虫技术的网络新闻分析" class="headerlink" title="项目十一：基于网络爬虫技术的网络新闻分析"></a>项目十一：基于网络爬虫技术的网络新闻分析</h3><p><strong>介绍</strong></p><blockquote><p>基于网络爬虫技术的网络新闻分析主要用于网络数据爬取。本系统结构如下：<br>（1）网络爬虫模块。<br>（2）中文分词模块。<br>（3）中3文相似度判定模块。<br>（4）数据结构化存储模块。<br>（5）数据可视化展示模块。</p></blockquote><ul><li><strong>数据库：</strong>无（数据保存方式为直接生成图表）</li><li><strong>使用技术：</strong>HttpClietn + IK分词器 + 相似度算法</li><li><strong>开发工具：</strong>未知</li></ul><hr><h3 id="项目十二：旅游网站设计与实现"><a href="#项目十二：旅游网站设计与实现" class="headerlink" title="项目十二：旅游网站设计与实现"></a>项目十二：旅游网站设计与实现</h3><p><strong>介绍</strong></p><blockquote><p>塞北村镇旅游网站设计主要用于实现旅游景点信息管理，基本功能包括：主界面模块设计，用户注册模块，旅游景点模块，酒店预订模块，后台管理模块等。本系统结构如下：<br>（1）主界模块设计：<br>  首页效果、首页塞北人文、首页酒店信息、首页景点信息、自驾游路线<br>  首页天气预报、在线留言、用户注册、首页后台登录<br>（2）用户注册模块：<br>  用户注册完成后，经过管理员的审核以后方能成功登录。<br>  用户注册成功以后，可以进行预订管理，个人信息管理以及旅游路线管理等功能<br>（3）旅游景点模块：<br>  供用户快速便捷的搜索到自己想要的旅游景点信息。<br>  景点信息展示、景点名称查询、旅游景点效果图，该部分风景的查询与显示。<br>（4）酒店预定模块：<br>  客户登录，可以进行具体资料查看操作。<br>  酒店详细信息、酒店预订、酒店预订成功、酒店预订成功列表所示，可以清晰的展现出酒店订购模块的具体操作和运行效果。<br>（5）后台管理设计：<br>  管理员登录后，可以实施各种操作。实现对网站基本信息的管理。<br>  系统功能列表里主要包括：<br>      1.账号管理，在这里管理员可以修改个人信息，包括密码和个人资料等等。<br>      2.用户注册管理部分是对该网站的申请注册的用户进行验证通过，管理员可以对所有用户进行删除修改和审核。<br>      3.塞北人文添加模块主要是对该网站中塞北人文的管理，管理员可以对塞北人文进行更新修改和删除。<br>      4.塞北故事管理模块。<br>      5.塞北景点进行操作。<br>      6.自驾游路线管理。<br>      7.酒店信息管理模块。<br>      8.留言板管理较为简单。<br>      9.最后包括修改密码和退出登录模块。</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目十三：搜索引擎"><a href="#项目十三：搜索引擎" class="headerlink" title="项目十三：搜索引擎"></a>项目十三：搜索引擎</h3><p><strong>介绍</strong></p><blockquote><p>经过对搜索引擎的研究同时与Lucene自身的特性相结合，搜索引擎需要实现的功能阐述如下：<br>  （1）支持桌面文件搜索,格式包括txt、doc、xls和ppt;<br>  （2）支持分词查询<br>  （3）支持全文搜索<br>  （4）能够高亮显示搜索关键字<br>  （5）显示查询所用的时间<br>  （6）显示搜索历史、过滤关键字</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Lucene + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目十四：网上招聘系统"><a href="#项目十四：网上招聘系统" class="headerlink" title="项目十四：网上招聘系统"></a>项目十四：网上招聘系统</h3><p><strong>介绍</strong></p><blockquote><p>网上招聘系统，包含俩个角色：个人和公司角色。本系统结构如下：个人角色<br>  （1）首页：显示个人可以申请职位的公司信息，实现了查询、申请职位功能<br>  （2）个人信息修改：实现了对个人信息（简历）的修改<br>  （3）下载简历：实现对简历的下载<br>  （4）发布简历<br>  （5）撤销简历<br>  （6）消息通知：实现了对已申请公司是否通过功能<br>公司角色<br>  （1）首页：显示所有申请公司职位的求职者信息<br>  （2）公司信息修改：实现了对公司信息的修改<br>  （3）发布招聘信息<br>  （4）撤销招聘信息<br>  （5）求职者通知：实现了对已申请公司职位的求职者是否通过功能</p></blockquote><ul><li><strong>数据库：</strong>Oracle</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目十五：文章发布系统"><a href="#项目十五：文章发布系统" class="headerlink" title="项目十五：文章发布系统"></a>项目十五：文章发布系统</h3><p><strong>介绍</strong></p><blockquote><p>文章发布系统项目，基本功能包括：网站信息、基础信息、系统管理、个人信息等。本系统结构如下：<br>（1）网站信息：<br>  文章管理：实现添加文章，查询文章功能<br>  文章评论管理：实现根据评论信息查询功能<br>  联系我们：实现对公司信息的修改功能<br>  网站公告:实现对网站公告的修改功能<br>  留言板：实现对留言的回复、删除功能<br>（2）基础信息：<br>  会员管理：实现对会员的显示、查询功能<br>  文章类别管理：实现对文章类别的增加、删除、修改、查询功能<br>（3）系统管理：<br>  添加管理员：实现管理员的添加功能<br>  管理员维护：实现对管理员的修改、删除、查询功能</p><p>（4）个人信息：<br>  基本资料管理：实现对个人资料的修改功能<br>  修改登陆密码：实现修改旧密码功能</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring + Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目十六：物流信息网"><a href="#项目十六：物流信息网" class="headerlink" title="项目十六：物流信息网"></a>项目十六：物流信息网</h3><p><strong>介绍</strong></p><blockquote><p>物流信息网主要用于实现网上自主物流，基本功能包括：登录、查询、时效查询、价格查询、注册等。本系统结构如下：<br>（1）普通用户：<br>  登录：账号、密码；<br>  查询：通过快递编号进行查询；<br>  时效查询：根据出发地和接收地进行查询；<br>  价格查询：根据出发地，接收地以及重量进行查询；<br>  注册：用户进行注册；<br>  合作伙伴：和各个物流公司进行合作。<br>（2）管理员：<br>  管理员登录：对于已经登录的用户，若权限为管理员，可以进行管理员的登录，登陆之后才能有权限进行下一步操作；<br>  物流管理：对物流进行增删改查操作；<br>  地址管理：对物流的到达地址进行管理；<br>  用户管理：用户注册成功后，管理员可以对用户进行添加、删除操作。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目十七：项目管理平台"><a href="#项目十七：项目管理平台" class="headerlink" title="项目十七：项目管理平台"></a>项目十七：项目管理平台</h3><p><strong>介绍</strong></p><blockquote><p>在我国，某些高校或企业一直使用传统人工的方式管理文件档案，这种管理方式存在着许多缺点,如:效率低、保密性差,另外时间一长,将产生大量的文件和数据,这对于查找、更新和维护都带来了不少的困难。作为计算机应用的一部分,使用计算机对文件档案信息进行管理,具有手工管理所无法比拟的优点。所以建立项目管理系统，使管理自动化，提高信息处理的速度和准确性十分必要。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h2 id="企业管理系统"><a href="#企业管理系统" class="headerlink" title="[ 企业管理系统 ]"></a>[ 企业管理系统 ]</h2><hr><h3 id="项目一：CRM客户管理系统"><a href="#项目一：CRM客户管理系统" class="headerlink" title="项目一：CRM客户管理系统"></a>项目一：CRM客户管理系统</h3><p><strong>介绍</strong></p><blockquote><p>基本功能包括客户管理，角色管理以及产品管理。</p><p>（1）客户管理</p><p>​     客户的增加，修改，删除以及查询</p><p>（2）角色管理</p><p>角色的新增和修改。</p><p>（3）产品管理</p><p>​     产品的增加，修改，删除以及查询</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring + Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目二：企业合同管理系统"><a href="#项目二：企业合同管理系统" class="headerlink" title="项目二：企业合同管理系统"></a>项目二：企业合同管理系统</h3><p><strong>介绍</strong></p><blockquote><p>JAVA_JSP企业合同管理系统主要用于实现企业合同的管理，<br>基本功能包括：修改个人密码、合同信息管理、收款提醒模块、安全退出系统等。本系统结构如下：<br>（1）修改个人密码模块：<br>  修改个人密码：实现修改个人密码功能；<br>（2）合同信息管理模块：<br>  合同信息管理：实现合同信息的展示、删除、添加功能；<br>  合同信息录入：实现合同信息的添加功能；<br>  合同信息查询：实现合同信息的查询功能；<br>（3）收款提醒模块：<br>  添加收款提醒： 实现收款提醒的添加功能；<br>  添加收款管理： 实现收款提醒的展示、删除功能；</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>未知</li></ul><hr><h3 id="项目三：企业电子投票系统"><a href="#项目三：企业电子投票系统" class="headerlink" title="项目三：企业电子投票系统"></a>项目三：企业电子投票系统</h3><p><strong>介绍</strong></p><blockquote><p>javaEE健康管理系统主要功能包括：投票、查看投票结果、隐藏/公布投票结果、编辑投票主题等等。本系统结构如下：<br>1.普通用户模块：<br>  1).实现登录功能<br>  2).实现用户登录的退出<br>  3).用户可以对已经开放的主题投票<br>  4).用户可以查看所有已公布了结果的主题的投票结果<br>2.管理员模块：<br>  1).实现登录功能<br>  2).实现用户登录的退出<br>  3).在后台撤销/恢复某个主题，被撤销的主题在前台不可见<br>  4).永久删除某个主题<br>  5).公布/隐藏某主题的投票结果<br>  6).编辑投票主题<br>  7).发布新主题<br>  8).新增/删除用户</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>未知</li></ul><hr><h3 id="项目四：企业快信系统"><a href="#项目四：企业快信系统" class="headerlink" title="项目四：企业快信系统"></a>项目四：企业快信系统</h3><p><strong>介绍</strong></p><blockquote><p>javaEE健康管理系统主要功能包括：投票、查看投票结果、隐藏/公布投票结果、编辑投票主题等等。本系统结构如下：<br>1.普通用户模块：<br>  1).实现登录功能<br>  2).实现用户登录的退出<br>  3).用户可以对已经开放的主题投票<br>  4).用户可以查看所有已公布了结果的主题的投票结果<br>2.管理员模块：<br>  1).实现登录功能<br>  2).实现用户登录的退出<br>  3).在后台撤销/恢复某个主题，被撤销的主题在前台不可见<br>  4).永久删除某个主题<br>  5).公布/隐藏某主题的投票结果<br>  6).编辑投票主题<br>  7).发布新主题<br>  8).新增/删除用户</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Struts2 + JDBC + JSP</li><li><strong>开发工具：</strong>未知</li></ul><hr><h3 id="项目五：固定资产管理系统"><a href="#项目五：固定资产管理系统" class="headerlink" title="项目五：固定资产管理系统"></a>项目五：固定资产管理系统</h3><p><strong>介绍</strong></p><blockquote><p>187固定资产管理系统是对高校固定资产的一个信息化管理系统，基本功能包括：对固定资产的购进、接触、销毁，对物品的使用状态、借出状态、库存状态等进行标识，对各类物品进行编号，根据编号进行查询，根据名称进行查询等。本系统结构如下：<br>（1）系统登录：<br>  用户登录模块：登录功能<br>（2）系统用户管理：<br>  对系统用户的增加<br>  系统用户的权限修改<br>  系统用户的删除<br>  分配系统用户的权限<br>  修改本身登录密码<br>  资产的相关维护<br>（3）员工信息管理：<br>  教工的增加、修改、删除、查询<br>（4）资产入库管理：<br>  资产的录入<br>  资产的属性修改<br>  资产的报废删除<br>  资产的属性查询<br>（5）资产维护管理：<br>  物资的维修、维护物资的信息修改<br>（7）资产借还管理：<br>  增加借出资产<br>  查询借出资产<br>  归还已借出资产</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring + Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目六：企业车辆管理系统"><a href="#项目六：企业车辆管理系统" class="headerlink" title="项目六：企业车辆管理系统"></a>项目六：企业车辆管理系统</h3><p><strong>介绍</strong></p><blockquote><p>通过计算机，能够直接“透视”车辆使用情况，数据计算自动完成，尽量减少人工干预，可以使用车信息更加规范化、透明化。因此，开发一套高效率，无差错的企业车辆管理系统软件十分必要，因此设计了这个企业车辆管理系统。本系统结构如下：<br>(1) 系统管理模块：<br>  在该模块中定义了管理员信息的管理，其功能包括管理员信息添加、查询、删除等操作。<br>(2) 车辆信息管理模块：<br>  在该模块中定义了对车辆信息的管理，其功能包括车辆信息的添加、查询、修改、删除等操作。<br>(3) 驾驶员信息管理模块：<br>  在该模块中定义了对驾驶员信息的管理，其功能包括驾驶员信息的添加、查询、修改、删除等操作。<br>(4) 出车信息管理模块：<br>  在该模块中定义了对出车情况的管理，其功能包括出车情况的添加、查询、修改、删除等操作。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring + Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目七：企业员工信息管理系统"><a href="#项目七：企业员工信息管理系统" class="headerlink" title="项目七：企业员工信息管理系统"></a>项目七：企业员工信息管理系统</h3><p><strong>介绍</strong></p><blockquote><p>企业员工信息管理系统主要用于实现公司的员工相关信息管理，基本功能包括：密码修改、员工管理、部门管理、出勤管理、工资管理、请假审核、我的请假、我的工资等。本系统结构如下：<br>（1）管理员端<br>  密码修改：修改自己的密码。<br>  员工管理：对员工的基本信息进行管理,包括查询、删除、录入。<br>  部门管理：包括添加部门以及添加子部门，删除部门等操作，便于及时更新部门信息。<br>  出勤管理：用于对员工的出勤月份以及天数进行管理，便于计算员工的工资等。<br>  工资管理：用于对员工的每个月的工资进行管理，便于对员工的工资进行管理。<br>  请假审核：用于管理员对员工的请假进行审核并加以回复，便于对员工的请假进行管理。<br>（2）员工端<br>  密码修改：修改自己的密码。<br>  我的请假：查看请假记录和发起请假申请。<br>  我的工资：查看员工自己的工资记录。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring + Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目八：售后服务管理系统"><a href="#项目八：售后服务管理系统" class="headerlink" title="项目八：售后服务管理系统"></a>项目八：售后服务管理系统</h3><p><strong>介绍</strong></p><blockquote><p>本系统的主要任务是为基于JavaEE技术和SQL Server数据库的售后服务管理系统建立一个企业设计。主要技术要求包括:掌握web开发所需的技术,包括HTML和JSP动态网页编程技术,SQL Server数据库知识,等等。主要实现企业售后服务信息的增删改查,顾客信息的增删改查,顾客留言信息的及时反馈保存,管理员帐号增删、登录等。该系统还可以方便制造商跟踪产品的质量和服务和管理以及购买者对企业的建议提交。</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h2 id="电子政务"><a href="#电子政务" class="headerlink" title="[ 电子政务 ]"></a>[ 电子政务 ]</h2><hr><h3 id="项目一：土地档案管理系统"><a href="#项目一：土地档案管理系统" class="headerlink" title="项目一：土地档案管理系统"></a>项目一：土地档案管理系统</h3><p><strong>介绍</strong></p><blockquote><p>土地档案管理系统主要包含功能：</p><p>（1）用户管理</p><p>​     用户登陆与注册</p><p>（2）土地档案管理</p><p>​     土地档案的新增，删除，修改以及查询</p></blockquote><ul><li><strong>数据库：</strong>Oracle</li><li><strong>使用技术：</strong>Spring + Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目二：电子政务网"><a href="#项目二：电子政务网" class="headerlink" title="项目二：电子政务网"></a>项目二：电子政务网</h3><p><strong>介绍</strong></p><blockquote><p>JAVA、JSP电子政务网主要用于实现政府机关的政务管理，基本功能包括：前台管网展示、留言板、后台登陆、修改密码、网站公告、政府网站、领导信箱、表格下载、政务公开、便民电话、新闻动态、地区概况、留言管理等。本系统结构如下：</p><p>（1）电子政务网(前台):<br>  领导信箱模块：实现发送邮件信息功能；<br>  地区概况模块：实现地区概况查看功能；<br>  动态信息模块：实现公告公示功能；<br>  政务信息动态模块：实现政务信息动态查看功能；<br>  法律法规模块：实现法律法规查看功能；<br>  网上办事模块：实现办事指南，意见反馈，表格下载功能；<br>  政务公开模块：实现干部任免，政府文件，政府采购功能;<br>  便民服务模块：实现便民电话，投诉举报功能;<br>  政府部门网站模块：实现政府部门网站查看功能;<br>（2）电子政务网(后台):<br>  修改密码模块: 实现密码修改功能;<br>  网站公告模块: 实现公告查看、添加、删除功能；<br>  政府网站模块：实现网站查看、添加、删除功能；<br>  领导信箱模块：实现领导信箱查看、添加、删除功能；<br>  表格下载模块：实现表格下载查看、添加、删除功能；<br>  政务公开模块：实现政务公开查看、添加、删除功能；<br>  便民电话模块：实现电话查看、添加、删除功能；<br>  新闻动态模块：实现新闻查看、添加、删除功能；<br>  地区概况模块：实现地区概况修改功能；<br>  留言管理模块：实现新闻查看、删除功能；</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Struts2 + JDBC + JSP</li><li><strong>开发工具：</strong>未知</li></ul><hr><h3 id="项目三：户籍管理系统"><a href="#项目三：户籍管理系统" class="headerlink" title="项目三：户籍管理系统"></a>项目三：户籍管理系统</h3><p><strong>介绍</strong></p><blockquote><p>户籍管理管理系统设计主要涵盖两方面的意义：户籍方面，系统上线可以给户籍在管理上带来方便，可以及时了解户籍的状况，有无迁入迁出户籍情况，缴费，欠缴等情况统计，极大的提高了员工的工作效率及准确性；用户方面：可以与户籍管理处交流，可以及时了解户籍的最新动态，户籍的通知以及其他的一些相关申请，方便了查询，节省了时间。</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><p>（该项目服务器不是<code>tomcat</code>而是<code>WebLogic</code>）</p><hr><h2 id="Java基础项目"><a href="#Java基础项目" class="headerlink" title="[ Java基础项目 ]"></a>[ Java基础项目 ]</h2><hr><h3 id="项目一：Java聊天室"><a href="#项目一：Java聊天室" class="headerlink" title="项目一：Java聊天室"></a>项目一：Java聊天室</h3><p><strong>介绍</strong></p><blockquote><p>Java聊天室系统主要用于实现在线聊天，基本功能包括：服务端和客户端。本系统结构如下：<br>（1）服务端：<br>  1、能够开启和关闭服务器<br>  2、等待着客户端从特殊端口发送的请求<br>  3、监听的端口并不是固定的，服务端的端口是能够自定义的<br>  4、能够广播消息向所有连接到服务器的用户<br>（2）客户端：<br>  1、能够和服务端进行连接<br>  2、新的用户能够注册账号<br>  3、通过用户名以及密码完成用户的登陆，连接到聊天室<br>  4、用户能够在聊天室发送消息</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Socket</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目二：Java扫雷游戏"><a href="#项目二：Java扫雷游戏" class="headerlink" title="项目二：Java扫雷游戏"></a>项目二：Java扫雷游戏</h3><p><strong>介绍</strong></p><blockquote><p>简单玩法介绍：<br>当玩家点开第一个格子时雷区开始布雷同时计时开始。然后会在该格子上显示周围8个格子的雷数（如果没有雷则自动点开周围的格子），玩家就需要通过这些数字来判断雷的位置，将是雷的格子标记为小红旗。若玩家认为已标记的格子时错误的，可以再次右击该格子来取消标记。当某一格子被标记时，对于该格子的单击操作是无效的（防止玩家误点击导致游戏失败）。如果玩家将某一格周围8个格子中的雷标记了出来，双击该格子会自动将周围的格子点击一遍，这样可以简化玩家的操作。当玩家将全部的地雷标记出来并且其他的格子点开时，游戏结束。但是如果玩家不小心点到了地雷就会游戏失败，系统自动显示出所有的地雷。如果玩家标识的地雷数量超过了该难度下规定的雷数，计数区会以负数显示超出的雷数并且游戏不会结束。</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目三：俄罗斯方块"><a href="#项目三：俄罗斯方块" class="headerlink" title="项目三：俄罗斯方块"></a>项目三：俄罗斯方块</h3><p><strong>介绍</strong></p><blockquote><p>俄罗斯方块项目，基本功能包括：游戏主界面显示模块、方块及数据显示模块、方块移动控制模块、游戏界面颜色控制模块、游戏进度、等级控制模块等。本项目结构如下：<br>（1）游戏主界面显示模块：<br>  显示游戏和帮助两个菜单；<br>  游戏使用功能键盘，得分 等级；<br>（2）画布、方块显示模块：<br>  可以根据自己的需求来自己动手更改背景图片，在方块下落过程中，根据颜色的变化识别下落的方块。<br>（3）背景画布模块设计：<br>  游戏用继承自JPanel的GameCanvas类控制背景画布的显示，用rows代表画布的行数，cols代表画布的列数，行数和列数决定着画布拥有方格的数目；<br>（4）方块移动、旋转模块<br>  通过更改横坐标或纵坐标，然后重新绘制方块实现方块移动、旋转</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目四：Java即时通讯软件"><a href="#项目四：Java即时通讯软件" class="headerlink" title="项目四：Java即时通讯软件"></a>项目四：Java即时通讯软件</h3><p><strong>介绍</strong></p><blockquote><p>关于java博网即时通讯软件的设计与实现<br>Server方面：<br>  1 运行监控，打开Server,执行对其它用户的监控。<br>  2 关闭监控，关闭Server,不在对其它用户进行监控。<br>  3 阅览用户信息，阅览已登录用户信息。<br>  4 管理用户，强制使被选择的用户退出登录状态。<br>Client方面：<br>  1 申请账号功能，使用者有权限在启动客户端后进行注册以及登录。<br>  2 添加好友功能，用户将陌生人加为好友。<br>  3 删除好友功能，用户有权限可以删除好友。<br>  4 修改个人资料功能，用户有权限可以修改以往设置的所有基本信息。<br>  5 修改头像功能，用户有权限能够修改自己现在的头像。<br>  6 即时聊天功能，用户之间有权限与拥有账号的用户进行即时的聊天。<br>  7 查看聊天记录功能，用户有权限查看与好友过往的聊天记录。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Java Swing + Java Socket</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目五：出租车计价器"><a href="#项目五：出租车计价器" class="headerlink" title="项目五：出租车计价器"></a>项目五：出租车计价器</h3><p><strong>介绍</strong></p><blockquote><p>关于java出租车计价器设计与实现<br>（1）出租车计价系统可以实现出租车信息的管理。<br>  1.1出租车信息的查询：通过数据库查询出租车的车型，车号，以及是否可用<br>  1.2出租车信息的增加：向数据库中添加出租车的车型，车号，以及是否可用<br>  1.3出租车信息的修改：对数据库中已经存在的出租车的车型，车号，以及是否可用的信息进行修改<br>  1.4出租车信息的删除：删除数据库中已经存储的出租车的信息<br>（2）出租车计价系统可以实现司机信息的管理。<br>  2.1司机信息的查询：通过数据库查询出司机的年龄，性别，学历，名字等信息<br>  2.2司机信息的增加：向数据库中添加司机的年龄，性别，学历，名字等信息<br>  2.3司机信息的修改：对数据库中已经存在的司机的年龄，性别，学历，名字等信息进行修改<br>  2.4司机信息的删除：删除数据库中已经存储的司机的信息<br>（3）出租车计价系统可以实现出租车计价功能。<br>  3.1通过java多线程，模拟出租车在路上的情景<br>  3.2通过距离计费的方式，将订单的时间，乘客的信息，订单的价格等插入数据库中<br>（4）出租车计价系统可以实现订单信息的维护<br>  4.1订单信息的查询：通过数据库查询出订单的时间，价格等信息<br>  4.2订单信息的删除：删除数据库中已经存储的订单信息<br>  4.3订单信息的修改：对数据库中已经存在的订单的时间，价格等信息进行修改</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目六：QQ屏幕截图工具"><a href="#项目六：QQ屏幕截图工具" class="headerlink" title="项目六：QQ屏幕截图工具"></a>项目六：QQ屏幕截图工具</h3><p><strong>介绍</strong></p><blockquote><p>基于java的QQ截屏工具的设计和实现能够实现对屏幕的随机截取，复制，保存以及添加文字等操作，便于用户对数据的处理。<br>  （1）随机获取屏幕指定区域；<br>  （2）编辑（添加文字）截图；<br>  （3）存储截图；</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目七：马里奥游戏"><a href="#项目七：马里奥游戏" class="headerlink" title="项目七：马里奥游戏"></a>项目七：马里奥游戏</h3><p><strong>介绍</strong></p><blockquote><p>超级玛丽小游戏的JAVA程序，进入游戏后首先按空格键开始，利用方向键来控制的马里奥的移动，同时检测马里奥与场景中的障碍物和敌人的碰撞，并判断马里奥的可移动性和马里奥的生命值。当马里奥通过最后一个场景后游戏结束。<br>  （1）马里奥<br>  （2）障碍物<br>  （3）敌人</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目八：飞机大战游戏"><a href="#项目八：飞机大战游戏" class="headerlink" title="项目八：飞机大战游戏"></a>项目八：飞机大战游戏</h3><p><strong>介绍</strong></p><blockquote><p>基于Java的飞机大战游戏主要需要我方飞机和敌方飞机，还有子弹，特殊nPC，开始背景，结束背景，以及背景音乐。我方飞机可以随意移动，敌方飞机无规律出现。游戏玩家通过鼠标移动控制飞机移动，我方飞机在游戏开始时就一直能发射子弹，当我方子弹碰到敌方飞机时，敌方飞机消失。当玩家飞机碰到敌方子弹时，生命值减一，直到玩家飞机生命值为一时，游戏结束。基本模块包括：游戏状态控制功能模块、游戏难度的调整模块、游戏界面绘画功能模块、玩家游戏控制功能模块等。本系统结构如下：<br>  （1）游戏状态控制功能模块:游戏的状态控制包括运行及结束游戏，首先进入游戏的开始页面，在游戏进行时，玩家必须躲避或者击落敌方飞机，玩家飞机的生命值降低为0的时候游 戏就会结束，弹出游戏结束界面<br>  （2）游戏难度的调整模块:玩家玩的时间越长游戏的难度越高，敌方飞机的数量越多、敌方飞机出现的频率越高，玩家保证飞机的存活的难度越高，操作难度相应也高。<br>  （3）游戏界面绘画功能模块:左上角会显示玩家飞机当前生命值，游戏时间，当前分数，其他地方用来输出玩家对我方飞机的控制与敌方飞机的动作显示<br>  （4）玩家游戏控制功能模块: 玩家可以通过控制鼠标或者键盘来控制方飞机（Hero airplane）的移动。</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>IntelliJ IDEA</li></ul><hr><h3 id="项目九：愤怒的小鸟游戏"><a href="#项目九：愤怒的小鸟游戏" class="headerlink" title="项目九：愤怒的小鸟游戏"></a>项目九：愤怒的小鸟游戏</h3><p><strong>介绍</strong></p><blockquote><p>基于Java的愤怒的小鸟游戏的设计与实现，基本功能包括：新游戏、载入游戏、控制帮助、退出游戏等。本系统结构如下：<br>（1）新游戏：<br>  需要输入你的昵称；<br>  选择难度：容易、中等、困难、噩梦(每个级别都有5个关卡)<br>（2）载入游戏：<br>  选择你的角色；(会保留你之前的成绩)<br>  选择难度；<br>（3）控制帮助：<br>  抛出小鸟 鼠标控制弧线<br>  扔出鸟蛋 空格<br>  停止飞行 s键<br>  退出游戏 esc键</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目十：雷电游戏（飞机大战）"><a href="#项目十：雷电游戏（飞机大战）" class="headerlink" title="项目十：雷电游戏（飞机大战）"></a>项目十：雷电游戏（飞机大战）</h3><p><strong>介绍</strong></p><blockquote><p>基于java的雷电游戏基本功能包括：敌方飞机随机飞行、我方飞机手动控制飞行，射击比拼，游戏闯关等。本系统结构如下：<br>（1）雷电游戏状态调整功能：<br>  在游戏启动时，游戏会自动进行初始化的验证。<br>  若初始化成功后，界面会自动进行跳转，跳转到游戏开始界面。<br>  有开始、暂停、恢复游戏等选项。<br>（2）雷电游戏难度的升级：<br>  当进入游戏后，随着时间越来越长，游戏难度会越来越大。<br>  界面中敌机增多，对飞机造成伤害的子弹增多，游戏难度增加。<br>  最后会遇到一个血条较长的怪兽，攻击其至血条为0时，自动过关跳转到下一关卡。<br>（3）玩家对飞机的控制功能：<br>玩家可以对飞机进行操控，通过前后左右键来控制飞机的飞行路线。</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目十一：连连看游戏"><a href="#项目十一：连连看游戏" class="headerlink" title="项目十一：连连看游戏"></a>项目十一：连连看游戏</h3><p><strong>介绍</strong></p><blockquote><p>基于java的连连看游戏设计和实现，基本功能包括：消除模块，重新开始模块，刷新模块，选择难度模块，计时模块。本系统结构如下：<br>（1）消除模块：<br>  完成连连看游戏消除动作的模块。<br>（2）重新开始模块：<br>  完成连连看游戏中重新开始新一局游戏功能的模块。<br>（3）刷新模块：<br>  完成连连看游戏中，将游戏中未消除的图片个数记录并重新随机放置等数量图片的功能模块。<br>（4）选择难度模块：<br>  完成游戏中切换游戏难度并开始新一局游戏的模块。<br>（5）计时模块：<br>  完成游戏中倒计时并显示提示信息的模块。<br>（6）状态显示模块：<br>  完成游戏中对游戏得分、闯关数记录的模块。</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目十二：模拟写字板"><a href="#项目十二：模拟写字板" class="headerlink" title="项目十二：模拟写字板"></a>项目十二：模拟写字板</h3><p><strong>介绍</strong></p><blockquote><p>此系统是使用Java语言实现简易写字板程序，能够进行输入文字操作，并具有新建文件，打开文件，保存文件，退出，复制，粘贴，剪切，全选，撤销等多种基本功能。本系统结构如下：<br>（1）菜单栏：<br>  文件模块:要用于操作整个存储或未保存的文档,包括新建，打开，保存，另存为等功能；<br>  编辑模块:编辑模块是对文本内容的基本编辑，包括剪切，复制，粘贴，删除等功能；<br>  格式模块:用于对用户输入内容显示上的操作,包括换行,字体的相关设置等功能；<br>  帮助模块:帮助菜单是用来展示于写字板有关的一些信息；<br>（2）文本区域：<br>  文本区域主要用来承载用户输入的主要内容；</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目十三：推箱子游戏"><a href="#项目十三：推箱子游戏" class="headerlink" title="项目十三：推箱子游戏"></a>项目十三：推箱子游戏</h3><p><strong>介绍</strong></p><blockquote><p>基于JAVA的推箱子游戏系统主要用于实现游戏推箱子功能，提供多种不同难度的关卡。本系统结构如下：<br>（1）初始化模块: 该模块包括屏幕初始化和游戏第一关的初始化。屏幕初始化用于输出欢迎信息和操<br>（2）画图模块: 该模块主要是被其它模块调用，用于画墙、在空地画箱子、在目的地画箱子、画小人和画目的地。<br>（3）移动箱子模块: 该模块用于移动箱子，包括目的地之间、空地之间和目的地与空地之间的箱子移动。<br>（4）移动小人模块: 该模块用于控制小人移动，从而推动箱子到目的地。<br>（5）功能控制模块: 该模块是几个功能函数的集合，包括屏幕输出功能、指定位置状态判断功能和关卡重置功能。</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目十四：坦克大战游戏"><a href="#项目十四：坦克大战游戏" class="headerlink" title="项目十四：坦克大战游戏"></a>项目十四：坦克大战游戏</h3><p><strong>介绍</strong></p><blockquote><p>此系统是使用Java语言实现坦克大战游戏程序，玩家通过连接访问进入游戏，通过操纵坦克来守卫基地，玩家还可以获得超级武器来提升坦克的属性，摧毁全部敌方坦克来取得胜利。本系统结构如下：<br>（1）面板功能：<br>  对双方坦克、基地、河道、草坪、普通墙与铁墙等地图元素,还实现了页面按钮功能，玩家可以点击按钮来实现相应的功能。<br>（2）坦克功能：<br>  操作玩家坦克的方法，还设置了超级武器，玩家吃掉后会获得特殊技能。<br>（3）子弹功能：<br>  设置了子弹打中不同物体对象产生的不同效果。</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h2 id="ERP（进销存）系统"><a href="#ERP（进销存）系统" class="headerlink" title="[ ERP（进销存）系统 ]"></a>[ ERP（进销存）系统 ]</h2><hr><h3 id="项目一：百货中心供应链管理系统"><a href="#项目一：百货中心供应链管理系统" class="headerlink" title="项目一：百货中心供应链管理系统"></a>项目一：百货中心供应链管理系统</h3><p><strong>介绍</strong></p><blockquote><p>百货中心供应链管理系统主要用于实现了企业管理数据统计等。本系统结构如下：<br>（1）管理界面：<br>  登录模块：实现管理员登录功能；<br>  合作公司管理模块：实现合作公司信息的增加、修改、查看功能；<br>  采购管理模块：实现采购的增加、修改、查看功能；<br>  数据统计模块：实现数据的统计分析功能；</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring + Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目二：采购管理系统"><a href="#项目二：采购管理系统" class="headerlink" title="项目二：采购管理系统"></a>项目二：采购管理系统</h3><p><strong>介绍</strong></p><blockquote><p>本系统是一个独立的系统，用来解决企业采购信息的管理问题。采用JSP技术构建了一个有效而且实用的企业采购信息管理平台，目的是为高效地完成对企业采购信息的管理。经过对课题的深入分析，采购系统需实现以下功能模块：<br>1.用户登录<br>  对用户输入的用户名和密码进行匹配，只有合法的用户可以登录成功，进入主界面，进行操作。是系统安全性的第一层保护层。不同角色的用户登录（比如普通用户和超级管理员）的操作页面不一样。<br>2.供应商管理<br>  灵活管理供货商，及时添加及修改供货商信息，为采购计划的制定提供保障。<br>3.材料管理<br>  对材料进行管理，管理材料种类及库存，及时了解材料的库存信息，有助于做出正确的采购选择。<br>4.订单管理<br>  系统设计了多种订单。不同权限的操作员只能对其拥有权限操作的订单进行操作。<br>5.信息查询<br>  根据关键字快速检索信息。</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目三：仓库管理系统"><a href="#项目三：仓库管理系统" class="headerlink" title="项目三：仓库管理系统"></a>项目三：仓库管理系统</h3><p><strong>介绍</strong></p><blockquote><p>基于WEB的仓库管理系统主要用于实现仓库的出入库管理，基本功能包括：入库模块、出库模块、商品查看模块、用户注册模块、个人信息管理模块等。本系统结构如下：<br>  入库模块：入库新商品，或者是入库已有商品。<br>  出库模块：对已经入库的商品进行出库操作。<br>  商品查看模块：查看目前的库存商品信息。<br>  用户注册模块：进行帐号密码的注册，包括用户其他信息。<br>  个人信息管理模块：查看或者修个个人信息。</p></blockquote><ul><li><strong>数据库：</strong>Oracle</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目四：进销存管理系统"><a href="#项目四：进销存管理系统" class="headerlink" title="项目四：进销存管理系统"></a>项目四：进销存管理系统</h3><p><strong>介绍</strong></p><blockquote><p>进销存管理系统，实现对企业运作过程中的进货、销售、仓储的电子化操作，可以节省大量人力物力，可以说对企业的运作带来不可限量的好处。实现一个简单实用，操作界面友好的进销存管理系统是首要解决的任务。然后一是要实现对库存数据进行分析，对接下来的进货进行一些指导；二是实现对销售数据的采集分析，对企业决策者对下一个季度或者年份的销售计划提供一个参考的功能。系统肯定要具备对进销存的一些基本的增删改查操作。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring Boot（Spring + Spring MVC） + Spring Data JPA + JSP</li><li><strong>开发工具：</strong>Spring tool suit（STS）其实就是装了插件的Eclipse</li></ul><hr><h3 id="项目五：企业财务管理系统"><a href="#项目五：企业财务管理系统" class="headerlink" title="项目五：企业财务管理系统"></a>项目五：企业财务管理系统</h3><p><strong>介绍</strong></p><blockquote><p>企业财务管理系统主要用于实现公司的财务管理，基本功能包括：系统登录、部门信息管理、员工信息管理、资产、经营、费用信息管理等。本系统结构如下：<br>（1）职工端：<br>  登录模块：登录功能；<br>  个人信息模块：可修改个人的信息；<br>  个人工资模块：可查阅自己的工资；<br>  公司资产模块：可查看公司的资产信息；<br>  公司经营模块：可查看公司的经营信息；<br>  公司费用模块：可查看公司的费用信息；<br>  年终资产模块：可查看公司的总资产信息；<br>（2）超级管理员端：<br>  登录模块：实现管理员登录功能；<br>  个人信息模块：可修改个人的信息；<br>  部门信息管理模块：实现部门的增加、修改、删除、查看功能；<br>  职工信息管理模块：实现职工信息的增加、修改、删除、查看功能；<br>  职工工资管理模块：实现职工工资的增加、修改、查看功能；<br>  资产类别管理模块：实现资产类别的增加、删除、查看功能；<br>  资产信息管理模块：实现资产信息的增加、查看功能；<br>  经营信息管理模块：实现经营信息的增加、查看功能；<br>  费用信息管理模块：实现费用信息的增加、查看功能；<br>  年终资产分析模块：实现公司总资产的查看功能；</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Struts + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目六：商品供应管理系统"><a href="#项目六：商品供应管理系统" class="headerlink" title="项目六：商品供应管理系统"></a>项目六：商品供应管理系统</h3><p><strong>介绍</strong></p><blockquote><p>本系统是一个独立的系统，用来解决企业采购信息的管理问题。采用JSP技术构建了一个有效而且实用的企业采购信息管理平台，目的是为高效地完成对企业采购信息的管理。经过对课题的深入分析，采购系统需实现以下功能模块：<br>各个模块实现的功能如下：<br>1.用户登录<br>  对用户输入的用户名和密码进行匹配，只有合法的用户可以登录成功，进入主界面，进行操作。是系统安全性的第一层保护层。不同角色的用户登录（比如普通用户和超级管理员）的操作页面不一样。<br>2.供应商管理<br>  灵活管理供货商，及时添加及修改供货商信息，为采购计划的制定提供保障。<br>3.材料管理<br>  对材料进行管理，管理材料种类及库存，及时了解材料的库存信息，有助于做出正确的采购选择。<br>4.订单管理<br>  系统设计了多种订单。不同权限的操作员只能对其拥有权限操作的订单进行操作。<br>5.信息查询<br>  根据关键字快速检索信息。</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Struts + Hibernate + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目七：工厂进销存管理系统"><a href="#项目七：工厂进销存管理系统" class="headerlink" title="项目七：工厂进销存管理系统"></a>项目七：工厂进销存管理系统</h3><p><strong>介绍</strong></p><blockquote><p>本XXX陶瓷工厂的进销存管理系统是基于eclipse开发环境，前台采用的是Swing 和 AWT 相关组件进行的GUI设计，后台使用的是SQL Server数据库。且该XXX陶瓷工厂的进销存管理系统共分为六大模块，分别为<br>1.基础信息管理模块<br>客户，原料商品，供应商，产品信息的管理和维护<br>2.进货模块<br>  原料商品的进货和退货<br>3.销售模块<br>  产品的销售和销售退货<br>4.查询统计模块<br>  负责查询一些基础信息<br>5.库存管理模块<br>  原料商品的出库，产品的入库，库存盘点和价格修改<br>6.系统管理模块<br>  操作员管理和密码修改</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目八：物资管理系统"><a href="#项目八：物资管理系统" class="headerlink" title="项目八：物资管理系统"></a>项目八：物资管理系统</h3><p><strong>介绍</strong></p><blockquote><p>恒鑫租赁站长期大量出租各型钢管、扣件、塔吊等建筑施工设备。本系统为恒鑫租赁站提供了一个方便快捷的物资管理系统，方便出租物资的管理。系统功能主要包括：<br>  用户管理，包括管理员信息查看、管理员密码修改；<br>  正常订单管理：包括新增正常订单、修改有误订单、删除错误订单；<br>  资金结算管理：费用统计；<br>  材料租赁管理：包括订单出租查询、器材回收管理、日租金管理、仓库库存管理等。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h2 id="校园相关系统"><a href="#校园相关系统" class="headerlink" title="[ 校园相关系统 ]"></a>[ 校园相关系统 ]</h2><hr><h3 id="项目二：网络考试系统"><a href="#项目二：网络考试系统" class="headerlink" title="项目二：网络考试系统"></a>项目二：网络考试系统</h3><p><strong>介绍</strong></p><blockquote><p>网络考试系统主要用于实现高校在线考试，基本功能包括：自动组卷、试卷发布、试卷批阅、试卷成绩统计等。本系统结构如下：<br>（1）学生端：<br>  登录模块：登录功能；<br>  网络考试模块：可参加考试，并查看考试结果，提交试卷后老师允许的情况下查看错题；<br>（2）超级管理员端：<br>  登录模块：实现管理员登录功能；<br>  用户管理模块：实现用户信息的增加、修改、查看功能；<br>  角色权限管理模块：实现角色的增加、修改、查看功能；<br>  试卷管理模块：实现试卷信息的增加、修改、查看功能；<br>  试题管理模块：实现试题信息的增加、修改、查看功能；<br>（3）试题管理员端（老师）：<br>  试卷管理模块：实现试卷信息的增加、修改、查看功能；<br>  试题管理模块：实现试题信息的增加、修改、查看功能；</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h2 id="医疗项目"><a href="#医疗项目" class="headerlink" title="[ 医疗项目 ]"></a>[ 医疗项目 ]</h2><hr><h3 id="项目一：健康管理系统"><a href="#项目一：健康管理系统" class="headerlink" title="项目一：健康管理系统"></a>项目一：健康管理系统</h3><p><strong>介绍</strong></p><blockquote><p>javaEE健康管理系统主要功能包括：教师登录退出、教师饮食管理、教师健康日志、体检管理等等。本系统结构如下：<br>（1）用户模块：<br>  实现登录功能，退出，用户注册<br>（2）教师饮食管理：<br>  根据教师的相关信息，计算其每天所需热量，给出一周的推荐菜单。<br>（3）教师健康日志：<br>  用户可以记录自己健康日记，记录每一天的睡眠，饮酒，吸烟，血压，体重等情况。<br>（4）教师体检管理：<br>  教师可通过该平台查询每次的体检结果，显示部分项目随时间变化的曲线<br>（5）疾病预测评估：<br>  针对糖尿病和高血压两种疾病，利用数学线性回归的方法，模拟计算出教师患病概率。<br>(6) 后台管理员模块<br>  管理员用户登录功能：通过账号登录系统。<br>  管理员管理教师功能：可以增删改查教师基本信息。<br>  管理员管理体检结果：可以增删改查教师体检记录。<br>  健康新闻管理：可以发布或删除、编辑新闻</p></blockquote><ul><li><strong>数据库：</strong>Oracle</li><li><strong>使用技术：</strong>Spring + Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目二：牙科诊所管理系统"><a href="#项目二：牙科诊所管理系统" class="headerlink" title="项目二：牙科诊所管理系统"></a>项目二：牙科诊所管理系统</h3><p><strong>介绍</strong></p><blockquote><p>为适应医疗信息管理发展的需要，开发基于B/S结构的私人牙科诊所病例管理系统。该系统应具有以下功能：</p><p>（1）登陆模块，可分为管理员登陆和普通用户医生登录三个模块。</p><p>（2）用户注册模块，对用户注册的用户名的要求，不同的用户要求要有不同的用户名。</p><p>（3）系统管理模块，包括添加管理员，管理员密码的修改。</p><p>（4）挂号管理模块，包括患者的名字、性别、年龄、现住地址和患者简介。</p><p>（5）患者管理模块，对患者进行增加、患者删除、患者信息的修改。</p><p>（6）开药管理模块，对药品的增加、删除、修改、查询，患者病历查</p><p>（7）科室管理模块，管理员可以新建，修改，删除，科室信息</p><p>（8）留言管理，管理员可以新建，修改，删除留言信息</p><p>（9）预约挂号模块，用户可以在线进行预约挂号，用户可以选择普通号和专家号。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC+ JSP</li><li><strong>开发工具：</strong>未知</li></ul><hr><h3 id="项目三：医院在线挂号系统"><a href="#项目三：医院在线挂号系统" class="headerlink" title="项目三：医院在线挂号系统"></a>项目三：医院在线挂号系统</h3><p><strong>介绍</strong></p><blockquote><p>医院挂号系统主要用于实现医院的挂号。<br>本系统结构如下：<br>（1）前台功能：<br>  用户注册：注册功能；<br>  用户登录：登录功能；<br>  医院查询：选择医院、科室查询该医院下的医生信息<br>  挂号:选择医生后点击挂号，填写信息完成挂号<br>  管理中心:点击管理中心可以修改个人信息、取消挂号<br>（2）系统管理员：<br>  登录模块：实现管理员登录功能；<br>  医院管理模块：实现医院的增加、删除功能；<br>  科室管理模块：实现科室的增加、删除功能；<br>  公告管理模块：实现公告的增加、删除功能；<br>  退出系统模块：实现用户的退出功能；</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring + Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目四：住院管理系统"><a href="#项目四：住院管理系统" class="headerlink" title="项目四：住院管理系统"></a>项目四：住院管理系统</h3><p><strong>介绍</strong></p><blockquote><p>本系统主要分为六大模块，分别是医生管理模块、病人管理模块、病床管理模块、收费管理模块、统计分析模块和系统功能模块，医生、病人和医院的管理人员都可以通过此系统寻找出自己所需要的信息。</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Servlet + JDBC+ JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h2 id="其他细分行业项目"><a href="#其他细分行业项目" class="headerlink" title="[ 其他细分行业项目 ]"></a>[ 其他细分行业项目 ]</h2><hr><h3 id="项目一：码头船只出行管理系统"><a href="#项目一：码头船只出行管理系统" class="headerlink" title="项目一：码头船只出行管理系统"></a>项目一：码头船只出行管理系统</h3><p><strong>介绍</strong></p><blockquote><p>（1）用户登录模块：<br>  一般（查看）用户，权限只有修改个人信息和查看功能<br>  （操作）用户登录，可以修改自己的信息，还可以对系统内容进行增加、删除和修改<br>  系统管理员，可以修改自己的信息，并且不仅有查看、增删改的基本权限，还有对用户的管理和注册权限</p><p>（2）用户管理模块：<br>  该模块实现对用户的增加，删除和修改<br>（3）个人信息维护模块：<br>  该模块实现用户对自己的名字和密码等个人信息的修改<br>（4）新闻公告管理模块：<br>  该模块实现新闻公告的增加，删除和修改<br>（5）船只管理模块：<br>  该模块实现船只的增加，删除和修改<br>（6）路线管理模块：<br>  该模块实现路线的增加，删除和修改，以及船只与路线关系的管理<br>（7）货柜管理模块：<br>  该模块实现货柜的增加，删除和修改，以及船只与货柜关系的管理</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC+ JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目二：超市积分管理系统"><a href="#项目二：超市积分管理系统" class="headerlink" title="项目二：超市积分管理系统"></a>项目二：超市积分管理系统</h3><p><strong>介绍</strong></p><blockquote><p>超市会员积分管理系统主要用于实现了企业管理数据统计等。本系统结构如下：<br>（1）网络会员管理中心界面：<br>  会员修改密码信息模块：实现会员密码功能；<br>  会员登陆模块：实现会员登陆功能；<br>  会员注册模块：实现会员注册功能；<br>  留言板模块：实现留言板留言功能<br>（2）后台管理界面：<br>  系统用户管理模块：实现管理员的增加、查看功能；<br>  会员信息管理模块：实现会员信息的增加、修改、查看功能；<br>  注册用户管理模块：实现注册用户的增加、修改、查看功能；<br>  会员卡管理模块：实现会员卡信息的增加、查看功能；<br>  商品销售管理模块：实现商品信息的增加、查看功能；<br>  会员积分管理模块：实现合作公司信息的增加、查看功能；<br>  信息统计模块：实现数据统计报表功能；<br>  留言板模块：实现留言板信息的增加、修改、查看功能；</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Servlet + JDBC+ JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目三：保险业务管理系统"><a href="#项目三：保险业务管理系统" class="headerlink" title="项目三：保险业务管理系统"></a>项目三：保险业务管理系统</h3><p><strong>介绍</strong></p><blockquote><p>本系统主要是为了开发一个操作方便、使用快捷、处理高效的保险管理系统。因此，本系统是从人工操作容易产生错误、过程繁琐、工作效率不高，保密性差不足之处，对系统的可操作性、稳定性和实用性有一定的限制，并能安全地保存数据于数据库中来提高其系统的保密性。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring + Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目四：机场航班起降与协调管理系统"><a href="#项目四：机场航班起降与协调管理系统" class="headerlink" title="项目四：机场航班起降与协调管理系统"></a>项目四：机场航班起降与协调管理系统</h3><p><strong>介绍</strong></p><blockquote><p>此次项目是一个基于Java的机场航班起降与协调系统（机场航班调度系统）。通过此系统帮助机场地面指挥人员进行更加明确的航班调度和指令发送，尽可能减少航班调度的错误率，尽可能规避航班调度错误的风险，极大程度地避免空难的发生。减少地面指挥人员指令发布的失误率，与航班建立数据上的可视的指令发布，使航班在可能的无线电干扰的情况下可以正常起降。实时管理航班信息，<br>建立地面指挥员与机长之间的指令通信。<br>地面指挥员端：<br>  1.指挥员登录<br>  2.航班信息的浏览<br>  3.航班信息的操作：航班的删除，航班的添加，航班信息的修改，航班信息的搜索<br>  4.指挥信息的操作：指挥信息的查询，指令的发布，指令的修改，指令的删除<br>机长端：<br>  1.机长登录<br>  2.航班信息的查询<br>  3.航班指挥信息的操作：航班指挥信息查询，航班请求的发布，航班请求的删除，航班请求的修改</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC+ JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目五：敬老院管理系统"><a href="#项目五：敬老院管理系统" class="headerlink" title="项目五：敬老院管理系统"></a>项目五：敬老院管理系统</h3><p><strong>介绍</strong></p><blockquote><p>本系统主要是针对敬老院工作人员即管理员和员工设计的。敬老院管理系统将IT技术为养老院提供一个接口便于管理信息,存储老人个人信息和其他信息,查找和更新信息的养老院档案,节省了员工的劳动时间,大大降低了成本。其主要功能包括：<br>系统管理员用户功能介绍：<br>  用户管理员、员工登录、老人信息管理、床位分配管理、护工薪资管理、护工请假记录、老人请假记录、入住费用和事故记录管理。以及对这些功能的增、删、改、查处理<br>普通管理员用户 （护工身份）功能介绍：<br>  密码信息管理用例分析, 老人信息查看用例分析, 请假信息查看用例分析,护工薪资查看用例分析</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC+ JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目六：银行排号系统"><a href="#项目六：银行排号系统" class="headerlink" title="项目六：银行排号系统"></a>项目六：银行排号系统</h3><p><strong>介绍</strong></p><blockquote><p>（1）服务器端<br>  1）取号功能：打开服务器与终端进行通信。由于把服务器设置到了用户的一端，所以在服务器端进行取号，然后把号存到数据库中。<br>  2）统计功能：数据访问层从数据库中查出所有取票人数和等待人数在服务器端界面显示。<br>  3）删除功能：删除当前取票顾客的排号。<br>  4）查询功能：顾客可以从此处了解到所有顾客的取票情况及被处理状况。<br>  5）通知功能：从服务器端获得排号，通过服务器端通知<strong><em>用户到\</em></strong>工作台办理业务。<br>（2）客户端<br>  1） 登录功能：业务员从此处登录，业务员的姓名，密码是事先录入数据库的。<br>  2） 叫号功能：业务员点击处理按钮触发事件发送信息给服务器，服务器从数据库拿到号票，返回给业务员进行业务处理。<br>  3）统计功能：数据访问层从数据库查询总取票人数和查询未处理人数在业务端显示。<br>  4） 删除功能：业务员可以删除数据库中所有的记录，也可以选择删除某条记录。<br>  5）查询功能：业务员可以查询所有顾客的取票情况及业务员对号票的处理情况，这块主要为了能够及时掌握顾客取票信息及业务员处理情况。</p></blockquote><ul><li><strong>数据库：</strong>Oracle</li><li><strong>使用技术：</strong>Java Swing + JDBC</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目七：健身俱乐部会员系统"><a href="#项目七：健身俱乐部会员系统" class="headerlink" title="项目七：健身俱乐部会员系统"></a>项目七：健身俱乐部会员系统</h3><p><strong>介绍</strong></p><blockquote><p>健身俱乐部管理系统主要由六个模块组成。<br>1.会员管理子系统:包括会员个人信息的修改、会员的增加和删除、会员信息查询以及会员卡的管理。<br>2.预约管理子系统:包括健身预约信息的录入、和删除。<br>3.人事资料管理子系统:包括人事资料的添加、删除、修改功能。<br>4.器材管理子系统:包括器材信息的录入、增加和删除、修改、产品信息查询。<br>5.考勤、工资管理子系统:包括考勤、工资信息的录入、增加和删除、修改。<br>6.系统维护子系统:包括修改密码、修改用户名、删除管理员和增加管理员四个功能模块。<br>7.用户管理模块:管理员添加、删除、查询用户基本信息和设置用户权限。</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Servlet + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目八：停车场管理系统1"><a href="#项目八：停车场管理系统1" class="headerlink" title="项目八：停车场管理系统1"></a>项目八：停车场管理系统1</h3><p><strong>介绍</strong></p><blockquote><p>基于Web停车场管理系统主要用于实现停车场相关信息管理，基本功能包括：系统信息管理模块、车位信息管理模块、IC卡信息管理模块、固定车主停车管理模块、临时车辆信息管理模块、系统功能操模块等。本系统结构如下：<br>  (1)系统信息管理模块：角色的增加、删除、修改和查询；用户的增加、删除、修改和查询。<br>  (2)车位信息管理模块：车位信息的增加、删除、修改和查询。<br>  (3)IC卡信息管理模块：IC卡信息的增加、删除、修改和查询。<br>  (4)固定车主停车管理模块：对固定车主的停车信息进行增加、删除、修改和查询<br>  (5)临时车辆信息管理模块：对临时车辆的停车信息进行增加、删除、修改、查询和打印<br>  (6)系统功能操模块：退出登陆、修改密码。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring MVC + JDBC + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目九：停车场管理系统2"><a href="#项目九：停车场管理系统2" class="headerlink" title="项目九：停车场管理系统2"></a>项目九：停车场管理系统2</h3><p><strong>介绍</strong></p><blockquote><p>车场管理系统开发出来的目的是为了方便公共场所或者企业等单位的停车管理，管理系统的高效和经济优势巨大，现如今已经有不少的高档次场所都已经引入了这种管理方式，停车场的管理人员和使用人员无需去关注它的内部设计，只需要关注相关信息的呈现和操作，如车辆信息，车位情况，而直观的了解这些无疑可以使管理者迅速的掌握停车场的实施情况，使车辆的停留和出入管理都更加的方便快捷。</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目十：酒店管理系统"><a href="#项目十：酒店管理系统" class="headerlink" title="项目十：酒店管理系统"></a>项目十：酒店管理系统</h3><p><strong>介绍</strong></p><blockquote><p>按照总体设计的功能模块和需求分析，酒店管理系统的各个模块的数据字典：<br>1、系统管理员数据：包含的数据项用户名，密码。<br>2、客房类型数据：包含的数据项有id号，类型名称。<br>3、客房信息数据:包含的数据项有房间号，房间面积，房间简介，房间图片，房间类型。<br>4、房间预订数据：包含的数据项有预订客房，预订时间，预订用户的名字及电话，预订天数。<br>5、入住消费数据：包含的数据项有入住客房，入住时间，客户姓名及联系方式，预订天数和消费金额。<br>6、客户信息数据：包含的数据项有客户名字，地址，电话，E-mail。<br>7、特色餐品数据：包含的数据项有名称，描述，图片，价格。<br>8、餐桌预订数据：包含的数据项有预订时间，预订餐桌号，预订人。<br>9、餐饮消费数据：包含的数据项有消费时间，消费金额，消费者姓名。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目十一：挖掘机配件营销系统"><a href="#项目十一：挖掘机配件营销系统" class="headerlink" title="项目十一：挖掘机配件营销系统"></a>项目十一：挖掘机配件营销系统</h3><p><strong>介绍</strong></p><blockquote><p>挖掘机配件销售管理系统是根据挖掘机配件销售的过程来分析该系统，系统分为三大模块。<br>库存管理模块包括：<br>  （1）库存查看，在客户进行咨询或者需要购买的时候可以通过库存查询知道当前库存中有没有货。<br>  （2）配件信息管理，管理系统中所有的配件信息。<br>  （3）配件进货，根据实际情况，及时更新库存，扩大配件的供应量，增加库存。<br>销售管理模块包括：<br>  （1）配件销售，对配件进行销售。<br>  （2）配件退还，用户不满意或者在退换期内可以进行配件退还操作。<br>  （3）利润统计，对系统中销售的利润进行统计和查看，也可以导出EXCEL。<br>用户管理模块：<br>  （1）员工信息管理，该部分主要包含管理员和普通员工的信息。<br>  （2）客户信息录管理，该部分主要管理系统中所有的新老客户信息，方便后期进行跟踪记录和回访等。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目十二：银行业务绩效考核系统"><a href="#项目十二：银行业务绩效考核系统" class="headerlink" title="项目十二：银行业务绩效考核系统"></a>项目十二：银行业务绩效考核系统</h3><p><strong>介绍</strong></p><blockquote><p>业务绩效考核系统主要目的是使绩效考核信息管理清晰化，基本功能包括：权限处理模块、输入模块、处理模块、统计输出模块、维护模块等。本系统结构如下：<br>1.权限处理模块：<br>  管理员与普通柜员，管理员进入的是管理员页面，普通柜员进入普通柜员的界面。<br>2.输入模块<br>  2.1 普通柜员用户注册：普通柜员通过输入用户名（工号即用户名），名字，密码进行注册，获得进入本系统权限。<br>  2.2 柜员选择柜员身份登入：柜员进入后可以查看本人工作情况的信息。<br>  2.3 管理员界面：登入后，记录柜员工作情况：输入柜员工号，柜员名字，记录业务笔数，最后一栏并记录柜员员工加减分情况（笔数处于10的整数部分为加减分情况，以10分为上限）。除此之外，管理员还能对普通柜员的权限进行修改，删除不必要的用户。<br>  2.4 对管理员输入数据进行处理：比如工号只能为7位，开头必须是882；加分减分的值不能大于10等等。<br>3.处理模块<br>  3.1 查询：输入柜员工号，可以查询到该柜员的工作情况以及加分减分情况及薪酬情况；按日期查询，可以查询到该日期本合作银行每位柜员的工作情况及加减分情况。<br>  3.2 薪酬查询：柜员薪酬计算应计算考核薪酬除以10分为标准分值，考核实际得分乘以分值为可兑现年薪（总行班子成员18000元/季、中层正职12000元/季、中层副职9000元/季、员工6000元/季、短期合同工（三年以下）1500元/季。） 月总分/月天数/10*薪酬标准<br>  4.统计输出模块：比如可以统计本合作银行业务笔数由多到少排名，加减分情况排名。<br>  5.维护模块：对系统进行维护，定期对数据进行备份，对历史数据库进行备份，对密码口令进行维护。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>未知</li></ul><hr><h2 id="团队介绍"><a href="#团队介绍" class="headerlink" title="团队介绍"></a>团队介绍</h2><p>团队成员主要由毕业大学生组成，对于学生需求更加了解，会尽量满足学生<strong>需求</strong>，帮助同学们顺利<strong>答辩</strong>。</p><p>想<strong><font color="#dd0000">加入团队</font> </strong>的请<strong><font color="#dd0000">查看下方的联系方式</font> </strong></p><h2 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h2><blockquote><p><strong>QQ：1755497577（备注：代写 ）</strong></p></blockquote><div align="center" width="80%"><br>  <img width="30%" src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/kcsj/qq.jpg"><br></div><blockquote><p><strong>微信（备注：代写）</strong></p></blockquote><div align="center" width="80%"><br>  <img width="30%" src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/kcsj/wechat.png"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/kcsj/bd.webp&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="代写" scheme="https://lijinhongpassion.github.io/tags/%E4%BB%A3%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>Java-volatile原理</title>
    <link href="https://lijinhongpassion.github.io/codeant/2334.html"/>
    <id>https://lijinhongpassion.github.io/codeant/2334.html</id>
    <published>2020-08-20T10:16:21.000Z</published>
    <updated>2020-08-20T10:40:09.314Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1558980663-3685c1d673c4?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="0-volatile"><a href="#0-volatile" class="headerlink" title="0  volatile"></a>0  volatile</h2><blockquote><p>缓存可见性 , 指令有序性, 不保证原子性</p></blockquote><h2 id="1-可见性问题来源"><a href="#1-可见性问题来源" class="headerlink" title="1 可见性问题来源"></a>1 可见性问题来源</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">boolean</span> initFlag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> throw InterruptedException</span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread( ()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span>(!initFlag)&#123;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"end"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread( ()-&gt;&#123;</span><br><span class="line">            <span class="comment">//这里是为了先让线程t1先执行</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            initFlag = <span class="keyword">true</span>;</span><br><span class="line">            System.out.println(<span class="string">"initFlag = "</span> + initFlag);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>上诉代码按照咱们的理解, <code>t2</code>线程启动后, 将<code>initFlag</code>设置为<code>true</code>, <code>t1</code>线程就会结束<code>while</code>循环, 并打印<code>end</code>;  但结果并不是这样</p></blockquote><p><strong>不添加volatile</strong></p><blockquote><p><strong>多线程处理共享变量问题;  该图片是早期的<font color="red">JMM操作流程</font>;会有对<font color="yellow">总线加锁</font>的操作</strong> </p><p>图片中线程2展示了JMM原子操作第一次读取count值时，从主内存中读取count的值后写入到自己的工作内存中，再从工作内存中读取，<strong>待线程结束后将数据写会主存。</strong></p><p>其中线程1第一次读取count值时，从主内存中读取count的值后写入到自己的工作内存中，再从工作内存中读取，<strong>之后的读取的count值都是从自己的工作内存中读取</strong>，并没有发现更新count值的线程对count值的修改。<font color="greeen">出现了可见性的问题</font></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/2334/image-20200819162450398.png" alt="image-20200819162450398"></p><font color="red"><strong>因为加锁的粒度太大,对总线加锁 , 会将所有的线程串化, 失去了多线程的意义, 后期添加了MESI缓存一致性协议 , 只针对缓存行加锁, 可以指定变量开启该协议.</strong></font></blockquote><p><strong>添加volatile</strong></p><blockquote><p>线程2中设置为volatile的变量,<font color="grenn"><strong>在更改值后马上同步回主存, 线程2的后续代码在值写回主存完成后再执行</strong></font></p><p>所有CPU ( 这里指线程1 ) 会不断地<font color="red"><strong>监听总线是否有更新共享变量的操作</strong></font>, <font color="grenn">有更改操作就把所有CPU( 这里指线程1 )上的工作内存中的共享变量变为<strong>失效,  </strong></font><font color="yellow">然后线程1中执行的代码中用到了这个共享变量, 去工作区间拿这个共享变量, 发现该值已经失效, 就会重新去主存获取值</font></p></blockquote><h2 id="2-MESI缓存一致性协议-原理"><a href="#2-MESI缓存一致性协议-原理" class="headerlink" title="2 MESI缓存一致性协议 原理"></a>2 MESI缓存一致性协议 原理</h2><blockquote><p>参考文章 : <a href="https://www.cnblogs.com/yanlong300/p/8986041.html" target="_blank" rel="noopener">https://www.cnblogs.com/yanlong300/p/8986041.html</a></p><p>MESI 是指4种状态的首字母。每个Cache line有4个状态，可用2个bit表示，它们分别是：</p><blockquote><p><strong>缓存行（Cache line）</strong>:缓存存储数据的单元。</p></blockquote><table><thead><tr><th style="text-align:left">状态</th><th style="text-align:left">描述</th><th style="text-align:left">监听任务</th></tr></thead><tbody><tr><td style="text-align:left">M 修改 (Modified)</td><td style="text-align:left">该Cache line有效，数据被修改了，和内存中的数据不一致，数据只存在于本Cache中。</td><td style="text-align:left">缓存行必须时刻监听所有试图读该缓存行相对就主存的操作，这种操作必须在缓存将该缓存行写回主存并将状态变成S（共享）状态之前被延迟执行。</td></tr><tr><td style="text-align:left">E 独享、互斥 (Exclusive)</td><td style="text-align:left">该Cache line有效，数据和内存中的数据一致，数据只存在于本Cache中。</td><td style="text-align:left">缓存行也必须监听其它缓存读主存中该缓存行的操作，一旦有这种操作，该缓存行需要变成S（共享）状态。</td></tr><tr><td style="text-align:left">S 共享 (Shared)</td><td style="text-align:left">该Cache line有效，数据和内存中的数据一致，数据存在于很多Cache中。</td><td style="text-align:left">缓存行也必须监听其它缓存使该缓存行无效或者独享该缓存行的请求，并将该缓存行变成无效（Invalid）。</td></tr><tr><td style="text-align:left">I 无效 (Invalid)</td><td style="text-align:left">该Cache line无效。</td><td style="text-align:left">无</td></tr></tbody></table></blockquote><h2 id="3-volatile的底层-汇编"><a href="#3-volatile的底层-汇编" class="headerlink" title="3 volatile的底层 - 汇编"></a>3 volatile的底层 - 汇编</h2><blockquote><p>其实在变量前面添加<code>volatile</code>关键字, 在汇编语言层次上看, 也就是在未添加关键字的指令上多了一个<code>lock</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; //添加volatile</span><br><span class="line">&gt; lock add dword ptr [rsp]....</span><br><span class="line">&gt; //未添加</span><br><span class="line">&gt; add dword ptr [rsp]....</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>lock指令的作用</strong></p><ol><li>锁定当前<strong>缓存行</strong>区域, 并<strong>写回主内存</strong> ( 防止其他线程操作改变量 )</li><li>这些写回主存的操作会引起其他CPU中的工作内存的该变量失效( MESI协议 )</li></ol></blockquote><h2 id="4-如何保证原子性"><a href="#4-如何保证原子性" class="headerlink" title="4 如何保证原子性"></a>4 如何保证原子性</h2><blockquote><p>结合<code>synchronized</code>, 尽量原子操作类, juc下的atomic包下的类</p></blockquote><h2 id="示例-单例模式"><a href="#示例-单例模式" class="headerlink" title="示例 : 单例模式"></a>示例 : 单例模式</h2><p><strong>1. 不考虑线程安全的懒汉式单例模式</strong></p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">private</span> <span class="keyword">static</span> Test single = <span class="keyword">null</span>;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Test <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">&gt;   <span class="keyword">if</span> (single == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> Test();</span><br><span class="line">&gt;   <span class="keyword">return</span> single;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><strong>2. 考虑过线程安全问题的懒汉式单例模式( DCL double-checked- locking )</strong></p><blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">&gt;  </span><br><span class="line">&gt;  <span class="keyword">private</span> <span class="keyword">static</span> Test single = <span class="keyword">null</span>;</span><br><span class="line">&gt;  </span><br><span class="line">&gt;  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Test <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">&gt;     <span class="keyword">if</span>(single == <span class="keyword">null</span>)&#123;</span><br><span class="line">&gt;         <span class="keyword">synchronized</span>(Test.class)&#123;</span><br><span class="line">&gt;             <span class="keyword">if</span> (single == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> Test();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     <span class="keyword">return</span> single;</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p> <strong>字节码 : </strong>可根据字节码分析, 会发现有<code>有序性</code>的问题存在</p><p> <strong>锁粒度 : </strong><code>Test.class</code> - 类对象</p><p> <strong>问题 : </strong>大量线程访问时候, 虽然保证<code>synchronized</code>代码块里面的代码线程安全的问题, 但是对于<strong><code>synchronized</code>代码块外面的代码有序性无法保证</strong></p><p> 由于锁的粒度太大, 对<code>.class</code>加锁, <strong>阻塞时间会更长,阻塞线程会变得更多</strong>( <font color="red">需要细细体会加粗字体</font> )</p></blockquote><p><strong>3. 考虑过线程安全问题 / 锁粒度更小的懒汉式单例模式</strong></p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Test single = <span class="keyword">null</span>;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Test <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">&gt;   <span class="keyword">if</span>(single == <span class="keyword">null</span>)&#123;</span><br><span class="line">&gt;       <span class="keyword">synchronized</span>(single)&#123;</span><br><span class="line">&gt;           <span class="keyword">if</span> (single == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> Test();</span><br><span class="line">&gt;       &#125;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt; <span class="keyword">return</span> single;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>锁粒度 : </strong><code>single</code> - 类中的变量对象</p><p><strong>优势 : </strong><code>volatile</code>保证了变量的缓存可见性, 有序性, 但是不保证原子性, 所以这里添加 <code>synchronized</code>包装<code>single</code>的原子性, 并且在外层再添加了一个<code>if</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1558980663-3685c1d673c4?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
      <category term="volatile" scheme="https://lijinhongpassion.github.io/categories/java/volatile/"/>
    
      <category term="多线程" scheme="https://lijinhongpassion.github.io/categories/java/volatile/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Redis-利用Redis的原子操作-Incr实现秒杀</title>
    <link href="https://lijinhongpassion.github.io/codeant/f262.html"/>
    <id>https://lijinhongpassion.github.io/codeant/f262.html</id>
    <published>2020-08-18T10:51:32.000Z</published>
    <updated>2020-08-18T10:55:03.878Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1582079302063-33d56135e4e9?ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><blockquote><p>如果你对redis的CRUD操作还不是很熟悉, 可以去阅读<a href="https://github.com/LiJinHongPassion/springboot/tree/master/springboot-redis-demo" target="_blank" rel="noopener">springboot_redis_demo</a>：springboot整合redis数据库利用redistemplate实现CRUD</p></blockquote><blockquote><p>该篇文章主要是对秒杀中redis的increment介绍, 关于其他秒杀相关可以查看参考文献, 他们已经描述得很全面了</p><p>本文代码 : <a href="https://gitee.com/LiJinHongPassion/utils/tree/master/springboot-redis-incr-demo" target="_blank" rel="noopener">springboot-redis-incr-demo</a> </p></blockquote><hr><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><blockquote><p><strong>环境: </strong>redis, mysql, jdk</p></blockquote><hr><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>多个线程同时修改同一条数据 , MySQL和Redis怎么保证不会出现线程安全</p></blockquote><p><strong>什么是原子性 ?</strong> </p><blockquote><blockquote><p>参考: <a href="https://juejin.im/post/6844904080041574413" target="_blank" rel="noopener">https://juejin.im/post/6844904080041574413</a>     诡异的并发之原子性</p></blockquote><p><strong>一个或者多个操作在 CPU 执行的过程中不被中断的特性称为原子性 。</strong></p><p><strong>数据库事务中 </strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 原子性概念是这样子的：事务被当做一个不可分割的整体，包含在其中的操作要么全部执行，要么全部不执行。且事务在执行过程中如果发生错误，会被回滚到事务开始前的状态，就像这个事务没有执行一样。（也就是说：事务要么被执行，要么一个都没被执行）</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>多线程并发中</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; 原子性概念是这样子的：</span><br><span class="line">&gt; </span><br><span class="line">&gt; 第一种理解：一个线程或进程在执行过程中，没有发生上下文切换。</span><br><span class="line">&gt; 上下文切换：指CPU从一个进程/线程切换到另外一个进程/线程(切换的前提就是获取CPU的使用权)。</span><br><span class="line">&gt; </span><br><span class="line">&gt; 第二种理解：我们把一个线程中的一个或多个操作(不可分割的整体)，在CPU执行过程中不被中断的特性，称为原子性。(执行过程中，一旦发生中断，就会发生上下文切换)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>原子性是</strong>  拒绝<em>多线程操作</em>的,不论是多核还是单核,具有原子性的量 ,  <strong>同一时刻只能有一个线程来对它进行操作。</strong></p></blockquote><hr><h2 id="MySQL锁"><a href="#MySQL锁" class="headerlink" title="MySQL锁"></a>MySQL锁</h2><blockquote><ol><li><p>对于<code>UPDATE、DELETE、INSERT</code>语句，<strong>InnoDB</strong>会<strong>自动</strong>给涉及数据集加排他锁（X)</p></li><li><p><strong>InnoDB行锁和表锁都支持</strong>！</p><ol><li>表锁<ul><li>开销小，加锁快；不会出现死锁；锁定力度大，发生锁冲突概率高，并发度最低</li></ul></li><li>行锁<ul><li>开销大，加锁慢；会出现死锁；锁定粒度小，发生锁冲突的概率低，并发度高</li></ul></li></ol></li><li><p>InnoDB只有通过<strong>索引条件</strong>检索数据<strong>才使用行级锁</strong>，否则，InnoDB将使用<strong>表锁</strong></p></li><li><p><strong>表锁下又分为两种模式</strong>：</p><ul><li><p>表读锁（Table Read Lock）</p></li><li><p>表写锁（Table Write Lock）</p></li><li><p>从下图可以清晰看到，在表读锁和表写锁的环境下：</p></li></ul><p>读读不阻塞，读写阻塞，写写阻塞</p><ul><li>读读不阻塞：当前用户在读数据，其他的用户也在读数据，不会加锁</li></ul></li></ol><ul><li><p>读写阻塞：当前用户在读数据，其他的用户<strong>不能修改当前用户读的数据</strong>，会加锁！</p><ul><li>写写阻塞：当前用户在修改数据，其他的用户<strong>不能修改当前用户正在修改的数据</strong>，会加锁！</li></ul><ol start="5"><li><p>InnoDB实现了以下<strong>两种</strong>类型的行锁。</p><ul><li>共享锁（S锁）：允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁。<ul><li>也叫做<strong>读锁</strong>：读锁是<strong>共享</strong>的，多个客户可以<strong>同时读取同一个</strong>资源，但<strong>不允许其他客户修改</strong>。</li></ul></li><li>排他锁（X锁)：允许获得排他锁的事务更新数据，阻止其他事务取得相同数据集的共享读锁和排他写锁。<ul><li>也叫做<strong>写锁</strong>：写锁是排他的，<strong>写锁会阻塞其他的写锁和读锁</strong>。</li></ul></li></ul></li><li>数据库事务有不同的隔离级别，不同的隔离级别对锁的使用是不同的。MySQL默认使用的可重复读的隔离级别 , 可重复读会导致幻读 , 通过<strong>mvvc和gap锁解决了幻读</strong>( 参考: <a href="https://my.oschina.net/u/566591/blog/3162858?_from=gitee_rec" target="_blank" rel="noopener">https://my.oschina.net/u/566591/blog/3162858?_from=gitee_rec</a> )。<strong>其中mvvc是读写不阻塞的</strong></li></ol></li></ul></blockquote><blockquote><p><strong>结论 : </strong>MySQL对于<code>UPDATE、DELETE、INSERT</code>语句, <strong>都会加锁,</strong> <strong>导致其他的SQL语句阻塞( 也就是写写阻塞 ),</strong> 在高并发的情况下, <strong>虽然保证了数据安全</strong> , 但是数据库会承受大量的IO操作, 大量的操作就会阻塞, 可能会导致宕机等, 所以需要缓冲这些服务, 可以使用MQ来异步操作</p></blockquote><h2 id="Redis锁"><a href="#Redis锁" class="headerlink" title="Redis锁"></a>Redis锁</h2><blockquote><p><strong>参考 : </strong><a href="https://www.cnblogs.com/fengff/p/10913492.html" target="_blank" rel="noopener">https://www.cnblogs.com/fengff/p/10913492.html</a></p></blockquote><h5 id="命令INCR"><a href="#命令INCR" class="headerlink" title="命令INCR"></a>命令<code>INCR</code></h5><blockquote><p><strong>Redis Incr 和 Redis Incrby命令是原子操作</strong></p></blockquote><ul><li>Redis Incr 命令将 key 中储存的数字值增一，如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 INCR 操作。<ul><li>Redis Incrby 命令将 key 中储存的数字加上指定的增量值，如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 INCR 操作。</li><li>在rspringboot中直接是调用<code>redisTemplate.opsForValue().increment(String.valueOf(key), -(long) num)</code>就可以了</li></ul></li></ul><blockquote><p>适用场景 : 计数器，高并发生成订单号，秒杀类的业务逻辑等。</p></blockquote><p><strong>结合项目中的代码来讲: </strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> num 购买数量</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> key 购买的商品ID</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Transactional</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">buy1</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//1. 查询redis上的库存是否充足, 高并发情况下 检查库存 与 减少库存 不是原子性，  以 increment &gt; 0 为准      *</span></span><br><span class="line">       Integer redis_num = Integer.valueOf(</span><br><span class="line">               Objects.requireNonNull(</span><br><span class="line">                       redisTemplate.opsForValue().get(<span class="string">"1"</span>)</span><br><span class="line">               )</span><br><span class="line">       );</span><br><span class="line">       <span class="keyword">if</span> (redis_num &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="string">"库存不足!!"</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 2.减少库存</span></span><br><span class="line">       <span class="keyword">long</span> value = redisTemplate.opsForValue().increment(String.valueOf(key), -(<span class="keyword">long</span>) num);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 库存充足 可以异步操作,即使反馈购买成功的信息,并异步处理 扣减mysql数据库并生成订单</span></span><br><span class="line">       <span class="keyword">if</span> (value &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="comment">// update 数据库中商品库存和订单系统下单，单的状态未待支付</span></span><br><span class="line">           <span class="comment">// 分开两个系统处理时，可以用LCN做分布式事务，但是也是有概率会订单系统的网络超时</span></span><br><span class="line">           <span class="comment">// 也可以使用最终一致性的方式，更新库存成功后，发送mq，等待订单创建生成回调。</span></span><br><span class="line">           <span class="keyword">boolean</span> res = productDao.update(num, key) == <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">if</span> (res) &#123;</span><br><span class="line">               <span class="comment">//创建订单</span></span><br><span class="line">               <span class="comment">//createOrder(req);</span></span><br><span class="line">               <span class="comment">//记录购买日志</span></span><br><span class="line">               productLogDao.insert(<span class="keyword">new</span> CodeantProductLog( <span class="keyword">new</span> Date(), key, num ));</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> <span class="string">"成功购买"</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//恢复扣减的redis库存</span></span><br><span class="line">           redisTemplate.opsForValue().increment(String.valueOf(key), (<span class="keyword">long</span>) num);</span><br><span class="line">           <span class="keyword">return</span> <span class="string">"redis库存不够"</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><code>long value = redisTemplate.opsForValue().increment(String.valueOf(key), -(long) num);</code>在并发情况下是线程安全的 , 因为<code>increment</code>方法调用的是<code>Incrby</code>命令, <code>Incrby</code>是原子操作 ; 多线程的情况下 , 因为是原子操作 , 就只能有一个线程对Key进行修改 , 其他线程修改不了。</p><h5 id="锁SETNX"><a href="#锁SETNX" class="headerlink" title="锁SETNX"></a>锁<code>SETNX</code></h5><blockquote><p>使用<code>!SETNX</code>加锁 , 官方文档 : <a href="http://www.redis.cn/commands/setnx.html" target="_blank" rel="noopener">http://www.redis.cn/commands/setnx.html</a></p></blockquote><blockquote><p>适用场景 : 分布式锁</p></blockquote><h5 id="锁SET"><a href="#锁SET" class="headerlink" title="锁SET"></a>锁<code>SET</code></h5><pre><code>&gt;官方不推荐用来做为锁&gt;&gt;官方文档 : http://www.redis.cn/commands/set.html</code></pre><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><blockquote><p>阅读顺序</p><ol><li><a href="https://www.zhihu.com/question/54895548/answer/923987542" target="_blank" rel="noopener">如何设计秒杀</a></li><li><a href="https://blog.csdn.net/shendl/article/details/51092916?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase" target="_blank" rel="noopener">redis如何设计秒杀</a></li><li><a href="https://mp.weixin.qq.com/s/cdnRmiUFJTIYJVMfgJJw_Q" target="_blank" rel="noopener">redis如何方式超买超卖( 如何扣减库存 )</a></li><li><a href="https://copyfuture.com/blogs-details/20200510085548659corx8bjvdg9td64" target="_blank" rel="noopener">推荐使用redis原子操作+sql乐观锁实现</a></li><li><a href="https://www.cnblogs.com/jiawen010/articles/11350125.html" target="_blank" rel="noopener">redis分布式锁</a></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1582079302063-33d56135e4e9?ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Redis" scheme="https://lijinhongpassion.github.io/categories/Redis/"/>
    
    
      <category term="Redis" scheme="https://lijinhongpassion.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Java-为什么使用HashMap需要重写hashcode和equals方法？</title>
    <link href="https://lijinhongpassion.github.io/codeant/8cb1.html"/>
    <id>https://lijinhongpassion.github.io/codeant/8cb1.html</id>
    <published>2020-08-18T10:28:02.000Z</published>
    <updated>2020-08-18T10:45:45.021Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1597484661643-2f5fef640dd1?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1571&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><h4 id="代码一"><a href="#代码一" class="headerlink" title="代码一"></a><strong>代码一</strong></h4><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">&gt; map.put(<span class="string">"k1"</span>, <span class="string">"v1"</span>);</span><br><span class="line">&gt; System.out.println(map);</span><br><span class="line">&gt; <span class="comment">//结果</span></span><br><span class="line">&gt; &#123;k1=v1&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>上述代码是我们常用的<code>HashMap</code>的方式, 以<code>String</code>作为<code>key</code>, <code>Object</code>作为<code>value</code><br>我们在使用<code>HashMap</code>的时候, 一般都没有注意关于<code>HashMap</code>的<code>equals</code>和<code>hashCode</code>的重写问题</p></blockquote><h4 id="代码二"><a href="#代码二" class="headerlink" title="代码二"></a><strong>代码二</strong></h4><p><strong>问题来了, 首先</strong></p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">&gt; String k1 = <span class="keyword">new</span> String(<span class="string">"key"</span>);</span><br><span class="line">&gt; String k2 = <span class="keyword">new</span> String(<span class="string">"key"</span>);</span><br><span class="line">&gt; System.out.println(k1 == k2);</span><br><span class="line">&gt; map.put( k1, <span class="string">"v1"</span>);</span><br><span class="line">&gt; System.out.println(map);</span><br><span class="line">&gt; map.put( k2, <span class="string">"v2"</span>);</span><br><span class="line">&gt; </span><br><span class="line">&gt; System.out.println(map);</span><br><span class="line">&gt; <span class="comment">//结果</span></span><br><span class="line">&gt; <span class="keyword">false</span></span><br><span class="line">&gt; &#123;key=v1&#125;</span><br><span class="line">&gt; &#123;key=v2&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><code>==</code>是用于基本数据类型的值比较, 引用类型的地址比较, 在这里明显<code>k1</code>和<code>k2</code>是同不是一个<code>String</code>对象, 但是他们的值都是<code>key</code>, 所以按照常理来说利用<code>k2</code>也能改变<code>k1</code>的值</p><p>结果显示的确能够利用<code>k2</code>改变<code>k1</code></p></blockquote><h4 id="代码三"><a href="#代码三" class="headerlink" title="代码三"></a><strong>代码三</strong></h4><p><strong>但是</strong></p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">&gt;  </span><br><span class="line">&gt;  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">&gt; </span><br><span class="line">&gt;      Map&lt;CodeAntKey, Object&gt; map = <span class="keyword">new</span> HashMap&lt;CodeAntKey, Object&gt;();</span><br><span class="line">&gt;      CodeAntKey k1 = <span class="keyword">new</span> CodeAntKey(<span class="string">"key"</span>);</span><br><span class="line">&gt;      CodeAntKey k2 = <span class="keyword">new</span> CodeAntKey(<span class="string">"key"</span>);</span><br><span class="line">&gt;      System.out.println(k1 == k2);</span><br><span class="line">&gt;      map.put( k1, <span class="string">"v1"</span>);</span><br><span class="line">&gt;      System.out.println(map);</span><br><span class="line">&gt;      map.put( k2, <span class="string">"v2"</span>);</span><br><span class="line">&gt;      System.out.println(map);</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">CodeAntKey</span></span>&#123;</span><br><span class="line">&gt;  <span class="keyword">private</span> String key;</span><br><span class="line">&gt; </span><br><span class="line">&gt;  <span class="function"><span class="keyword">public</span> <span class="title">CodeAntKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">&gt;      <span class="keyword">this</span>.key = key;</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="comment">//结果</span></span><br><span class="line">&gt; <span class="keyword">false</span></span><br><span class="line">&gt; &#123;com.company.CodeAntKey@<span class="number">1</span>b6d3586=v1&#125;</span><br><span class="line">&gt; &#123;com.company.CodeAntKey@<span class="number">4554617</span>c=v2, com.company.CodeAntKey@<span class="number">1</span>b6d3586=v1&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>这里我自定义了一个类, 利用相同的属性<code>new</code>了两个对象, 所以这里他们不是同一个对象, 所以为<code>fasle</code></p><p>但是按照上面<code>String</code>的示例来说, 应该<code>k2</code>能够改变<code>k1</code>的值, 但是这里为什么失败了</p></blockquote><h4 id="代码四"><a href="#代码四" class="headerlink" title="代码四"></a><strong>代码四</strong></h4><p><strong>怎样解决</strong></p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">&gt;</span><br><span class="line">&gt;   Map&lt;CodeAntKey, Object&gt; map = <span class="keyword">new</span> HashMap&lt;CodeAntKey, Object&gt;();</span><br><span class="line">&gt;   CodeAntKey k1 = <span class="keyword">new</span> CodeAntKey(<span class="string">"key"</span>);</span><br><span class="line">&gt;   CodeAntKey k2 = <span class="keyword">new</span> CodeAntKey(<span class="string">"key"</span>);</span><br><span class="line">&gt;   System.out.println(k1 == k2);</span><br><span class="line">&gt;   map.put( k1, <span class="string">"v1"</span>);</span><br><span class="line">&gt;   System.out.println(map);</span><br><span class="line">&gt;   map.put( k2, <span class="string">"v2"</span>);</span><br><span class="line">&gt;   System.out.println(map);</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;<span class="class"><span class="keyword">class</span> <span class="title">CodeAntKey</span></span>&#123;</span><br><span class="line">&gt;<span class="keyword">private</span> String key;</span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="title">CodeAntKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">&gt;   <span class="keyword">this</span>.key = key;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="meta">@Override</span></span><br><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">&gt;   <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&gt;   <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> CodeAntKey)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&gt;   CodeAntKey that = (CodeAntKey) o;</span><br><span class="line">&gt;   <span class="keyword">return</span> key.equals(that.key);</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="meta">@Override</span></span><br><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&gt;   <span class="keyword">return</span> Objects.hash(key);</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;<span class="comment">//结果</span></span><br><span class="line">&gt;<span class="keyword">false</span></span><br><span class="line">&gt;&#123;com.company.CodeAntKey@<span class="number">19e7</span>e=v1&#125;</span><br><span class="line">&gt;&#123;com.company.CodeAntKey@<span class="number">19e7</span>e=v2&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>这里的代码跟上面的代码就多了<code>equals</code>和<code>hashCode</code>方法, 然后发现<code>k2</code>可以改变<code>k1</code>的值了</p></blockquote><p><strong>那到底是为什么呢, 下面慢慢道来…</strong></p><hr><h2 id="HashMap的存储方式-PUT"><a href="#HashMap的存储方式-PUT" class="headerlink" title="HashMap的存储方式 - PUT"></a>HashMap的存储方式 - PUT</h2><blockquote><p>在面试的时候经常问这个问题, 大家都是一通<code>jdk1.7之前是数组 + 链表</code>和<code>jdk1.8是数组 + 链表 + 红黑树( 链表长度超过8就使用红黑树 )</code>这样说, 其实也是没有错的</p></blockquote><p><strong>但是HashMap是怎样将数据放至进入他的数据结构中的呢 ? </strong></p><p><strong>先放部分源码, 有兴趣的可以阅读put全部源码的可以去<a href="https://www.cnblogs.com/captainad/p/10905184.html" target="_blank" rel="noopener">https://www.cnblogs.com/captainad/p/10905184.html</a></strong></p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">&gt;  <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&gt; &#125; </span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment">//计算hash值</span></span><br><span class="line">&gt; <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">&gt;  <span class="keyword">int</span> h;</span><br><span class="line">&gt;  <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">&gt;              <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">&gt;   Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">&gt;   <span class="comment">// 如果map还是空的，则先开始初始化，table是map中用于存放索引的表</span></span><br><span class="line">&gt;   <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>) &#123;</span><br><span class="line">&gt;       n = (tab = resize()).length;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   <span class="comment">// 使用hash与数组长度减一的值进行异或得到分散的数组下标，预示着按照计算现在的</span></span><br><span class="line">&gt;   <span class="comment">// key会存放到这个位置上，如果这个位置上没有值，那么直接新建k-v节点存放</span></span><br><span class="line">&gt;   <span class="comment">// 其中长度n是一个2的幂次数</span></span><br><span class="line">&gt;   <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>) &#123;</span><br><span class="line">&gt;       tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;   <span class="comment">// 如果走到else这一步，说明key索引到的数组位置上已经存在内容，即出现了碰撞</span></span><br><span class="line">&gt;   <span class="comment">// 这个时候需要更为复杂处理碰撞的方式来处理，如链表和树</span></span><br><span class="line">&gt;   <span class="keyword">else</span> &#123;</span><br><span class="line">&gt;       Node&lt;K,V&gt; e; K k;</span><br><span class="line">&gt;       <span class="comment">// 其中p已经在上面通过计算索引找到了，即发生碰撞那一个节点</span></span><br><span class="line">&gt;       <span class="comment">// 比较，如果该节点的hash和当前的hash相等，而且key也相等或者</span></span><br><span class="line">&gt;       <span class="comment">// 在key不等于null的情况下key的内容也相等，则说明两个key是</span></span><br><span class="line">&gt;       <span class="comment">// 一样的，则将当前节点p用临时节点e保存</span></span><br><span class="line">&gt;       <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">&gt;               ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">&gt;           e = p;</span><br><span class="line">&gt;       &#125;<span class="keyword">else</span> <span class="keyword">if</span>()&#123;</span><br><span class="line">&gt;           <span class="comment">//...省略</span></span><br><span class="line">&gt;       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">&gt;           <span class="comment">//...省略</span></span><br><span class="line">&gt;       &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;       <span class="comment">// 此时的e是保存的被碰撞的那个节点，即老节点</span></span><br><span class="line">&gt;       <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">&gt;           V oldValue = e.value;</span><br><span class="line">&gt;           <span class="comment">// onlyIfAbsent是方法的调用参数，表示是否替换已存在的值，</span></span><br><span class="line">&gt;           <span class="comment">// 在默认的put方法中这个值是false，所以这里会用新值替换旧值</span></span><br><span class="line">&gt;           <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">&gt;               e.value = value;</span><br><span class="line">&gt;           <span class="comment">// Callbacks to allow LinkedHashMap post-actions</span></span><br><span class="line">&gt;           afterNodeAccess(e);</span><br><span class="line">&gt;           <span class="keyword">return</span> oldValue;</span><br><span class="line">&gt;       &#125;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   <span class="comment">//...省略</span></span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>也就是说<code>hashMap</code>在<code>put</code>的时候是</p><ol><li>需要先计算<code>key</code>的<code>hash</code>值( <code>hash(key)</code> ), </li><li>然后利用<code>hash值</code>去寻址, </li><li>当地址上已经存在内容, 再利用<code>equals</code>比较对象的;</li></ol><p>自定义类在没有重写<code>hashCode</code>的方法时, 默认调用的是Object类的<code>equals()</code>和<code>hashCode()</code>, </p><p><strong><code>Object</code>中的<code>equals()</code>和<code>hashCode()</code></strong></p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">&gt;<span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>所以我们需要重写<code>equals()</code>和<code>hashCode()</code>方法, 不然就会造成<strong>代码四</strong>标题的问题</p><h2 id="HashMap的获取方式-GET"><a href="#HashMap的获取方式-GET" class="headerlink" title="HashMap的获取方式 - GET"></a>HashMap的获取方式 - GET</h2><font size="6px" color="red">为什么在重写equals方法的同时，必须重写hashCode方法</font><p><strong>上源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">    <span class="comment">//确保table不为空，并且计算得到的下标对应table的位置上有节点</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//判断第一个节点是不是要找的key</span></span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="comment">//如果第一个节点就查找链表或者红黑树</span></span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//红黑树上查找</span></span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="comment">//链表上查找</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们试图添加或者找到一个<code>key</code>的时候，方法会去判断哈希值是否相等和值是否相等，都相等的时候才会判断这个<code>key</code>就是要获取的<code>key</code>。也就是说，严格意义上，一个<code>HashMap</code>里是不允许出现相同的<code>key</code>的。</p><p>当我们使用对象作为<code>key</code>的时候，根据原本的<code>hashCode</code>和<code>equals</code>仍然能保证<code>key</code>的唯一性。但是当我们重写了<code>equals</code>方法而不重写<code>hashCode()</code>方法时，可能出现值相等但是因为地址不相等导致哈希值不同，最后导致出现两个相同的<code>key</code>的情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;CodeAnimal, Object&gt; map = <span class="keyword">new</span> HashMap&lt;CodeAnimal, Object&gt;();</span><br><span class="line">        CodeAnimal k1 = <span class="keyword">new</span> CodeAnimal(<span class="string">"ant"</span>, <span class="number">25</span>);</span><br><span class="line">        CodeAnimal k2 = <span class="keyword">new</span> CodeAnimal(<span class="string">"ant"</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"k1 == k2 : "</span> + (k1 == k2));</span><br><span class="line">        map.put( k1, <span class="string">"v1"</span>);</span><br><span class="line">        System.out.println(<span class="string">"1 ---- "</span> + map);</span><br><span class="line">        map.put( k2, <span class="string">"v2"</span>);</span><br><span class="line">        System.out.println(<span class="string">"2 ---- "</span> + map);</span><br><span class="line"></span><br><span class="line">        System.out.println(k1.hashCode());</span><br><span class="line">        System.out.println(k2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CodeAnimal</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CodeAnimal</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> CodeAnimal)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        CodeAnimal that = (CodeAnimal) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(getName(), that.getName()) &amp;&amp;</span><br><span class="line">                Objects.equals(getAge(), that.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">k1 == k2 : <span class="keyword">false</span></span><br><span class="line"><span class="number">1</span> ---- &#123;com.company.CodeAnimal@<span class="number">1</span>b6d3586=v1&#125;</span><br><span class="line"><span class="number">2</span> ---- &#123;com.company.CodeAnimal@<span class="number">4554617</span>c=v2, com.company.CodeAnimal@<span class="number">1</span>b6d3586=v1&#125;</span><br><span class="line"><span class="number">460141958</span></span><br><span class="line"><span class="number">1163157884</span></span><br></pre></td></tr></table></figure><p>上述代码得出, 在两个对象的值相同时, 两个对象分别存入<code>map</code>, 如果不重写<code>hashCode</code>方法 ,就会存在两个<code>key</code>相同</p><blockquote><p>如果调用equals方法得到的结果为true，则两个对象的hashcode值必定相等；</p><p>如果equals方法得到的结果为false，则两个对象的hashcode值不一定不同；</p><p>如果两个对象的hashcode值不等，则equals方法得到的结果必定为false；</p><p>如果两个对象的hashcode值相等，则equals方法得到的结果未知。</p></blockquote><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.cnblogs.com/captainad/p/10905184.html" target="_blank" rel="noopener">HashMap之put方法流程解读</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1597484661643-2f5fef640dd1?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1571&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java-tomcat频繁重启,频繁fullGC问题排查</title>
    <link href="https://lijinhongpassion.github.io/codeant/600c.html"/>
    <id>https://lijinhongpassion.github.io/codeant/600c.html</id>
    <published>2020-08-18T10:23:17.000Z</published>
    <updated>2020-08-18T10:45:45.018Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1597484661643-2f5fef640dd1?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=971&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><blockquote><p>上周周末，公司的服务器发生了一次线上事故， 在10000多的并发下，服务器宕机了，一下子就让我想到了调优的相关问题。</p></blockquote><blockquote><p>如何在高并发的情况下 , <strong>如何让tomcat达到性能最优 ?</strong> <strong>以及如何排查引起内存溢出的原因 ?</strong> </p></blockquote><hr><h2 id="可视化工具"><a href="#可视化工具" class="headerlink" title="可视化工具"></a><strong>可视化工具</strong></h2><p>对jvm监控的常见可视化工具，除了jdk本身提供的Jconsole和visualVm以外，还有第三方提供的jprofilter，perfino,Yourkit，Perf4j，JProbe，MAT等。这些工具都极大的丰富了我们定位以及优化jvm方式。</p><p>这些工具的使用，网上有很多教程提供，这里就不再过多介绍了。对于VisualVm来说，比较推荐使用，它除了对jvm的侵入性比较低以外，还是jdk团队自己开发的，相信以后功能会更加丰富和完善。jprofilter对于第三方监控工具，提供的功能和可视化最为完善，目前多数ide都支持其插件，对于上线前的调试以及性能调优可以配合使用。</p><p>另外对于线上dump的heap信息，应该尽量拉去到线下用于可视化工具来分析，这样分析更详细。如果对于一些紧急的问题，必须需要通过线上监控，可以采用 VisualVm的远程功能来进行，这需要使用tool.jar下的MAT功能。</p><hr><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>在排除Tomcat的问题后 , 一般都是考虑JVM的排查和调优 , 一般的步骤如下 : </p><p> <strong>1. 检查各种调优参数是否合理 , 例如检查年轻代和老年代的比例, 以及年轻代中  伊甸园:幸存0区:幸存1区 = 8:1:1</strong></p><p> <strong>2. 检查GC的频率 ( full gc 和young gc )</strong></p><pre><code>- FullGC一天超过一次肯定就不正常了- dump堆的命令 : jmap -dump , 转储内存到线下利用jprofile分析- 发现FullGC频繁的时候优先调查内存泄漏问题 ( 也就是无用对象因为逻辑问题被引用, 导致长时间无法回收 )</code></pre><p> <strong>3. 如果发现CPU持续偏高，排除代码问题后可以找运维咨询下阿里云客服，这次调查过程中就发现CPU 100%是由于服务器问题导致的，进行服务器迁移后就正常 了。数据查询的时候也是算作服务器的入口流量的，如果访问业务没有这么大量，而且没有攻击的问题的话可以往数据库方面调查</strong></p><hr><h2 id="正常参数"><a href="#正常参数" class="headerlink" title="正常参数"></a>正常参数</h2><p>CMS收集器默认分代年龄 : 6 ( YGC 6次后还存活的对象就会晋升到老年代 ) </p><p>Eden区，From Survivor区（简称S0），To Survivor区（简称S1区），三者的默认比例为 : 8:1:1</p><p>新生代和老年代的默认比例为 : 1:2</p><p><strong>FULL GC</strong></p><blockquote><p>时长 : 少则几百毫秒，多则几秒</p><p>频率 : 每隔几个小时甚至几天才执行一次</p></blockquote><p><strong>YOUNG GC</strong></p><blockquote><p>时长 : 总耗时在几十或者上百毫秒是比较正常的</p></blockquote><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><blockquote><p>阅读顺序</p><ol><li><a href="https://www.zhihu.com/question/19867883" target="_blank" rel="noopener">如何做并发测试 – 玩家翁伟</a></li><li><a href="https://segmentfault.com/a/1190000015918707" target="_blank" rel="noopener">TomCat优化</a></li><li><a href="https://mp.weixin.qq.com/s/Sjh9qFPKF250vLQGZig6nw" target="_blank" rel="noopener">线上服务的FGC问题排查，涨知识了</a> – <strong>推荐参考 : 本地有文件</strong></li><li><a href="https://www.ershicimi.com/p/e7fa0ed7ca58a52120420406f31462dd" target="_blank" rel="noopener">记一次线上商城系统高并发的优化 – Java团长</a></li><li><a href="https://segmentfault.com/a/1190000022638726" target="_blank" rel="noopener">一次JVM内存问题导致的线上事故 – 铂赛东</a></li><li><a href="https://blog.csdn.net/cml_blog/article/details/81057966" target="_blank" rel="noopener">一次线上JVM调优实践，FullGC40次/天到10天一次的优化过程</a></li><li><a href="https://segmentfault.com/a/1190000017226359" target="_blank" rel="noopener">十种JVM内存溢出的情况，你碰到过几种？– 煮酒科技</a></li><li><a href="https://my.oschina.net/u/1859679/blog/1552290?_from=gitee_rec" target="_blank" rel="noopener">jvm优化必知系列——监控工具</a></li><li><a href="https://my.oschina.net/feichexia/blog/196575" target="_blank" rel="noopener">JVM性能调优监控工具jps、jstack、jmap、jhat、jstat、hprof使用详解</a></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1597484661643-2f5fef640dd1?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=971&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
      <category term="线上" scheme="https://lijinhongpassion.github.io/categories/java/%E7%BA%BF%E4%B8%8A/"/>
    
      <category term="jvm" scheme="https://lijinhongpassion.github.io/categories/java/%E7%BA%BF%E4%B8%8A/jvm/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java锁汇总-15种锁功能的介绍( 转载 )</title>
    <link href="https://lijinhongpassion.github.io/codeant/4e7.html"/>
    <id>https://lijinhongpassion.github.io/codeant/4e7.html</id>
    <published>2020-07-29T13:44:15.000Z</published>
    <updated>2020-08-20T10:22:55.771Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="通行证" />    <label for="pass">通行证</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      摘要
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
      <category term="锁" scheme="https://lijinhongpassion.github.io/categories/java/%E9%94%81/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>MySQL-MySQL常用函数</title>
    <link href="https://lijinhongpassion.github.io/codeant/aeda.html"/>
    <id>https://lijinhongpassion.github.io/codeant/aeda.html</id>
    <published>2020-07-22T10:17:45.000Z</published>
    <updated>2020-07-22T10:25:57.954Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1595341595379-cf1cb694ea1f?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1042&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><p>[toc]</p><h2 id="0、前言"><a href="#0、前言" class="headerlink" title="0、前言"></a>0、前言</h2><p>mysql语句执行顺序分析: https:– <a href="http://www.cnblogs.com/xiaolovewei/p/8999623.html(该blog对每一种SQL语句都进行了分析,值得一看)" target="_blank" rel="noopener">www.cnblogs.com/xiaolovewei/p/8999623.html(该blog对每一种SQL语句都进行了分析,值得一看)</a></p><p><strong>MySQL语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>[<span class="keyword">distinct</span>]  </span><br><span class="line"><span class="keyword">from</span>  </span><br><span class="line"><span class="keyword">join</span>（如<span class="keyword">left</span> <span class="keyword">join</span>）  </span><br><span class="line"><span class="keyword">on</span>  </span><br><span class="line"><span class="keyword">where</span>  </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span>  </span><br><span class="line"><span class="keyword">having</span>  </span><br><span class="line"><span class="keyword">union</span>  </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span>  </span><br><span class="line"><span class="keyword">limit</span></span><br></pre></td></tr></table></figure><p><strong>MySQL执行顺序</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from  </span><br><span class="line">on  </span><br><span class="line">join  </span><br><span class="line">where  </span><br><span class="line">group by  </span><br><span class="line">having  </span><br><span class="line"><span class="keyword">select</span>  </span><br><span class="line"><span class="keyword">distinct</span>  </span><br><span class="line"><span class="keyword">union</span>  </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br></pre></td></tr></table></figure><h2 id="1、数学函数"><a href="#1、数学函数" class="headerlink" title="1、数学函数"></a>1、数学函数</h2><h4 id="1-1-绝对值-abs-x"><a href="#1-1-绝对值-abs-x" class="headerlink" title="1.1 绝对值 - abs(x)"></a>1.1 绝对值 - abs(x)</h4><blockquote><p>返回x的绝对值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ABS</span>( <span class="number">5</span> ),</span><br><span class="line"><span class="keyword">ABS</span>( - <span class="number">2.4</span> ),</span><br><span class="line"><span class="keyword">ABS</span>( - <span class="number">24</span> ),</span><br><span class="line"><span class="keyword">ABS</span>( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果:  52.4240</span></span><br></pre></td></tr></table></figure><h4 id="1-2-进制-bin-x"><a href="#1-2-进制-bin-x" class="headerlink" title="1.2 进制 - bin(x)"></a>1.2 进制 - bin(x)</h4><blockquote><p>返回x的二进制（OCT返回八进制，HEX返回十六进制）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">BIN</span>( <span class="number">23</span> ), <span class="comment"># 二进制</span></span><br><span class="line"><span class="keyword">OCT</span>( <span class="number">23</span> ), <span class="comment"># 八进制</span></span><br><span class="line"><span class="keyword">HEX</span>( <span class="number">23</span> ); <span class="comment"># 十六进制</span></span><br><span class="line"><span class="comment"># 结果:  101112717</span></span><br></pre></td></tr></table></figure><h4 id="1-3-最值-ceiling-x"><a href="#1-3-最值-ceiling-x" class="headerlink" title="1.3 最值 - ceiling(x)"></a>1.3 最值 - ceiling(x)</h4><blockquote><p>返回大于x的最小整数值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CEILING</span>(<span class="number">2.1</span>);</span><br><span class="line"><span class="comment"># 结果:  3</span></span><br></pre></td></tr></table></figure><h4 id="1-4-最值-floor-x"><a href="#1-4-最值-floor-x" class="headerlink" title="1.4 最值 - floor(x)"></a>1.4 最值 - floor(x)</h4><blockquote><p>返回小于x的最大整数值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">FLOOR</span>(<span class="number">2.1</span>);</span><br><span class="line"><span class="comment"># 结果:  2</span></span><br></pre></td></tr></table></figure><h4 id="1-5-e的次方-exp-x"><a href="#1-5-e的次方-exp-x" class="headerlink" title="1.5 e的次方 - exp(x)"></a>1.5 e的次方 - exp(x)</h4><blockquote><p>返回值e（自然对数的底）的x次方</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">exp</span>(<span class="number">2</span>),</span><br><span class="line"><span class="keyword">exp</span>(<span class="number">2.1</span>);</span><br><span class="line"><span class="comment"># 结果:  7.389056098930658.166169912567652</span></span><br></pre></td></tr></table></figure><h4 id="1-6-最值-greatest-x1-x2-…-xn"><a href="#1-6-最值-greatest-x1-x2-…-xn" class="headerlink" title="1.6 最值- greatest(x1,x2,…,xn)"></a>1.6 最值- greatest(x1,x2,…,xn)</h4><blockquote><p>返回集合中最大的值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">GREATEST</span>(<span class="number">2</span>,<span class="number">1</span>,<span class="number">34</span>,<span class="number">24</span>);</span><br><span class="line"><span class="comment"># 结果:  34</span></span><br></pre></td></tr></table></figure><h4 id="1-7-最值-least-x1-x2-…-xn"><a href="#1-7-最值-least-x1-x2-…-xn" class="headerlink" title="1.7 最值- least(x1,x2,…,xn)"></a>1.7 最值- least(x1,x2,…,xn)</h4><blockquote><p> 返回集合中最小的值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">LEAST</span>(<span class="number">2</span>,<span class="number">1</span>,<span class="number">34</span>,<span class="number">24</span>);</span><br><span class="line"><span class="comment"># 结果:  1</span></span><br></pre></td></tr></table></figure><h4 id="1-8-对数-ln-x"><a href="#1-8-对数-ln-x" class="headerlink" title="1.8 对数- ln(x)"></a>1.8 对数- ln(x)</h4><blockquote><p>返回x的自然对数</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">LN</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment"># 结果:  0.6931471805599453</span></span><br></pre></td></tr></table></figure><h4 id="1-9-对数-log-x-y"><a href="#1-9-对数-log-x-y" class="headerlink" title="1.9 对数- log(x,y)"></a>1.9 对数- log(x,y)</h4><blockquote><p>返回x的以y为底的对数</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">LOG</span>(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment"># 结果:  1.5849625007211563</span></span><br></pre></td></tr></table></figure><h4 id="1-10-余数-mod-x-y"><a href="#1-10-余数-mod-x-y" class="headerlink" title="1.10 余数 - mod(x,y)"></a>1.10 余数 - mod(x,y)</h4><blockquote><p>返回x/y的模（余数）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">MOD</span>(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment"># 结果:  2</span></span><br></pre></td></tr></table></figure><h4 id="1-11-圆周率-pi"><a href="#1-11-圆周率-pi" class="headerlink" title="1.11 圆周率 - pi()"></a>1.11 圆周率 - pi()</h4><blockquote><p>返回π的值（圆周率）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">PI</span>();</span><br><span class="line"><span class="comment"># 结果:  3.141593</span></span><br></pre></td></tr></table></figure><h4 id="1-12-随机值-rand"><a href="#1-12-随机值-rand" class="headerlink" title="1.12 随机值 - rand()"></a>1.12 随机值 - rand()</h4><blockquote><p>返回０到１内的随机值,可以通过提供一个参数(种子)使RAND()随机数生成器生成一个指定的值。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">rand</span>();</span><br><span class="line"><span class="comment"># 结果:  0.8417046338708183</span></span><br></pre></td></tr></table></figure><h4 id="1-13-四舍五入-round-x-y"><a href="#1-13-四舍五入-round-x-y" class="headerlink" title="1.13 四舍五入 - round(x,y)"></a>1.13 四舍五入 - round(x,y)</h4><blockquote><p>返回参数x的四舍五入的有y位小数的值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ROUND</span>(<span class="number">5.14591</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment"># 结果:  5.15</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ROUND</span>(<span class="number">5.14591</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment"># 结果:  5</span></span><br></pre></td></tr></table></figure><h4 id="1-14-正负零-sign-x"><a href="#1-14-正负零-sign-x" class="headerlink" title="1.14 正负零 - sign(x)"></a>1.14 正负零 - sign(x)</h4><blockquote><p>返回 X 的符号标志，负数 = -1，整数 = 1，零 = 0</p><p>也可以传字符串，中文 = 0，负数开头 = -1，正数开头 = 1，字母开头 = 0</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">SIGN</span>( - <span class="number">32</span> );<span class="comment"># -1</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">SIGN</span>( <span class="number">0</span> );<span class="comment"># 0</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">SIGN</span>( <span class="number">234</span> );<span class="comment"># 1</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">SIGN</span>( <span class="string">"-1s"</span> );<span class="comment"># -1</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">SIGN</span>( <span class="string">"1s1"</span> );<span class="comment"># 1</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">SIGN</span>( <span class="string">"中文"</span> );<span class="comment"># 0</span></span><br></pre></td></tr></table></figure><h4 id="1-15-平方根-sqrt-x"><a href="#1-15-平方根-sqrt-x" class="headerlink" title="1.15 平方根 - sqrt(x)"></a>1.15 平方根 - sqrt(x)</h4><blockquote><p>返回一个数的平方根</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">sqrt</span>(<span class="number">9</span>);<span class="comment"># 3</span></span><br></pre></td></tr></table></figure><h4 id="1-16-次方-POW-x-y-和-POWER-x-y"><a href="#1-16-次方-POW-x-y-和-POWER-x-y" class="headerlink" title="1.16 次方- POW(x,y) 和 POWER(x,y)"></a>1.16 次方- POW(x,y) 和 POWER(x,y)</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">POW</span>(<span class="number">3</span>,<span class="number">2</span>),<span class="comment"># 3的2次方  9</span></span><br><span class="line">  <span class="keyword">POWER</span>(<span class="number">2</span>,<span class="number">3</span>);<span class="comment"># 2的三次方  8</span></span><br></pre></td></tr></table></figure><h4 id="1-17-保留小数位数-truncate-x-y-和round-x-y"><a href="#1-17-保留小数位数-truncate-x-y-和round-x-y" class="headerlink" title="1.17 保留小数位数 - truncate(x,y)和round(x,y)"></a>1.17 保留小数位数 - truncate(x,y)和round(x,y)</h4><blockquote><p>返回数字x截短为y位小数的结果</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">TRUNCATE</span>(<span class="number">3.1534153</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment"># 结果:  3.15</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ROUND</span>(<span class="number">5.14591</span>,<span class="number">2</span>);<span class="comment"># 四舍五入</span></span><br><span class="line"><span class="comment"># 结果:  5.15</span></span><br></pre></td></tr></table></figure><h2 id="2、聚合函数-常用于GROUP-BY从句的SELECT查询中"><a href="#2、聚合函数-常用于GROUP-BY从句的SELECT查询中" class="headerlink" title="2、聚合函数(常用于GROUP BY从句的SELECT查询中)"></a>2、聚合函数(常用于GROUP BY从句的SELECT查询中)</h2><h4 id="注意执行顺序"><a href="#注意执行顺序" class="headerlink" title="注意执行顺序"></a>注意执行顺序</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.Customer,<span class="keyword">sum</span>(a.OrderPrice)  </span><br><span class="line"><span class="keyword">from</span> orders a  </span><br><span class="line"><span class="keyword">where</span> a.Customer=<span class="string">'Bush'</span> <span class="keyword">or</span> a.Customer = <span class="string">'Adams'</span>  </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a.Customer</span><br></pre></td></tr></table></figure><p>在from，where执行后，执行group by，同时也根据group by的字段，执行sum这个聚合函数。这样的话得到的记录对group by的字段来说是不重复的</p><hr><h4 id="2-1-AVG-col-平均值"><a href="#2-1-AVG-col-平均值" class="headerlink" title="2.1 AVG(col) - 平均值"></a>2.1 AVG(col) - 平均值</h4><blockquote><p>返回指定列的平均值</p></blockquote><h4 id="2-2-COUNT-col-计数"><a href="#2-2-COUNT-col-计数" class="headerlink" title="2.2 COUNT(col) - 计数"></a>2.2 COUNT(col) - 计数</h4><blockquote><p>返回指定列中非NULL值的个数</p></blockquote><h4 id="2-3-MIN-col-最小值-TOP-LIMIT关键字"><a href="#2-3-MIN-col-最小值-TOP-LIMIT关键字" class="headerlink" title="2.3 MIN(col) - 最小值 - TOP\LIMIT关键字"></a>2.3 MIN(col) - 最小值 - TOP\LIMIT关键字</h4><blockquote><p>返回指定列的最小值</p></blockquote><p>这个聚合函数的最值获取只能获取当方面的值, 获取当前课程的前5名的学生信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">2</span> * <span class="keyword">FROM</span> Persons <span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">asc</span></span><br></pre></td></tr></table></figure><h4 id="2-4-MAX-col-最大值-TOP-LIMIT关键字"><a href="#2-4-MAX-col-最大值-TOP-LIMIT关键字" class="headerlink" title="2.4 MAX(col) - 最大值 - TOP\LIMIT关键字"></a>2.4 MAX(col) - 最大值 - TOP\LIMIT关键字</h4><blockquote><p>返回指定列的最大值</p></blockquote><h4 id="2-5-SUM-col-计算集合"><a href="#2-5-SUM-col-计算集合" class="headerlink" title="2.5 SUM(col) - 计算集合"></a>2.5 SUM(col) - 计算集合</h4><blockquote><p>返回指定列的所有值之和</p></blockquote><h4 id="2-6-GROUP-CONCAT-col-……-组合每一组的这个字段"><a href="#2-6-GROUP-CONCAT-col-……-组合每一组的这个字段" class="headerlink" title="2.6 GROUP_CONCAT(col,……) - 组合每一组的这个字段"></a>2.6 GROUP_CONCAT(col,……) - 组合每一组的这个字段</h4><blockquote><p>返回由属于一组的几列的列值连接组合而成的结果(先拼接一行的几列,再把几行的这几列拼接起来)</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">id name type score</span><br><span class="line">1小红数学98</span><br><span class="line">1小红英语70</span><br><span class="line">1小红语文88</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span>,<span class="keyword">group_Concat</span>(<span class="keyword">type</span>,score) <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">id</span></span><br><span class="line">这里拼接的结果是 <span class="number">1</span>小红数学<span class="number">98</span>,英语<span class="number">70</span>,语文<span class="number">88</span></span><br></pre></td></tr></table></figure><h2 id="3、字符串函数"><a href="#3、字符串函数" class="headerlink" title="3、字符串函数"></a>3、字符串函数</h2><h4 id="3-1-连接字符串"><a href="#3-1-连接字符串" class="headerlink" title="3.1 连接字符串"></a>3.1 连接字符串</h4><blockquote><p>CONCAT(s1,s2…,sn)将s1,s2…,sn连接成字符串</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="keyword">CONCAT</span>(<span class="string">'1'</span>,<span class="string">'a'</span>,<span class="string">'65'</span>) <span class="comment">-- 1a65</span></span><br></pre></td></tr></table></figure><h4 id="3-2-连接字符串-–-加间隔"><a href="#3-2-连接字符串-–-加间隔" class="headerlink" title="3.2 连接字符串 – 加间隔"></a>3.2 连接字符串 – 加间隔</h4><blockquote><p>CONCAT_WS(sep,s1,s2…,sn)将s1,s2…,sn连接成字符串，并用sep字符间隔</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="keyword">CONCAT_WS</span>(<span class="string">','</span>,<span class="string">'a'</span>,<span class="string">'65'</span>) <span class="comment">-- a,65</span></span><br></pre></td></tr></table></figure><h4 id="3-3-截取字符串"><a href="#3-3-截取字符串" class="headerlink" title="3.3 截取字符串"></a>3.3 截取字符串</h4><ul><li>left(str,index) 从左边开始数, 截取第index位左边</li><li>right(str,index) 从右边开始数, 截取第index位右边</li><li>substring(str,index)当index&gt;0从左边开始截取直到结束  当index&lt;0从右边开始截取直到结束 当index=0返回空</li><li>substring(str,index,len) 截取str,从index开始，截取len长度</li><li>substring_index(str,delim,count)，str是要截取的字符串，delim是截取的字段 count是从哪里开始截取(为0则是左边第0个开始，1位左边开始第一个选取左边的，-1从右边第一个开始选取右边的</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">left</span>(<span class="string">'hello world'</span>,<span class="number">3</span>), <span class="comment">-- hel</span></span><br><span class="line"><span class="keyword">right</span>(<span class="string">'hello world'</span>,<span class="number">3</span>), <span class="comment">-- rld</span></span><br><span class="line"><span class="comment">-- substring索引从1开始</span></span><br><span class="line"><span class="keyword">substring</span>(<span class="string">'hello world'</span>, <span class="number">-3</span>), <span class="comment">-- rld</span></span><br><span class="line"><span class="keyword">substring</span>(<span class="string">'hello world'</span>, <span class="number">3</span>), <span class="comment">-- llo world</span></span><br><span class="line"><span class="keyword">substring</span>(<span class="string">'hello world'</span>,<span class="number">3</span>,<span class="number">5</span>) <span class="comment">-- llo w</span></span><br><span class="line">substring_index(<span class="string">'hello world'</span>,<span class="number">3</span>,<span class="number">5</span>) <span class="comment">-- llo w</span></span><br></pre></td></tr></table></figure><h4 id="3-4-替换字符串"><a href="#3-4-替换字符串" class="headerlink" title="3.4 替换字符串"></a>3.4 替换字符串</h4><h4 id="3-1-字符的ASCII码值"><a href="#3-1-字符的ASCII码值" class="headerlink" title="3.1 字符的ASCII码值"></a>3.1 字符的ASCII码值</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 语法: ASCII(char)</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ASCII</span>(<span class="string">'字'</span>)<span class="comment">-- 229</span></span><br></pre></td></tr></table></figure><p>ASCII(char)返回字符的ASCII码值<br>BIT_LENGTH(str)返回字符串的比特长度<br>INSERT(str,x,y,instr) 将字符串str从第x位置开始，y个字符长的子串替换为字符串instr，返回结果<br>FIND_IN_SET(str,list)分析逗号分隔的list列表，如果发现str，返回str在list中的位置<br>LCASE(str)或LOWER(str) 返回将字符串str中所有字符改变为小写后的结果</p><p>LTRIM(str) 从字符串str中切掉开头的空格<br>POSITION(substr,str) 返回子串substr在字符串str中第一次出现的位置<br>QUOTE(str) 用反斜杠转义str中的单引号<br>REPEAT(str,srchstr,rplcstr)返回字符串str重复x次的结果<br>REVERSE(str) 返回颠倒字符串str的结果<br>RIGHT(str,x) 返回字符串str中最右边的x个字符<br>RTRIM(str) 返回字符串str尾部的空格<br>STRCMP(s1,s2)比较字符串s1和s2<br>TRIM(str)去除字符串首部和尾部的所有空格<br>UCASE(str)或UPPER(str) 返回将字符串str中所有字符转变为大写后的结果</p><h2 id="4、日期和时间函数"><a href="#4、日期和时间函数" class="headerlink" title="4、日期和时间函数"></a>4、日期和时间函数</h2><h4 id="4-1-yyyy-MM-dd-当前的日期"><a href="#4-1-yyyy-MM-dd-当前的日期" class="headerlink" title="4.1 yyyy-MM-dd  -  当前的日期"></a>4.1 yyyy-MM-dd  -  当前的日期</h4><ul><li>CURDATE()</li><li>CURRENT_DATE() </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CURDATE</span>( ),<span class="comment">-- 2020-07-14</span></span><br><span class="line"><span class="keyword">CURRENT_DATE</span> ( )<span class="comment">-- 2020-07-14</span></span><br></pre></td></tr></table></figure><h4 id="4-2-HH-mm-ss-当前的时间"><a href="#4-2-HH-mm-ss-当前的时间" class="headerlink" title="4.2 HH:mm:ss  -  当前的时间"></a>4.2 HH:mm:ss  -  当前的时间</h4><p>yyyy-MM-dd hh:mm:ss   // 12小时制</p><p>yyyy-MM-dd HH:mm:ss  //24小时制</p><ul><li>CURTIME()</li><li>CURRENT_TIME()</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CURTIME</span>(),<span class="comment">-- 15:56:21</span></span><br><span class="line"><span class="keyword">CURRENT_TIME</span>()<span class="comment">-- 15:56:21</span></span><br></pre></td></tr></table></figure><h4 id="4-3-yyyy-MM-dd-HH-mm-ss-当前的完整时间"><a href="#4-3-yyyy-MM-dd-HH-mm-ss-当前的完整时间" class="headerlink" title="4.3 yyyy-MM-dd HH:mm:ss   -  当前的完整时间"></a>4.3 yyyy-MM-dd HH:mm:ss   -  当前的完整时间</h4><ul><li>NOW()</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">NOW</span>();<span class="comment">-- 2020-07-14 16:21:33</span></span><br></pre></td></tr></table></figure><h4 id="4-4-时间格式化"><a href="#4-4-时间格式化" class="headerlink" title="4.4 时间格式化"></a>4.4 时间格式化</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">DATE_FORMAT</span>( <span class="keyword">NOW</span>( ), <span class="string">'%b %d %Y %h:%i %p'</span> ),<span class="comment">-- Jul 14 2020 04:06 PM</span></span><br><span class="line"><span class="keyword">DATE_FORMAT</span>( <span class="keyword">NOW</span>( ), <span class="string">'%m-%d-%Y'</span> ),<span class="comment">-- 07-14-2020</span></span><br><span class="line"><span class="keyword">DATE_FORMAT</span>( <span class="keyword">NOW</span>( ), <span class="string">'%d %b %y'</span> ),<span class="comment">-- 14 Jul 20</span></span><br><span class="line"><span class="keyword">DATE_FORMAT</span>( <span class="keyword">NOW</span>( ), <span class="string">'%d %b %Y %T'</span> ),<span class="comment">-- 14 Jul 2020 16:06:36</span></span><br><span class="line"><span class="keyword">DATE_FORMAT</span>( <span class="keyword">NOW</span>( ), <span class="string">'%Y-%m-%d %T'</span> ),<span class="comment">-- 2020-07-14 16:06:36</span></span><br><span class="line"><span class="keyword">DATE_FORMAT</span>( <span class="keyword">NOW</span>( ), <span class="string">'%Y-%m-%d %H:%i:%S'</span> ),<span class="comment">-- 2020-07-14 16:06:36</span></span><br><span class="line"><span class="keyword">DATE_FORMAT</span>( <span class="string">'2020/07/14'</span>, <span class="string">'%Y-%m-%d'</span> )<span class="comment">-- 2020-07-14</span></span><br></pre></td></tr></table></figure><h4 id="4-4-日期加-减上指定天数-月数-年数"><a href="#4-4-日期加-减上指定天数-月数-年数" class="headerlink" title="4.4 日期加\减上指定天数\月数\年数"></a>4.4 日期加\减上指定天数\月数\年数</h4><blockquote><p>语法: DATE_ADD(date,INTERVAL int keyword)  – 加日期</p><p>​         DATE_SUB(date,INTERVAL int keyword)  – 减日期</p><p>参考: https:– <a href="http://www.w3school.com.cn/sql/func_date_add.asp" target="_blank" rel="noopener">www.w3school.com.cn/sql/func_date_add.asp</a></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CURRENT_DATE</span>,<span class="comment">-- 2020-07-14</span></span><br><span class="line"><span class="keyword">DATE_SUB</span>( <span class="keyword">CURRENT_DATE</span>, <span class="built_in">INTERVAL</span> <span class="number">6</span> <span class="keyword">MONTH</span> );<span class="comment">-- 2020-01-14   减少6个月</span></span><br></pre></td></tr></table></figure><h4 id="4-5-time时间差"><a href="#4-5-time时间差" class="headerlink" title="4.5 time时间差"></a>4.5 time时间差</h4><blockquote><p>subtime(expr1,expr2)  -  是两个时间相减</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">subtime</span>( <span class="string">'16:01:59'</span>, <span class="string">'16:02:59'</span> )  <span class="comment">--   -00:01:00</span></span><br></pre></td></tr></table></figure><h4 id="4-6-其他"><a href="#4-6-其他" class="headerlink" title="4.6 其他"></a>4.6 其他</h4><h5 id="4-5-1date是-一年的第几天-1-366"><a href="#4-5-1date是-一年的第几天-1-366" class="headerlink" title="4.5.1date是 一年的第几天(1~366)"></a>4.5.1date是 一年的第几天(1~366)</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">DAYOFYEAR</span>( <span class="string">'2020-02-05'</span> )<span class="comment">-- 36</span></span><br></pre></td></tr></table></figure><h5 id="4-5-2-date是-一年的第几周-0-53"><a href="#4-5-2-date是-一年的第几周-0-53" class="headerlink" title="4.5.2 date是 一年的第几周(0~53)"></a>4.5.2 date是 一年的第几周(0~53)</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CURDATE</span>( ),<span class="comment">-- 2020-07-14</span></span><br><span class="line"><span class="keyword">WEEK</span>(<span class="keyword">CURDATE</span>( ))<span class="comment">-- 28</span></span><br></pre></td></tr></table></figure><h5 id="4-5-3-date是-一年的第几月-1-12"><a href="#4-5-3-date是-一年的第几月-1-12" class="headerlink" title="4.5.3 date是 一年的第几月(1-12)"></a>4.5.3 date是 一年的第几月(1-12)</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CURDATE</span>( ),<span class="comment">-- 2020-07-14</span></span><br><span class="line"><span class="keyword">MONTH</span>(<span class="keyword">CURDATE</span>( ))<span class="comment">-- 7</span></span><br></pre></td></tr></table></figure><h5 id="4-5-4date是-一年的第几季度-1-4"><a href="#4-5-4date是-一年的第几季度-1-4" class="headerlink" title="4.5.4date是 一年的第几季度(1-4)"></a>4.5.4date是 一年的第几季度(1-4)</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CURDATE</span>( ),<span class="comment">-- 2020-07-14</span></span><br><span class="line"><span class="keyword">QUARTER</span>(<span class="keyword">CURDATE</span>( ))<span class="comment">-- 3</span></span><br></pre></td></tr></table></figure><h5 id="4-5-5date是-一月的第几天-1-31"><a href="#4-5-5date是-一月的第几天-1-31" class="headerlink" title="4.5.5date是 一月的第几天(1~31)"></a>4.5.5date是 一月的第几天(1~31)</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">DAYOFYEAR</span>( <span class="string">'2020-02-05'</span> )<span class="comment">-- 5</span></span><br></pre></td></tr></table></figure><h5 id="4-5-6date是-一周的第几天-1-7"><a href="#4-5-6date是-一周的第几天-1-7" class="headerlink" title="4.5.6date是 一周的第几天(1~7)"></a>4.5.6date是 一周的第几天(1~7)</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CURDATE</span>( ),<span class="comment">-- 2020-07-14</span></span><br><span class="line"><span class="keyword">DAYOFWEEK</span>( <span class="keyword">CURDATE</span>( ) )<span class="comment">-- 3</span></span><br></pre></td></tr></table></figure><h5 id="4-5-7date是-一周的星期几"><a href="#4-5-7date是-一周的星期几" class="headerlink" title="4.5.7date是 一周的星期几"></a>4.5.7date是 一周的星期几</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CURDATE</span>( ),<span class="comment">-- 2020-07-14</span></span><br><span class="line"><span class="keyword">date_format</span>( <span class="keyword">CURDATE</span>( ), <span class="string">'%W'</span> ),<span class="comment">-- Tuesday</span></span><br><span class="line"><span class="keyword">DAYNAME</span>(<span class="keyword">CURDATE</span>( ))<span class="comment">-- Tuesday</span></span><br></pre></td></tr></table></figure><h5 id="4-5-8-time的小时值-0-23"><a href="#4-5-8-time的小时值-0-23" class="headerlink" title="4.5.8 time的小时值(0~23)"></a>4.5.8 time的小时值(0~23)</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line"><span class="keyword">HOUR</span>( <span class="keyword">CURTIME</span>( ) )<span class="comment">-- 16</span></span><br></pre></td></tr></table></figure><h5 id="4-5-9-time的分钟值-0-59"><a href="#4-5-9-time的分钟值-0-59" class="headerlink" title="4.5.9 time的分钟值(0~59)"></a>4.5.9 time的分钟值(0~59)</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line"><span class="keyword">MINUTE</span>( <span class="keyword">CURTIME</span>( ) )<span class="comment">-- 52</span></span><br></pre></td></tr></table></figure><p>subtime(expr1,expr2)</p><h4 id="示例1-两个日期值之间的差值-月数"><a href="#示例1-两个日期值之间的差值-月数" class="headerlink" title="示例1 - 两个日期值之间的差值(月数)"></a>示例1 - 两个日期值之间的差值(月数)</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">PERIOD_DIFF</span>( <span class="number">200302</span>, <span class="number">199802</span> );<span class="comment">-- 60</span></span><br></pre></td></tr></table></figure><h4 id="示例2-计算年龄"><a href="#示例2-计算年龄" class="headerlink" title="示例2 - 计算年龄"></a>示例2 - 计算年龄</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">TO_DAYS</span>( <span class="keyword">NOW</span>( ) ),<span class="comment">-- 转化为天数737985</span></span><br><span class="line"><span class="keyword">FROM_DAYS</span>( <span class="keyword">TO_DAYS</span>( <span class="keyword">NOW</span>( ) ) - <span class="keyword">TO_DAYS</span>( <span class="string">'1997-07-14'</span> ) ),<span class="comment">-- 转化为年份0023-01-01</span></span><br><span class="line"><span class="keyword">DATE_FORMAT</span>( <span class="keyword">FROM_DAYS</span>( <span class="keyword">TO_DAYS</span>( <span class="keyword">NOW</span>( ) ) - <span class="keyword">TO_DAYS</span>( <span class="string">'1997-07-14'</span> ) ), <span class="string">'%Y'</span> ) + <span class="number">0</span> <span class="keyword">AS</span> age <span class="comment">-- 年龄</span></span><br></pre></td></tr></table></figure><h2 id="5、加密函数"><a href="#5、加密函数" class="headerlink" title="5、加密函数"></a>5、加密函数</h2><blockquote><p>AES_ENCRYPT(str,key)  返回用密钥key对字符串str利用高级加密标准算法加密后的结果，调用AES_ENCRYPT的结果是一个二进制字符串，以BLOB类型存储<br>AES_DECRYPT(str,key)  返回用密钥key对字符串str利用高级加密标准算法解密后的结果<br>DECODE(str,key)   使用key作为密钥解密加密字符串str<br>ENCRYPT(str,salt)   使用UNIXcrypt()函数，用关键词salt(一个可以惟一确定口令的字符串，就像钥匙一样)加密字符串str<br>ENCODE(str,key)   使用key作为密钥加密字符串str，调用ENCODE()的结果是一个二进制字符串，它以BLOB类型存储<br>MD5()    计算字符串str的MD5校验和<br>PASSWORD(str)   返回字符串str的加密版本，这个加密过程是不可逆转的，和UNIX密码加密过程使用不同的算法。<br>SHA()    计算字符串str的安全散列算法(SHA)校验和</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ENCRYPT</span>(<span class="string">'root'</span>,<span class="string">'salt'</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ENCODE</span>(<span class="string">'xufeng'</span>,<span class="string">'key'</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DECODE</span>(<span class="keyword">ENCODE</span>(<span class="string">'xufeng'</span>,<span class="string">'key'</span>),<span class="string">'key'</span>);<span class="comment">#加解密放在一起</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AES_ENCRYPT</span>(<span class="string">'root'</span>,<span class="string">'key'</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AES_DECRYPT</span>(<span class="keyword">AES_ENCRYPT</span>(<span class="string">'root'</span>,<span class="string">'key'</span>),<span class="string">'key'</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MD5</span>(<span class="string">'123456'</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SHA</span>(<span class="string">'123456'</span>);</span><br></pre></td></tr></table></figure><h2 id="6、控制流函数"><a href="#6、控制流函数" class="headerlink" title="6、控制流函数"></a>6、控制流函数</h2><p>MySQL有4个函数是用来进行条件操作的，这些函数可以实现SQL的条件逻辑，允许开发者将一些应用程序业务逻辑转换到数据库后台。</p><h4 id="6-1-IFNULL"><a href="#6-1-IFNULL" class="headerlink" title="6.1 IFNULL()"></a>6.1 IFNULL()</h4><blockquote><p>IFNULL(arg1,arg2)  –  如果arg1不是空，返回arg1，否则返回arg2</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">IFNULL</span>( <span class="number">1</span>, <span class="number">2</span> ),<span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">IFNULL</span>( <span class="literal">NULL</span>, <span class="number">10</span> ),<span class="comment">-- 10</span></span><br><span class="line"><span class="keyword">IFNULL</span>( <span class="number">4</span> * <span class="literal">NULL</span>, <span class="string">'false'</span> );<span class="comment">-- false</span></span><br></pre></td></tr></table></figure><h4 id="6-2-NULLIF"><a href="#6-2-NULLIF" class="headerlink" title="6.2 NULLIF()"></a>6.2 NULLIF()</h4><blockquote><p>NULLIF(arg1,arg2)   –  如果arg1=arg2返回NULL；否则返回arg1</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">NULLIF</span>( <span class="number">1</span>, <span class="number">1</span> ),<span class="comment">-- null</span></span><br><span class="line"><span class="keyword">NULLIF</span>( <span class="string">'A'</span>, <span class="string">'B'</span> ),<span class="comment">-- A</span></span><br><span class="line"><span class="keyword">NULLIF</span>( <span class="number">2</span>+<span class="number">3</span>, <span class="number">4</span>+<span class="number">1</span> );<span class="comment">-- null</span></span><br></pre></td></tr></table></figure><h4 id="6-3-IF"><a href="#6-3-IF" class="headerlink" title="6.3 IF()"></a>6.3 IF()</h4><blockquote><p>IF(test,t,f)  –  如果test是真，返回t；否则返回f</p><p>IF()函数在只有两种可能结果时才适合使用</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">IF</span></span><br><span class="line">( <span class="number">1</span> &lt; <span class="number">10</span>, <span class="number">2</span>, <span class="number">3</span> ),<span class="comment">-- 2</span></span><br><span class="line"><span class="keyword">IF</span></span><br><span class="line">( <span class="number">56</span> &gt; <span class="number">100</span>, <span class="string">'true'</span>, <span class="string">'false'</span> );<span class="comment">-- false</span></span><br></pre></td></tr></table></figure><h4 id="6-4-CASE-WHEN"><a href="#6-4-CASE-WHEN" class="headerlink" title="6.4 CASE WHEN"></a>6.4 CASE WHEN</h4><blockquote><p>CASE  WHEN[test1]   THEN [result1]…ELSE   [default]   END  –  如果testN是真，则返回resultN，否则返回default</p><p>CASE [test] WHEN[val1] THEN [result]…ELSE [default]  END  – 如果test和valN相等，则返回resultN，否则返回default</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CASE</span></span><br><span class="line"><span class="string">'green'</span> </span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">'red'</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="string">'stop'</span> </span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">'green'</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="string">'go'</span> <span class="keyword">END</span>;<span class="comment">-- go</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CASE</span> </span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">1</span> &gt; <span class="number">2</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="string">'stop'</span> </span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">5</span> &gt; <span class="number">4</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="string">'go'</span> <span class="keyword">END</span>;<span class="comment">-- go</span></span><br></pre></td></tr></table></figure><h2 id="7、格式化函数"><a href="#7、格式化函数" class="headerlink" title="7、格式化函数"></a>7、格式化函数</h2><h4 id="7-1-时间格式化"><a href="#7-1-时间格式化" class="headerlink" title="7.1 时间格式化"></a>7.1 时间格式化</h4><blockquote><p>DATE_FORMAT(date,fmt)  依照字符串fmt格式化日期date值</p></blockquote><h4 id="7-2-数字格式化"><a href="#7-2-数字格式化" class="headerlink" title="7.2 数字格式化"></a>7.2 数字格式化</h4><blockquote><p>FORMAT(x,y)   把x格式化为以逗号隔开的数字序列，y是结果的小数位数</p></blockquote><h4 id="7-3-IP地址转数字"><a href="#7-3-IP地址转数字" class="headerlink" title="7.3 IP地址转数字"></a>7.3 IP地址转数字</h4><blockquote><p>INET_ATON(ip)   返回IP地址的数字表示</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="keyword">INET_ATON</span>(<span class="string">'0.0.78.32'</span>) <span class="comment">-- 20000</span></span><br></pre></td></tr></table></figure><h4 id="7-4-数字转IP地址"><a href="#7-4-数字转IP地址" class="headerlink" title="7.4 数字转IP地址"></a>7.4 数字转IP地址</h4><blockquote><p>INET_NTOA(num)   返回数字所代表的IP地址</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="keyword">INET_NTOA</span>(<span class="number">20000</span>) <span class="comment">-- 0.0.78.32</span></span><br></pre></td></tr></table></figure><h2 id="8、类型转化函数"><a href="#8、类型转化函数" class="headerlink" title="8、类型转化函数"></a>8、类型转化函数</h2><p>为了进行数据类型转化，MySQL提供了CAST()函数，它可以把一个值转化为指定的数据类型。类型有：</p><ul><li>BINARY</li><li>CHAR  (字符串)</li><li>DATE</li><li>TIME</li><li>DATETIME</li><li>SIGNED  (正负数)</li><li>UNSIGNED  (非负数)</li></ul><p>示例：</p><p>SELECT CAST(NOW() AS SIGNED INTEGER),CURDATE()+0;</p><p>SELECT ‘f’=BINARY ‘F’,’f’=CAST(‘F’ AS BINARY);</p><h2 id="9、系统信息函数"><a href="#9、系统信息函数" class="headerlink" title="9、系统信息函数"></a>9、系统信息函数</h2><h4 id="9-1-当前数据库名-DATABASE"><a href="#9-1-当前数据库名-DATABASE" class="headerlink" title="9.1 当前数据库名 - DATABASE()"></a>9.1 当前数据库名 - DATABASE()</h4><blockquote><p>DATABASE()   返回当前数据库名</p></blockquote><h4 id="9-2-BENCHMARK-count-expr"><a href="#9-2-BENCHMARK-count-expr" class="headerlink" title="9.2 BENCHMARK(count,expr)"></a>9.2 BENCHMARK(count,expr)</h4><blockquote><p>BENCHMARK(count,expr)  将表达式expr重复运行count次</p></blockquote><h4 id="9-3-当前客户的连接ID-CONNECTION-ID"><a href="#9-3-当前客户的连接ID-CONNECTION-ID" class="headerlink" title="9.3 当前客户的连接ID  -  CONNECTION_ID()"></a>9.3 当前客户的连接ID  -  CONNECTION_ID()</h4><blockquote><p>CONNECTION_ID()   返回当前客户的连接ID</p></blockquote><h4 id="9-4-FOUND-ROWS"><a href="#9-4-FOUND-ROWS" class="headerlink" title="9.4 FOUND_ROWS()"></a>9.4 FOUND_ROWS()</h4><blockquote><p>FOUND_ROWS()   返回最后一个SELECT查询进行检索的总行数</p></blockquote><h4 id="9-5-当前登陆用户名-USER-SYSTEM-USER"><a href="#9-5-当前登陆用户名-USER-SYSTEM-USER" class="headerlink" title="9.5 当前登陆用户名  -  USER() \ SYSTEM_USER()"></a>9.5 当前登陆用户名  -  USER() \ SYSTEM_USER()</h4><blockquote><p>USER()或SYSTEM_USER()  返回当前登陆用户名</p></blockquote><h4 id="9-6-MySQL的版本-VERSION"><a href="#9-6-MySQL的版本-VERSION" class="headerlink" title="9.6 MySQL的版本  -  VERSION()"></a>9.6 MySQL的版本  -  VERSION()</h4><blockquote><p>VERSION()   返回MySQL服务器的版本</p></blockquote><p>示例：</p><p>SELECT DATABASE(),VERSION(),USER();</p><p>SELECTBENCHMARK(9999999,LOG(RAND()<em>PI()));#该例中,MySQL计算LOG(RAND()</em>PI())表达式9999999次。</p><h2 id="10、正则"><a href="#10、正则" class="headerlink" title="10、正则"></a>10、正则</h2><h4 id="10-1-REGEXP"><a href="#10-1-REGEXP" class="headerlink" title="10.1 REGEXP"></a>10.1 REGEXP</h4><blockquote><p>REGEXP BINARY 匹配区分大小写.  </p><p>REGEXP 不区分大小写的匹配</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> person_tbl <span class="keyword">WHERE</span> <span class="keyword">name</span> REGEXP <span class="string">'ok$'</span>;</span><br></pre></td></tr></table></figure><h4 id="10-2-REGEXP-BINARY"><a href="#10-2-REGEXP-BINARY" class="headerlink" title="10.2 REGEXP BINARY"></a>10.2 REGEXP BINARY</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> person_tbl <span class="keyword">WHERE</span> <span class="keyword">name</span> REGEXP <span class="built_in">BINARY</span> <span class="string">'ok$'</span>;</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ol><li>ID生成</li></ol><blockquote><p>需求: 课程前缀 + 0001 + 球会后缀,   数字部分个位逢4跳过,  当ID某一ID删除后, 下次生成可再使用</p></blockquote><blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; -- 建表sql</span><br><span class="line">&gt; CREATE TABLE `student_register_info_log` (</span><br><span class="line">&gt; `student_register_info_log_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '学员登记审核ID',</span><br><span class="line">&gt; `student_number` varchar(64) CHARACTER SET utf8 NOT NULL COMMENT '学籍卡号',</span><br><span class="line">&gt; `audit_status` tinyint(4) DEFAULT NULL COMMENT '审核状态(0待审核、1通过、2不通过)',</span><br><span class="line">&gt; PRIMARY KEY (`student_register_info_log_id`) USING BTREE</span><br><span class="line">&gt; ) ENGINE=InnoDB AUTO_INCREMENT=190 DEFAULT CHARSET=utf8mb4 COMMENT='学员审核信息管理';</span><br><span class="line">&gt; </span><br><span class="line">&gt; </span><br><span class="line">&gt; -- 添加数据</span><br><span class="line">&gt; INSERT INTO `golf_import`.`student_register_info_log`(`student_register_info_log_id`, `student_number`,`audit_status`) VALUES (166,'TDXXXS0001cqcs',0);</span><br><span class="line">&gt; INSERT INTO `golf_import`.`student_register_info_log`(`student_register_info_log_id`, `student_number`,`audit_status`) VALUES (167,'TDXXXS0003cqcs',0);</span><br><span class="line">&gt; INSERT INTO `golf_import`.`student_register_info_log`(`student_register_info_log_id`, `student_number`,`audit_status`) VALUES (168,'TDXXXS0005cqcs',0);</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&gt;-- 解决sql</span><br><span class="line">&gt;SELECT</span><br><span class="line">&gt;       LPAD( min( a.number ), 4, '0' ) AS number</span><br><span class="line">&gt;   FROM</span><br><span class="line">&gt;   (</span><br><span class="line">&gt;       SELECT</span><br><span class="line">&gt;       IF( exponent &gt; 0, number + POWER( 10, exponent - 1 ), number ) AS number</span><br><span class="line">&gt;       FROM</span><br><span class="line">&gt;       (</span><br><span class="line">&gt;           SELECT</span><br><span class="line">&gt;           locate( 4, REVERSE( CAST( SUBSTRING( student_number, 7, 4 ) AS SIGNED ) + 1 ) ) AS exponent,</span><br><span class="line">&gt;           CAST( SUBSTRING( student_number, 7, 4 ) AS SIGNED ) + 1 AS number</span><br><span class="line">&gt;           from</span><br><span class="line">&gt;           (</span><br><span class="line">&gt;               SELECT</span><br><span class="line">&gt;               student_number</span><br><span class="line">&gt;               FROM</span><br><span class="line">&gt;               student_register_info_log</span><br><span class="line">&gt;               WHERE</span><br><span class="line">&gt;               student_number REGEXP BINARY '^TDXXXS[0-9]&#123;4&#125;cqcs'</span><br><span class="line">&gt;               AND audit_status = 0</span><br><span class="line">&gt;               AND company_id = 826</span><br><span class="line">&gt;           ) a</span><br><span class="line">&gt;       ) a UNION</span><br><span class="line">&gt;       SELECT</span><br><span class="line">&gt;       1 AS number</span><br><span class="line">&gt;   ) a</span><br><span class="line">&gt;LEFT JOIN (</span><br><span class="line">&gt;                   SELECT</span><br><span class="line">&gt;                   CAST( SUBSTRING( student_number,7, 4 ) AS SIGNED ) AS number</span><br><span class="line">&gt;                   from</span><br><span class="line">&gt;                   (</span><br><span class="line">&gt;                       SELECT</span><br><span class="line">&gt;                       student_number</span><br><span class="line">&gt;                       FROM</span><br><span class="line">&gt;                       student_register_info_log</span><br><span class="line">&gt;                       WHERE</span><br><span class="line">&gt;                       student_number REGEXP BINARY '^TDXXXS[0-9]&#123;4&#125;cqcs'</span><br><span class="line">&gt;                       AND audit_status = 0</span><br><span class="line">&gt;                       AND company_id = 826</span><br><span class="line">&gt;                   ) a</span><br><span class="line">&gt;               ) b ON a.number = b.number</span><br><span class="line">&gt;   WHERE</span><br><span class="line">&gt;       a.number &lt; 10000</span><br><span class="line">&gt;       AND b.number IS NULL</span><br><span class="line">&gt;      </span><br><span class="line">&gt;-- 结果</span><br><span class="line">&gt;0002</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1595341595379-cf1cb694ea1f?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1042&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://lijinhongpassion.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://lijinhongpassion.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL-关于主从复制引发的对读写分离的思考</title>
    <link href="https://lijinhongpassion.github.io/codeant/zcfz.html"/>
    <id>https://lijinhongpassion.github.io/codeant/zcfz.html</id>
    <published>2020-07-21T04:23:22.000Z</published>
    <updated>2020-07-25T04:33:18.733Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1470506028280-a011fb34b6f7?ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=1049&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="0-简述"><a href="#0-简述" class="headerlink" title="0.简述"></a>0.简述</h2><blockquote><p>今天闲得无聊, 根据以前的笔记, 在服务器上搭建了MySQL的主从复制.</p><p><strong>这里先把结论说了:</strong>   搭建了主从复制后的读写分离, 不建议将从库的InnoDB搜索引擎换为MyISAM.  因为主库将数据同步到从库也是一个写操作.所以主从库的搜索引擎需要保持一致</p><p><strong>建议: </strong>如果你要解决<strong>数据库的读性能瓶颈</strong>, 可以先在<strong>缓存</strong>方面进行设计优化</p></blockquote><blockquote><p><strong>主从复制是干什么的:  </strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/zcfz/主从复制.bmp" alt></p><p>上图描述的是主从复制在项目中担任什么角色.</p><p>在你的项目中, 如果没有存在读写分离, 那上面写的MySQL从库的作用<strong>仅仅作为数据备份</strong>, 没有其他作用.</p><hr><p><strong>读写分离是干什么的:  </strong></p><p>因为读写都在一个数据库上, 会给数据库很大的压力. 所以我们可以让主库来专注于数据更新( 增删改 )操作,  从库来用于查询操作. </p><p>读写分离是用来解决<strong>数据库的读性能瓶颈</strong>的。</p><p>主库:  增删改操作</p><p>从库:  查询操作</p></blockquote><hr><h2 id="1-InnoDB和-MyISAM"><a href="#1-InnoDB和-MyISAM" class="headerlink" title="1.InnoDB和 MyISAM"></a>1.InnoDB和 MyISAM</h2><p>参考文献: <a href="https://www.runoob.com/w3cnote/mysql-different-nnodb-myisam.html" target="_blank" rel="noopener">MySQL存储引擎InnoDB与Myisam的六大区别</a></p><table><thead><tr><th style="text-align:center"></th><th style="text-align:left">MyISAM</th><th>InnoDB</th></tr></thead><tbody><tr><td style="text-align:center"><strong>SELECT  UPDATE,INSERT，Delete操作</strong></td><td style="text-align:left">如果执行大量的SELECT，MyISAM是更好的选择</td><td><strong>1.</strong>如果你的数据执行大量的<strong>INSERT或UPDATE</strong>，出于性能方面的考虑，应该使用InnoDB表<br><br> <strong>2.DELETE  FROM table</strong>时，InnoDB不会重新建立表，而是一行一行的删除。<br><br>  <strong>3.LOAD  TABLE FROM MASTER操作对InnoDB</strong>是不起作用的，解决方法是首先把InnoDB表改成MyISAM表，导入数据后再改成InnoDB表，但是对于使用的额外的InnoDB特性（例如外键）的表不适用</td></tr></tbody></table><blockquote><p>由上可知,  MyISAM适合于大量的读操作,  InnoDB适合大量的写操作</p><p>这里就引发出思考了,我是否可以将从库的搜索引擎更换为MyISAM</p></blockquote><hr><h2 id="2-问题"><a href="#2-问题" class="headerlink" title="2.问题"></a>2.问题</h2><p><strong>问题一: </strong></p><blockquote><p><strong>是否可以将从库的搜索引擎改为MyISAM ?  </strong>也就是</p><p>主库:  InnoDB</p><p>从库:  MyISAM </p></blockquote><blockquote><p><strong>结论: 不建议</strong></p><p><strong>原因: </strong>因为主库将数据同步到从库也是一个写操作.  当主库的写操作数量十分巨大的时候, 需要考虑MyISAM在大量写操作的情况下会造成什么样的后果. </p><hr></blockquote><p><strong>问题二: </strong></p><blockquote><p><strong>MyISAM在大量写操作的情况下会造成什么样的后果.</strong></p></blockquote><blockquote><p><strong>结论: 大量的写操作会造成锁表, 导致读写的效率都不高</strong></p><p><strong>原因:</strong>  </p><ul><li><strong>MyISAM</strong>在执行查询语句<code>SELECT</code>前，会<strong>自动</strong>给涉及的所有表加<strong>读锁</strong>，在执行更新操作（<code>UPDATE、DELETE、INSERT</code>等）前，会<strong>自动</strong>给涉及的表加<strong>写锁</strong>，这个过程并<strong>不需要用户干预</strong>，<strong>MyISAM</strong>常用于读操作</li><li><strong>MyISAM只支持表锁</strong>！</li><li><strong>表锁</strong><ul><li>开销小，加锁快；不会出现死锁；锁定力度大，发生锁冲突概率高，并发度最低</li></ul></li><li>在表读锁和表写锁的环境下：<strong>读读不阻塞，读写阻塞，写写阻塞</strong>！</li><li>读读不阻塞：当前用户在读数据，其他的用户也在读数据，不会加锁</li><li>读写阻塞：当前用户在读数据，其他的用户<strong>不能修改当前用户读的数据</strong>，会加锁！</li><li>写写阻塞：当前用户在修改数据，其他的用户<strong>不能修改当前用户正在修改的数据</strong>，会加锁！</li><li>如果某个进程想要获取读锁，<strong>同时</strong>另外一个进程想要获取写锁。在mysql里边，<strong>写锁是优先于读锁的</strong>！</li><li>写锁和读锁优先级的问题是可以通过参数调节的：<code>max_write_lock_count</code>和<code>low-priority-updates</code></li><li><strong>MyISAM可以</strong>支持查询和插入操作的<strong>并发</strong>进行。可以通过系统变量<code>concurrent_insert</code>来指定哪种模式，在<strong>MyISAM</strong>中它默认是：如果MyISAM表中没有空洞（即表的中间没有被删除的行），MyISAM允许在一个进程读表的同时，另一个进程从<strong>表尾</strong>插入记录。</li></ul><p><strong>参考文章:  </strong><a href="https://juejin.im/post/5b55b842f265da0f9e589e79#heading-11" target="_blank" rel="noopener">MySQL-锁</a> – 主要阅读关于MyISAM引擎 锁的相关知识</p><hr></blockquote><p><strong>所以, 主从复制读写分离,  还是老老实实的使用Innodb引擎吧 ! ! </strong></p><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.runoob.com/w3cnote/mysql-different-nnodb-myisam.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/mysql-different-nnodb-myisam.html</a>   MySQL存储引擎InnoDB与Myisam的六大区别</p><p><a href="https://juejin.im/post/5b55b842f265da0f9e589e79#heading-11" target="_blank" rel="noopener">https://juejin.im/post/5b55b842f265da0f9e589e79#heading-11</a> MySQL-锁</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1470506028280-a011fb34b6f7?ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1049&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://lijinhongpassion.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://lijinhongpassion.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>2020年上半年计划</title>
    <link href="https://lijinhongpassion.github.io/codeant/20201.html"/>
    <id>https://lijinhongpassion.github.io/codeant/20201.html</id>
    <published>2020-06-30T05:02:43.000Z</published>
    <updated>2020-02-02T03:52:54.492Z</updated>
    
    <content type="html"><![CDATA[<hr><p><blockquote><strong>2020年上半年计划</strong></blockquote></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/20201/2020年度计划.png" alt="2020年上半年计划"></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;&lt;blockquote&gt;&lt;strong&gt;2020年上半年计划&lt;/strong&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPa
      
    
    </summary>
    
    
      <category term="年度计划" scheme="https://lijinhongpassion.github.io/tags/%E5%B9%B4%E5%BA%A6%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Java-一二线城市知名 IT 互联网公司名单！</title>
    <link href="https://lijinhongpassion.github.io/codeant/ed00.html"/>
    <id>https://lijinhongpassion.github.io/codeant/ed00.html</id>
    <published>2020-05-25T01:02:47.000Z</published>
    <updated>2020-05-25T01:37:25.647Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="通行证" />    <label for="pass">通行证</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      仅作为参考
    
    </summary>
    
      <category term="招聘" scheme="https://lijinhongpassion.github.io/categories/%E6%8B%9B%E8%81%98/"/>
    
    
      <category term="招聘" scheme="https://lijinhongpassion.github.io/tags/%E6%8B%9B%E8%81%98/"/>
    
  </entry>
  
  <entry>
    <title>Java-文字转声音</title>
    <link href="https://lijinhongpassion.github.io/codeant/1e6a.html"/>
    <id>https://lijinhongpassion.github.io/codeant/1e6a.html</id>
    <published>2020-05-21T08:21:25.000Z</published>
    <updated>2020-05-21T08:54:06.211Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1589923188900-85dae523342b?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><p>[toc]</p><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h2><p>本文是利用Java代码，将文本转化为语音。其主要的流程是：录入文本-&gt;生成音频-&gt;播放音频。</p><p>Github：<a href="https://github.com/LiJinHongPassion/springboot/tree/master/vioce" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/springboot/tree/master/vioce</a></p><h2 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2 代码实现"></a>2 代码实现</h2><h4 id="2-1-POM"><a href="#2-1-POM" class="headerlink" title="2.1 POM"></a>2.1 POM</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.jacob/jacob 文字转语音 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hynnet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jacob<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-导入dll"><a href="#2-2-导入dll" class="headerlink" title="2.2 导入dll"></a>2.2 导入dll</h4><p>将<code>jacob-1.18-x64.dll</code>放入JDK的bin目录下。该文件在<a href="https://github.com/LiJinHongPassion/springboot/tree/master/vioce" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/springboot/tree/master/vioce</a></p><h4 id="2-3-main函数"><a href="#2-3-main函数" class="headerlink" title="2.3 main函数"></a>2.3 main函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.jacob.activeX.ActiveXComponent;</span><br><span class="line"><span class="keyword">import</span> com.jacob.com.Dispatch;</span><br><span class="line"><span class="keyword">import</span> com.jacob.com.Variant;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述: 文字转语音测试 jdk bin文件中需要导入jacob-1.17-M2-x64.dll</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH-1755497577 2020/5/21 15:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jacobtest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 语音转文字并播放</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">textToSpeech</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        ActiveXComponent ax = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ax = <span class="keyword">new</span> ActiveXComponent(<span class="string">"Sapi.SpVoice"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 运行时输出语音内容</span></span><br><span class="line">            Dispatch spVoice = ax.getObject();</span><br><span class="line">            <span class="comment">// 音量 0-100</span></span><br><span class="line">            ax.setProperty(<span class="string">"Volume"</span>, <span class="keyword">new</span> Variant(<span class="number">100</span>));</span><br><span class="line">            <span class="comment">// 语音朗读速度 -10 到 +10</span></span><br><span class="line">            ax.setProperty(<span class="string">"Rate"</span>, <span class="keyword">new</span> Variant(-<span class="number">2</span>));</span><br><span class="line">            <span class="comment">// 执行朗读</span></span><br><span class="line">            Dispatch.call(spVoice, <span class="string">"Speak"</span>, <span class="keyword">new</span> Variant(text));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 下面是构建文件流把生成语音文件</span></span><br><span class="line"></span><br><span class="line">            ax = <span class="keyword">new</span> ActiveXComponent(<span class="string">"Sapi.SpFileStream"</span>);</span><br><span class="line">            Dispatch spFileStream = ax.getObject();</span><br><span class="line"></span><br><span class="line">            ax = <span class="keyword">new</span> ActiveXComponent(<span class="string">"Sapi.SpAudioFormat"</span>);</span><br><span class="line">            Dispatch spAudioFormat = ax.getObject();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置音频流格式</span></span><br><span class="line">            Dispatch.put(spAudioFormat, <span class="string">"Type"</span>, <span class="keyword">new</span> Variant(<span class="number">22</span>));</span><br><span class="line">            <span class="comment">// 设置文件输出流格式</span></span><br><span class="line">            Dispatch.putRef(spFileStream, <span class="string">"Format"</span>, spAudioFormat);</span><br><span class="line">            <span class="comment">// 调用输出 文件流打开方法，创建一个.wav文件</span></span><br><span class="line">            Dispatch.call(spFileStream, <span class="string">"Open"</span>, <span class="keyword">new</span> Variant(<span class="string">"./text.wav"</span>), <span class="keyword">new</span> Variant(<span class="number">3</span>), <span class="keyword">new</span> Variant(<span class="keyword">true</span>));</span><br><span class="line">            <span class="comment">// 设置声音对象的音频输出流为输出文件对象</span></span><br><span class="line">            Dispatch.putRef(spVoice, <span class="string">"AudioOutputStream"</span>, spFileStream);</span><br><span class="line">            <span class="comment">// 设置音量 0到100</span></span><br><span class="line">            Dispatch.put(spVoice, <span class="string">"Volume"</span>, <span class="keyword">new</span> Variant(<span class="number">100</span>));</span><br><span class="line">            <span class="comment">// 设置朗读速度</span></span><br><span class="line">            Dispatch.put(spVoice, <span class="string">"Rate"</span>, <span class="keyword">new</span> Variant(-<span class="number">2</span>));</span><br><span class="line">            <span class="comment">// 开始朗读</span></span><br><span class="line">            Dispatch.call(spVoice, <span class="string">"Speak"</span>, <span class="keyword">new</span> Variant(text));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 关闭输出文件</span></span><br><span class="line">            Dispatch.call(spFileStream, <span class="string">"Close"</span>);</span><br><span class="line">            Dispatch.putRef(spVoice, <span class="string">"AudioOutputStream"</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            spAudioFormat.safeRelease();</span><br><span class="line">            spFileStream.safeRelease();</span><br><span class="line">            spVoice.safeRelease();</span><br><span class="line">            ax.safeRelease();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        textToSpeech(<span class="string">"hello, code ant"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-扩展"><a href="#3-扩展" class="headerlink" title="3 扩展"></a>3 扩展</h2><h4 id="3-1-缺陷"><a href="#3-1-缺陷" class="headerlink" title="3.1 缺陷"></a>3.1 缺陷</h4><p>因为该程序是需要生成音频文件的，文件需要存储在服务器端口。</p><h4 id="3-2-解决方式"><a href="#3-2-解决方式" class="headerlink" title="3.2 解决方式"></a>3.2 解决方式</h4><p>在后期在网站上添加该功能后，因为生成的音频也属于网站资源，所以在什么时候删除该资源是我们需要考虑的。</p><p><strong>方法一（懒汉式）</strong>：</p><p>客户端再加载资源的时候，不主动去加载该音频。</p><p>当资源被第一次请求后，服务器端处理完该请求就直接删除音频文件。若是该资源一直未被请求，则定时清除音频文件。</p><p><strong>方法二（饿汉式）</strong>：</p><p>在页面加载或者点击完按钮的时候，浏览器就主动去请求该资源，然后服务器接收到请求后，并处理完成后，服务器端就直接删除。</p><p>客户端在接收到服务器返回的音频资源后，<strong>可采用缓存（浏览器自带缓存功能）\持久化（保存在本地）存储文件</strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1589923188900-85dae523342b?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java-spring事务传播性（转载）</title>
    <link href="https://lijinhongpassion.github.io/codeant/b019.html"/>
    <id>https://lijinhongpassion.github.io/codeant/b019.html</id>
    <published>2020-04-23T12:21:17.000Z</published>
    <updated>2020-04-23T12:25:10.172Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1558981806-ec527fa84c39?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><p>本文转载于： <a href="https://segmentfault.com/a/1190000013341344" target="_blank" rel="noopener">https://segmentfault.com/a/1190000013341344</a> </p><p>##前言</p><p>Spring在TransactionDefinition接口中规定了7种类型的事务传播行为。事务传播行为是Spring框架独有的事务增强特性，他不属于的事务实际提供方数据库行为。这是Spring为我们提供的强大的工具箱，使用事务传播行可以为我们的开发工作提供许多便利。但是人们对他的误解也颇多，你一定也听过“service方法事务最好不要嵌套”的传言。要想正确的使用工具首先需要了解工具。本文对七种事务传播行为做详细介绍，内容主要代码示例的方式呈现。</p><h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><h2 id="1-什么是事务传播行为？"><a href="#1-什么是事务传播行为？" class="headerlink" title="1. 什么是事务传播行为？"></a>1. 什么是事务传播行为？</h2><p>事务传播行为用来描述由某一个事务传播行为修饰的方法被嵌套进另一个方法的时事务如何传播。</p><p>用伪代码说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void methodA()&#123;</span><br><span class="line">   methodB();</span><br><span class="line">   //doSomething</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Transaction(Propagation=XXX)</span><br><span class="line">public void methodB()&#123;</span><br><span class="line">   //doSomething</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中<code>methodA()</code>方法嵌套调用了<code>methodB()</code>方法，<code>methodB()</code>的事务传播行为由<code>@Transaction(Propagation=XXX)</code>设置决定。这里需要注意的是<code>methodA()</code>并没有开启事务，某一个事务传播行为修饰的方法并不是必须要在开启事务的外围方法中调用。</p><h2 id="2-Spring中七种事务传播行为"><a href="#2-Spring中七种事务传播行为" class="headerlink" title="2. Spring中七种事务传播行为"></a>2. Spring中七种事务传播行为</h2><table><thead><tr><th>事务传播行为类型</th><th>说明</th></tr></thead><tbody><tr><td>PROPAGATION_REQUIRED</td><td>如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。</td></tr><tr><td>PROPAGATION_SUPPORTS</td><td>支持当前事务，如果当前没有事务，就以非事务方式执行。</td></tr><tr><td>PROPAGATION_MANDATORY</td><td>使用当前的事务，如果当前没有事务，就抛出异常。</td></tr><tr><td>PROPAGATION_REQUIRES_NEW</td><td>新建事务，如果当前存在事务，把当前事务挂起。</td></tr><tr><td>PROPAGATION_NOT_SUPPORTED</td><td>以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</td></tr><tr><td>PROPAGATION_NEVER</td><td>以非事务方式执行，如果当前存在事务，则抛出异常。</td></tr><tr><td>PROPAGATION_NESTED</td><td>如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。</td></tr></tbody></table><p>定义非常简单，也很好理解，下面我们就进入代码测试部分，验证我们的理解是否正确。</p><h1 id="代码验证"><a href="#代码验证" class="headerlink" title="代码验证"></a>代码验证</h1><p>文中代码以传统三层结构中两层呈现，即Service和Dao层，由Spring负责依赖注入和注解式事务管理，DAO层由Mybatis实现，你也可以使用任何喜欢的方式，例如，Hibernate,JPA,JDBCTemplate等。数据库使用的是MySQL数据库，你也可以使用任何支持事务的数据库，并不会影响验证结果。</p><p>首先我们在数据库中创建两张表：</p><p><strong>user1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user1` (</span><br><span class="line">  `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` VARCHAR(45) NOT NULL DEFAULT &apos;&apos;,</span><br><span class="line">  PRIMARY KEY(`id`)</span><br><span class="line">)</span><br><span class="line">ENGINE = InnoDB;</span><br></pre></td></tr></table></figure><p><strong>user2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user2` (</span><br><span class="line">  `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` VARCHAR(45) NOT NULL DEFAULT &apos;&apos;,</span><br><span class="line">  PRIMARY KEY(`id`)</span><br><span class="line">)</span><br><span class="line">ENGINE = InnoDB;</span><br></pre></td></tr></table></figure><p>然后编写相应的Bean和DAO层代码：</p><p><strong>User1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class User1 &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line">   //get和set方法省略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>User2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class User2 &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line">   //get和set方法省略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>User1Mapper</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface User1Mapper &#123;</span><br><span class="line">    int insert(User1 record);</span><br><span class="line">    User1 selectByPrimaryKey(Integer id);</span><br><span class="line">    //其他方法省略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>User2Mapper</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface User2Mapper &#123;</span><br><span class="line">    int insert(User2 record);</span><br><span class="line">    User2 selectByPrimaryKey(Integer id);</span><br><span class="line">    //其他方法省略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后也是具体验证的代码由service层实现，下面我们分情况列举。</p><h2 id="1-PROPAGATION-REQUIRED"><a href="#1-PROPAGATION-REQUIRED" class="headerlink" title="1.PROPAGATION_REQUIRED"></a>1.PROPAGATION_REQUIRED</h2><p>我们为User1Service和User2Service相应方法加上<code>Propagation.REQUIRED</code>属性。</p><p><strong>User1Service方法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class User1ServiceImpl implements User1Service &#123;</span><br><span class="line">    //省略其他...</span><br><span class="line">    @Override</span><br><span class="line">    @Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line">    public void addRequired(User1 user)&#123;</span><br><span class="line">        user1Mapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>User2Service方法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class User2ServiceImpl implements User2Service &#123;</span><br><span class="line">    //省略其他...</span><br><span class="line">    @Override</span><br><span class="line">    @Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line">    public void addRequired(User2 user)&#123;</span><br><span class="line">        user2Mapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    @Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line">    public void addRequiredException(User2 user)&#123;</span><br><span class="line">        user2Mapper.insert(user);</span><br><span class="line">        throw new RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-场景一"><a href="#1-1-场景一" class="headerlink" title="1.1 场景一"></a>1.1 场景一</h3><p>此场景外围方法没有开启事务。</p><p><strong>验证方法1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void notransaction_exception_required_required()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addRequired(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addRequired(user2);</span><br><span class="line">    </span><br><span class="line">    throw new RuntimeException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>验证方法2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void notransaction_required_required_exception()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addRequired(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addRequiredException(user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别执行验证方法，结果：</p><table><thead><tr><th>验证方法序号</th><th>数据库结果</th><th>结果分析</th></tr></thead><tbody><tr><td>1</td><td>“张三”、“李四”均插入。</td><td>外围方法未开启事务，插入“张三”、“李四”方法在自己的事务中独立运行，外围方法异常不影响内部插入“张三”、“李四”方法独立的事务。</td></tr><tr><td>2</td><td>“张三”插入，“李四”未插入。</td><td>外围方法没有事务，插入“张三”、“李四”方法都在自己的事务中独立运行,所以插入“李四”方法抛出异常只会回滚插入“李四”方法，插入“张三”方法不受影响。</td></tr></tbody></table><p><strong>结论：通过这两个方法我们证明了在外围方法未开启事务的情况下<code>Propagation.REQUIRED</code>修饰的内部方法会新开启自己的事务，且开启的事务相互独立，互不干扰。</strong></p><h3 id="1-2-场景二"><a href="#1-2-场景二" class="headerlink" title="1.2 场景二"></a>1.2 场景二</h3><p>外围方法开启事务，这个是使用率比较高的场景。</p><p><strong>验证方法1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line"> @Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line"> public void transaction_exception_required_required()&#123;</span><br><span class="line">     User1 user1=new User1();</span><br><span class="line">     user1.setName(&quot;张三&quot;);</span><br><span class="line">     user1Service.addRequired(user1);</span><br><span class="line">     </span><br><span class="line">     User2 user2=new User2();</span><br><span class="line">     user2.setName(&quot;李四&quot;);</span><br><span class="line">     user2Service.addRequired(user2);</span><br><span class="line">     </span><br><span class="line">     throw new RuntimeException();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>验证方法2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line">public void transaction_required_required_exception()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addRequired(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addRequiredException(user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>验证方法3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Transactional</span><br><span class="line">@Override</span><br><span class="line">public void transaction_required_required_exception_try()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addRequired(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    try &#123;</span><br><span class="line">        user2Service.addRequiredException(user2);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        System.out.println(&quot;方法回滚&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别执行验证方法，结果：</p><table><thead><tr><th>验证方法序号</th><th>数据库结果</th><th>结果分析</th></tr></thead><tbody><tr><td>1</td><td>“张三”、“李四”均未插入。</td><td>外围方法开启事务，内部方法加入外围方法事务，外围方法回滚，内部方法也要回滚。</td></tr><tr><td>2</td><td>“张三”、“李四”均未插入。</td><td>外围方法开启事务，内部方法加入外围方法事务，内部方法抛出异常回滚，外围方法感知异常致使整体事务回滚。</td></tr><tr><td>3</td><td>“张三”、“李四”均未插入。</td><td>外围方法开启事务，内部方法加入外围方法事务，内部方法抛出异常回滚，即使方法被catch不被外围方法感知，整个事务依然回滚。</td></tr></tbody></table><p><strong>结论：以上试验结果我们证明在外围方法开启事务的情况下<code>Propagation.REQUIRED</code>修饰的内部方法会加入到外围方法的事务中，所有<code>Propagation.REQUIRED</code>修饰的内部方法和外围方法均属于同一事务，只要一个方法回滚，整个事务均回滚。</strong></p><h2 id="2-PROPAGATION-REQUIRES-NEW"><a href="#2-PROPAGATION-REQUIRES-NEW" class="headerlink" title="2.PROPAGATION_REQUIRES_NEW"></a>2.PROPAGATION_REQUIRES_NEW</h2><p>我们为User1Service和User2Service相应方法加上<code>Propagation.REQUIRES_NEW</code>属性。<br><strong>User1Service方法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class User1ServiceImpl implements User1Service &#123;</span><br><span class="line">    //省略其他...</span><br><span class="line">    @Override</span><br><span class="line">    @Transactional(propagation = Propagation.REQUIRES_NEW)</span><br><span class="line">    public void addRequiresNew(User1 user)&#123;</span><br><span class="line">        user1Mapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    @Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line">    public void addRequired(User1 user)&#123;</span><br><span class="line">        user1Mapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>User2Service方法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class User2ServiceImpl implements User2Service &#123;</span><br><span class="line">    //省略其他...</span><br><span class="line">    @Override</span><br><span class="line">    @Transactional(propagation = Propagation.REQUIRES_NEW)</span><br><span class="line">    public void addRequiresNew(User2 user)&#123;</span><br><span class="line">        user2Mapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    @Transactional(propagation = Propagation.REQUIRES_NEW)</span><br><span class="line">    public void addRequiresNewException(User2 user)&#123;</span><br><span class="line">        user2Mapper.insert(user);</span><br><span class="line">        throw new RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-场景一"><a href="#2-1-场景一" class="headerlink" title="2.1 场景一"></a>2.1 场景一</h3><p>外围方法没有开启事务。</p><p><strong>验证方法1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void notransaction_exception_requiresNew_requiresNew()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addRequiresNew(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addRequiresNew(user2);</span><br><span class="line">    throw new RuntimeException();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>验证方法2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void notransaction_requiresNew_requiresNew_exception()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addRequiresNew(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addRequiresNewException(user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别执行验证方法，结果：</p><table><thead><tr><th>验证方法序号</th><th>数据库结果</th><th>结果分析</th></tr></thead><tbody><tr><td>1</td><td>“张三”插入，“李四”插入。</td><td>外围方法没有事务，插入“张三”、“李四”方法都在自己的事务中独立运行,外围方法抛出异常回滚不会影响内部方法。</td></tr><tr><td>2</td><td>“张三”插入，“李四”未插入</td><td>外围方法没有开启事务，插入“张三”方法和插入“李四”方法分别开启自己的事务，插入“李四”方法抛出异常回滚，其他事务不受影响。</td></tr></tbody></table><p><strong>结论：通过这两个方法我们证明了在外围方法未开启事务的情况下<code>Propagation.REQUIRES_NEW</code>修饰的内部方法会新开启自己的事务，且开启的事务相互独立，互不干扰。</strong></p><h3 id="2-2-场景二"><a href="#2-2-场景二" class="headerlink" title="2.2 场景二"></a>2.2 场景二</h3><p>外围方法开启事务。</p><p><strong>验证方法1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line">public void transaction_exception_required_requiresNew_requiresNew()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addRequired(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addRequiresNew(user2);</span><br><span class="line">    </span><br><span class="line">    User2 user3=new User2();</span><br><span class="line">    user3.setName(&quot;王五&quot;);</span><br><span class="line">    user2Service.addRequiresNew(user3);</span><br><span class="line">    throw new RuntimeException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>验证方法2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line">public void transaction_required_requiresNew_requiresNew_exception()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addRequired(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addRequiresNew(user2);</span><br><span class="line">    </span><br><span class="line">    User2 user3=new User2();</span><br><span class="line">    user3.setName(&quot;王五&quot;);</span><br><span class="line">    user2Service.addRequiresNewException(user3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>验证方法3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line">public void transaction_required_requiresNew_requiresNew_exception_try()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addRequired(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addRequiresNew(user2);</span><br><span class="line">    User2 user3=new User2();</span><br><span class="line">    user3.setName(&quot;王五&quot;);</span><br><span class="line">    try &#123;</span><br><span class="line">        user2Service.addRequiresNewException(user3);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        System.out.println(&quot;回滚&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别执行验证方法，结果：</p><table><thead><tr><th>验证方法序号</th><th>数据库结果</th><th>结果分析</th></tr></thead><tbody><tr><td>1</td><td>“张三”未插入，“李四”插入，“王五”插入。</td><td>外围方法开启事务，插入“张三”方法和外围方法一个事务，插入“李四”方法、插入“王五”方法分别在独立的新建事务中，外围方法抛出异常只回滚和外围方法同一事务的方法，故插入“张三”的方法回滚。</td></tr><tr><td>2</td><td>“张三”未插入，“李四”插入，“王五”未插入。</td><td>外围方法开启事务，插入“张三”方法和外围方法一个事务，插入“李四”方法、插入“王五”方法分别在独立的新建事务中。插入“王五”方法抛出异常，首先插入 “王五”方法的事务被回滚，异常继续抛出被外围方法感知，外围方法事务亦被回滚，故插入“张三”方法也被回滚。</td></tr><tr><td>3</td><td>“张三”插入，“李四”插入，“王五”未插入。</td><td>外围方法开启事务，插入“张三”方法和外围方法一个事务，插入“李四”方法、插入“王五”方法分别在独立的新建事务中。插入“王五”方法抛出异常，首先插入“王五”方法的事务被回滚，异常被catch不会被外围方法感知，外围方法事务不回滚，故插入“张三”方法插入成功。</td></tr></tbody></table><p><strong>结论：在外围方法开启事务的情况下<code>Propagation.REQUIRES_NEW</code>修饰的内部方法依然会单独开启独立事务，且与外部方法事务也独立，内部方法之间、内部方法和外部方法事务均相互独立，互不干扰。</strong></p><h2 id="3-PROPAGATION-NESTED"><a href="#3-PROPAGATION-NESTED" class="headerlink" title="3.PROPAGATION_NESTED"></a>3.PROPAGATION_NESTED</h2><p>我们为User1Service和User2Service相应方法加上<code>Propagation.NESTED</code>属性。<br><strong>User1Service方法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class User1ServiceImpl implements User1Service &#123;</span><br><span class="line">    //省略其他...</span><br><span class="line">    @Override</span><br><span class="line">    @Transactional(propagation = Propagation.NESTED)</span><br><span class="line">    public void addNested(User1 user)&#123;</span><br><span class="line">        user1Mapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>User2Service方法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class User2ServiceImpl implements User2Service &#123;</span><br><span class="line">    //省略其他...</span><br><span class="line">    @Override</span><br><span class="line">    @Transactional(propagation = Propagation.NESTED)</span><br><span class="line">    public void addNested(User2 user)&#123;</span><br><span class="line">        user2Mapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    @Transactional(propagation = Propagation.NESTED)</span><br><span class="line">    public void addNestedException(User2 user)&#123;</span><br><span class="line">        user2Mapper.insert(user);</span><br><span class="line">        throw new RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-场景一"><a href="#3-1-场景一" class="headerlink" title="3.1 场景一"></a>3.1 场景一</h3><p>此场景外围方法没有开启事务。</p><p><strong>验证方法1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void notransaction_exception_nested_nested()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addNested(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addNested(user2);</span><br><span class="line">    throw new RuntimeException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>验证方法2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void notransaction_nested_nested_exception()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addNested(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addNestedException(user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别执行验证方法，结果：</p><table><thead><tr><th>验证方法序号</th><th>数据库结果</th><th>结果分析</th></tr></thead><tbody><tr><td>1</td><td>“张三”、“李四”均插入。</td><td>外围方法未开启事务，插入“张三”、“李四”方法在自己的事务中独立运行，外围方法异常不影响内部插入“张三”、“李四”方法独立的事务。</td></tr><tr><td>2</td><td>“张三”插入，“李四”未插入。</td><td>外围方法没有事务，插入“张三”、“李四”方法都在自己的事务中独立运行,所以插入“李四”方法抛出异常只会回滚插入“李四”方法，插入“张三”方法不受影响。</td></tr></tbody></table><p><strong>结论：通过这两个方法我们证明了在外围方法未开启事务的情况下<code>Propagation.NESTED</code>和<code>Propagation.REQUIRED</code>作用相同，修饰的内部方法都会新开启自己的事务，且开启的事务相互独立，互不干扰。</strong></p><h3 id="3-2-场景二"><a href="#3-2-场景二" class="headerlink" title="3.2 场景二"></a>3.2 场景二</h3><p>外围方法开启事务。</p><p><strong>验证方法1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Transactional</span><br><span class="line">@Override</span><br><span class="line">public void transaction_exception_nested_nested()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addNested(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addNested(user2);</span><br><span class="line">    throw new RuntimeException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>验证方法2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Transactional</span><br><span class="line">@Override</span><br><span class="line">public void transaction_nested_nested_exception()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addNested(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addNestedException(user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>验证方法3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Transactional</span><br><span class="line">@Override</span><br><span class="line">public void transaction_nested_nested_exception_try()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addNested(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    try &#123;</span><br><span class="line">        user2Service.addNestedException(user2);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        System.out.println(&quot;方法回滚&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别执行验证方法，结果：</p><table><thead><tr><th>验证方法序号</th><th>数据库结果</th><th>结果分析</th></tr></thead><tbody><tr><td>1</td><td>“张三”、“李四”均未插入。</td><td>外围方法开启事务，内部事务为外围事务的子事务，外围方法回滚，内部方法也要回滚。</td></tr><tr><td>2</td><td>“张三”、“李四”均未插入。</td><td>外围方法开启事务，内部事务为外围事务的子事务，内部方法抛出异常回滚，且外围方法感知异常致使整体事务回滚。</td></tr><tr><td>3</td><td>“张三”插入、“李四”未插入。</td><td>外围方法开启事务，内部事务为外围事务的子事务，插入“李四”内部方法抛出异常，可以单独对子事务回滚。</td></tr></tbody></table><p><strong>结论：以上试验结果我们证明在外围方法开启事务的情况下<code>Propagation.NESTED</code>修饰的内部方法属于外部事务的子事务，外围主事务回滚，子事务一定回滚，而内部子事务可以单独回滚而不影响外围主事务和其他子事务</strong></p><h2 id="4-REQUIRED-REQUIRES-NEW-NESTED异同"><a href="#4-REQUIRED-REQUIRES-NEW-NESTED异同" class="headerlink" title="4. REQUIRED,REQUIRES_NEW,NESTED异同"></a>4. REQUIRED,REQUIRES_NEW,NESTED异同</h2><p>由“1.2 场景二”和“3.2 场景二”对比，我们可知：<br><strong>NESTED和REQUIRED修饰的内部方法都属于外围方法事务，如果外围方法抛出异常，这两种方法的事务都会被回滚。但是REQUIRED是加入外围方法事务，所以和外围事务同属于一个事务，一旦REQUIRED事务抛出异常被回滚，外围方法事务也将被回滚。而NESTED是外围方法的子事务，有单独的保存点，所以NESTED方法抛出异常被回滚，不会影响到外围方法的事务。</strong></p><p>由“2.2 场景二”和“3.2 场景二”对比，我们可知：<br><strong>NESTED和REQUIRES_NEW都可以做到内部方法事务回滚而不影响外围方法事务。但是因为NESTED是嵌套事务，所以外围方法回滚之后，作为外围方法事务的子事务也会被回滚。而REQUIRES_NEW是通过开启新的事务实现的，内部事务和外围事务是两个事务，外围事务回滚不会影响内部事务。</strong></p><h2 id="5-其他事务传播行为"><a href="#5-其他事务传播行为" class="headerlink" title="5. 其他事务传播行为"></a>5. 其他事务传播行为</h2><p>鉴于文章篇幅问题，其他事务传播行为的测试就不在此一一描述了，感兴趣的读者可以去源码中自己寻找相应测试代码和结果解释。传送门：<a href="https://github.com/TmTse/transaction-test" target="_blank" rel="noopener">https://github.com/TmTse/tran…</a></p><h1 id="模拟用例"><a href="#模拟用例" class="headerlink" title="模拟用例"></a>模拟用例</h1><p>介绍了这么多事务传播行为，我们在实际工作中如何应用呢？下面我来举一个示例：</p><p>假设我们有一个注册的方法，方法中调用添加积分的方法，如果我们希望添加积分不会影响注册流程（即添加积分执行失败回滚不能使注册方法也回滚），我们会这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line">     </span><br><span class="line">     @Transactional</span><br><span class="line">     public void register(User user)&#123;</span><br><span class="line">                </span><br><span class="line">         try &#123;</span><br><span class="line">             membershipPointService.addPoint(Point point);</span><br><span class="line">         &#125; catch (Exception e) &#123;</span><br><span class="line">            //省略...</span><br><span class="line">         &#125;</span><br><span class="line">         //省略...</span><br><span class="line">     &#125;</span><br><span class="line">     //省略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还规定注册失败要影响<code>addPoint()</code>方法（注册方法回滚添加积分方法也需要回滚），那么<code>addPoint()</code>方法就需要这样实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class MembershipPointServiceImpl implements MembershipPointService&#123;</span><br><span class="line">     </span><br><span class="line">     @Transactional(propagation = Propagation.NESTED)</span><br><span class="line">     public void addPoint(Point point)&#123;</span><br><span class="line">                </span><br><span class="line">         try &#123;</span><br><span class="line">             recordService.addRecord(Record record);</span><br><span class="line">         &#125; catch (Exception e) &#123;</span><br><span class="line">            //省略...</span><br><span class="line">         &#125;</span><br><span class="line">         //省略...</span><br><span class="line">     &#125;</span><br><span class="line">     //省略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们注意到了在<code>addPoint()</code>中还调用了<code>addRecord()</code>方法，这个方法用来记录日志。他的实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class RecordServiceImpl implements RecordService&#123;</span><br><span class="line">     </span><br><span class="line">     @Transactional(propagation = Propagation.NOT_SUPPORTED)</span><br><span class="line">     public void addRecord(Record record)&#123;</span><br><span class="line">                </span><br><span class="line">        </span><br><span class="line">         //省略...</span><br><span class="line">     &#125;</span><br><span class="line">     //省略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们注意到<code>addRecord()</code>方法中<code>propagation = Propagation.NOT_SUPPORTED</code>，因为对于日志无所谓精确，可以多一条也可以少一条，所以<code>addRecord()</code>方法本身和外围<code>addPoint()</code>方法抛出异常都不会使<code>addRecord()</code>方法回滚，并且<code>addRecord()</code>方法抛出异常也不会影响外围<code>addPoint()</code>方法的执行。</p><p>通过这个例子相信大家对事务传播行为的使用有了更加直观的认识，通过各种属性的组合确实能让我们的业务实现更加灵活多样。</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>通过上面的介绍，相信大家对Spring事务传播行为有了更加深入的理解，希望大家日常开发工作有所帮助。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1558981806-ec527fa84c39?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
      <category term="spring" scheme="https://lijinhongpassion.github.io/categories/java/spring/"/>
    
      <category term="transaction" scheme="https://lijinhongpassion.github.io/categories/java/spring/transaction/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java-你真的懂了try{return}finally{return};吗？</title>
    <link href="https://lijinhongpassion.github.io/codeant/beee.html"/>
    <id>https://lijinhongpassion.github.io/codeant/beee.html</id>
    <published>2020-02-26T02:59:46.000Z</published>
    <updated>2020-02-26T15:01:42.400Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1580602972248-1f93dd762133?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1051&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>我们常知的<code>try catch finally</code>是捕获处理异常的，但是<code>try{return}finally{return};</code>的执行顺序是怎样的呢？<code>try{return}finally{};</code>呢？下面就来简单了解一下。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><strong>例一：try{return}finally{};</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    System.out.println(method1());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        ++x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果：1</strong></p><p><strong>例二：try{return}finally{return};</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    System.out.println(method1());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果：2</strong></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>根据jdk的官方描述，try里面遇到return的时候，先将值存储于<strong>常量池</strong>，再继续执行finally里面的代码。finally代码执行完毕后再返回<strong>常量池里的那个结果</strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1580602972248-1f93dd762133?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1051&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java-Java线程之守护线程&amp;用户进程</title>
    <link href="https://lijinhongpassion.github.io/codeant/25c3.html"/>
    <id>https://lijinhongpassion.github.io/codeant/25c3.html</id>
    <published>2020-02-11T09:02:19.000Z</published>
    <updated>2020-02-11T10:52:56.588Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1581405919332-d9f2f192dc6e?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>在Java中有两类线程：User Thread(用户线程)、Daemon Thread(守护线程) </p><p>用个比较通俗的比如，任何一个守护线程都是整个JVM中所有非守护线程的保姆：</p><p>只要当前JVM实例中尚存在任何一个非守护线程没有结束，守护线程就全部工作；只有当最后一个非守护线程结束时，守护线程随着JVM一同结束工作。<br>Daemon的作用是为其他线程的运行提供便利服务，守护线程最典型的应用就是 GC (垃圾回收器)，它就是一个很称职的守护者</p><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><blockquote><p>以下内容转载至： <a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1306580788183074" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/1252599548343744/1306580788183074</a> </p></blockquote><h4 id="什么是守护线程"><a href="#什么是守护线程" class="headerlink" title="什么是守护线程"></a>什么是守护线程</h4><p>Java程序入口就是由JVM启动<code>main</code>线程，<code>main</code>线程又可以启动其他线程。当所有线程都运行结束时，JVM退出，进程结束。</p><p>如果有一个线程没有退出，JVM进程就不会退出。所以，必须保证所有线程都能及时结束。</p><p>但是有一种线程的目的就是无限循环，例如，一个定时触发任务的线程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(LocalTime.now());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果这个线程不结束，JVM进程就无法结束。问题是，由谁负责结束这个线程？</p><p>然而这类线程经常没有负责人来负责结束它们。但是，当其他线程结束时，JVM进程又必须要结束，怎么办？</p><p>答案是使用守护线程（Daemon Thread）。</p><p>守护线程是指为其他线程服务的线程。在JVM中，所有非守护线程都执行完毕后，无论有没有守护线程，虚拟机都会自动退出。</p><p>因此，JVM退出时，不必关心守护线程是否已结束。</p><hr><h4 id="创建守护线程"><a href="#创建守护线程" class="headerlink" title="创建守护线程"></a>创建守护线程</h4><p>如何创建守护线程呢？方法和普通线程一样，只是在调用<code>start()</code>方法前，调用<code>setDaemon(true)</code>把该线程标记为守护线程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Thread t = <span class="keyword">new</span> MyThread();</span><br><span class="line">t.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure><p>在守护线程中，编写代码要注意：守护线程不能持有任何需要关闭的资源，例如打开文件等，因为虚拟机退出时，守护线程没有任何机会来关闭文件，这会导致数据丢失。</p><hr><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p> (1) thread.setDaemon(true)必须在thread.start()之前设置，否则会跑出一个IllegalThreadStateException异常。你不能把      正在运行的常规线程设置为守护线程。<br>(2) 在Daemon线程中产生的新线程也是Daemon的。<br>(3) 不要认为所有的应用都可以分配给Daemon来进行服务，比如读写操作或者计算逻辑。 </p><hr><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>守护线程是为其他线程服务的线程；</p><p>所有非守护线程都执行完毕后，虚拟机退出；</p><p>守护线程不能持有需要关闭的资源（如打开文件等）。</p><hr><h4 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h4><ul><li>定义：守护线程–也称“服务线程”，在没有用户线程可服务时会自动离开。</li><li>优先级：守护线程的优先级比较低，用于为系统中的其它对象和线程提供服务。</li><li>设置：通过setDaemon(true)来设置线程为“守护线程”；将一个用户线程设置为守护线程的方式是在线程对象创建之前 用线程对象的setDaemon方法。</li><li>example: 垃圾回收线程就是一个经典的守护线程，当我们的程序中不再有任何运行的Thread,程序就不会再产生垃圾，垃圾回收器也就无事可做，所以当垃圾回收线程是JVM上仅剩的线程时，垃圾回收线程会自动离开。它始终在低级别的状态中运行，用于实时监控和管理系统中的可回收资源。</li><li>生命周期：守护进程（Daemon）是运行在后台的一种特殊进程。它独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。也就是说守护线程不依赖于终端，但是依赖于系统，与系统“同生共死”。那Java的守护线程是什么样子的呢。当JVM中所有的线程都是守护线程的时候，JVM就可以退出了；如果还有一个或以上的非守护线程则JVM不会退出。 </li></ul><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/25c3/1.png" alt="Hotspot JVM 后台运行的主要系统线程"></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>参考文章中含有例子，可参考。</p><p><a href="https://blog.csdn.net/shimiso/article/details/8964414" target="_blank" rel="noopener">Java中守护线程的总结</a></p><p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1306580788183074" target="_blank" rel="noopener">廖雪峰 – 守护线程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1581405919332-d9f2f192dc6e?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="Java" scheme="https://lijinhongpassion.github.io/tags/Java/"/>
    
      <category term="thread" scheme="https://lijinhongpassion.github.io/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>Redis-redis为什么是单线程</title>
    <link href="https://lijinhongpassion.github.io/codeant/redis1.html"/>
    <id>https://lijinhongpassion.github.io/codeant/redis1.html</id>
    <published>2020-02-11T06:35:49.000Z</published>
    <updated>2020-02-12T05:27:26.266Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1581293738311-c1e14c2513dc?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>本文我们主要来了解redis和memcached的区别，以此深入了解redis为什么是单线程。</p><blockquote><p>开局一张图：客户端与 redis 的一次通信过程</p></blockquote><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/redis1/1.jpg" alt="客户端与 redis 的一次通信过程"></p><h2 id="redis-和-memcached-的区别"><a href="#redis-和-memcached-的区别" class="headerlink" title="redis 和 memcached 的区别"></a>redis 和 memcached 的区别</h2><p>对于 redis 和 memcached 我总结了下面四点。现在公司一般都是用 redis 来实现缓存，而且 redis 自身也越来越强大了！</p><ol><li><strong>redis支持更丰富的数据类型（支持更复杂的应用场景）</strong>：Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，zset，hash等数据结构的存储。memcache支持简单的数据类型，String。</li><li><strong>Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用,而Memecache把数据全部存在内存之中。</strong></li><li><strong>集群模式</strong>：memcached没有原生的集群模式，需要依靠客户端来实现往集群中分片写入数据；但是 redis 目前是原生支持 cluster 模式的.</li><li><strong>Memcached是多线程，非阻塞IO复用的网络模型；Redis使用单线程的多路 IO 复用模型。</strong></li></ol><blockquote><p>来自网络上的一张图，这里分享给大家！</p></blockquote><p><img src="http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-9-24/61603179.jpg" alt="redis 和 memcached 的区别"></p><h2 id="redis为什么是单线程"><a href="#redis为什么是单线程" class="headerlink" title="redis为什么是单线程"></a>redis为什么是单线程</h2><blockquote><p>以下内容来自： <a href="https://www.zhihu.com/search?type=content&amp;q=redis为什么是单线程的" target="_blank" rel="noopener">知乎 - redis为什么是单线程</a> </p></blockquote><p>以前一直有个误区，以为：高性能服务器 一定是 多线程来实现的</p><p>原因很简单因为误区二导致的：多线程 一定比 单线程 效率高。其实不然。</p><p>在说这个事前希望大家都能对 CPU 、 内存 、 硬盘的速度都有了解了，这样可能理解得更深刻一点，不了解的朋友点：CPU到底比内存跟硬盘快多少</p><p>redis 核心就是 如果我的数据全都在内存里，我单线程的去操作 就是效率最高的，为什么呢，因为多线程的本质就是 CPU 模拟出来多个线程的情况，这种模拟出来的情况就有一个代价，就是上下文的切换，对于一个内存的系统来说，它没有上下文的切换就是效率最高的。redis 用 单个CPU 绑定一块内存的数据，然后针对这块内存的数据进行多次读写的时候，都是在一个CPU上完成的，所以它是单线程处理这个事。在内存的情况下，这个方案就是最佳方案 —— 阿里 沈询</p><p>因为一次CPU上下文的切换大概在 1500ns 左右。</p><p>从内存中读取 1MB 的连续数据，耗时大约为 250us，假设1MB的数据由多个线程读取了1000次，那么就有1000次时间上下文的切换，</p><p>那么就有1500ns * 1000 = 1500us ，我单线程的读完1MB数据才250us ,你光时间上下文的切换就用了1500us了，我还不算你每次读一点数据 的时间，</p><p>那什么时候用多线程的方案呢？</p><p>答案是：下层的存储等慢速的情况。比如磁盘</p><blockquote><p>IOPS (Input/Output Per Second)即每秒的输入输出量(或读写次数)，是衡量磁盘性能的主要指标之一。IOPS是指单位时间内系统能处理的I/O请求数量，I/O请求通常为读或写数据操作请求。随机读写频繁的应用，如OLTP(Online Transaction Processing)，IOPS是关键衡量指标。</p></blockquote><blockquote><p>另一个重要指标是数据吞吐量(Throughput)，指单位时间内可以成功传输的数据数量。对于大量顺序读写的应用，如VOD(Video On Demand)，则更关注吞吐量指标。</p></blockquote><p>内存是一个 IOPS （ 每秒的读写次数 ）非常高的系统，因为我想申请一块内存就申请一块内存，销毁一块内存我就销毁一块内存，内存的申请和销毁是很容易的。而且内存是可以动态的申请大小的。</p><p>磁盘的特性是：IOPS很低很低，但吞吐量很高。这就意味着，大量的读写操作都必须攒到一起，再提交到磁盘的时候，性能最高。为什么呢？</p><p>如果我有一个事务组的操作（就是几个已经分开了的事务请求，比如写读写读写，这么五个操作在一起），在内存中，因为IOPS非常高，我可以一个一个的完成，但是如果在磁盘中也有这种请求方式的话，</p><p>我第一个写操作是这样完成的：我先在硬盘中寻址，大概花费10ms，然后我读一个数据可能花费1ms然后我再运算（忽略不计），再写回硬盘又是10ms ，总共21ms</p><p>第二个操作去读花了10ms, 第三个又是写花费了21ms ,然后我再读10ms, 写21ms ，五个请求总共花费83ms，这还是最理想的情况下，这如果在内存中，大概1ms不到。</p><p>所以对于磁盘来说，它吞吐量这么大，那最好的方案肯定是我将N个请求一起放在一个buff里，然后一起去提交。</p><p>方法就是用异步：将请求和处理的线程不绑定，请求的线程将请求放在一个buff里，然后等buff快满了，处理的线程再去处理这个buff。然后由这个buff 统一的去写入磁盘，或者读磁盘，这样效率就是最高。java里的 IO不就是这么干的么~</p><p>对于慢速设备，这种处理方式就是最佳的，慢速设备有磁盘，网络 ，SSD 等等，</p><p>多线程 ，异步的方式处理这些问题非常常见，大名鼎鼎的netty 就是这么干的。</p><p>终于把 redis 为什么是单线程说清楚了，把什么时候用单线程跟多线程也说清楚了，其实也是些很简单的东西，只是基础不好的时候，就真的尴尬。。。。</p><p>补一发大师语录：来说说，为何单核cpu绑定一块内存效率最高</p><p>“我们不能任由操作系统负载均衡，因为我们自己更了解自己的程序，所以我们可以手动地为其分配CPU核，而不会过多地占用CPU”，默认情况下单线程在进行系统调用的时候会随机使用CPU内核，为了优化Redis，我们可以使用工具为单线程绑定固定的CPU内核，减少不必要的性能损耗！</p><p>redis作为单进程模型的程序，为了充分利用多核CPU，常常在一台server上会启动多个实例。而为了减少切换的开销，有必要为每个实例指定其所运行的CPU。</p><p>Linux 上 taskset 可以将某个进程绑定到一个特定的CPU。你比操作系统更了解自己的程序，为了避免调度器愚蠢的调度你的程序，或是为了在多线程程序中避免缓存失效造成的开销。</p><p>顺便再提一句：redis 的瓶颈在网络上 。。。。</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h4 id="使用Redis有什么缺点？"><a href="#使用Redis有什么缺点？" class="headerlink" title="使用Redis有什么缺点？"></a><strong>使用Redis有什么缺点？</strong></h4><ul><li>缓存和数据库双写一致性问题</li><li>缓存雪崩问题</li><li>缓存击穿问题</li><li>缓存的并发竞争问题</li></ul><h4 id="单线程的Redis为什么这么快？"><a href="#单线程的Redis为什么这么快？" class="headerlink" title="单线程的Redis为什么这么快？"></a><strong>单线程的Redis为什么这么快？</strong></h4><ul><li>多路复用</li><li>Resp协议</li><li>单线程</li><li>内存操作</li></ul><p>（面试官会针对这几点详细提问）</p><h4 id="Redis的数据类型及使用场景（这5种类型你用到过几个？）"><a href="#Redis的数据类型及使用场景（这5种类型你用到过几个？）" class="headerlink" title="Redis的数据类型及使用场景（这5种类型你用到过几个？）"></a><strong>Redis的数据类型及使用场景</strong>（这5种类型你用到过几个？）</h4><p><strong>String：</strong>一般做一些复杂的计数功能的缓存；<br><strong>Hash：</strong>存储二维数据或对象；<br><strong>List：</strong>可实现队列，栈及有序的数据存储；<br><strong>Set：</strong>常用于黑名单，微信抽奖等功能，应用场景多变；<br><strong>SortedSet：</strong>做排行榜应用，取TOPN操作；延时任务；做范围查找。</p><h4 id="Redis过期策略和内存淘汰机制？"><a href="#Redis过期策略和内存淘汰机制？" class="headerlink" title="Redis过期策略和内存淘汰机制？"></a><strong>Redis过期策略和内存淘汰机制？</strong></h4><p>这个面试题，我只回答了定期删除，没答全，面试官提出一种惰性删除策略，有点懵，回去查了一下资料才搞明白；</p><h4 id="Redis和数据库双写一致性问题；"><a href="#Redis和数据库双写一致性问题；" class="headerlink" title="Redis和数据库双写一致性问题；"></a><strong>Redis和数据库双写一致性问题；</strong></h4><p>（最终一致性和强一致性）</p><h4 id="如何应对缓存穿透和缓存雪崩问题？"><a href="#如何应对缓存穿透和缓存雪崩问题？" class="headerlink" title="如何应对缓存穿透和缓存雪崩问题？"></a><strong>如何应对缓存穿透和缓存雪崩问题？</strong></h4><p>中小型的公司一般遇不到这些问题，但是大并发的项目，流量有几百万左右，这两个问题一定要深刻考虑。</p><h4 id="如何解决Redis并发竞争Key问题？"><a href="#如何解决Redis并发竞争Key问题？" class="headerlink" title="如何解决Redis并发竞争Key问题？"></a><strong>如何解决Redis并发竞争Key问题？</strong></h4><p>这个没答上来。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1581293738311-c1e14c2513dc?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="redis" scheme="https://lijinhongpassion.github.io/categories/redis/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="redis" scheme="https://lijinhongpassion.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Java-初探HBuilder开发APP</title>
    <link href="https://lijinhongpassion.github.io/codeant/hbuilder1.html"/>
    <id>https://lijinhongpassion.github.io/codeant/hbuilder1.html</id>
    <published>2020-02-02T06:03:08.000Z</published>
    <updated>2020-02-02T03:53:28.295Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1580489647132-f8a797717fa4?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1189&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>时隔几个月，中途都在找工作，没时间学习新东西，所以今天怀着好奇心，简单写个教程，供自己和大家一起查看，如果说有地方写的不对，欢迎大家来交谈。</p><h2 id="APP开发"><a href="#APP开发" class="headerlink" title="APP开发"></a>APP开发</h2><p>现在的安卓APP开发也无非是两种方式：</p><ul><li>原生安卓</li><li>H5</li></ul><p>之前我写过原生的安卓APP的demo，发现原生的安卓开发很繁琐（也因为自己原来十分的菜，当然现在也菜），后面一直想学习一下H5的APP开发，但是对于前端知识我一直不是很敏感，很排挤，所以一直就放下了。说远了，这里我就简单讲一下利用<code>hbuilder</code>开发一个<code>APP</code>并且安装到手机上的教程。<strong>这里不涉及到后端的开发</strong></p><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>jdk8</td><td>利用jdk的keytool生成证书</td></tr><tr><td>hbuilderx或hbuilder</td><td>开发页面并打包</td></tr><tr><td>MUI</td><td>开发APP所用的前端框架，可以了解</td></tr><tr><td>真机安卓手机一台</td><td>测试</td></tr></tbody></table><h4 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h4><h5 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h5><p>创建前端项目，选择mui前端框架中的带有登录和设置的模板</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/hbuilder1/1.png" alt></p><hr><h5 id="填写项目设置"><a href="#填写项目设置" class="headerlink" title="填写项目设置"></a>填写项目设置</h5><p>打开项目下的manifest.json，填写Dcloud appid，申请教程 <a href="https://ask.dcloud.net.cn/article/35907" target="_blank" rel="noopener">https://ask.dcloud.net.cn/article/35907</a> </p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/hbuilder1/2.png" alt></p><p>设置app图标</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/hbuilder1/2.png" alt></p><hr><h5 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h5><p>这里我编写了一个bat脚本，该脚本运行的前提是 你的java环境变量配置好了</p><p>密钥生成的参考网址为：<a href="https://blog.csdn.net/weixin_42036591/article/details/88752679" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42036591/article/details/88752679</a></p><p><strong>记住输入的密钥口令，后面填写需要</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">@title 证书生成 -- 前提 jdk8</span><br><span class="line"></span><br><span class="line">rem 本脚本编写逻辑参考一下网址：https://blog.csdn.net/weixin_42036591/article/details/88752679</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> java_home=%JAVA_HOME%;</span><br><span class="line"></span><br><span class="line">rem 截取字符串，去除分号</span><br><span class="line">rem 进入java的bin目录下</span><br><span class="line"><span class="built_in">cd</span> /d %java_home:~0,-1%<span class="string">"/bin"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rem 开始生成证书</span><br><span class="line">rem keytool  -genkey  -<span class="built_in">alias</span>  证书别名  -keyalg  RSA   -validity 100 -keystore ceshi.keystore</span><br><span class="line">keytool  -genkey  -<span class="built_in">alias</span>  ceshi  -keyalg  RSA   -validity 100 -keystore ceshi.keystore</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"在打开的文件夹中搜索.keystore后缀的密钥文件"</span></span><br><span class="line">start <span class="string">""</span> %java_home:~0,-1%<span class="string">"/bin"</span></span><br><span class="line"> </span><br><span class="line">pause</span><br></pre></td></tr></table></figure><hr><h5 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h5><p>打包也有两种打包方式：</p><ul><li>云打包（推荐）</li><li>本地打包</li></ul><p>这里说一下云打包，发行-&gt;原生app-云打包</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/hbuilder1/3.png" alt></p><hr><h5 id="打包成功"><a href="#打包成功" class="headerlink" title="打包成功"></a>打包成功</h5><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/hbuilder1/4.png" alt></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/hbuilder1/5.gif" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1580489647132-f8a797717fa4?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1189&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="Java" scheme="https://lijinhongpassion.github.io/tags/Java/"/>
    
      <category term="app" scheme="https://lijinhongpassion.github.io/tags/app/"/>
    
      <category term="hbuilder" scheme="https://lijinhongpassion.github.io/tags/hbuilder/"/>
    
      <category term="mui" scheme="https://lijinhongpassion.github.io/tags/mui/"/>
    
  </entry>
  
  <entry>
    <title>2019年下半年计划</title>
    <link href="https://lijinhongpassion.github.io/codeant/1231.html"/>
    <id>https://lijinhongpassion.github.io/codeant/1231.html</id>
    <published>2019-12-31T05:02:43.000Z</published>
    <updated>2019-10-12T01:23:34.781Z</updated>
    
    <content type="html"><![CDATA[<hr><p><blockquote><strong>2019下半年规划</strong></blockquote><br><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/1231/2019年度计划.png" alt="2019下半年规划"></p><p><blockquote>非常喜欢的视频，侵删！</blockquote></p><h2 id><a href="#" class="headerlink" title=" "></a><div style="position: relative;margin-bottom: 30px;float: left;width: 100%; height: 0;padding-bottom: 75%;"><iframe src="//player.youku.com/embed/XNDM4MzgxMzEzMg==" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute;width: 100%;height: 100%;left: 0;top: 0;"> </iframe></div></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;&lt;blockquote&gt;&lt;strong&gt;2019下半年规划&lt;/strong&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion
      
    
    </summary>
    
    
      <category term="年度计划" scheme="https://lijinhongpassion.github.io/tags/%E5%B9%B4%E5%BA%A6%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-Neo4j实战之入门案例理解neo4j</title>
    <link href="https://lijinhongpassion.github.io/codeant/neo4j2.html"/>
    <id>https://lijinhongpassion.github.io/codeant/neo4j2.html</id>
    <published>2019-11-14T07:16:10.000Z</published>
    <updated>2019-11-14T07:37:38.796Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1573666008508-3825beb91997?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="1-简述"><a href="#1-简述" class="headerlink" title="1 简述"></a>1 简述</h2><p>本文只介绍一个例子，参照更多示例可以查看书本第二章</p><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2 示例"></a>2 示例</h2><p>假设人与人之间并不是一种朋友的关系，而你感兴趣的是人群之间的关联模型。一个组可能包含几个人，并且一个人也可能属于多个组。在传统的关系数据库中，通常会使用三个表的模型表达这种情景：一个人员表、一个组表和一个用于连接人和组的多对多关系链接表，如图2-1所示。</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/neo4j2/2.1.1.png" alt></p><p>在Neo4j中，你可以将用户和组以同样的模型描述为节点，将组成员描述为节点之间的关系，如图2-2所示。</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/neo4j2/2.1.2.png" style="zoom:50%;"></p><p>在这里你大致可以看到节点是图形数据库的数据模型实体（与RDBMS的术语对应），而关系勿庸置疑是节点之间的关系或连接。用纯语言表达这个图表的关系就是“一个人属于一个组”。</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/neo4j2/2.1.3.png" style="zoom:50%;"></p><p>图2-2所示的模式出现在图2-3的几个地方。事实上，整个图2-3可以通过叠加几次图2-2得到。</p><p>当查询这个模型中的数据时，可能有两个问题需要回答。首先，对于一个给定的人，这个人属于哪个组？第二，对于一个给定的组，哪些人属于这个组？使用Neo4j的查询语言Cypher很容易实现。</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/neo4j2/code1.png" alt></p><p>看上去这种模式适合我们的实例。通过从“一个人属于一个组”的简单关系开始，我们仅仅通过重复这种关系就能生成一个复杂的图形。我们最初的图2-2实际上代表了整个图形</p><p>对于更复杂的模型，有时按相反的方向思考更容易理解。可以首先在系统中画一张图把例子中所有不同的东西表示为节点，然后绘制箭头表示出这些节点之间的所有不同种类的关系。一旦开始看到重复的图案，就可以把它们拉出来并把它们归属为更小的图片单元。</p><h2 id="3-复杂示例"><a href="#3-复杂示例" class="headerlink" title="3 复杂示例"></a>3 复杂示例</h2><p>让我们多看几个不同的例子，看看它是如何分解成更小的图案的。在大型组织中，基于用户不同的角色、不同的任务和不同的组别授予其权限访问不同的系统。下面是用户可能具有的访问权限示例。</p><ul><li>直接的——你有权限访问共享文件系统中你自己文件夹中的文件。</li><li>基于某任务——作为数据库的管理员，你有权限连接到数据库控制台。</li><li>基于组成员——作为市场和销售团队的成员，你有权限连接到联系人管理系统。</li><li>基于对组所有成员指定的任务——作为一个开发团队的成员，所有的成员都有源代码控制提交的任务，都有权限从源代码库中取出代码并进行修改后返回原代码库。</li></ul><p>图2-4是一个未连接的授予这些权限的访问控制系统图。</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/neo4j2/2.4.png" style="zoom:50%;"></p><p>图2-5显示了所绘实体之间可能存在的关系的同一图形。</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/neo4j2/2.5.png" style="zoom:50%;"></p><p>正如你所看到的，有几种从用户到权限的可能路径。为了找出一个用户所拥有的权限，你需要找出一个用户节点通过任何途径连接的所有权限节点。在传统的关系数据库中，这需要一个复杂的查询表达每一个不同路径的join操作。</p><ul><li>从用户直接到权限（一表join操作）。</li><li>从用户到组再到权限（二表join操作）。</li><li>从用户到任务再到权限（二表join操作）。</li><li>从用户到组、到任务再到权限（三表join操作）。</li></ul><p>使用Cypher，一个短的查询即可实现：</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/neo4j2/code2.png" alt></p><p>这将匹配任何第一个具有用户标签且其指定的属性值为姓名（name）的节点与第二个标记为权限节点的节点对，并且在它们之间有一个可以是任意长度的路径。最后，返回所有匹配了的权限名称。</p><p>现在假设你想对这个模型添加一个新功能，以反映组织的层次结构。用户不仅可以属于组，组还可以是较大组的下级组，例如，Tester、UXDesigner和Coder，可能隶属于开发组的小组。图2-6显示了在组之间具有下级组（subgroup_of）隶属关系扩展的新模型。</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/neo4j2/2.6.png" style="zoom:50%;"></p><p>要改变关系数据库的查询以支持此模型的方案可不是一件容易的事，而最初模型的Cypher查询也完全适合这一扩展的模型，因为对用户查询一个权限与查询一个关系没有任何区别。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>看见具体的案例过后，在关系复杂的实体类中，会发现确实比RDBMS方便很多，下一章节会对neo4j开发入门进行总结</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1573666008508-3825beb91997?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="neo4j" scheme="https://lijinhongpassion.github.io/categories/neo4j/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="neo4j" scheme="https://lijinhongpassion.github.io/tags/neo4j/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-Neo4j实战之Neo4j概述</title>
    <link href="https://lijinhongpassion.github.io/codeant/neo4j1.html"/>
    <id>https://lijinhongpassion.github.io/codeant/neo4j1.html</id>
    <published>2019-11-14T07:11:00.000Z</published>
    <updated>2019-11-14T07:38:23.399Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1571942676558-281b2f9b1f8d?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1189&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><p>读书笔记</p><h2 id="1-简述neo4j"><a href="#1-简述neo4j" class="headerlink" title="1 简述neo4j"></a>1 简述neo4j</h2><h4 id="1-1-特点"><a href="#1-1-特点" class="headerlink" title="1.1 特点"></a>1.1 特点</h4><ul><li>图数据库</li><li>支持事务</li><li>nosql数据库</li></ul><h4 id="1-2-组成元素"><a href="#1-2-组成元素" class="headerlink" title="1.2 组成元素"></a>1.2 组成元素</h4><ul><li>节点（表示实体，例如用户）</li><li>关系（实体类之间的关系，例如朋友关系）</li><li>属性（节点和关系都具有属性，例如节点有名字属性、类型属性）</li></ul><p><strong>例子：</strong></p><p>有用户和地址两种类型的<strong>节点</strong>，用户节点有名字（name）、年龄（age）、喜欢的颜色(favoriteColor)三个<strong>属性</strong>，用户和地址之间有<code>has_address</code><strong>关系</strong>，关系有是否为现住址（is_current）的<strong>属性</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/neo4j1/relation.png" alt></p><h4 id="1-3-作用领域"><a href="#1-3-作用领域" class="headerlink" title="1.3 作用领域"></a>1.3 作用领域</h4><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/neo4j1/1.6.5.png" alt></p><h4 id="1-4-性能（参照书本1-4章节）"><a href="#1-4-性能（参照书本1-4章节）" class="headerlink" title="1.4 性能（参照书本1.4章节）"></a>1.4 性能（参照书本1.4章节）</h4><p>通过比较，在大数据的环境下，对于社交网络的遍历，关系型数据库明显弱于图数据库，原因如下：</p><ul><li><strong>图数据库进行的是局部遍历</strong></li></ul><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/neo4j1/1.4-mysql.png" alt></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/neo4j1/1.4-neo4j.png" alt></p><h2 id="2-总结"><a href="#2-总结" class="headerlink" title="2 总结"></a>2 总结</h2><p>neo4j用户处理关系复杂的实体类，例如社交网络等，因为是<code>图</code>的数据结构，所以遍历（深度遍历和广度遍历）起来更加快速便捷，下一章节会举例说明。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1571942676558-281b2f9b1f8d?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1189&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="neo4j" scheme="https://lijinhongpassion.github.io/categories/neo4j/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="neo4j" scheme="https://lijinhongpassion.github.io/tags/neo4j/"/>
    
  </entry>
  
  <entry>
    <title>Java-爬虫必备之正则表达式</title>
    <link href="https://lijinhongpassion.github.io/codeant/zzbd.html"/>
    <id>https://lijinhongpassion.github.io/codeant/zzbd.html</id>
    <published>2019-11-11T01:15:47.000Z</published>
    <updated>2019-11-11T04:04:26.661Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1573381970578-caaea2b66698?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="常用正则语法"><a href="#常用正则语法" class="headerlink" title="常用正则语法"></a>常用正则语法</h2><p> <strong>*，+，?，{}</strong>：匹配出现次数</p><table><thead><tr><th>字符</th><th>匹配格式</th></tr></thead><tbody><tr><td>*</td><td>{0，}</td></tr><tr><td>+</td><td>{1，}</td></tr><tr><td>？</td><td>{0，1}</td></tr><tr><td></td><td>{n,m}   最少n次，最多m次</td></tr></tbody></table><p><strong>[]，|，. ，\W，\w，\D，\d</strong>：匹配字符</p><table><thead><tr><th>字符</th><th>匹配格式</th></tr></thead><tbody><tr><td>[]</td><td>[A-Za-z]</td></tr><tr><td>\</td><td></td><td>(xy\</td><td>yx)等价于[(xy)(yx)]</td></tr><tr><td>.</td><td>匹配除<code>\n</code>以外的所有字符</td></tr><tr><td>\w</td><td>[A-Za-z0-9]</td></tr><tr><td>\W</td><td>[^A-Za-z0-9]</td></tr><tr><td>\d</td><td>[0-9]</td></tr><tr><td>\D</td><td>[^0-9]</td></tr></tbody></table><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/zzbd/1.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1573381970578-caaea2b66698?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
  </entry>
  
</feed>
