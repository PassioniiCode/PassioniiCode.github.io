<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code Ant&#39;s Blog</title>
  
  <subtitle>“每天进步一点点”</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lijinhongpassion.github.io/"/>
  <updated>2019-03-18T06:46:22.077Z</updated>
  <id>https://lijinhongpassion.github.io/</id>
  
  <author>
    <name>Code Ant</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2019年计划</title>
    <link href="https://lijinhongpassion.github.io/codeant/2511.html"/>
    <id>https://lijinhongpassion.github.io/codeant/2511.html</id>
    <published>2019-12-31T05:02:43.000Z</published>
    <updated>2019-03-18T06:46:22.077Z</updated>
    
    <content type="html"><![CDATA[<hr><p><blockquote><strong>2019上半年规划</strong></blockquote></p><img src="/codeant/2511/2019年度计划.png" title="2019上半年规划"><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;&lt;blockquote&gt;&lt;strong&gt;2019上半年规划&lt;/strong&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;img src=&quot;/codeant/2511/2019年度计划.png&quot; title=&quot;2019上半年规划&quot;&gt;
&lt;hr&gt;

      
    
    </summary>
    
    
      <category term="年度计划" scheme="https://lijinhongpassion.github.io/tags/%E5%B9%B4%E5%BA%A6%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Java-swagger-api框架（springboot整合）</title>
    <link href="https://lijinhongpassion.github.io/codeant/1a1f.html"/>
    <id>https://lijinhongpassion.github.io/codeant/1a1f.html</id>
    <published>2019-07-15T07:37:10.000Z</published>
    <updated>2019-07-16T03:07:39.920Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1562101806-f2effc30ed54?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1350&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h1 id="1-简述"><a href="#1-简述" class="headerlink" title="1. 简述"></a>1. 简述</h1><p>swagger的作用</p><ul><li>描述和测试API接口</li><li>自动生成API接口文档</li></ul><h1 id="2-入门使用"><a href="#2-入门使用" class="headerlink" title="2. 入门使用"></a>2. 入门使用</h1><p>github例子：<a href="https://github.com/LiJinHongPassion/springboot/tree/master/springboot_swagger_demo" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/springboot/tree/master/springboot_swagger_demo</a></p><h2 id="2-1-添加依赖"><a href="#2-1-添加依赖" class="headerlink" title="2.1 添加依赖"></a>2.1 添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Swagger依赖-Start  --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- Swagger依赖-End  --&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.58<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-配置swagger"><a href="#2-2-配置swagger" class="headerlink" title="2.2 配置swagger"></a>2.2 配置swagger</h2><h3 id="2-2-1-application-yml"><a href="#2-2-1-application-yml" class="headerlink" title="2.2.1 application.yml"></a>2.2.1 application.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">swagger:</span></span><br><span class="line">  <span class="comment">#项目标题</span></span><br><span class="line"><span class="attr">  title:</span> <span class="string">SpringBoot学习</span></span><br><span class="line">  <span class="comment">#项目描述</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">SpringBoot快速入门</span></span><br><span class="line">  <span class="comment">#版本</span></span><br><span class="line"><span class="attr">  version:</span> <span class="number">1.0</span><span class="number">.0</span></span><br><span class="line">  <span class="comment">#开发者名字</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">codeAnt</span></span><br><span class="line">  <span class="comment">#开发者个人主页</span></span><br><span class="line"><span class="attr">  url:</span> <span class="attr">https://lijinhongpassion.github.io/</span></span><br><span class="line">  <span class="comment">#开发者邮箱</span></span><br><span class="line"><span class="attr">  email:</span> <span class="number">1755497577</span><span class="string">@qq.com</span></span><br></pre></td></tr></table></figure><h3 id="2-2-2-SwaggerConfig-java"><a href="#2-2-2-SwaggerConfig-java" class="headerlink" title="2.2.2 SwaggerConfig.java"></a>2.2.2 SwaggerConfig.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/15-10:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"swagger"</span>)<span class="comment">//读取yml文件中的swagger配置，需要配置getset方法，或者使用lomlok</span></span><br><span class="line"><span class="comment">//@Data  //lomlok</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">//必须存在</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2 <span class="comment">//必须存在</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span> <span class="comment">//必须存在</span></span><br><span class="line"><span class="comment">//必须存在 扫描的API Controller包</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = &#123;<span class="string">"com.example.li.springboot_swagger_demo.controller"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="keyword">private</span> String version;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">customDocket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Contact contact = <span class="keyword">new</span> Contact(name, url, email);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(title)</span><br><span class="line">                .description(description)</span><br><span class="line">                .contact(contact)</span><br><span class="line">                .version(version)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//set、get方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> title;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;<span class="keyword">this</span>.title = title;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> description;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDescription</span><span class="params">(String description)</span> </span>&#123;<span class="keyword">this</span>.description = description;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getVersion</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> version;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVersion</span><span class="params">(String version)</span> </span>&#123;<span class="keyword">this</span>.version = version;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> name;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;<span class="keyword">this</span>.name = name;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> url;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;<span class="keyword">this</span>.url = url;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> email;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;<span class="keyword">this</span>.email = email;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-WebMvcConfig-java"><a href="#2-2-3-WebMvcConfig-java" class="headerlink" title="2.2.3 WebMvcConfig.java"></a>2.2.3 WebMvcConfig.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/15-10:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加swagger静态资源映射</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"swagger-ui.html"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"classpath:/META-INF/resources/"</span>);</span><br><span class="line"></span><br><span class="line">        registry.addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-4-springboot启动类"><a href="#2-2-4-springboot启动类" class="headerlink" title="2.2.4 springboot启动类"></a>2.2.4 springboot启动类</h3><p>使用<code>@EnableWebMvc</code>注解开启MVC，不开启则配置的<code>WebMvcConfig.java</code>不会生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span><span class="comment">//开启MVC</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootSwaggerDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootSwaggerDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-测试"><a href="#2-3-测试" class="headerlink" title="2.3 测试"></a>2.3 测试</h2><p>启动项目，访问接口文档地址<a href="http://localhost:8080/swagger/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger/swagger-ui.html</a></p><p>这里8080后面的swagger是我项目访问路径</p><img src="/codeant/undefined/1.png" title="1.png"><h1 id="3-swagger常见注解"><a href="#3-swagger常见注解" class="headerlink" title="3. swagger常见注解"></a>3. swagger常见注解</h1><p>官网地址：<a href="https://github.com/swagger-api/swagger-core/wiki/Annotations-1.5.X#quick-annotation-overview" target="_blank" rel="noopener">https://github.com/swagger-api/swagger-core/wiki/Annotations-1.5.X#quick-annotation-overview</a></p><p>常用注解： </p><hr><p>1、<strong>@Api()</strong>：用在请求的类上，表示对类的说明，也代表了这个类是swagger2的资源</p><p>参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tags：说明该类的作用，参数是个数组，可以填多个。</span><br><span class="line">value=&quot;该参数没什么意义，在UI界面上不显示，所以不用配置&quot;</span><br><span class="line">description = &quot;用户基本信息操作&quot;</span><br></pre></td></tr></table></figure><p>2、<strong>@ApiOperation()</strong>：用于方法，表示一个http请求访问该方法的操作</p><p>参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">value=&quot;方法的用途和作用&quot;    </span><br><span class="line">notes=&quot;方法的注意事项和备注&quot;    </span><br><span class="line">tags：说明该方法的作用，参数是个数组，可以填多个。</span><br><span class="line">格式：tags=&#123;&quot;作用1&quot;,&quot;作用2&quot;&#125; </span><br><span class="line">（在这里建议不使用这个参数，会使界面看上去有点乱，前两个常用）</span><br></pre></td></tr></table></figure><p>3、<strong>@ApiModel()</strong>：用于响应实体类上，用于说明实体作用</p><p>参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">value=&quot;实体类名&quot;</span><br><span class="line">description=&quot;描述实体的作用&quot;</span><br></pre></td></tr></table></figure><p>4、<strong>@ApiModelProperty</strong>：用在属性上，描述实体类的属性</p><p>参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">value=&quot;用户名&quot;  描述参数的意义</span><br><span class="line">name=&quot;name&quot;    参数的变量名</span><br><span class="line">required=true     参数是否必选</span><br><span class="line">allowableValues  =  &quot;男,女&quot; 允许的值</span><br></pre></td></tr></table></figure><p>5、<strong>@ApiImplicitParams</strong>：用在请求的方法上，包含多@ApiImplicitParam</p><p>6、<strong>@ApiImplicitParam</strong>：用于方法，表示单独的请求参数</p><p>参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;参数ming&quot; </span><br><span class="line">value=&quot;参数说明&quot; </span><br><span class="line">dataType=&quot;数据类型&quot; </span><br><span class="line">paramType=&quot;query&quot; 表示参数放在哪里</span><br><span class="line">    · header 请求参数的获取：@RequestHeader</span><br><span class="line">    · query   请求参数的获取：@RequestParam</span><br><span class="line">    · path（用于restful接口） 请求参数的获取：@PathVariable</span><br><span class="line">    · body（不常用）</span><br><span class="line">    · form（不常用） </span><br><span class="line">defaultValue=&quot;参数的默认值&quot;</span><br><span class="line">required=&quot;true&quot; 表示参数是否必须传</span><br></pre></td></tr></table></figure><p>7、<strong>@ApiParam()</strong>：用于方法，参数，字段说明 表示对参数的要求和说明</p><p>参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;参数名称&quot;</span><br><span class="line">value=&quot;参数的简要说明&quot;</span><br><span class="line">defaultValue=&quot;参数默认值&quot;</span><br><span class="line">required=&quot;true&quot; 表示属性是否必填，默认为false</span><br></pre></td></tr></table></figure><p>8、<strong>@ApiResponses</strong>：用于请求的方法上，根据响应码表示不同响应</p><p>一个@ApiResponses包含多个@ApiResponse</p><p>9、<strong>@ApiResponse</strong>：用在请求的方法上，表示不同的响应</p><p><strong>参数</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">code=&quot;404&quot;    表示响应码(int型)，可自定义</span><br><span class="line">message=&quot;状态码对应的响应信息&quot;</span><br></pre></td></tr></table></figure><p>10、<strong>@ApiIgnore()</strong>：用于类或者方法上，不被显示在页面上</p><p>11、<strong>@Profile({“dev”, “test”})</strong>：用于配置类上，表示只对开发和测试环境有用</p><hr><p><strong>例子</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/15-10:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api</span>(value = <span class="string">"用户模块"</span>)<span class="comment">//板块描述</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"测试Swagger"</span>, notes = <span class="string">"hello方法"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello SpringBoot-swagger"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法1：采用<span class="doctag">@ApiImplicitParams</span>描述参数，当以实体类接收传递的参数时，需要添加<span class="doctag">@ApiIgnore</span>()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 传递的实体类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"测试"</span>, notes = <span class="string">"测试swagger注解"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户id"</span>, required = <span class="keyword">false</span>, dataType = <span class="string">"string"</span>, paramType = <span class="string">"query"</span>),</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"name"</span>, value = <span class="string">"用户名字"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"string"</span>, paramType = <span class="string">"query"</span>),</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"sex"</span>, value = <span class="string">"用户性别"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"string"</span>, paramType = <span class="string">"query"</span>),</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"age"</span>, value = <span class="string">"用户年龄"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"int"</span>, paramType = <span class="string">"query"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="meta">@ApiResponses</span>(value = &#123;</span><br><span class="line">            <span class="meta">@ApiResponse</span>(code = <span class="number">400</span>, message = <span class="string">"Invalid ID supplied"</span>,</span><br><span class="line">                    responseHeaders = <span class="meta">@ResponseHeader</span>(name = <span class="string">"X-Rack-Cache"</span>, description = <span class="string">"Explains whether or not a cache was used"</span>, response = Boolean.class)),</span><br><span class="line">            <span class="meta">@ApiResponse</span>(code = <span class="number">404</span>, message = <span class="string">"Pet not found"</span>) &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDTO <span class="title">test</span><span class="params">(@RequestParam(value = <span class="string">"id"</span>, required = <span class="keyword">false</span>)</span> String id,</span></span><br><span class="line"><span class="function">                        @<span class="title">ApiIgnore</span><span class="params">()</span> UserDTO user)</span>&#123;</span><br><span class="line"></span><br><span class="line">        user.setName(<span class="string">"OK"</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法1：采用<span class="doctag">@ApiParam</span>描述参数，实体类的属性描述可以利用model的<span class="doctag">@ApiModelProperty</span>、<span class="doctag">@ApiModel</span>注解</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 传递的实体类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test1"</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"测试1"</span>, notes = <span class="string">"测试swagger注解1"</span>)</span><br><span class="line">    <span class="meta">@ApiResponses</span>(value = &#123;</span><br><span class="line">            <span class="meta">@ApiResponse</span>(code = <span class="number">400</span>, message = <span class="string">"Invalid ID supplied"</span>,</span><br><span class="line">                    responseHeaders = <span class="meta">@ResponseHeader</span>(name = <span class="string">"X-Rack-Cache"</span>, description = <span class="string">"Explains whether or not a cache was used"</span>, response = Boolean.class)),</span><br><span class="line">            <span class="meta">@ApiResponse</span>(code = <span class="number">404</span>, message = <span class="string">"Pet not found"</span>) &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDTO <span class="title">test1</span><span class="params">(@RequestParam(value = <span class="string">"id"</span>, required = <span class="keyword">false</span>)</span> @<span class="title">ApiParam</span><span class="params">(value = <span class="string">"用户的id"</span>, name = <span class="string">"用户的id"</span>, required = <span class="keyword">false</span>)</span> String id,</span></span><br><span class="line"><span class="function">                        @<span class="title">ApiParam</span><span class="params">(value = <span class="string">"用户的Dto"</span>, name = <span class="string">"用户的对象"</span>, required = <span class="keyword">true</span>)</span> UserDTO user)</span>&#123;</span><br><span class="line"></span><br><span class="line">        user.setName(<span class="string">"OK"</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1562101806-f2effc30ed54?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1350&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="swagger" scheme="https://lijinhongpassion.github.io/categories/swagger/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="swagger" scheme="https://lijinhongpassion.github.io/tags/swagger/"/>
    
  </entry>
  
  <entry>
    <title>Java-spring事务</title>
    <link href="https://lijinhongpassion.github.io/codeant/fb49.html"/>
    <id>https://lijinhongpassion.github.io/codeant/fb49.html</id>
    <published>2019-07-02T14:23:48.000Z</published>
    <updated>2019-07-02T14:34:34.476Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1562065540-efa93744ed71?ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=1350&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>在进行数据库持久化操作的时候，总会涉及到事务，这里谈及的是spring实现单体应用事务处理的两种方式。<br>关于事务处理，spring官方文档是这样说明的<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/data-access.html#tx-resource-synchronization" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/current/spring-framework-reference/data-access.html#tx-resource-synchronization</a><br><a href="http://www.kubiji.cn/book/spring/SPRINGShiWuGuanLi/SPRINGShiWuGuanLi.html" target="_blank" rel="noopener">中文文档</a><br>下面会根据文档来了解spring事务。</p><h1 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h1><p>通过一组逻辑操作单元（一组DML——sql语句），将数据从一种状态切换到另外一种状态要么成功，要么失败。</p><h1 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h1><p>ACID</p><p>原子性：一个事务不可再分割，要么都执行要么都不执行</p><p>一致性：一个事务执行会使数据从一个一致状态切换到另外一个一致状态</p><p>隔离性：一个事务的执行不受其他事务的影响</p><p>持久性：一个事务一旦提交，则会永久改变数据库的数据</p><h1 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h1><p>事务并发问题如何发生？</p><pre><code>当多个事务同时操作同一个数据库的相同数据时</code></pre><p>事务的并发问题有哪些？</p><pre><code>脏读：一个事务读取到了另外一个事务未提交的数据不可重复读：同一个事务中，多次读取到的数据不一致幻读：一个事务读取数据时，另外一个事务进行更新，导致第一个事务读取到了没有更新的数据</code></pre><p>如何避免事务的并发问题？</p><pre><code>通过设置事务的隔离级别1、READ UNCOMMITTED2、READ COMMITTED 可以避免脏读3、REPEATABLE READ 可以避免脏读、不可重复读和一部分幻读4、SERIALIZABLE可以避免脏读、不可重复读和幻读</code></pre><h1 id="spring中事务处理"><a href="#spring中事务处理" class="headerlink" title="spring中事务处理"></a>spring中事务处理</h1><h2 id="事务分类"><a href="#事务分类" class="headerlink" title="事务分类"></a>事务分类</h2><p>|—-局部事务：特定于一个单一的事务资源，如一个 JDBC 连接<br>|<br>|—-全局事务：跨多个事务资源事务，如在一个分布式系统中的事务</p><p><strong>局部事务管理</strong>在一个集中的计算环境中是有用的，该计算环境中应用程序组件和资源位于一个单位点，而事务管理只涉及到一个运行在一个单一机器中的本地数据管理器。局部事务更容易实现。</p><p><strong>全局事务管理</strong>需要在分布式计算环境中，所有的资源都分布在多个系统中。在这种情况下事务管理需要同时在局部和全局范围内进行。分布式或全局事务跨多个系统执行，它的执行需要全局事务管理系统和所有相关系统的局部数据管理人员之间的协调。</p><p>|—-编程式：在编程的帮助下 管理事务<br>|<br>|—-声明式：从业务代码中 分离事务管理</p><p>声明式事务管理比编程式事务管理更可取，尽管它不如编程式事务管理灵活，但它允许你通过代码控制事务。但作为一种横切关注点，声明式事务管理可以使用 AOP 方法进行模块化。Spring 支持使用 Spring AOP 框架的声明式事务管理。</p><h2 id="1-编程式事务管理"><a href="#1-编程式事务管理" class="headerlink" title="1. 编程式事务管理"></a>1. 编程式事务管理</h2><p>关于编程式事务管理，就是在执行sql语句的时候添加try块，在异常处理中执行回滚操作，这里不过多讲解，具体学习参考<a href="http://www.kubiji.cn/book/spring/SPRINGShiWuGuanLi/SPRINGBianChengShiShiWuGuanLi.html" target="_blank" rel="noopener">http://www.kubiji.cn/book/spring/SPRINGShiWuGuanLi/SPRINGBianChengShiShiWuGuanLi.html</a></p><h2 id="2-声明式事务（-Transaction注解）"><a href="#2-声明式事务（-Transaction注解）" class="headerlink" title="2. 声明式事务（@Transaction注解）"></a>2. 声明式事务（@Transaction注解）</h2><h3 id="2-1-参数说明"><a href="#2-1-参数说明" class="headerlink" title="2.1 参数说明"></a>2.1 参数说明</h3><p><strong>propagation  — 事务传播行为介绍</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation=Propagation.REQUIRED) ：如果有事务, 那么加入事务, 没有的话新建一个(默认情况下)</span><br><span class="line"><span class="meta">@Transactional</span>(propagation=Propagation.NOT_SUPPORTED) ：容器不为这个方法开启事务</span><br><span class="line"><span class="meta">@Transactional</span>(propagation=Propagation.REQUIRES_NEW) ：不管是否存在事务,都创建一个新的事务,原来的挂起,新的执行完毕,继续执行老的事务</span><br><span class="line"><span class="meta">@Transactional</span>(propagation=Propagation.MANDATORY) ：必须在一个已有的事务中执行,否则抛出异常</span><br><span class="line"><span class="meta">@Transactional</span>(propagation=Propagation.NEVER) ：必须在一个没有的事务中执行,否则抛出异常(与Propagation.MANDATORY相反)</span><br><span class="line"><span class="meta">@Transactional</span>(propagation=Propagation.SUPPORTS) ：如果其他bean调用这个方法,在其他bean中声明事务,那就用事务.如果其他bean没有声明事务,那就不用事务.</span><br></pre></td></tr></table></figure><p><strong>timeout — 事务超时设置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(timeout=<span class="number">30</span>) <span class="comment">//默认是30秒</span></span><br></pre></td></tr></table></figure><p><strong>isolation — 事务隔离级别</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(isolation = Isolation.READ_UNCOMMITTED)：读取未提交数据(会出现脏读, 不可重复读) 基本不使用</span><br><span class="line"><span class="meta">@Transactional</span>(isolation = Isolation.READ_COMMITTED)：读取已提交数据(会出现不可重复读和幻读)</span><br><span class="line"><span class="meta">@Transactional</span>(isolation = Isolation.REPEATABLE_READ)：可重复读(会出现幻读)</span><br><span class="line"><span class="meta">@Transactional</span>(isolation = Isolation.SERIALIZABLE)：串行化</span><br><span class="line"></span><br><span class="line">MYSQL: 默认为REPEATABLE_READ级别</span><br><span class="line">SQLSERVER: 默认为READ_COMMITTED</span><br><span class="line">脏读 : 一个事务读取到另一事务未提交的更新数据</span><br><span class="line">不可重复读 : 在同一事务中, 多次读取同一数据返回的结果有所不同, 换句话说, </span><br><span class="line">后续读取可以读到另一事务已提交的更新数据. 相反, <span class="string">"可重复读"</span>在同一事务中多次</span><br><span class="line">读取数据时, 能够保证所读数据一样, 也就是后续读取不能读到另一事务已提交的更新数据</span><br><span class="line">幻读 : 一个事务读到另一个事务已提交的insert数据</span><br></pre></td></tr></table></figure><h3 id="2-2-使用方法"><a href="#2-2-使用方法" class="headerlink" title="2.2 使用方法"></a>2.2 使用方法</h3><ol><li><p>标注于类上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotificationServiceImpl</span> <span class="keyword">implements</span> <span class="title">NotificationService</span> </span>&#123;</span><br></pre></td></tr></table></figure></li><li><p>标注于方法上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.NOT_SUPPORTED)</span><br><span class="line"><span class="function"><span class="keyword">public</span> PageList&lt;NotificationResp&gt; <span class="title">searchAllList</span><span class="params">(NotificationReq notificationReq, PageBounds pageBounds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> notificationMapper.searchAllList(notificationReq,pageBounds);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-3-趣味问题"><a href="#2-3-趣味问题" class="headerlink" title="2.3 趣味问题"></a>2.3 趣味问题</h3><p>我在知乎上看见一个问题，当一个没有@Transaction注解的方法A去调用一个有@Transaction注解的方法B的时候，抛出异常后会执行事务吗？答案是不能的<br>知乎参考文章地址：<a href="https://zhuanlan.zhihu.com/p/38208248" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/38208248</a><br>其中需要理解的是这个代理的知识点，下面来梳理一下：<br>条件：A方法没有事务注解，B方法有事务@Transaction注解</p><pre><code>A方法调用B方法是否会执行事务？**答案：不会**（所以我们理解只有加了@Transaction注解才会执行事务回滚）</code></pre><p>首先B方法有注解，如图：<br><img src="/codeant/fb49/1.jpg" title="1.jpg"></p><p>spring的@Transaction注解会对方法生成的代理方法加上try块，添加事务回滚处理，如图：<br><img src="/codeant/fb49/2.jpg" title="2.jpg"></p><p>A方法调用B方法，如图：<br><img src="/codeant/fb49/3.jpg" title="3.jpg"></p><p>因为A方法没有注解，就不会在代理方法上加上try块，所以就没有事务，如图：<br>A方法调用B方法是将B方法压入A方法的栈中，没有带上事务<br><img src="/codeant/fb49/4.jpg" title="4.jpg"></p><h3 id="2-4-事务传播"><a href="#2-4-事务传播" class="headerlink" title="2.4 事务传播"></a>2.4 事务传播</h3><p>参考文档：<a href="https://mp.weixin.qq.com/s?__biz=MzU2MzY3ODI4OA==&amp;mid=2247483888&amp;idx=1&amp;sn=bd75e58f855d07d58715e381ae0d0e7e&amp;chksm=fc57dccfcb2055d9e4f11695ed58ecdaf72d9c63afa59a4ac44dd5d85e82d8bd6f932c5c6088&amp;mpshare=1&amp;scene=23&amp;srcid=#rd" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzU2MzY3ODI4OA==&amp;mid=2247483888&amp;idx=1&amp;sn=bd75e58f855d07d58715e381ae0d0e7e&amp;chksm=fc57dccfcb2055d9e4f11695ed58ecdaf72d9c63afa59a4ac44dd5d85e82d8bd6f932c5c6088&amp;mpshare=1&amp;scene=23&amp;srcid=#rd</a></p><p><strong>含义</strong>：确定客户端和被调用端的事务边界（说得通俗一点就是多个具有事务控制的service的相互调用时所形成的复杂的事务边界控制）</p><p><strong>什么是上下文</strong>：自我理解，上下文==环境，直接把上下文替换为环境理解，如下面涉及到的<code>表示当前方法必须在一个具有事务的上下文中运行</code>,可以替换为<code>表示当前方法必须在一个具有事务的环境中运行</code></p><p><strong>propagation参数</strong></p><blockquote><ol><li><strong>REQUIRED</strong>：表示当前方法必须在一个具有事务的上下文中运行，如有客户端有事务在进行，那么被调用端将在该事务中运行，否则的话重新开启一个事务（如果被调用端发生异常，那么调用端和被调用端事务都将回滚)。</li><li><strong>SUPPORTS</strong>:表示当前方法不必需要具有一个事务上下文，但是如果有一个事务的话，它也可以在这个事务中运行。</li><li><strong>MANDATORY</strong>:表示当前方法必须在一个事务中运行，如果没有事务，将抛出异常</li><li><strong>NESTED</strong>:表示如果当前方法正有一个事务在运行中，则该方法应该运行在一个嵌套事务中，被嵌套的事务可以独立于被封装的事务中进行提交或者回滚。如果封装事务存在，并且外层事务抛出异常回滚，那么内层事务必须回滚，反之，内层事务并不影响外层事务。如果封装事务不存在，则同REQUIRED的一样。</li><li><strong>NEVER</strong>:表示当方法务不应该在一个事务中运行，如果存在一个事务，则抛出异常。</li><li><strong>REQUIRES_NEW</strong>:表示当前方法必须运行在它自己的事务中。一个新的事务将启动，而且如果有一个现有的事务在运行的话，则这个方法将在运行期被挂起，直到新的事务提交或者回滚才恢复执行。</li><li><strong>NOT_SUPPORTED</strong>:表示该方法不应该在一个事务中运行。如果有一个事务正在运行，他将在运行期被挂起，直到这个事务提交或者回滚才恢复执行。</li></ol></blockquote><h2 id="3-声明式事务（AOP）"><a href="#3-声明式事务（AOP）" class="headerlink" title="3. 声明式事务（AOP）"></a>3. 声明式事务（AOP）</h2><p>官方文档给出的例子<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/data-access.html#transaction-declarative-first-example" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/current/spring-framework-reference/data-access.html#transaction-declarative-first-example</a><br>其中最重要的式AOP对事务的配置，下面来解析以下配置声明式事务的配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- (事务管理)transaction manager, use JtaTransactionManager for global tx --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span> <span class="comment">&lt;!-- 支持当前事务，如果执行到save开头的任何方法时没有事务则开启一个事务 这是最常见的方式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span><span class="comment">&lt;!-- 支持当前事务，如果执行到save开头的任何方法时没有事务则开启一个事务,这是最常见的方式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"add*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span><span class="comment">&lt;!-- 支持当前事务，如果执行到save开头的任何方法时没有事务则开启一个事务,这是最常见的方式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span><span class="comment">&lt;!-- 支持当前事务，如果执行到save开头的任何方法时没有事务则开启一个事务,这是最常见的方式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span> <span class="comment">&lt;!-- 支持当前事务，如果当前没有事务，就以非事务方式执行。只读 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span><span class="comment">&lt;!--支持当前事务，如果当前没有事务，就以非事务方式执行。只读 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 那些类那些方法使用事务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 只对业务逻辑层实施事务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"allManagerMethod"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.cqut.hfh.ordering.service.*.*(..))"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">pointcut-ref</span>=<span class="string">"allManagerMethod"</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;aop:pointcut/&gt;</code>元素中定义的表达式是AspectJ切入点表达式。有关Spring中切入点表达式的更多详细信息，请参阅<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#aop" target="_blank" rel="noopener">AOP部分</a>。</p><p><code>&lt;tx：method /&gt;</code>设置</p><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">必要</th><th style="text-align:left">默认</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>name</code></td><td style="text-align:left">是</td><td style="text-align:left"></td><td style="text-align:left">与事务属性关联的方法名称。通配符（<em>）字符可以被用于相同的事务相关联的属性的设置有许多方法（例如，`get</em><code>，</code>handle<em><code>，</code>on</em>Event`，等等）。</td></tr><tr><td style="text-align:left"><code>propagation</code></td><td style="text-align:left">没有</td><td style="text-align:left"><code>REQUIRED</code></td><td style="text-align:left">事务传播行为。</td></tr><tr><td style="text-align:left"><code>isolation</code></td><td style="text-align:left">没有</td><td style="text-align:left"><code>DEFAULT</code></td><td style="text-align:left">事务隔离级别。仅适用于<code>REQUIRED</code>或的传播设置<code>REQUIRES_NEW</code>。</td></tr><tr><td style="text-align:left"><code>timeout</code></td><td style="text-align:left">没有</td><td style="text-align:left">-1</td><td style="text-align:left">事务超时（秒）。仅适用于传播<code>REQUIRED</code>或<code>REQUIRES_NEW</code>。</td></tr><tr><td style="text-align:left"><code>read-only</code></td><td style="text-align:left">没有</td><td style="text-align:left">假</td><td style="text-align:left">读写与只读事务。仅适用于<code>REQUIRED</code>或<code>REQUIRES_NEW</code>。</td></tr><tr><td style="text-align:left"><code>rollback-for</code></td><td style="text-align:left">没有</td><td style="text-align:left"></td><td style="text-align:left">以逗号分隔的<code>Exception</code>触发回滚的实例列表。例如，<code>com.foo.MyBusinessException,ServletException.</code></td></tr><tr><td style="text-align:left"><code>no-rollback-for</code></td><td style="text-align:left">没有</td><td style="text-align:left"></td><td style="text-align:left">以逗号分隔的<code>Exception</code>不触发回滚的实例列表。例如，<code>com.foo.MyBusinessException,ServletException.</code></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1562065540-efa93744ed71?ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1350&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="事务" scheme="https://lijinhongpassion.github.io/tags/%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Java-JDBC事务&amp;mysql日志</title>
    <link href="https://lijinhongpassion.github.io/codeant/6175.html"/>
    <id>https://lijinhongpassion.github.io/codeant/6175.html</id>
    <published>2019-06-18T16:23:42.000Z</published>
    <updated>2019-07-02T04:22:48.543Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1558980394-0a06c4631733?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>今天了解了一下spring的@Transactional事务回滚操作，由此对Java代码如何操作JDBC来对事务进行回滚操作。下面简单阐述一下存储过程，有不足之处还望指出。</p><h1 id="1-JDBC"><a href="#1-JDBC" class="headerlink" title="1. JDBC"></a>1. JDBC</h1><p>首先了解一下JDBC在对数据库操作中，处于什么位置。</p><img src="/codeant/6175/1.jpg" title="1.jpg"><p>由图可知，在java中JDBC的api在<code>java.sql</code>包下，所以我们可以调用该包下的对象来实现对数据库的操作。</p><h1 id="2-常规操作"><a href="#2-常规操作" class="headerlink" title="2. 常规操作"></a>2. 常规操作</h1><p>对数据库的常规操作（不添加事务）有以下几个步骤：</p><pre><code>1. 加载驱动 2. 通过DriverManager的getConnection方法填写数据库连接字符串 获取Connection对象 3. 从Connection对象的getStatement或者getPrepareStatement方法获取Statement或者PrepareStatement对象 4. 执行sql 5. 返回resultSet结果集 6. 关闭流</code></pre><p><strong>注意：</strong></p><ul><li>关于Statement和PrepareStatement的区别简单提一下，就是Statement会存在SQL注入的问题，PrepareStatement会预先编译sql语句，然后再将数据填写进入预编译sql</li><li>当没有标明Connection的setAutoCommit方法为false的时候，默认为true，只要 Statement或者PrepareStatement 执行sql，就会自动提交；为false的时候，需要执行connection的commit方法手动提交</li></ul><p>针对注意的第二点举个例子：</p><pre><code>自动提交：相当于执行一条sql一个事务（这里没有对事务进行回滚处理）</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"><span class="comment">//2</span></span><br><span class="line">Connection connection = DriverManager.getConnection(<span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line"><span class="comment">//3</span></span><br><span class="line">PreparedStatement preparedStatement = connection.prepareStatement(<span class="string">"sql"</span>);</span><br><span class="line"><span class="comment">//4:preparedStatement.executeQuery()这里会自动提交</span></span><br><span class="line"><span class="comment">//5</span></span><br><span class="line">ResultSet resultSet = preparedStatement.executeQuery();</span><br><span class="line"><span class="comment">//遍历resultSet</span></span><br><span class="line"><span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">      resultSet.getInt(<span class="string">"字段名"</span>);</span><br><span class="line">     <span class="comment">//......</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭流</span></span><br></pre></td></tr></table></figure><pre><code>不自动提交：相当于执行多条sql还是一个事务（这里没有对事务进行回滚处理）</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"><span class="comment">//2</span></span><br><span class="line">Connection connection = DriverManager.getConnection(<span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭自动提交</span></span><br><span class="line">connection.setAutoCommit(fasle);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个sql</span></span><br><span class="line"><span class="comment">//3</span></span><br><span class="line">PreparedStatement preparedStatement = connection.prepareStatement(<span class="string">"sql1"</span>);</span><br><span class="line"><span class="comment">//4</span></span><br><span class="line"><span class="comment">//5</span></span><br><span class="line">ResultSet resultSet = preparedStatement.executeQuery();</span><br><span class="line"><span class="comment">//遍历resultSet</span></span><br><span class="line"><span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">      resultSet.getInt(<span class="string">"字段名"</span>);</span><br><span class="line">     <span class="comment">//......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二个sql</span></span><br><span class="line"><span class="comment">//3</span></span><br><span class="line">PreparedStatement preparedStatement = connection.prepareStatement(<span class="string">"sql2"</span>);</span><br><span class="line"><span class="comment">//4</span></span><br><span class="line"><span class="comment">//5</span></span><br><span class="line">ResultSet resultSet = preparedStatement.executeQuery();</span><br><span class="line"><span class="comment">//遍历resultSet</span></span><br><span class="line"><span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">      resultSet.getInt(<span class="string">"字段名"</span>);</span><br><span class="line">     <span class="comment">//......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//......多条sql</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//手动提交</span></span><br><span class="line">connection.commit();</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭流</span></span><br></pre></td></tr></table></figure><h1 id="3-回滚"><a href="#3-回滚" class="headerlink" title="3. 回滚"></a>3. 回滚</h1><p>在了解上面的过程后，我一直对事务的回滚很好奇，到底JDBC是调用什么方法回滚的？</p><p>关于回滚的意义这里不做说明，自行百度。</p><p><strong>connection.rollback()方法</strong></p><p>这个方法是执行事务回滚的方法，<strong>当在事务执行过程中，出现了异常，我们捕获异常，在执行回滚操作</strong></p><p>举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Connection connection = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//1</span></span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    <span class="comment">//2</span></span><br><span class="line">    connection = DriverManager.getConnection(<span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line">    <span class="comment">//3</span></span><br><span class="line">    PreparedStatement preparedStatement = connection.prepareStatement(<span class="string">"sql"</span>);</span><br><span class="line">    <span class="comment">//4:preparedStatement.executeQuery()这里会自动提交</span></span><br><span class="line">    <span class="comment">//5</span></span><br><span class="line">    ResultSet resultSet = preparedStatement.executeQuery();</span><br><span class="line">    <span class="comment">//遍历resultSet</span></span><br><span class="line">    <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">          resultSet.getInt(<span class="string">"字段名"</span>);</span><br><span class="line">         <span class="comment">//......</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭流</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//回滚</span></span><br><span class="line">    connection.rollback();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此我可以大概猜测spring事务注解实现的基本流程，但是对于JDBC是怎么做这个回滚的，继续往下看</p><h1 id="4-MySQL的六种日志"><a href="#4-MySQL的六种日志" class="headerlink" title="4. MySQL的六种日志"></a>4. MySQL的六种日志</h1><p>参考地址：<a href="https://yq.aliyun.com/articles/531757?utm_content=m_1000006701" target="_blank" rel="noopener">https://yq.aliyun.com/articles/531757?utm_content=m_1000006701</a></p><p>​                    <a href="https://zhuanlan.zhihu.com/p/58011817" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/58011817</a></p><p>mysql中文文档：<a href="https://www.mysqlzh.com/doc/48.html" target="_blank" rel="noopener">https://www.mysqlzh.com/doc/48.html</a></p><p>mysql官网文档：<a href="https://dev.mysql.com/doc/refman/5.7/en/server-logs.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/server-logs.html</a></p><p>根据官网文档，MySQL中有六种日志文件，分别是：</p><table><thead><tr><th>日志类型</th><th>写入日志的信息</th></tr></thead><tbody><tr><td>错误日志（errorlog）</td><td>启动，运行或停止<strong>mysqld</strong>时遇到的问题</td></tr><tr><td>一般查询日志（general log）</td><td>建立客户端<strong>连接</strong>和从客户端收到的<strong>语句</strong></td></tr><tr><td>二进制日志（binlog）</td><td>更改数据的语句（也用于复制）</td></tr><tr><td>中继日志（relay log）</td><td>从复制主服务器收到的数据更改</td></tr><tr><td>慢查询日志（slow query log）</td><td><strong><code>long_query_time</code></strong>执行时间超过几秒的查询</td></tr><tr><td><strong><em>DDL日志（元数据日志、回滚日志）（undo log）</em></strong></td><td>DDL语句执行的元数据操作</td></tr></tbody></table><p>重点了解：DDL日志，重做日志，二进制日志</p><h2 id="回滚日志"><a href="#回滚日志" class="headerlink" title="回滚日志"></a>回滚日志</h2><p>明显看出，mysql日志类别中有一个<strong>回滚日志</strong>，他的具体作用：</p><ul><li>作用：</li></ul><p>保存了事务发生之前的数据的一个版本，<strong>可以用于回滚</strong>，同时可以<strong>提供多版本并发控制下的读（MVCC）</strong>，也即非锁定读</p><ul><li>内容：</li></ul><p><strong>逻辑格式的日志</strong>，在执行undo的时候，仅仅是将数据从逻辑上恢复至事务之前的状态，而不是从物理页面上操作实现的，这一点是不同于redo log的。</p><ul><li>什么时候产生：</li></ul><p><strong>事务开始之前</strong>，将当前是的版本生成undo log，<strong>undo 也会产生 redo 来保证undo log的可靠性</strong></p><ul><li>什么时候释放：</li></ul><p><strong>当事务提交之后，undo log并不能立马被删除</strong>，而是放入待清理的链表，由purge线程判断是否有其他事务在使用undo段中表的上一个事务之前的版本信息，决定是否可以清理undo log的日志空间。</p><p>对应的物理文件：</p><p>MySQL5.6之前，undo表空间位于共享表空间的回滚段中，共享表空间的默认的名称是ibdata，位于数据文件目录中。</p><p>MySQL5.6之后，undo表空间可以配置成独立的文件，但是提前需要在配置文件中配置，完成数据库初始化后生效且不可改变undo log文件的个数</p><p>如果初始化数据库之前没有进行相关配置，那么就无法配置成独立的表空间了。</p><p>关于MySQL5.7之后的独立undo 表空间配置参数如下：</p><p>innodb_undo_directory = /data/undospace/ –undo独立表空间的存放目录</p><p>innodb_undo_logs = 128 –回滚段为128KB</p><p>innodb_undo_tablespaces = 4 –指定有4个undo log文件</p><p>如果undo使用的共享表空间，这个共享表空间中又不仅仅是存储了undo的信息，共享表空间的默认为与MySQL的数据目录下面，其属性由参数innodb_data_file_path配置。</p><ul><li>其他：</li></ul><p>undo是在事务开始之前保存的被修改数据的一个版本，产生undo日志的时候，同样会伴随类似于保护事务持久化机制的redolog的产生。</p><p>默认情况下undo文件是保持在共享表空间的，也即ibdatafile文件中，当数据库中发生一些大的事务性操作的时候，要生成大量的undo信息，全部保存在共享表空间中的。</p><p>因此共享表空间可能会变的很大，默认情况下，也就是undo 日志使用共享表空间的时候，被“撑大”的共享表空间是不会也不能自动收缩的。</p><p>因此，mysql5.7之后的“独立undo 表空间”的配置就显得很有必要了。</p><h2 id="重做日志（redo-log）"><a href="#重做日志（redo-log）" class="headerlink" title="重做日志（redo log）"></a>重做日志（redo log）</h2><p>作用：</p><p>确保事务的持久性。防止在发生故障的时间点，尚有脏页未写入磁盘，在重启mysql服务的时候，根据redo log进行重做，从而达到事务的持久性这一特性。</p><ul><li>内容：</li></ul><p>物理格式的日志，记录的是物理数据页面的修改的信息，其redo log是顺序写入redo log file的物理文件中去的。</p><ul><li>什么时候产生：</li></ul><p><strong>事务开始之后就产生redo log</strong>，redo log的落盘并不是随着事务的提交才写入的，而是在事务的执行过程中，便开始写入redo log文件中。</p><ul><li>什么时候释放：</li></ul><p><strong>当对应事务的脏页写入到磁盘之后</strong>，redo log的使命也就完成了，重做日志占用的空间就可以重用（被覆盖）。</p><p>对应的物理文件：</p><p>默认情况下，对应的物理文件位于数据库的data目录下的ib_logfile1&amp;ib_logfile2</p><p>innodb_log_group_home_dir 指定日志文件组所在的路径，默认./ ，表示在数据库的数据目录下。</p><p>innodb_log_files_in_group 指定重做日志文件组中文件的数量，默认2</p><p>关于文件的大小和数量，由以下两个参数配置：</p><p>innodb_log_file_size 重做日志文件的大小。</p><p>innodb_mirrored_log_groups 指定了日志镜像文件组的数量，默认1</p><ul><li>其他：</li></ul><p>很重要一点，redo log是什么时候写盘的？前面说了是在事物开始之后逐步写盘的。</p><p>之所以说重做日志是在事务开始之后逐步写入重做日志文件，而不一定是事务提交才写入重做日志缓存，原因就是，重做日志有一个缓存区Innodb_log_buffer，Innodb_log_buffer的默认大小为8M(这里设置的16M),Innodb存储引擎先将重做日志写入innodb_log_buffer中。</p><p>然后会通过以下三种方式将innodb日志缓冲区的日志刷新到磁盘</p><p>Master Thread 每秒一次执行刷新Innodb_log_buffer到重做日志文件。</p><p>每个事务提交时会将重做日志刷新到重做日志文件。</p><p>当重做日志缓存可用空间 少于一半时，重做日志缓存被刷新到重做日志文件</p><p>由此可以看出，重做日志通过不止一种方式写入到磁盘，尤其是对于第一种方式，Innodb_log_buffer到重做日志文件是Master Thread线程的定时任务。</p><p>因此重做日志的写盘，并不一定是随着事务的提交才写入重做日志文件的，而是随着事务的开始，逐步开始的。</p><p>另外引用《MySQL技术内幕 Innodb 存储引擎》（page37）上的原话：</p><p>即使某个事务还没有提交，Innodb存储引擎仍然每秒会将重做日志缓存刷新到重做日志文件。</p><p>这一点是必须要知道的，因为这可以很好地解释再大的事务的提交（commit）的时间也是很短暂的。</p><h2 id="二进制日志（binlog）："><a href="#二进制日志（binlog）：" class="headerlink" title="二进制日志（binlog）："></a>二进制日志（binlog）：</h2><ul><li>作用：</li></ul><p>用于复制，在<strong>主从复制</strong>中，从库利用主库上的binlog进行重播，实现主从同步。</p><p>用于数据库的基于时间点的还原。</p><p>逻辑格式的日志，可以简单认为就是执行过的事务中的sql语句。</p><p>但又不完全是sql语句这么简单，而是包括了执行的sql语句（增删改）反向的信息，也就意味着delete对应着delete本身和其反向的insert；update对应着update执行前后的版本的信息；insert对应着delete和insert本身的信息。</p><p>在使用mysqlbinlog解析binlog之后一些都会真相大白。</p><p>因此可以基于binlog做到类似于oracle的闪回功能，其实都是依赖于binlog中的日志记录。</p><ul><li>什么时候产生：</li></ul><p>事务提交的时候，一次性将事务中的sql语句（一个事物可能对应多个sql语句）按照一定的格式记录到binlog中。</p><p>这里与redo log很明显的差异就是redo log并不一定是在事务提交的时候刷新到磁盘，redo log是在事务开始之后就开始逐步写入磁盘。</p><p>因此对于事务的提交，即便是较大的事务，提交（commit）都是很快的，但是在开启了bin_log的情况下，对于较大事务的提交，可能会变得比较慢一些。</p><p>这是因为binlog是在事务提交的时候一次性写入的造成的，这些可以通过测试验证。</p><p>binlog的默认是保持时间由参数expire_logs_days配置，也就是说对于非活动的日志文件，在生成时间超过expire_logs_days配置的天数之后，会被自动删除。</p><p>配置文件的路径为log_bin_basename，binlog日志文件按照指定大小，当日志文件达到指定的最大的大小之后，进行滚动更新，生成新的日志文件。</p><p>对于每个binlog日志文件，通过一个统一的index文件来组织。</p><ul><li>其他：</li></ul><p>二进制日志的作用之一是还原数据库的，这与redo log很类似，很多人混淆过，但是两者有本质的不同</p><p>作用不同：redo log是保证事务的持久性的，是事务层面的，binlog作为还原的功能，是数据库层面的（当然也可以精确到事务层面的），虽然都有还原的意思，但是其保护数据的层次是不一样的。</p><p>内容不同：redo log是物理日志，是数据页面的修改之后的物理记录，binlog是逻辑日志，可以简单认为记录的就是sql语句</p><p>另外，两者日志产生的时间，可以释放的时间，在可释放的情况下清理机制，都是完全不同的。</p><p>恢复数据时候的效率，基于物理日志的redo log恢复数据的效率要高于语句逻辑日志的binlog</p><p>关于事务提交时，redo log和binlog的写入顺序，为了保证主从复制时候的主从一致（当然也包括使用binlog进行基于时间点还原的情况），是要严格一致的，MySQL通过两阶段提交过程来完成事务的一致性的，也即redo log和binlog的一致性的，理论上是先写redo log，再写binlog，两个日志都提交成功（刷入磁盘），事务才算真正的完成</p><h1 id="5-MySQL执行流程"><a href="#5-MySQL执行流程" class="headerlink" title="5. MySQL执行流程"></a>5. MySQL执行流程</h1><p><code>SQL语句--&gt;JDBC API--&gt;MySQL驱动--&gt;MySQL数据库</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">启动MySQL server服务，若是在启动过程报出异常，会写入错误日志；</span><br></pre></td></tr></table></figure><p>上面涉及到一个日志<code>error log</code>（错误日志），当启动，运行或停止mysqld时遇到的问题，会写入错误日志</p><p>SQL语句通过JDBC API执行，JDBC API调用MySQL驱动，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MySQL驱动在事务开始之前产生redo log，在事务开始之后，产生 redo 来保证undo log的可靠性</span><br><span class="line"></span><br><span class="line">**当事务提交之后，undo log并不能立马被删除，而是放入待清理的链表，由purge线程判断是否有其他事务在使用undo段中表的上一个事务之前的版本信息，决定是否可以清理undo log的日志空间（这里也就是说当事务提交后，需并不是立即执行，而是存放在undo log日志里，然后mysql数据库再读取undo log执行）。当对应事务的脏页写入到磁盘之后，redo log的使命也就完成了**，重做日志占用的空间就可以重用（被覆盖）。</span><br><span class="line"></span><br><span class="line">在执行事务过程中数据库服务异常关闭，在重启mysql服务的时候，根据redo log进行重做</span><br></pre></td></tr></table></figure><p>上面涉及到两张日志 <code>ddl log</code> 和<code>redo log</code>（回滚日志和重做日志）</p><p>一般查询日志（general log）和慢查询日志（slow query log）默认关闭</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当mysql数据库需要搭建主从复制的时候，就需要中继日志，主库先将事务执行后将增删改操作写入至中继文件，从库就从主库的中继日志获取数据变化，实现同步</span><br></pre></td></tr></table></figure><p>上面涉及到中继日志（relay log）</p><p>二进制日志（binlog）：看第四点中的二进制文件</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1558980394-0a06c4631733?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="mysql" scheme="https://lijinhongpassion.github.io/tags/mysql/"/>
    
      <category term="jdbc" scheme="https://lijinhongpassion.github.io/tags/jdbc/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-深入理解Java虚拟机之类加载过程</title>
    <link href="https://lijinhongpassion.github.io/codeant/57ee.html"/>
    <id>https://lijinhongpassion.github.io/codeant/57ee.html</id>
    <published>2019-06-16T09:35:51.000Z</published>
    <updated>2019-06-16T12:04:46.430Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1560673292-f1d4e40c5f0f?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h1 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h1><p>Class 文件需要加载到虚拟机中之后才能运行和使用，那么虚拟机是如何加载这些 Class 文件呢？</p><p>系统加载 Class 类型的文件主要三步:<strong>加载-&gt;连接-&gt;初始化</strong>。连接过程又可分为三步:<strong>验证-&gt;准备-&gt;解析</strong>。</p><img src="/codeant/57ee/1.png" title="1.png"><h2 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h2><p>类加载过程的第一步，主要完成下面3件事情：</p><ol><li>通过全类名获取定义此类的二进制字节流</li><li>将字节流所代表的静态存储结构转换为方法区的运行时数据结构</li><li>在内存中生成一个代表该类的 Class 对象,作为方法区这些数据的访问入口</li></ol><p>虚拟机规范多上面这3点并不具体，因此是非常灵活的。比如：”通过全类名获取定义此类的二进制字节流” 并没有指明具体从哪里获取、怎样获取。比如：比较常见的就是从 ZIP 包中读取（日后出现的JAR、EAR、WAR格式的基础）、其他文件生成（典型应用就是JSP）等等。</p><p><strong>一个非数组类的加载阶段（加载阶段获取类的二进制字节流的动作）是可控性最强的阶段，这一步我们可以去完成还可以自定义类加载器去控制字节流的获取方式（重写一个类加载器的 <code>loadClass()</code> 方法）。数组类型不通过类加载器创建，它由 Java 虚拟机直接创建。</strong></p><p>类加载器、双亲委派模型也是非常重要的知识点，这部分内容会在后面的文章中单独介绍到。</p><p>加载阶段和连接阶段的部分内容是交叉进行的，加载阶段尚未结束，连接阶段可能就已经开始了。</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><img src="/codeant/57ee/2.png" title="2.png"><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p><strong>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段</strong>，这些内存都将在方法区中分配。对于该阶段有以下几点需要注意：</p><ol><li>这时候进行内存分配的仅包括类变量（static），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在 Java 堆中。</li><li>这里所设置的初始值”通常情况”下是数据类型默认的零值（如0、0L、null、false等），比如我们定义了<code>public static int value=111</code> ，那么 value 变量在准备阶段的初始值就是 0 而不是111（初始化阶段才会复制）。特殊情况：比如给 value 变量加上了 fianl 关键字<code>public static final int value=111</code> ，那么准备阶段 value 的值就被复制为 111。</li></ol><p><strong>基本数据类型的零值：</strong></p><img src="/codeant/57ee/3.png" title="3.png"><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用限定符7类符号引用进行。</p><p>符号引用就是一组符号来描述目标，可以是任何字面量。<strong>直接引用</strong>就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。在程序实际运行时，只有符号引用是不够的，举个例子：在程序执行方法时，系统需要明确知道这个方法所在的位置。Java 虚拟机为每个类都准备了一张方法表来存放类中所有的方法。当需要调用一个类的方法的时候，只要知道这个方法在方发表中的偏移量就可以直接调用该方法了。通过解析操作符号引用就可以直接转变为目标方法在类中方法表的位置，从而使得方法可以被调用。</p><p>综上，解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程，也就是得到类或者字段、方法在内存中的指针或者偏移量。</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>初始化是类加载的最后一步，也是真正执行类中定义的 Java 程序代码(字节码)，初始化阶段是执行类构造器 <code>&lt;clinit&gt; ()</code>方法的过程。</p><p>对于<code>&lt;clinit&gt;（）</code> 方法的调用，虚拟机会自己确保其在多线程环境中的安全性。因为 <code>&lt;clinit&gt;（）</code> 方法是带锁线程安全，所以在多线程环境下进行类初始化的话可能会引起死锁，并且这种死锁很难被发现。</p><p>对于初始化阶段，虚拟机严格规范了有且只有5中情况下，必须对类进行初始化：</p><ol><li>当遇到 new 、 getstatic、putstatic或invokestatic 这4条直接码指令时，比如 new 一个类，读取一个静态字段(未被 final 修饰)、或调用一个类的静态方法时。</li><li>使用 <code>java.lang.reflect</code> 包的方法对类进行反射调用时 ，如果类没初始化，需要触发其初始化。</li><li>初始化一个类，如果其父类还未初始化，则先触发该父类的初始化。</li><li>当虚拟机启动时，用户需要定义一个要执行的主类 (包含 main 方法的那个类)，虚拟机会先初始化这个类。</li><li>当使用 JDK1.7 的动态动态语言时，如果一个 MethodHandle 实例的最后解析结构为 REF_getStatic、REF_putStatic、REF_invokeStatic、的方法句柄，并且这个句柄没有初始化，则需要先触发器初始化。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1560673292-f1d4e40c5f0f?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="jvm" scheme="https://lijinhongpassion.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-深入理解Java虚拟机之类文件结构</title>
    <link href="https://lijinhongpassion.github.io/codeant/32ac.html"/>
    <id>https://lijinhongpassion.github.io/codeant/32ac.html</id>
    <published>2019-06-16T09:18:32.000Z</published>
    <updated>2019-06-16T09:21:01.531Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1560568082-c15188aa6510?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>本文主要对类文件（<code>.class</code>文件）结构简单讲诉，一次对文件结构有个大致的了解。</p><h1 id="1-类文件结构"><a href="#1-类文件结构" class="headerlink" title="1. 类文件结构"></a>1. 类文件结构</h1><p>根据java虚拟机规范，<code>.class</code>文件结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ClassFile &#123;</span><br><span class="line">    u4             magic; <span class="comment">//Class 文件的标志</span></span><br><span class="line">    u2             minor_version;<span class="comment">//Class 的小版本号</span></span><br><span class="line">    u2             major_version;<span class="comment">//Class 的大版本号</span></span><br><span class="line">    u2             constant_pool_count;<span class="comment">//常量池的数量</span></span><br><span class="line">    cp_info        constant_pool[constant_pool_count-<span class="number">1</span>];<span class="comment">//常量池</span></span><br><span class="line">    u2             access_flags;<span class="comment">//Class 的访问标记</span></span><br><span class="line">    u2             this_class;<span class="comment">//当前类</span></span><br><span class="line">    u2             super_class;<span class="comment">//父类</span></span><br><span class="line">    u2             interfaces_count;<span class="comment">//接口</span></span><br><span class="line">    u2             interfaces[interfaces_count];<span class="comment">//一个类可以实现多个接口</span></span><br><span class="line">    u2             fields_count;<span class="comment">//Class 文件的字段属性</span></span><br><span class="line">    field_info     fields[fields_count];<span class="comment">//一个类会可以有个字段</span></span><br><span class="line">    u2             methods_count;<span class="comment">//Class 文件的方法数量</span></span><br><span class="line">    method_info    methods[methods_count];<span class="comment">//一个类可以有个多个方法</span></span><br><span class="line">    u2             attributes_count;<span class="comment">//此类的属性表中的属性数</span></span><br><span class="line">    attribute_info attributes[attributes_count];<span class="comment">//属性表集合</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Class文件字节码结构组织示意图 </strong><br><img src="/codeant/32ac/1.png" title="1.png"></p><hr><h1 id="2-结构详细"><a href="#2-结构详细" class="headerlink" title="2. 结构详细"></a>2. 结构详细</h1><h2 id="2-1-魔数（咖啡宝贝）"><a href="#2-1-魔数（咖啡宝贝）" class="headerlink" title="2.1 魔数（咖啡宝贝）"></a>2.1 魔数（咖啡宝贝）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">u4             magic; <span class="comment">//Class 文件的标志</span></span><br></pre></td></tr></table></figure><p>每个 Class 文件的头四个字节称为魔数（Magic Number）,它的唯一作用是确定这个文件是否为一个能被虚拟机接收的 Class 文件。<br><strong>魔数</strong>的值为0xCAFEBABE（咖啡宝贝）</p><hr><h2 id="2-2-版本号"><a href="#2-2-版本号" class="headerlink" title="2.2 版本号"></a>2.2 版本号</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">u2             minor_version;<span class="comment">//Class 的小版本号</span></span><br><span class="line">u2             major_version;<span class="comment">//Class 的大版本号</span></span><br></pre></td></tr></table></figure><p>紧接着魔数的四个字节存储的是 Class 文件的版本号：第五和第六是次版本号，第七和第八是主版本号。</p><p><strong>高版本的 Java 虚拟机可以执行低版本编译器生成的 Class 文件，但是低版本的 Java 虚拟机不能执行高版本编译器生成的 Class 文件</strong>。所以，我们在实际开发的时候要确保开发的的 JDK 版本和生产环境的 JDK 版本保持一致。</p><hr><h2 id="2-3-常量池"><a href="#2-3-常量池" class="headerlink" title="2.3 常量池"></a>2.3 常量池</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">u2             constant_pool_count;<span class="comment">//常量池的数量</span></span><br><span class="line">cp_info        constant_pool[constant_pool_count-<span class="number">1</span>];<span class="comment">//常量池</span></span><br></pre></td></tr></table></figure><p>紧接着主次版本号之后的是常量池，常量池的数量是 constant_pool_count-1（<strong>常量池计数器是从1开始计数的，将第0项常量空出来是有特殊考虑的，索引值为0代表“不引用任何一个常量池项”</strong>）。</p><p>常量池主要存放两大常量：字面量和符号引用。字面量比较接近于 Java 语言层面的的常量概念，如文本字符串、声明为 final 的常量值等。而符号引用则属于编译原理方面的概念。包括下面三类常量： </p><ul><li>类和接口的全限定名 </li><li>字段的名称和描述符 </li><li>方法的名称和描述符</li></ul><p>常量池中每一项常量都是一个表，这14种表有一个共同的特点：<strong>开始的第一位是一个 u1 类型的标志位 -tag 来标识常量的类型，代表当前这个常量属于哪种常量类型．</strong></p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">标志（tag）</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">CONSTANT_utf8_info</td><td style="text-align:center">1</td><td style="text-align:center">UTF-8编码的字符串</td></tr><tr><td style="text-align:center">CONSTANT_Integer_info</td><td style="text-align:center">3</td><td style="text-align:center">整形字面量</td></tr><tr><td style="text-align:center">CONSTANT_Float_info</td><td style="text-align:center">4</td><td style="text-align:center">浮点型字面量</td></tr><tr><td style="text-align:center">CONSTANT_Long_info</td><td style="text-align:center">５</td><td style="text-align:center">长整型字面量</td></tr><tr><td style="text-align:center">CONSTANT_Double_info</td><td style="text-align:center">６</td><td style="text-align:center">双精度浮点型字面量</td></tr><tr><td style="text-align:center">CONSTANT_Class_info</td><td style="text-align:center">７</td><td style="text-align:center">类或接口的符号引用</td></tr><tr><td style="text-align:center">CONSTANT_String_info</td><td style="text-align:center">８</td><td style="text-align:center">字符串类型字面量</td></tr><tr><td style="text-align:center">CONSTANT_Fieldref_info</td><td style="text-align:center">９</td><td style="text-align:center">字段的符号引用</td></tr><tr><td style="text-align:center">CONSTANT_Methodref_info</td><td style="text-align:center">10</td><td style="text-align:center">类中方法的符号引用</td></tr><tr><td style="text-align:center">CONSTANT_InterfaceMethodref_info</td><td style="text-align:center">11</td><td style="text-align:center">接口中方法的符号引用</td></tr><tr><td style="text-align:center">CONSTANT_NameAndType_info</td><td style="text-align:center">12</td><td style="text-align:center">字段或方法的符号引用</td></tr><tr><td style="text-align:center">CONSTANT_MothodType_info</td><td style="text-align:center">16</td><td style="text-align:center">标志方法类型</td></tr><tr><td style="text-align:center">CONSTANT_MethodHandle_info</td><td style="text-align:center">15</td><td style="text-align:center">表示方法句柄</td></tr><tr><td style="text-align:center">CONSTANT_InvokeDynamic_info</td><td style="text-align:center">18</td><td style="text-align:center">表示一个动态方法调用点</td></tr></tbody></table><p><code>.class</code> 文件可以通过<code>javap -v class类名</code> 指令来看一下其常量池中的信息(<code>javap -v  class类名-&gt; temp.txt</code> ：将结果输出到 temp.txt 文件)。</p><h2 id="2-4-访问标志"><a href="#2-4-访问标志" class="headerlink" title="2.4 访问标志"></a>2.4 访问标志</h2><p>在常量池结束之后，紧接着的两个字节代表访问标志，这个标志用于识别一些类或者接口层次的访问信息，包括：这个 Class 是类还是接口，是否为 public 或者 abstract 类型，如果是类的话是否声明为 final 等等。</p><p>类访问和属性修饰符:</p><img src="/codeant/32ac/2.png" title="2.png"><p>我们定义了一个 Employee 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.snailclimb.bean;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>javap -v class类名</code> 指令来看一下类的访问标志。</p><img src="/codeant/32ac/3.png" title="3.png"><h2 id="2-5-当前类索引-父类索引与接口索引集合"><a href="#2-5-当前类索引-父类索引与接口索引集合" class="headerlink" title="2.5 当前类索引,父类索引与接口索引集合"></a>2.5 当前类索引,父类索引与接口索引集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">u2             this_class;<span class="comment">//当前类</span></span><br><span class="line">u2             super_class;<span class="comment">//父类</span></span><br><span class="line">u2             interfaces_count;<span class="comment">//接口</span></span><br><span class="line">u2             interfaces[interfaces_count];<span class="comment">//一个雷可以实现多个接口</span></span><br></pre></td></tr></table></figure><p><strong>类索引用于确定这个类的全限定名，父类索引用于确定这个类的父类的全限定名，由于 Java 语言的单继承，所以父类索引只有一个，除了 <code>java.lang.Object</code> 之外，所有的 java 类都有父类，因此除了 <code>java.lang.Object</code> 外，所有 Java 类的父类索引都不为 0。</strong></p><p><strong>接口索引集合用来描述这个类实现了那些接口，这些被实现的接口将按<code>implents</code>(如果这个类本身是接口的话则是<code>extends</code>) 后的接口顺序从左到右排列在接口索引集合中。</strong></p><h2 id="2-6-字段表集合"><a href="#2-6-字段表集合" class="headerlink" title="2.6 字段表集合"></a>2.6 字段表集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">u2             fields_count;<span class="comment">//Class 文件的字段的个数</span></span><br><span class="line">field_info     fields[fields_count];<span class="comment">//一个类会可以有个字段</span></span><br></pre></td></tr></table></figure><p>字段表（field info）用于描述接口或类中声明的变量。字段包括类级变量以及实例变量，但不包括在方法内部声明的局部变量。</p><p><strong>field info(字段表) 的结构:</strong></p><img src="/codeant/32ac/4.png" title="4.png"><ul><li><strong>access_flags:</strong>  字段的作用域（<code>public</code> ,<code>private</code>,<code>protected</code>修饰符），是实例变量还是类变量（<code>static</code>修饰符）,可否被序列化（transient 修饰符）,可变性（final）,可见性（volatile 修饰符，是否强制从主内存读写）。</li><li><strong>name_index:</strong> 对常量池的引用，表示的字段的名称；</li><li><strong>descriptor_index:</strong> 对常量池的引用，表示字段和方法的描述符；</li><li><strong>attributes_count:</strong> 一个字段还会拥有一些额外的属性，attributes_count 存放属性的个数；</li><li><strong>attributes[attributes_count]:</strong> 存放具体属性具体内容。</li></ul><p>上述这些信息中，各个修饰符都是布尔值，要么有某个修饰符，要么没有，很适合使用标志位来表示。而字段叫什么名字、字段被定义为什么数据类型这些都是无法固定的，只能引用常量池中常量来描述。</p><p><strong>字段的 access_flags 的取值:</strong></p><img src="/codeant/32ac/4.png" title="4.png"><h2 id="2-7-方法表集合"><a href="#2-7-方法表集合" class="headerlink" title="2.7 方法表集合"></a>2.7 方法表集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">u2             methods_count;<span class="comment">//Class 文件的方法的数量</span></span><br><span class="line">method_info    methods[methods_count];<span class="comment">//一个类可以有个多个方法</span></span><br></pre></td></tr></table></figure><p>methods_count 表示方法的数量，而 method_info 表示的方法表。</p><p>Class 文件存储格式中对方法的描述与对字段的描述几乎采用了完全一致的方式。方法表的结构如同字段表一样，依次包括了访问标志、名称索引、描述符索引、属性表集合几项。 </p><p><strong>method_info(方法表的) 结构:</strong></p><p><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/方法表的结构.png" alt="方法表的结构"></p><p><strong>方法表的 access_flag 取值：</strong></p><p><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/方法表的access_flag的所有标志位.png" alt="方法表的 access_flag 取值"></p><p>注意：因为<code>volatile</code>修饰符和<code>transient</code>修饰符不可以修饰方法，所以方法表的访问标志中没有这两个对应的标志，但是增加了<code>synchronized</code>、<code>native</code>、<code>abstract</code>等关键字修饰方法，所以也就多了这些关键字对应的标志。</p><h2 id="2-8-属性表集合"><a href="#2-8-属性表集合" class="headerlink" title="2.8 属性表集合"></a>2.8 属性表集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">u2             attributes_count;<span class="comment">//此类的属性表中的属性数</span></span><br><span class="line">attribute_info attributes[attributes_count];<span class="comment">//属性表集合</span></span><br></pre></td></tr></table></figure><p>在 Class 文件，字段表，方法表中都可以携带自己的属性表集合，以用于描述某些场景专有的信息。与 Class 文件中其它的数据项目要求的顺序、长度和内容不同，属性表集合的限制稍微宽松一些，不再要求各个属性表具有严格的顺序，并且只要不与已有的属性名重复，任何人实现的编译器都可以向属性表中写 入自己定义的属性信息，Java 虚拟机运行时会忽略掉它不认识的属性。</p><h1 id="3-举例"><a href="#3-举例" class="headerlink" title="3. 举例"></a>3. 举例</h1><h2 id="3-1-Person-java"><a href="#3-1-Person-java" class="headerlink" title="3.1 Person.java"></a>3.1 Person.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/6/16-16:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer AGE = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-Person-class"><a href="#3-2-Person-class" class="headerlink" title="3.2 Person.class"></a>3.2 Person.class</h2><p>通过<code>javac .\Person.java</code>编译</p><p>通过<code>javap -verbose .\Person.class</code>阅读</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">Classfile /C:/Users/Li/Desktop/Person.class</span><br><span class="line">  Last modified <span class="number">2019</span>-<span class="number">6</span>-<span class="number">16</span>; size <span class="number">650</span> bytes</span><br><span class="line">  MD5 checksum bb07a4e94f2bd023ff5902e11ea78621</span><br><span class="line">  Compiled from <span class="string">"Person.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:<span class="comment">//常量池</span></span><br><span class="line">   #1 = Methodref          #7.#25         // java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">   #2 = Methodref          #26.#27   // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span><br><span class="line">   #3 = Fieldref           #6.#28         // Person.AGE:Ljava/lang/Integer;</span><br><span class="line">   #4 = Fieldref           #6.#29         // Person.name:Ljava/lang/String;</span><br><span class="line">   #5 = Fieldref           #6.#30         // Person.pwd:Ljava/lang/String;</span><br><span class="line">   #6 = Class              #31            // Person</span><br><span class="line">   #7 = Class              #32            // java/lang/Object</span><br><span class="line">   #8 = Utf8               AGE</span><br><span class="line">   #9 = Utf8               Ljava/lang/Integer;</span><br><span class="line">  #10 = Utf8               name</span><br><span class="line">  #11 = Utf8               Ljava/lang/String;</span><br><span class="line">  #12 = Utf8               pwd</span><br><span class="line">  #13 = Utf8               &lt;init&gt;</span><br><span class="line">  #14 = Utf8               ()V</span><br><span class="line">  #15 = Utf8               Code</span><br><span class="line">  #16 = Utf8               LineNumberTable</span><br><span class="line">  #17 = Utf8               getName</span><br><span class="line">  #18 = Utf8               ()Ljava/lang/String;</span><br><span class="line">  #19 = Utf8               setName</span><br><span class="line">  #20 = Utf8               (Ljava/lang/String;)V</span><br><span class="line">  #21 = Utf8               getPwd</span><br><span class="line">  #22 = Utf8               setPwd</span><br><span class="line">  #23 = Utf8               SourceFile</span><br><span class="line">  #24 = Utf8               Person.java</span><br><span class="line">  #25 = NameAndType        #13:#14        // "&lt;init&gt;":()V</span><br><span class="line">  #26 = Class              #33            // java/lang/Integer</span><br><span class="line">  #27 = NameAndType        #34:#35        // valueOf:(I)Ljava/lang/Integer;</span><br><span class="line">  #28 = NameAndType        #8:#9          // AGE:Ljava/lang/Integer;</span><br><span class="line">  #29 = NameAndType        #10:#11        // name:Ljava/lang/String;</span><br><span class="line">  #30 = NameAndType        #12:#11        // pwd:Ljava/lang/String;</span><br><span class="line">  #31 = Utf8               Person</span><br><span class="line">  #32 = Utf8               java/lang/Object</span><br><span class="line">  #33 = Utf8               java/lang/Integer</span><br><span class="line">  #34 = Utf8               valueOf</span><br><span class="line">  #35 = Utf8               (I)Ljava/lang/Integer;</span><br><span class="line">&#123;<span class="comment">//方法表</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">         <span class="number">4</span>: aload_0</span><br><span class="line">         <span class="number">5</span>: bipush        <span class="number">21</span></span><br><span class="line">         7: invokestatic  #2   // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span><br><span class="line">        10: putfield      #3                  // Field AGE:Ljava/lang/Integer;</span><br><span class="line">        <span class="number">13</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">5</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">7</span>: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()Ljava/lang/String;</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         1: getfield      #4                  // Field name:Ljava/lang/String;</span><br><span class="line">         <span class="number">4</span>: areturn</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">13</span>: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(java.lang.String)</span></span>;</span><br><span class="line">    descriptor: (Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">2</span>, args_size=<span class="number">2</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: aload_1</span><br><span class="line">         2: putfield      #4                  // Field name:Ljava/lang/String;</span><br><span class="line">         <span class="number">5</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">17</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">18</span>: <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">getPwd</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()Ljava/lang/String;</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         1: getfield      #5                  // Field pwd:Ljava/lang/String;</span><br><span class="line">         <span class="number">4</span>: areturn</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">21</span>: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(java.lang.String)</span></span>;</span><br><span class="line">    descriptor: (Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">2</span>, args_size=<span class="number">2</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: aload_1</span><br><span class="line">         2: putfield      #5                  // Field pwd:Ljava/lang/String;</span><br><span class="line">         <span class="number">5</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">25</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">26</span>: <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">"Person.java"</span></span><br></pre></td></tr></table></figure><p>16进制文件需要在liunx系统下编译</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1560568082-c15188aa6510?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="jvm" scheme="https://lijinhongpassion.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-深入理解Java虚拟机之垃圾收集算法&amp;JVM调优</title>
    <link href="https://lijinhongpassion.github.io/codeant/ad39.html"/>
    <id>https://lijinhongpassion.github.io/codeant/ad39.html</id>
    <published>2019-06-06T09:02:10.000Z</published>
    <updated>2019-06-06T09:08:15.819Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1556228578-626e9590b81f?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>上一节我们了解了Java虚拟机的内存模型，这节我们来学习一下Java虚拟机的内存管理，也就是垃圾收集器。这也是Java语言和c语言的区别，Java利用垃圾收集器收集不使用的对象，c语言则不行，需要手动回收对象。 </p><hr><h1 id="1-对象已死吗"><a href="#1-对象已死吗" class="headerlink" title="1 对象已死吗"></a>1 对象已死吗</h1><p>垃圾收集器在对堆进行回收前，需要判断哪些对象还存活着，哪些已经死去；从标题字面意思，我们如何来判断一个对象是否已死。</p><hr><h2 id="1-1-引用计数算法"><a href="#1-1-引用计数算法" class="headerlink" title="1.1 引用计数算法"></a>1.1 引用计数算法</h2><ol><li>思路<br>给对象中添加一个引用计数器，每一个地方引用它的时候，计数器就加1，引用失效时，计数器就减1；任何时刻计数器为0的对象就是不可能再被使用的。<br><strong>但是Java虚拟机并没有选用计数算法来进行内存管理</strong></li><li>存在问题<br><strong>对象之间相互循环引用难以解决</strong><br>用大白话描述就是：实例化出两个对象A、B，把B对象赋值给A，A对象赋值给B。互相引用着对方，导致他们的引用计数器都不为0。</li></ol><hr><h2 id="1-2-可达性分析算法（根搜索算法）"><a href="#1-2-可达性分析算法（根搜索算法）" class="headerlink" title="1.2 可达性分析算法（根搜索算法）"></a>1.2 可达性分析算法（根搜索算法）</h2><ol><li>思路<br>通过一系列名为<code>GC Roots</code>的对象做为<strong>起点</strong>，从这些节点开始向下搜索，搜索所走过的路径称为引用链，当一个对象到<code>GC Roots</code>没有任何引用链或者说从<code>GC Roots</code>到这个对象不可达的时候，证明这个对象是不可用的。<br><strong>Java虚拟机采用的是这个算法进行内存管理，具体回收流程在1.4 对象生存-&gt;死亡</strong><img src="/codeant/ad39/1.png" title="1.png"></li><li>GC Roots对象</li></ol><ul><li>虚拟机栈（栈帧中的本地变量）中引用的对象</li><li>方法区中类静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>本地方法栈中JNI（Native方法）引用的对象</li></ul><hr><h2 id="1-3-何为引用"><a href="#1-3-何为引用" class="headerlink" title="1.3 何为引用"></a>1.3 何为引用</h2><ol><li><p>JDK1.2之前<br>JDK1.2之前，如果<strong>reference类型的数据</strong>中<strong>存储的数值代表的是另外一块内存的起始地址</strong>，就称这块内存代表着一个引用。</p></li><li><p>JDK1.2之后<br>应用场景：当内存空间还足够时，则能保留在内存之中；如果内存在进行垃圾回收后还是非常紧张，则抛弃这些对象。<br>概念扩充：强引用、软引用、弱引用、虚引用</p></li></ol><ul><li>强引用：类似“Object obj = new Object()”，<strong>只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象</strong></li><li>软引用：<strong>在系统将要发生内存溢出异常之前</strong>，将会把这些对象列进回收范围之中并进行第二次回收，第二次回收还是没有足够内存则抛内存溢出异常</li><li>弱引用：<strong>被弱引用关联的对象智能生存到下一次垃圾收集发生之前</strong></li><li>虚引用：<strong>一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个实例对象</strong></li></ul><hr><h2 id="1-4-对象生存-gt-死亡"><a href="#1-4-对象生存-gt-死亡" class="headerlink" title="1.4 对象生存-&gt;死亡"></a>1.4 对象生存-&gt;死亡</h2><p>在根搜索算法中的不可达对象并非“非死不可”，要真正宣告一个对象死亡，至少要经历两次标记过程：</p><p>第一次标记：如果对象在进行根搜索后发现没有与<code>GC Roots</code>相连接的引用链，他将会被第一次标记并且进行筛选，筛选条件是<strong>此对象是否有必要执行finalize（）方法</strong>。对象没有覆盖finalize方法或者finalize方法已经被虚拟机调用过，这两种情况都是视为没必要执行</p><p>第二次标记：当判定为有必要执行finalize（）方法，这个对象将会放置在F-Queue队列中，并在稍后由一条由虚拟机自动创建的、低优先级的Finalizer线程去执行，但并不保证线程执行结束（因为有可能会发生死循环，则会引起系统崩溃）。finalize方法是对象逃脱死亡命运的最后一次机会，稍后GC将对F-Queue中的对象进行第二次小规模的标记。<strong>如果对象要在finalize（）方法中拯救自己，只要重新与引用链上的任何一个对象建立关联即可，那在第二次标记时他将会被移出“即将回收”的集合。如果没有逃脱，就会被回收</strong></p><p>注：任何一个对象的finalize（）方法只会<strong>被系统自动调用一次（如需要逃脱，只要重新与引用链上的任何一个对象建立关联即可）</strong>，如果<strong>面临下一次回收，他的finalize（）方法不会被再次执行</strong>。</p><p><strong>finalize（）能做的所有工作，使用try-finally或者其他方法都可以做，所以不要使用finalize（）方法，这里只是让大家了解对象生存到死亡的一个过程</strong></p><hr><h1 id="2-垃圾收集"><a href="#2-垃圾收集" class="headerlink" title="2 垃圾收集"></a>2 垃圾收集</h1><h2 id="2-1-如何回收"><a href="#2-1-如何回收" class="headerlink" title="2.1 如何回收"></a>2.1 如何回收</h2><h3 id="2-1-1-回收方法区"><a href="#2-1-1-回收方法区" class="headerlink" title="2.1.1 回收方法区"></a>2.1.1 回收方法区</h3><img src="/codeant/ad39/2.png" title="2.png"><hr><h3 id="2-1-2-回收堆空间"><a href="#2-1-2-回收堆空间" class="headerlink" title="2.1.2 回收堆空间"></a>2.1.2 回收堆空间</h3><p>在堆中，尤其是新生代，常规应用进行一次垃圾收集一般可以回收70%~95%的空间，而永久代的垃圾收集效率远低于此。<br>主要是收集堆中存储的信息（对象，数组）</p><hr><h2 id="2-2-垃圾回收算法"><a href="#2-2-垃圾回收算法" class="headerlink" title="2.2 垃圾回收算法"></a>2.2 垃圾回收算法</h2><p>在java虚拟机中，针对堆空间，采用了<strong>分代收集算法</strong>，分为新生代和老年代（永久代是非堆空间，不归纳进来），针对各代特性，新生代–复制算法，老年代–标记-整理算法。</p><h3 id="2-2-1-标记-清除算法"><a href="#2-2-1-标记-清除算法" class="headerlink" title="2.2.1 标记-清除算法"></a>2.2.1 标记-清除算法</h3><ol><li><p>意义<br>该算法是最基础的收集算法，算法分为两个阶段：标记 &amp; 清除</p></li><li><p>思路<br>首先标记出所有需要回收的对象，在标记完成后统一回收掉被标记的对象；标记过程就是<strong>1.4 对象生存-&gt;死亡</strong>讲诉的过程。</p></li><li><p>缺点<br><strong>a. 效率</strong>：标记和清除效率都不高<br><strong>b. 空间</strong>：回收后会产生很多空间碎片</p></li></ol><hr><h3 id="2-2-2-复制算法（小-GC）–用于新生代"><a href="#2-2-2-复制算法（小-GC）–用于新生代" class="headerlink" title="2.2.2 复制算法（小 GC）–用于新生代"></a>2.2.2 复制算法（小 GC）–用于新生代</h3><ol><li><p>意义<br><strong>为解决效率问题</strong></p></li><li><p>思路<br>将可用内存按容量分为大小相等的凉快，每次使用其中的一块。当这一块的内存用完了，就将会存活着的对象复制到另一块上面，然后把已使用过的内存空间一次清理掉。不用考虑内存碎片的问题。</p></li><li><p>缺点<br><strong>a. 空间代价</strong>：空间代价比较高，内存缩小到原来的一半</p></li><li><p>用途<br>回收<strong>新生代</strong></p></li></ol><p>流程：将内存分为一块较大的Eden空间和两块较小的Survivor空间。<strong>空间大小比例为 默认伊甸园：幸存0：幸存1 = 8：1：1</strong>，每次使用eden和其中一块survivor空间，当回收时候，将还存活着的对象一次性地拷贝到另一块survivor空间，随后清理掉eden和刚才用过的survivor空间。</p><p>注意：因为比例为8：1：1，所以新生代容量相当于有新生代总容量的90%，那剩下的10%用于存储回收过后还存活的对象。但是我们不能保证每次回收后存活的对象不大于10%，<strong>当survivor空间不够用时候，需要依赖 老年代 进行分配担保</strong></p><hr><h3 id="2-2-3-标记-整理算法（大-GC）–用于老年代"><a href="#2-2-3-标记-整理算法（大-GC）–用于老年代" class="headerlink" title="2.2.3 标记-整理算法（大 GC）–用于老年代"></a>2.2.3 标记-整理算法（大 GC）–用于老年代</h3><ol><li><p>意义<br>复制收集算法适用于对象存活率较低的场景，当用于存活率较高的场景时，效率会变低，并且复制收集算法的缺点是为浪费50%的空间代价，所以老年代一半不能直接选用这种算法。</p></li><li><p>思路<br>分为标记 &amp; 整理两个阶段：标记过程还是跟标记清除算法一样，但是后续不是直接清除掉可回收对象，<strong>是先让所有的对象都向一端移动，然后直接清理掉端边界以外的内存</strong></p></li><li><p>用途<br>回收<strong>老年代</strong></p></li></ol><hr><h3 id="2-2-4-分代收集算法"><a href="#2-2-4-分代收集算法" class="headerlink" title="2.2.4 分代收集算法"></a>2.2.4 分代收集算法</h3><ol><li><p>意义<br>当前商业虚拟机的垃圾收集都采用分代收集算法</p></li><li><p>思路<br>根据对象存活周期的不同将内存划分为几块。</p></li><li><p>示例<br>一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用“标记- -清理”或者“标记一整理”算法来进行回收。</p></li></ol><hr><h2 id="2-3-垃圾收集器"><a href="#2-3-垃圾收集器" class="headerlink" title="2.3 垃圾收集器"></a>2.3 垃圾收集器</h2><p>收集算法是内存回收的方法论，垃圾收集器就是内存回收的具体实现。<br><img src="/codeant/ad39/3.png" title="3.png"><br>两个收集器之间存在连线表示可以搭配使用，不同的收集器适用于不同的应用场景</p><p>在新生区的收集器一般选用的复制收集算法，老年区的收集器一般使用“标记- -清理”或者“标记一整理”算法来进行回收。</p><p>这里罗列一下：<br>复制收集算法：Serial 收集器、ParNem 收集器、Parallel Scavenge 收集器<br>标记-整理算法：Serial Old 收集器、Parallel Old 收集器、G1 收集器<br>标记-清除算法：CMS 收集器</p><p>提前了解：</p><ul><li>并发：用户线程和垃圾收集线程同时执行（不一定并行，可能会交替执行），用户程序继续运行，垃圾收集线程运行在另外一个cpu</li><li>并行：多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态</li></ul><h3 id="2-3-1-Serial-收集器"><a href="#2-3-1-Serial-收集器" class="headerlink" title="2.3.1 Serial 收集器"></a>2.3.1 Serial 收集器</h3><img src="/codeant/ad39/4.png" title="4.png"><p>特点：</p><ul><li>最早的收集器，单线程收集器</li><li>GC的时候会暂停所有用户线程</li></ul><hr><h3 id="2-3-2-ParNew-收集器"><a href="#2-3-2-ParNew-收集器" class="headerlink" title="2.3.2 ParNew 收集器"></a>2.3.2 ParNew 收集器</h3><img src="/codeant/ad39/5.png" title="5.png"><p>特点：</p><ul><li>是Serial 收集器的多线程版本（并行）</li></ul><p><strong>Server模式下首选新生代收集器，因为目前只有它能与CMS收集器配合工作</strong></p><hr><h3 id="2-3-3-Parallel-Scavenge-收集器"><a href="#2-3-3-Parallel-Scavenge-收集器" class="headerlink" title="2.3.3 Parallel Scavenge 收集器"></a>2.3.3 Parallel Scavenge 收集器</h3><p>特点：</p><ul><li>并行的多线程收集器</li><li>达到一个可控制的吞吐量（吞吐量=运行用户代码时间/（运行用户代码时间+垃圾收集时间））</li></ul><hr><h3 id="2-3-4-Serial-Old-收集器"><a href="#2-3-4-Serial-Old-收集器" class="headerlink" title="2.3.4 Serial Old 收集器"></a>2.3.4 Serial Old 收集器</h3><p>特点：</p><ul><li>Serial 收集器的老年代版本</li><li>单线程收集器</li><li>给Client模式下的虚拟机使用</li></ul><p>工作过程如Serial 收集器所示</p><hr><h3 id="2-3-5-Parallel-Old-收集器"><a href="#2-3-5-Parallel-Old-收集器" class="headerlink" title="2.3.5 Parallel Old 收集器"></a>2.3.5 Parallel Old 收集器</h3><img src="/codeant/ad39/6.png" title="6.png"><p>特点：</p><ul><li>是Parallel Scavenge 收集器的老年代版本</li><li>多线程</li><li>标记-整理算法</li></ul><hr><h3 id="2-3-6-CMS-收集器"><a href="#2-3-6-CMS-收集器" class="headerlink" title="2.3.6 CMS 收集器"></a>2.3.6 CMS 收集器</h3><p>特点：</p><ul><li>以获取最短回收停顿时间为目标</li><li>重视服务的响应速度</li><li><strong>标记-清除算法</strong>（会产生大量的空间碎片）</li><li>并发收集、低停顿</li></ul><p>运转过程：</p><ul><li>初始标记</li><li>并发标记</li><li>重新标记</li><li>并发清除<br>初始标记和重新标记需要“stop the word”，也就是停止其他所有线程，只有这个线程运行。初始标记仅仅只是标记一下GC Roots能直接关联到的对象，速度很快；并发标记阶段就是进行GC Roots Tracing 的过程；而重新标记阶段则是为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录；</li></ul><p>缺点：</p><ul><li>CMS 收集器对CPU资源非常敏感</li><li>CMS 收集器无法处理浮动垃圾</li><li>会产生大量的空间碎片（标记-清除算法）</li></ul><hr><h3 id="2-3-7-G1-收集器"><a href="#2-3-7-G1-收集器" class="headerlink" title="2.3.7 G1 收集器"></a>2.3.7 G1 收集器</h3><p>面向server端应用的垃圾收集器</p><p>特点：</p><ul><li>并行与并发：利用多CPU、多核的硬件条件，缩短“Stop the word”的时间</li><li>分代收集</li><li>空间整合：局部使用复制算法，整体是标记-整理算法。这种特效在分配大对象是不会因为内存不足提前GC</li><li>可预测的停顿</li></ul><p>运转过程：</p><ul><li>初始标记</li><li>并发标记</li><li>最终标记</li><li>筛选回收</li></ul><hr><h2 id="2-4-内存分配和回收策略"><a href="#2-4-内存分配和回收策略" class="headerlink" title="2.4 内存分配和回收策略"></a>2.4 内存分配和回收策略</h2><ul><li>对象优先在eden区分配</li><li>大对象直接进入老年代</li><li>长期存活的对象将进入老年代</li></ul><h1 id="3-JVM调优汇总"><a href="#3-JVM调优汇总" class="headerlink" title="3 JVM调优汇总"></a>3 JVM调优汇总</h1><h2 id="3-1-调优工具"><a href="#3-1-调优工具" class="headerlink" title="3.1 调优工具"></a>3.1 调优工具</h2><p>Jconsole，jProfile，VisualVM</p><ul><li>Jconsole : jdk自带，功能简单，但是可以在系统有一定负荷的情况下使用。对垃圾回收算法有很详细的跟踪。</li><li>JProfiler：商业软件，需要付费。功能强大。</li><li>VisualVM：JDK自带，功能强大，与JProfiler类似。推荐。</li></ul><hr><h2 id="3-2-常见配置"><a href="#3-2-常见配置" class="headerlink" title="3.2 常见配置"></a>3.2 常见配置</h2><p>堆设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-Xms:初始堆大小</span><br><span class="line">-Xmx:最大堆大小</span><br><span class="line">-XX:NewSize=n:设置年轻代大小</span><br><span class="line">-XX:NewRatio=n:设置年轻代和年老代的比值。如:为3，表示年轻代与年老代比值为1：3，年轻代占整个年轻代年老代和的1/4</span><br><span class="line">-XX:SurvivorRatio=n:年轻代中Eden区与两个Survivor区的比值。注意Survivor区有两个。如：3，表示Eden：Survivor=3：2，一个Survivor区占整个年轻代的1/5</span><br><span class="line">-XX:MaxPermSize=n:设置持久代大小</span><br></pre></td></tr></table></figure></p><p>收集器设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseSerialGC:设置串行收集器</span><br><span class="line">-XX:+UseParallelGC:设置并行收集器</span><br><span class="line">-XX:+UseParalledlOldGC:设置并行年老代收集器</span><br><span class="line">-XX:+UseConcMarkSweepGC:设置并发收集器</span><br></pre></td></tr></table></figure></p><p>垃圾回收统计信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-XX:+PrintGC</span><br><span class="line">-XX:+PrintGCDetails</span><br><span class="line">-XX:+PrintGCTimeStamps</span><br><span class="line">-Xloggc:filename</span><br></pre></td></tr></table></figure></p><p>并行收集器设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-XX:ParallelGCThreads=n:设置并行收集器收集时使用的CPU数。并行收集线程数。</span><br><span class="line">-XX:MaxGCPauseMillis=n:设置并行收集最大暂停时间</span><br><span class="line">-XX:GCTimeRatio=n:设置垃圾回收时间占程序运行时间的百分比。公式为1/(1+n)</span><br></pre></td></tr></table></figure></p><p>并发收集器设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:+CMSIncrementalMode:设置为增量模式。适用于单CPU情况。</span><br><span class="line">-XX:ParallelGCThreads=n:设置并发收集器年轻代收集方式为并行收集时，使用的CPU数。并行收集线程数。</span><br></pre></td></tr></table></figure></p><hr><h2 id="3-3-调优总结"><a href="#3-3-调优总结" class="headerlink" title="3.3 调优总结"></a>3.3 调优总结</h2><p><strong>年轻代大小选择</strong></p><p>响应时间优先的应用：尽可能设大，直到接近系统的最低响应时间限制（根据实际情况选择）。在此种情况下，年轻代收集发生的频率也是最小的。同时，减少到达年老代的对象。</p><p>吞吐量优先的应用：尽可能的设置大，可能到达Gbit的程度。因为对响应时间没有要求，垃圾收集可以并行进行，一般适合8CPU以上的应用。</p><p><strong>年老代大小选择</strong></p><p>响应时间优先的应用：年老代使用并发收集器，所以其大小需要小心设置，一般要考虑并发会话率和会话持续时间等一些参数。如果堆设置小了，可以会造成内存碎片、高回收频率以及应用暂停而使用传统的标记清除方式；如果堆大了，则需要较长的收集时间。最优化的方案，一般需要参考以下数据获得：</p><p>并发垃圾收集信息<br>持久代并发收集次数<br>传统GC信息<br>花在年轻代和年老代回收上的时间比例<br>减少年轻代和年老代花费的时间，一般会提高应用的效率<br>吞吐量优先的应用</p><p>一般吞吐量优先的应用都有一个很大的年轻代和一个较小的年老代。原因是，这样可以尽可能回收掉大部分短期对象，减少中期的对象，而年老代尽存放长期存活对象。</p><p><strong>较小堆引起的碎片问题</strong></p><p>因为年老代的并发收集器使用标记、清除算法，所以不会对堆进行压缩。当收集器回收时，他会把相邻的空间进行合并，这样可以分配给较大的对象。但是，当堆空间较小时，运行一段时间以后，就会出现“碎片”，如果并发收集器找不到足够的空间，那么并发收集器将会停止，然后使用传统的标记、清除方式进行回收。如果出现“碎片”，可能需要进行如下配置：</p><ol><li>-XX:+UseCMSCompactAtFullCollection：使用并发收集器时，开启对年老代的压缩。</li><li>-XX:CMSFullGCsBeforeCompaction=0：上面配置开启的情况下，这里设置多少次Full GC后，对年老代进行压缩</li></ol><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1556228578-626e9590b81f?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="jvm" scheme="https://lijinhongpassion.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>Java-常见springboot注解</title>
    <link href="https://lijinhongpassion.github.io/codeant/c608.html"/>
    <id>https://lijinhongpassion.github.io/codeant/c608.html</id>
    <published>2019-06-05T05:22:39.000Z</published>
    <updated>2019-06-28T08:20:49.020Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1559548290-d6b0cb6c9050?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h1 id="1-SpringBoot-spring"><a href="#1-SpringBoot-spring" class="headerlink" title="1. SpringBoot/spring"></a>1. SpringBoot/spring</h1><h4 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication:"></a><strong>@SpringBootApplication:</strong></h4><p>包含@Configuration、@EnableAutoConfiguration、@ComponentScan通常用在主类上；</p><hr><h4 id="Repository"><a href="#Repository" class="headerlink" title="@Repository:"></a><strong>@Repository:</strong></h4><p>用于标注数据访问组件，即DAO组件；</p><hr><h4 id="Service"><a href="#Service" class="headerlink" title="@Service:"></a><strong>@Service:</strong></h4><p>用于标注业务层组件；</p><hr><h4 id="RestController"><a href="#RestController" class="headerlink" title="@RestController:"></a><strong>@RestController:</strong></h4><p>用于标注控制层组件(如struts中的action)，包含@Controller和@ResponseBody；</p><hr><h4 id="Controller"><a href="#Controller" class="headerlink" title="@Controller:"></a><strong>@Controller:</strong></h4><p>用于标注是控制层组件，需要返回页面时请用@Controller而不是@RestController；</p><hr><h4 id="Component"><a href="#Component" class="headerlink" title="@Component:"></a><strong>@Component:</strong></h4><p>泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注；</p><hr><h4 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody:"></a><strong>@ResponseBody:</strong></h4><p>表示该方法的返回结果直接写入HTTP response body中，一般在异步获取数据时使用，在使用@RequestMapping后，返回值通常解析为跳转路径，</p><p>加上@responsebody后返回结果不会被解析为跳转路径，而是直接写入HTTP response body中；比如异步获取json数据，加上@responsebody后，会直接返回json数据；</p><hr><h4 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody:"></a><strong>@RequestBody:</strong></h4><p>参数前加上这个注解之后，认为该参数必填。表示接受json字符串转为对象 List等；</p><hr><h4 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan:"></a><strong>@ComponentScan:</strong></h4><p>组件扫描。个人理解相当于，如果扫描到有@Component @Controller @Service等这些注解的类，则把这些类注册为bean*；</p><hr><h4 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration:"></a><strong>@Configuration:</strong></h4><p>指出该类是 Bean 配置的信息源，相当于XML中的，一般加在主类上；</p><hr><h4 id="Bean"><a href="#Bean" class="headerlink" title="@Bean:"></a><strong>@Bean:</strong></h4><p>相当于XML中的,放在方法的上面，而不是类，意思是产生一个bean,并交给spring管理；</p><hr><h4 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration:"></a><strong>@EnableAutoConfiguration:</strong></h4><p>让 Spring Boot 根据应用所声明的依赖来对 Spring 框架进行自动配置，一般加在主类上；</p><hr><h4 id="AutoWired"><a href="#AutoWired" class="headerlink" title="@AutoWired:"></a><strong>@AutoWired:</strong></h4><p>byType方式。把配置好的Bean拿来用，完成属性、方法的组装，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作；</p><p>当加上（required=false）时，就算找不到bean也不报错；</p><hr><h4 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier:"></a><strong>@Qualifier:</strong></h4><p>当有多个同一类型的Bean时，可以用@Qualifier(“name”)来指定。与@Autowired配合使用；</p><hr><h4 id="Resource-name-”name”-type-”type”-："><a href="#Resource-name-”name”-type-”type”-：" class="headerlink" title="@Resource(name=”name”,type=”type”)："></a><strong>@Resource(name=”name”,type=”type”)：</strong></h4><p>没有括号内内容的话，默认byName。与@Autowired干类似的事；</p><hr><h4 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping:"></a><strong>@RequestMapping:</strong></h4><p> RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径；<br>该注解有六个属性:</p><ul><li><strong>params:</strong>指定request中必须包含某些参数值是，才让该方法处理。</li><li><strong>headers:</strong>指定request中必须包含某些指定的header值，才能让该方法处理请求。  </li><li><strong>value:</strong>指定请求的实际地址，指定的地址可以是URI Template 模式  </li><li><strong>method:</strong>指定请求的method类型， GET、POST、PUT、DELETE等  </li><li><strong>consumes:</strong>指定处理请求的提交内容类型（Content-Type），如application/json,text/html; </li><li><strong>produces:</strong>指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回。</li></ul><hr><h4 id="GetMapping、-PostMapping等"><a href="#GetMapping、-PostMapping等" class="headerlink" title="@GetMapping、@PostMapping等:"></a><strong>@GetMapping、@PostMapping等:</strong></h4><p>相当于@RequestMapping（value=”/”，method=RequestMethod.Get\Post\Put\Delete等） 。是个组合注解；</p><hr><h4 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam:"></a><strong>@RequestParam:</strong></h4><p>用在方法的参数前面。相当于 request.getParameter()；</p><hr><h4 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable:"></a><strong>@PathVariable:</strong></h4><p>路径变量。如 RequestMapping(“user/get/mac/{macAddress}”) ；<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getByMacAddress</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">@PathVariable(“macAddress”)</span> String macAddress)</span>&#123; </span><br><span class="line"><span class="comment">//do something; </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>参数与大括号里的名字相同的话，注解后括号里的内容可以不填。</p><hr><h4 id="CrossOrigin"><a href="#CrossOrigin" class="headerlink" title="@CrossOrigin"></a><strong>@CrossOrigin</strong></h4><p>官方文档：<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-cors" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-cors</a><br>能够对带注释的控制器方法跨域请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@CrossOrigin</span><br><span class="line">    @GetMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="line">    public Account retrieve(@PathVariable Long id) &#123;</span><br><span class="line">        // ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><hr><h1 id="2-Jpa"><a href="#2-Jpa" class="headerlink" title="2. Jpa"></a>2. Jpa</h1><h4 id="Entity、-Table-name-”“"><a href="#Entity、-Table-name-”“" class="headerlink" title="@Entity、@Table(name=”“):"></a><strong>@Entity、@Table(name=”“):</strong></h4><p>表明这是一个实体类。一般用于jpa ，这两个注解一般一块使用，但是如果表名和实体类名相同的话，@Table可以省略；</p><hr><h4 id="MappedSuperClass"><a href="#MappedSuperClass" class="headerlink" title="@MappedSuperClass:"></a><strong>@MappedSuperClass:</strong></h4><p>用在确定是父类的entity上。父类的属性子类可以继承；</p><hr><h4 id="NoRepositoryBean"><a href="#NoRepositoryBean" class="headerlink" title="@NoRepositoryBean:"></a><strong>@NoRepositoryBean:</strong></h4><p>一般用作父类的repository，有这个注解，spring不会去实例化该repository；</p><hr><h4 id="Column"><a href="#Column" class="headerlink" title="@Column:"></a><strong>@Column:</strong></h4><p>如果字段名与列名相同，则可以省略；</p><hr><h4 id="Id"><a href="#Id" class="headerlink" title="@Id:"></a><strong>@Id:</strong></h4><p>表示该属性为主键；</p><hr><h4 id="GeneratedValue-strategy-GenerationType-SEQUENCE-generator-“repair-seq”"><a href="#GeneratedValue-strategy-GenerationType-SEQUENCE-generator-“repair-seq”" class="headerlink" title="@GeneratedValue(strategy=GenerationType.SEQUENCE,generator = “repair_seq”):"></a><strong>@GeneratedValue(strategy=GenerationType.SEQUENCE,generator = “repair_seq”):</strong></h4><p>表示主键生成策略是sequence（可以为Auto、IDENTITY、native等，Auto表示可在多个数据库间切换），指定sequence的名字是repair_seq；</p><hr><h4 id="SequenceGeneretor-name-“repair-seq”-sequenceName-“seq-repair”-allocationSize-1"><a href="#SequenceGeneretor-name-“repair-seq”-sequenceName-“seq-repair”-allocationSize-1" class="headerlink" title="@SequenceGeneretor(name = “repair_seq”, sequenceName = “seq_repair”, allocationSize = 1):"></a><strong>@SequenceGeneretor(name = “repair_seq”, sequenceName = “seq_repair”, allocationSize = 1):</strong></h4><p>name为sequence的名称，以便使用，sequenceName为数据库的sequence名称，两个名称可以一致；</p><hr><h4 id="Transient"><a href="#Transient" class="headerlink" title="@Transient:"></a><strong>@Transient:</strong></h4><p>表示该属性并非一个到数据库表的字段的映射,ORM框架将忽略该属性. </p><p>如果一个属性并非数据库表的字段映射,就务必将其标示为@Transient,否则,ORM框架默认其注解为@Basic；</p><hr><h4 id="Basic-fetch-FetchType-LAZY"><a href="#Basic-fetch-FetchType-LAZY" class="headerlink" title="@Basic(fetch=FetchType.LAZY):"></a><strong>@Basic(fetch=FetchType.LAZY):</strong></h4><p>标记可以指定实体属性的加载方式；</p><hr><h4 id="JsonIgnore"><a href="#JsonIgnore" class="headerlink" title="@JsonIgnore:"></a><strong>@JsonIgnore:</strong></h4><p>作用是json序列化时将java bean中的一些属性忽略掉,序列化和反序列化都受影响；</p><hr><h4 id="JoinColumn-name-”loginId”"><a href="#JoinColumn-name-”loginId”" class="headerlink" title="@JoinColumn(name=”loginId”):"></a><strong>@JoinColumn(name=”loginId”):</strong></h4><p>一对一：本表中指向另一个表的外键。</p><p>一对多：另一个表指向本表的外键。</p><hr><h4 id="OneToOne、-OneToMany、-ManyToOne"><a href="#OneToOne、-OneToMany、-ManyToOne" class="headerlink" title="@OneToOne、@OneToMany、@ManyToOne:"></a><strong>@OneToOne、@OneToMany、@ManyToOne:</strong></h4><p>对应Hibernate配置文件中的一对一，一对多，多对一。</p><hr><h1 id="3-全局异常处理"><a href="#3-全局异常处理" class="headerlink" title="3. 全局异常处理"></a>3. 全局异常处理</h1><h4 id="ControllerAdvice"><a href="#ControllerAdvice" class="headerlink" title="@ControllerAdvice:"></a><strong>@ControllerAdvice:</strong></h4><p>包含@Component。可以被扫描到。统一处理异常；</p><hr><h4 id="ExceptionHandler-Exception-class"><a href="#ExceptionHandler-Exception-class" class="headerlink" title="@ExceptionHandler(Exception.class):"></a><strong>@ExceptionHandler(Exception.class):</strong></h4><p>用在方法上面表示遇到这个异常就执行以下方法。</p><hr><h1 id="4-springcloud"><a href="#4-springcloud" class="headerlink" title="4. springcloud"></a>4. springcloud</h1><h4 id="EnableEurekaServer"><a href="#EnableEurekaServer" class="headerlink" title="@EnableEurekaServer:"></a><strong>@EnableEurekaServer:</strong></h4><p>用在springboot启动类上，表示这是一个eureka服务注册中心；</p><hr><h4 id="EnableDiscoveryClient"><a href="#EnableDiscoveryClient" class="headerlink" title="@EnableDiscoveryClient:"></a><strong>@EnableDiscoveryClient:</strong></h4><p>用在springboot启动类上，表示这是一个服务，可以被注册中心找到；</p><hr><h4 id="LoadBalanced"><a href="#LoadBalanced" class="headerlink" title="@LoadBalanced:"></a><strong>@LoadBalanced:</strong></h4><p>开启负载均衡能力；</p><hr><h4 id="EnableCircuitBreaker"><a href="#EnableCircuitBreaker" class="headerlink" title="@EnableCircuitBreaker:"></a><strong>@EnableCircuitBreaker:</strong></h4><p>用在启动类上，开启断路器功能；</p><hr><h4 id="HystrixCommand-fallbackMethod-”backMethod”"><a href="#HystrixCommand-fallbackMethod-”backMethod”" class="headerlink" title="@HystrixCommand(fallbackMethod=”backMethod”):"></a><strong>@HystrixCommand(fallbackMethod=”backMethod”):</strong></h4><p>用在方法上，fallbackMethod指定断路回调方法；</p><hr><h4 id="EnableConfigServer"><a href="#EnableConfigServer" class="headerlink" title="@EnableConfigServer:"></a><strong>@EnableConfigServer:</strong></h4><p>用在启动类上，表示这是一个配置中心，开启Config Server；</p><hr><h4 id="EnableZuulProxy"><a href="#EnableZuulProxy" class="headerlink" title="@EnableZuulProxy:"></a><strong>@EnableZuulProxy:</strong></h4><p>开启zuul路由，用在启动类上；</p><hr><h4 id="SpringCloudApplication"><a href="#SpringCloudApplication" class="headerlink" title="@SpringCloudApplication:"></a><strong>@SpringCloudApplication:</strong></h4><p>包含</p><p>@SpringBootApplication  </p><p>@EnableDiscovertyClient</p><p>@EnableCircuitBreaker</p><p>分别是SpringBoot注解、注册服务中心Eureka注解、断路器注解。对于SpringCloud来说，这是每一微服务必须应有的三个注解，所以才推出了@SpringCloudApplication这一注解集合。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1559548290-d6b0cb6c9050?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="springboot" scheme="https://lijinhongpassion.github.io/tags/springboot/"/>
    
      <category term="注解" scheme="https://lijinhongpassion.github.io/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Java性能优化50个细节（转载）</title>
    <link href="https://lijinhongpassion.github.io/codeant/f9ec.html"/>
    <id>https://lijinhongpassion.github.io/codeant/f9ec.html</id>
    <published>2019-06-05T05:19:16.000Z</published>
    <updated>2019-06-05T05:21:21.101Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1559500785-15520313cfe2?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1103&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><p>转载地址：<a href="https://yq.aliyun.com/articles/662001" target="_blank" rel="noopener">https://yq.aliyun.com/articles/662001</a></p><img src="/codeant/f9ec/1.png" title="1.png">]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1559500785-15520313cfe2?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1103&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-深入理解Java虚拟机之内存模型</title>
    <link href="https://lijinhongpassion.github.io/codeant/d0e0.html"/>
    <id>https://lijinhongpassion.github.io/codeant/d0e0.html</id>
    <published>2019-06-04T07:39:25.000Z</published>
    <updated>2019-06-13T23:14:36.899Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1559526324-c1f275fbfa32?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>​        本次主要是对Java虚拟机（Hot Spot）进行学习，所有的知识都是从周志明的《深入理解Java虚拟机》这本书的基础上，根据自己理解消化，来编写这篇文章。让我对Java虚拟机有了更清晰的认识。</p><h1 id="1-简述"><a href="#1-简述" class="headerlink" title="1 简述"></a>1 简述</h1><p>​        首先我们得知道什么是Java虚拟机，在以前的认知中，我们所理解的Java虚拟机不过就是jdk8，9啥的，其实并不是。Java虚拟机是一种规范，根据这个规范研发出来的Java虚拟机有很多种，其中最常用的就是<code>Hot Spot</code>，我们常说的虚拟机就是指的它。</p><h1 id="2-内存模型"><a href="#2-内存模型" class="headerlink" title="2 内存模型"></a>2 内存模型</h1><img src="/codeant/d0e0/1.png" title="1.png"><p>内存模型主要分为两个板块：</p><ul><li>线程共享区<ul><li>方法区</li><li><strong>堆</strong></li></ul></li><li>线程私有区<ul><li><strong>虚拟机栈</strong></li><li>本地方法栈</li><li>程序计数器（PC Register）</li></ul></li></ul><p>总结：栈管运行，堆管内存</p><h2 id="2-1-线程共享区"><a href="#2-1-线程共享区" class="headerlink" title="2.1 线程共享区"></a>2.1 线程共享区</h2><h3 id="2-1-1-方法区"><a href="#2-1-1-方法区" class="headerlink" title="2.1.1 方法区"></a>2.1.1 方法区</h3><ol><li>概念<br> ​        Java虚拟机规范<strong>将方法区描述为堆的一个逻辑部分</strong>，但是方法区的别名叫做非堆，目的应该是与Java堆区分开来</li><li>存储信息<br> ​        类信息、常量、静态成员、即时编译后的代码、类的构造方法、接口、实例化的对象</li><li>运行时常量池<br> ​        运行时常量池是方法区的一部分，存放编译后的常量</li><li>误解“永久代”<br> ​        首先 永久代 ≠ 方法区。实质 是使用永久代来实现方法区（因为HotSpot虚拟机的设计团队选择把GC分代收集扩展至方法区，这样<strong>HotSpot的垃圾收集器可以像管理Java堆一样管理这部分内存</strong>）<br>但是根据JDK的迭代，永久区发生了相应的变化：<ul><li>jdk1.6及之前    有永久代，常量池1.6在方法区</li><li>jdk1.7                有永久代，但已逐步“去永久代”，常量池1.7在堆</li><li>jdk1.8及之后    无永久代，常量池1.8在<strong>元空间</strong></li></ul></li></ol><h3 id="2-1-2-堆空间"><a href="#2-1-2-堆空间" class="headerlink" title="2.1.2 堆空间"></a>2.1.2 堆空间</h3><ol><li><p>概念<br> ​        Java虚拟机规范：<strong>所有的对象实例以及数组</strong>都要在堆上分配，但随着JIT编译器的发展，所有对象在堆上也渐渐变得不是那么绝对了。<br> ​        <strong><em>Java堆是垃圾收集器管理的主要区域，所以别名GC堆（可以理解为垃圾堆，哈哈）</em></strong></p></li><li><p>存储信息</p><ul><li>所有对象实例</li><li>数组</li></ul></li><li><p>分代</p><img src="/codeant/d0e0/2.png" title="2.png"><ul><li>新生区（小GC作用范围）<ul><li>Eden空间（伊甸区）–  所有的类都是在伊甸园被new出来的</li><li>From Survivor空间（幸存0区）</li><li>To Survivor空间（幸存1区）</li></ul></li><li>养老区（大GC作用范围）</li><li>永久代（jdk1.7及之前存在）</li></ul></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**空间大小比例为 默认伊甸园：幸存0：幸存1 = 8：1：1**</span><br><span class="line">新生区是类的诞生、成长、消亡的区域，一个类在这里产生，应用，最后被垃圾回收器收集，结束生命。新生区又分为两部分： 伊甸区（Eden space）和幸存者区（Survivor pace） ，所有的类都是在伊甸区被new出来的。幸存区有两个： 0区（Survivor 0 space）和1区（Survivor 1 space）。当伊甸园的空间用完时，程序又需要创建对象，JVM的垃圾回收器将对伊甸园区进行垃圾回收(Minor GC)，将伊甸园区中的不再被其他对象所引用的对象进行销毁。然后将伊甸园中的剩余对象移动到幸存0区.若幸存0区也满了，再对该区进行垃圾回收，然后移动到1区。那如果1区也满了呢？再移动到养老区。若养老区也满了，那么这个时候将产生MajorGC（FullGC），进行养老区的内存清理。若养老区执行了Full GC之后发现依然无法进行对象的保存，就会产生OOM异常“OutOfMemoryError”。</span><br></pre></td></tr></table></figure><p>   如果出现java.lang.OutOfMemoryError: Java heap space异常，说明Java虚拟机的堆内存不够。原因有二：</p><p>   （1）Java虚拟机的堆内存设置不够，可以通过参数-Xms、-Xmx来调整。</p><p>   （2）代码中创建了大量大对象，并且长时间不能被垃圾收集器收集（存在被引用）。</p><h2 id="2-2-线程私有区"><a href="#2-2-线程私有区" class="headerlink" title="2.2 线程私有区"></a>2.2 线程私有区</h2><h3 id="2-2-1-本地方法栈"><a href="#2-2-1-本地方法栈" class="headerlink" title="2.2.1 本地方法栈"></a>2.2.1 本地方法栈</h3><ol><li>概念</li></ol><p>​        本地方法栈与虚拟机栈区分开来，他们服务的对象不一样。<br>​        虚拟机栈是为java方法服务的，编写方法的语言是java<br>​        本地方法栈是为带有Native方法服务的，编写该方法的是c/c++语言，调用本地方法库里面的方法</p><h3 id="2-2-2-虚拟机栈"><a href="#2-2-2-虚拟机栈" class="headerlink" title="2.2.2 虚拟机栈"></a>2.2.2 虚拟机栈</h3><ol><li>概念</li></ol><p>​        虚拟机栈描述的是Java方法执行的内存模型（生命周期和线程相同）：每个方法执行的时候都会创建一个栈帧用于存储<strong>局部变量表、操作数栈、动态链接、方法出口等</strong>信息</p><ol start="2"><li><p>栈帧主要存储信息</p><ul><li>本地变量：输入参数和输出参数以及方法内的变量；</li><li>操作数：记录出栈、入栈的操作；</li><li>栈帧数据：包括类文件、方法等；</li></ul></li><li><p>示例</p><img src="/codeant/d0e0/3.png" title="3.png"></li></ol><h3 id="2-2-3-程序计数器（PC-Register）"><a href="#2-2-3-程序计数器（PC-Register）" class="headerlink" title="2.2.3 程序计数器（PC Register）"></a>2.2.3 程序计数器（PC Register）</h3><ol><li>概念</li></ol><p>​        有学过操作系统这门课的都知道，程序计数器就是当前线程所执行的字节码的行号指示器。也就是说一个线程里有很多方法需要执行，程序计数器就是根据你的逻辑，将执行的方法顺序排列好。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1559526324-c1f275fbfa32?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="jvm" scheme="https://lijinhongpassion.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>Java-实现springbootdemo部署到docker</title>
    <link href="https://lijinhongpassion.github.io/codeant/daba.html"/>
    <id>https://lijinhongpassion.github.io/codeant/daba.html</id>
    <published>2019-05-21T05:22:07.000Z</published>
    <updated>2019-06-04T07:55:03.109Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1542558817211-17b8e8699cc9?ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>常见的单体应用部署是在liunx上配置好tomcat+java+mysql+redis，再将代码放在tomcat跑起来，导致花费的时间较多。现采用容器虚拟化技术docker进行部署，在liunx上安装docker，在开发时将代码和环境制作成docker镜像，在liunx只需拉取镜像，并实例化为容器，项目就跑起来了，不需要配置繁杂的环境。<br><strong>本文主要讲一下idea上怎样将springboot项目部署到docker。(本套操作没有实现将镜像上传至docker hub)</strong></p><p>开发环境：windows10+idea<br>部署环境：centos7.5+docker<br>项目github：<a href="https://github.com/LiJinHongPassion/springboot" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/springboot</a></p><h1 id="1、安装docker"><a href="#1、安装docker" class="headerlink" title="1、安装docker"></a>1、安装docker</h1><p>可根据官方的教程进行安装：<a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/centos/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">yum安装gcc相关</span><br><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++</span><br><span class="line"></span><br><span class="line">卸载旧版本</span><br><span class="line">yum -y remove docker docker-common docker-selinux docker-engine</span><br><span class="line"></span><br><span class="line">安装需要的软件包</span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line">设置stable镜像仓库(国内阿里云镜像仓库)</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">更新yum软件包索引</span><br><span class="line">yum makecache fast</span><br><span class="line"></span><br><span class="line">安装DOCKER CE</span><br><span class="line">yum -y install docker-ce</span><br><span class="line"></span><br><span class="line">启动docker</span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line">测试</span><br><span class="line">docker version</span><br><span class="line">docker run hello-world</span><br><span class="line"></span><br><span class="line">配置镜像加速</span><br><span class="line">mkdir -p /etc/docker</span><br><span class="line">vim  /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">#网易云</span><br><span class="line">&#123;&quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;] &#125;</span><br><span class="line"> </span><br><span class="line"> #阿里云</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://｛自已的编码｝.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h1 id="2、Docker开启远程API端口"><a href="#2、Docker开启远程API端口" class="headerlink" title="2、Docker开启远程API端口"></a>2、Docker开启远程API端口</h1><p><code>Docker</code>开启远程端口的目的是可以通过<code>Docker</code>提供的<code>remoteApi</code>文档 管理<code>Docker</code>并且可以操作<code>Docker</code>下容器，监控容器的各项指标，也可以通过<code>remoteApi</code>去实现自己监控<code>Docker</code>告警系统等。默认<code>Docker</code>并没有启动<code>remoteApi</code>，需要我们修改配置才能生效。</p><p>默认Centos7.X下配置文件地址在<code>/usr/lib/systemd/system/</code> 下面，修改 <code>/usr/lib/systemd/system/docker.service</code> 文件,命令：<code>sudo vim /usr/lib/systemd/system/docker.service</code></p><p>在 <code>ExecStart=/usr/bin/dockerd</code> 配置文件后面加上<code>-H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock</code> 保存并退出。</p><p>注 :  端口 2375 就是<code>docker remoteApi</code>的 端口，确保此端口linux没有被占用。<br><strong>防火墙开放端口，或者关闭防火墙<code>systemlctl firewalld stop</code></strong></p><p>执行 重启 docker 命令  docker重新读取配置文件，并重新启动docker服务 命令 :  <code>sudo systemctl daemon-reload &amp;&amp; systemctl restart docker</code></p><h1 id="3、配置idea上的docker"><a href="#3、配置idea上的docker" class="headerlink" title="3、配置idea上的docker"></a>3、配置idea上的docker</h1><p><strong>1. 安装docker插件</strong><br>file-&gt;settings-&gt;plugins<br><img src="/codeant/daba/1.png" title="1.png"><br><img src="/codeant/daba/4.png" title="4.png"></p><p><strong>2. 编写springboot_docker_demo例子</strong><br>创建一个简单的springboot项目<br><img src="/codeant/daba/2.png" title="2.png"><br>主要看一下pom.xml文件和DockerFile</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example.li<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot_docker_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot_docker_demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 打包方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">docker.image.prefix</span>&gt;</span>springboot<span class="tag">&lt;/<span class="name">docker.image.prefix</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- docker插件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dockerDirectory</span>&gt;</span><span class="tag">&lt;/<span class="name">dockerDirectory</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#指定基础镜像，在其上进行定制</span><br><span class="line">FROM java:8</span><br><span class="line"></span><br><span class="line">#维护者信息</span><br><span class="line">#MAINTAINER wuweixiang &lt;wuweixiang.alex@gmail.com&gt;</span><br><span class="line"></span><br><span class="line">#这里的 /tmp 目录就会在运行时自动挂载为匿名卷，任何向 /tmp 中写入的信息都不会记录进容器存储层</span><br><span class="line">VOLUME /tmp</span><br><span class="line"></span><br><span class="line">#复制上下文目录下的target/demo-0.0.1-SNAPSHOT.jar 到容器里</span><br><span class="line">COPY /target/springboot_docker_demo-0.0.1-SNAPSHOT.jar springboot_docker_demo-0.0.1-SNAPSHOT.jar</span><br><span class="line"></span><br><span class="line">#bash方式执行，使demo-0.0.1-SNAPSHOT.jar可访问</span><br><span class="line">#RUN新建立一层，在其上执行这些命令，执行结束后， commit 这一层的修改，构成新的镜像。</span><br><span class="line">RUN bash -c &quot;touch /springboot_docker_demo-0.0.1-SNAPSHOT.jar&quot;</span><br><span class="line"></span><br><span class="line">#ADD /target/springboot_docker_demo-0.0.1-SNAPSHOT.jar springboot_docker_demo-0.0.1-SNAPSHOT.jar</span><br><span class="line"></span><br><span class="line">#声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务</span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">#指定容器启动程序及参数   &lt;ENTRYPOINT&gt; &quot;&lt;CMD&gt;&quot;</span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;springboot_docker_demo-0.0.1-SNAPSHOT.jar&quot;]</span><br></pre></td></tr></table></figure><p><strong>3. 配置例子中的docker</strong></p><img src="/codeant/daba/3.png" title="3.png"><p><strong>4. 部署到docker</strong></p><p>在centos上启动docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker start</span><br></pre></td></tr></table></figure><p>查看centos的ip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure><p>打包项目，会在根目录下生成项目jar包<br><img src="/codeant/daba/5.png" title="5.png"></p><p>执行DockerFile脚本，生成镜像并根据该镜像生成相应的容器<br><img src="/codeant/daba/6.png" title="6.png"><br><img src="/codeant/daba/7.png" title="7.png"></p><p>访问ip:port/hello，这里是<code>http://192.168.26.130:8888/hello</code><br><img src="/codeant/daba/9.png" title="9.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1542558817211-17b8e8699cc9?ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="docker" scheme="https://lijinhongpassion.github.io/tags/docker/"/>
    
      <category term="springboot" scheme="https://lijinhongpassion.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Java-Springboot+websocket+stomp实现消息功能</title>
    <link href="https://lijinhongpassion.github.io/codeant/9210.html"/>
    <id>https://lijinhongpassion.github.io/codeant/9210.html</id>
    <published>2019-05-18T08:54:04.000Z</published>
    <updated>2019-06-04T07:55:22.678Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1556909172-89cf0b24ff02?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1051&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>在日常的web开发中，我们常用的就是http协议，这种协议是基于请求/响应的方式，由客户端发起请求，服务器端给出响应。现websocket协议是基于TCP协议开发的，在建立连接后，可以实现服务器端主动给客户端发送消息，以此来实现消息推送，聊天室等功能。</p><p><a href="https://github.com/LiJinHongPassion/springboot/tree/master/springboot_websocket_demo" target="_blank" rel="noopener">demo</a></p><h1 id="一、websocket协议概述"><a href="#一、websocket协议概述" class="headerlink" title="一、websocket协议概述"></a>一、websocket协议概述</h1><p>  <code>Websocket protocol</code>是<code>HTML5</code>一种新的协议。它实现了浏览器与服务器全双工通信<code>full-duplex</code>)。<strong>一开始的握手需要借助<code>HTTP</code>请求完成，后面的消息传输是基于长连接socket</strong>。</p><p>  <code>WebSocket</code>是真正实现了全双工通信的服务器向客户端推的互联网技术。它是<strong>一种在单个TCP连接上进行全双工通讯协议</strong>。<code>Websocket</code>通信协议与2011年倍JETF定为标准<code>RFC 6455</code>， <code>Websocket API</code>被<code>W3C</code>定为标准。</p><hr><p>全双工和单工的区别:    </p><ul><li>全双工(<code>FullDuplex</code>)是通讯传输的一个术语。通信允许数据在两个方向上同时传输，它在能力上相当于两个单工通信方式的结合。全双工指可以同时(瞬时)进行信号的双向传输(A→B且B→A)。指A→B的同时B→A，<strong>是瞬时同步的</strong>。</li><li>单工、半双工(<code>Half Duplex</code>),所谓半双工就是指一个时间段内只有一个动作发生，举个简单例子，一条窄窄的马路，同时只能有一辆车通过，当目前有两辆车对开，这种情况下就只能一辆先过，等到头儿后另一辆再开，这个例子就形象的说明了半双工的原理。早期的对讲机、以及早期集线器等设备都是基于半双工的产品。随着技术的不断进步，半双工会逐渐退出历史舞台。</li></ul><hr><p>推的技术和拉的技术:</p><ul><li>推送(<code>PUSH</code>)技术是一种建立在客户服务器上的机制，就是由服务器主动将信息发往客户端的技术。就像是广播电台播音。</li><li><p>同传统的拉(<code>PULL</code>)技术相比，最主要的区别在于推送(<code>PUSH</code>)技术是由<strong>服务器主动向客户机发送信息</strong>，而拉(<code>PULL</code>)技术则是<strong>由客户机主动请求信息</strong>。PUSH 技术的优势在于信息的主动性和及时性。</p><p>简单的说，相对于服务端:拉的技术是被动向客户端提供数据，推的技术是主动向客户端提供数据。</p></li></ul><hr><h1 id="二、websocket协议的优越性"><a href="#二、websocket协议的优越性" class="headerlink" title="二、websocket协议的优越性"></a>二、websocket协议的优越性</h1><ul><li><p>传统的<code>http</code>协议实现方式：<code>http</code>协议可以多次请求，因为每次请求之后，都会关闭链接，下次重新请求数据，需要再次打开链接。方式有轮询（频繁请求）。</p></li><li><p>传统<code>socke</code>t技术：长连接（资源浪费）</p></li><li><p><code>websocket</code>协议实现方式：它是一种长连接，只能通过依次请求来初始化链接，然后所有的请求和响应都是用过这个<strong>TCP链接</strong>进行通讯，这意味着他是一种基于事件驱动，异步的消息机制。</p></li></ul><p><strong> 问题：</strong></p><p><code>Html5 websocket</code>兼容性还不是很好，不是所有的浏览器都支持这些新的API，特别是在IE10以下。</p><p>但幸运的是现在绝大多数主流的浏览器都支持这些API,即使不支持的哪些旧的浏览器，也有解决方案。如:</p><ul><li>为了处理不同浏览器和浏览器版本的兼容性,<code>spring webscoket</code>基于<code>SockJs protecol</code>提供了一种解决兼容性的方法，在底层屏蔽兼容性的问题，提供统一的，透明的，可理解性的<code>webscoket</code>解决方案。。</li><li><a href="https://github.com/sockjs/sockjs-client" target="_blank" rel="noopener">SockJs</a>是一个浏览器上运行的<code>JavaScript</code>库,如果浏览器不支持<code>Websocket</code>, 该库可以模拟对<code>Websocket</code>的支持，实现浏览器和Web服务器之间低延迟、全双工、跨域的通讯通道。</li></ul><h1 id="三、springboot-websocket-stomp例子"><a href="#三、springboot-websocket-stomp例子" class="headerlink" title="三、springboot+websocket+stomp例子"></a>三、springboot+websocket+stomp例子</h1><p>先要明白WebSocket 是发送和接收消息的 底层API，而SockJS 是在 WebSocket 之上的 API；最后 STOMP（面向消息的简单文本协议）是基于 SockJS 的高级API</p><p>下面是我在CSDN上看到的一篇十分详细的blog，分别对websocket，sockjs，stomp进行了解释，分享出来大家一起学习。</p><p><strong>主要关注stomp部分的内容</strong></p><img src="/codeant/9210/1.png" title="1.png">]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1556909172-89cf0b24ff02?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1051&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://lijinhongpassion.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="Springboot" scheme="https://lijinhongpassion.github.io/tags/Springboot/"/>
    
      <category term="websocket" scheme="https://lijinhongpassion.github.io/tags/websocket/"/>
    
      <category term="stomp" scheme="https://lijinhongpassion.github.io/tags/stomp/"/>
    
  </entry>
  
  <entry>
    <title>Java-dubbo高可用</title>
    <link href="https://lijinhongpassion.github.io/codeant/eb26.html"/>
    <id>https://lijinhongpassion.github.io/codeant/eb26.html</id>
    <published>2019-04-22T12:12:15.000Z</published>
    <updated>2019-06-04T07:59:01.708Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1555626906-087b9f27e451?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>前面我们简单讲了一下dubbo的基本配置和简单使用，在这章我们了解一下dubbo的高可用的几种实现。</p><h1 id="1、zookeeper宕机与dubbo直连"><a href="#1、zookeeper宕机与dubbo直连" class="headerlink" title="1、zookeeper宕机与dubbo直连"></a>1、zookeeper宕机与dubbo直连</h1><ul><li><p>zookeeper宕机（现象：zookeeper注册中心宕机，还可以消费dubbo暴露的服务）</p><p>  健壮性</p><ul><li><p>监控中心宕掉不影响使用，只是丢失部分采样数据</p></li><li><p>数据库宕掉后，注册中心仍能通过缓存提供服务列表查询，但不能注册新服务</p></li><li><p>注册中心对等集群，任意一台宕掉后，将自动切换到另一台</p></li><li><p><strong>注册中心全部宕掉后，服务提供者和服务消费者仍能通过本地缓存通讯</strong></p></li><li><p>服务提供者无状态，任意一台宕掉后，不影响使用</p></li><li><p>服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复</p><p>高可用：通过设计，减少系统不能提供服务的时间；</p></li></ul></li><li><p>dubbo直连（现象：没有注册中心，也能调用服务）</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span>(url = <span class="string">"127.0.0.1:20882"</span>)<span class="comment">//dubbo直连</span></span><br><span class="line">    UserService userService;</span><br></pre></td></tr></table></figure></li></ul><h1 id="2、集群下dubbo的负载均衡"><a href="#2、集群下dubbo的负载均衡" class="headerlink" title="2、集群下dubbo的负载均衡"></a>2、集群下dubbo的负载均衡</h1><p>官方文档配置：<a href="http://dubbo.apache.org/zh-cn/docs/user/demos/loadbalance.html" target="_blank" rel="noopener">http://dubbo.apache.org/zh-cn/docs/user/demos/loadbalance.html</a></p><p>在集群负载均衡时，<code>Dubbo</code>提供了多种均衡策略，缺省为<code>random</code> 随机调用。</p><p>负载均衡策略</p><p><strong>Random LoadBalance</strong></p><p>随机，按权重设置随机概率。</p><p>在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。</p><p><strong>RoundRobin LoadBalance</strong></p><p>轮循，按公约后的权重设置轮循比率。</p><p>存在慢的提供者累积请求的问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。</p><p><strong>LeastActive LoadBalance</strong></p><p>最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差。</p><p>使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。</p><p><strong>ConsistentHash LoadBalance</strong></p><p>一致性 Hash，相同参数的请求总是发到同一提供者。</p><p>当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。算法参见：<a href="http://en.wikipedia.org/wiki/Consistent_hashing" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/Consistent_hashing</a></p><p>缺省只对第一个参数 Hash，如果要修改请配置 <code>&lt;dubbo:parameter key=&quot;hash.arguments&quot; value=&quot;0,1&quot; /&gt;</code></p><p>缺省用160 份虚拟节点，如果要修改，请配置<code>&lt;dubbo:parameter key=&quot;hash.nodes&quot; value=&quot;320&quot; /&gt;</code></p><hr><img src="/codeant/eb26/1.png" title="1.png"><img src="/codeant/eb26/2.png" title="2.png"><img src="/codeant/eb26/3.png" title="3.png"><img src="/codeant/eb26/4.png" title="4.png"><ul><li><p>配置</p></li><li><p>服务端服务级别</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"..."</span> <span class="attr">loadbalance</span>=<span class="string">"roundrobin"</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>客户端服务级别</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">"..."</span> <span class="attr">loadbalance</span>=<span class="string">"roundrobin"</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>服务端方法级别</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">"..."</span> <span class="attr">loadbalance</span>=<span class="string">"roundrobin"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:service</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>客户端方法级别</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">"..."</span> <span class="attr">loadbalance</span>=<span class="string">"roundrobin"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以通过dubbo-admin控制台动态调整，倍权、半权</p><img src="/codeant/eb26/5.png" title="5.png"><h1 id="3、服务降级"><a href="#3、服务降级" class="headerlink" title="3、服务降级"></a>3、服务降级</h1><p>官方文档：<a href="http://dubbo.apache.org/zh-cn/docs/user/demos/service-downgrade.html" target="_blank" rel="noopener">http://dubbo.apache.org/zh-cn/docs/user/demos/service-downgrade.html</a></p><p><strong>什么是服务降级？</strong></p><p><strong>当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面有策略的不处理或换种简单的方式处理，从而释放服务器资源以保证核心交易正常运作或高效运作。</strong></p><p>可以通过服务降级功能临时屏蔽某个出错的非关键服务，并定义降级后的返回策略。</p><p>向注册中心写入动态配置覆盖规则：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension();</span><br><span class="line"></span><br><span class="line">Registry registry = registryFactory.getRegistry(URL.valueOf(<span class="string">"zookeeper://10.20.153.10:2181"</span>));</span><br><span class="line"></span><br><span class="line">registry.register(URL.valueOf(<span class="string">"override://0.0.0.0/com.foo.BarService?category=configurators&amp;dynamic=false&amp;application=foo&amp;mock=force:return+null"</span>));</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><p><code>mock=force:return+null</code>表示消费方对该服务的方法调用都直接返回 null 值，不发起远程调用。用来屏蔽不重要服务不可用时对调用方的影响。</p><img src="/codeant/eb26/6.png" title="6.png"></li><li><p>还可以改为<code>mock=fail:return+null</code> 表示消费方对该服务的方法调用在失败后，再返回 null 值，不抛异常。用来容忍不重要服务不稳定时对调用方的影响。</p><img src="/codeant/eb26/7.png" title="7.png"></li></ul><h1 id="4、集群容错"><a href="#4、集群容错" class="headerlink" title="4、集群容错"></a>4、集群容错</h1><p>官方文档：<a href="http://dubbo.apache.org/zh-cn/docs/user/demos/fault-tolerent-strategy.html" target="_blank" rel="noopener">http://dubbo.apache.org/zh-cn/docs/user/demos/fault-tolerent-strategy.html</a></p><p><strong>集群容错模式</strong></p><p><strong>Failover Cluster</strong><br>失败自动切换，当出现失败，重试其它服务器。通常用于读操作，但重试会带来更长延迟。可通过 retries=”2” 来设置重试次数(不含第一次)。</p><p>重试次数配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">retries</span>=<span class="string">"2"</span> /&gt;</span></span><br><span class="line">或</span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">retries</span>=<span class="string">"2"</span> /&gt;</span></span><br><span class="line">或</span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">"findFoo"</span> <span class="attr">retries</span>=<span class="string">"2"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Failfast Cluster</span><br><span class="line">快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录。</span><br><span class="line"></span><br><span class="line">Failsafe Cluster</span><br><span class="line">失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作。</span><br><span class="line"></span><br><span class="line">Failback Cluster</span><br><span class="line">失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。</span><br><span class="line"></span><br><span class="line">Forking Cluster</span><br><span class="line">并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。可通过 forks=&quot;2&quot; 来设置最大并行数。</span><br><span class="line"></span><br><span class="line">Broadcast Cluster</span><br><span class="line">广播调用所有提供者，逐个调用，任意一台报错则报错 [2]。通常用于通知所有提供者更新缓存或日志等本地资源信息。</span><br></pre></td></tr></table></figure><p><strong>集群模式配置</strong><br>按照以下示例在服务提供方和消费方配置集群模式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">cluster</span>=<span class="string">"failsafe"</span> /&gt;</span>    等价于@service（cluster="failsafe"）</span><br><span class="line">或</span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">cluster</span>=<span class="string">"failsafe"</span> /&gt;</span>等价于@reference（cluster="failsafe"）</span><br></pre></td></tr></table></figure><h1 id="5、hystrix实现容错"><a href="#5、hystrix实现容错" class="headerlink" title="5、hystrix实现容错"></a>5、hystrix实现容错</h1><p><code>Hystrix</code> 旨在通过控制那些访问远程系统、服务和第三方库的节点，从而对延迟和故障提供更强大的容错能力。<code>Hystrix</code>具备拥有回退机制和断路器功能的线程和信号隔离，请求缓存和请求打包，以及监控和配置等功能</p><h2 id="1、配置spring-cloud-starter-netflix-hystrix"><a href="#1、配置spring-cloud-starter-netflix-hystrix" class="headerlink" title="1、配置spring-cloud-starter-netflix-hystrix"></a>1、配置spring-cloud-starter-netflix-hystrix</h2><p><code>spring boot</code>官方提供了对<code>hystrix</code>的集成，直接在pom.xml里加入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在<code>Application</code>类上增加<code>@EnableHystrix</code>来启用<code>hystrix starter</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderApplication</span> </span>&#123;</span><br></pre></td></tr></table></figure></p><h2 id="2、配置Provider端"><a href="#2、配置Provider端" class="headerlink" title="2、配置Provider端"></a>2、配置Provider端</h2><p>在<code>Dubbo</code>的<code>Provider</code>上增加<code>@HystrixCommand</code>配置，这样子调用就会经过<code>Hystrix</code>代理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(version = <span class="string">"1.0.0"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@HystrixCommand</span>(commandProperties = &#123;</span><br><span class="line">     <span class="meta">@HystrixProperty</span>(name = <span class="string">"circuitBreaker.requestVolumeThreshold"</span>, value = <span class="string">"10"</span>),</span><br><span class="line">     <span class="meta">@HystrixProperty</span>(name = <span class="string">"execution.isolation.thread.timeoutInMilliseconds"</span>, value = <span class="string">"2000"</span>) &#125;)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// System.out.println("async provider received: " + name);</span></span><br><span class="line">        <span class="comment">// return "annotation: hello, " + name;</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Exception to show hystrix enabled."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、配置Consumer端"><a href="#3、配置Consumer端" class="headerlink" title="3、配置Consumer端"></a>3、配置Consumer端</h2><p>对于<code>Consumer</code>端，则可以增加一层method调用，并在method上配置<code>@HystrixCommand</code>。当调用出错时，会走到<code>fallbackMethod = &quot;reliable&quot;</code>的调用里。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Reference</span>(version = <span class="string">"1.0.0"</span>)</span><br><span class="line">    <span class="keyword">private</span> HelloService demoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"reliable"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doSayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> demoService.sayHello(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reliable</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hystrix fallback value"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1555626906-087b9f27e451?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="dubbo" scheme="https://lijinhongpassion.github.io/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>Java-dubbo的简单使用</title>
    <link href="https://lijinhongpassion.github.io/codeant/be60.html"/>
    <id>https://lijinhongpassion.github.io/codeant/be60.html</id>
    <published>2019-04-22T10:30:07.000Z</published>
    <updated>2019-06-04T08:13:07.891Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1509716159367-0180b75063d0?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>本文需要对zookeeper能够简单使用</p><p>github的demo地址：<a href="https://github.com/LiJinHongPassion/springboot/tree/master/springboot_dubbo" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/springboot/tree/master/springboot_dubbo</a><br>注:  github上为三个独立的项目</p><ul><li>先启动zookeeper服务器端</li><li>打开springboot_dubbo_0_interface_demo项目,点击idea右边的maven-&gt;lifecycle-&gt;install,,注册到本地仓库</li><li>打开剩余两个项目,分别运行</li><li>打开游览器访问<code>localhost:8081/initOrder?uid=1</code></li></ul><h1 id="1、基础"><a href="#1、基础" class="headerlink" title="1、基础"></a>1、基础</h1><h2 id="1-1-系统架构发展演变"><a href="#1-1-系统架构发展演变" class="headerlink" title="1.1 系统架构发展演变"></a>1.1 系统架构发展演变</h2><h3 id="单一应用架构"><a href="#单一应用架构" class="headerlink" title="单一应用架构"></a>单一应用架构</h3><p>​        也称为单体应用。当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。<br><img src="/codeant/be60/1.png" title="1.png"><br>​        适用于小型网站，小型管理系统，将所有功能都部署到一个功能里，简单易用。<br>缺点：<br>​    1、性能扩展比较难<br>​    2、协同开发问题<br>​    3、不利于升级维护</p><h3 id="垂直应用架构"><a href="#垂直应用架构" class="headerlink" title="垂直应用架构"></a>垂直应用架构</h3><p>​        当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。<br><img src="/codeant/be60/2.png" title="2.png"><br>​        通过切分业务来实现各个模块独立部署，降低了维护和部署的难度，团队各司其职更易管理，性能扩展也更方便，更有针对性。<br>缺点： 公用模块无法重复利用，开发性的浪费</p><h3 id="分布式服务架构"><a href="#分布式服务架构" class="headerlink" title="分布式服务架构"></a>分布式服务架构</h3><p>​        当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的<strong>分布式服务框架**</strong>(RPC)**是关键。</p><img src="/codeant/be60/3.png" title="3.png"><h3 id="流动计算架构"><a href="#流动计算架构" class="headerlink" title="流动计算架构"></a>流动计算架构</h3><p>​        当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于<strong>提高机器利用率的资源调度和治理中心**</strong>(SOA)[<br>Service Oriented Architecture]<strong> </strong>是关键**。</p><img src="/codeant/be60/4.png" title="4.png"><h2 id="1-2-RPC"><a href="#1-2-RPC" class="headerlink" title="1.2 RPC"></a>1.2 RPC</h2><ul><li><p>什么叫RPC</p><p><code>RPC【Remote Procedure Call】</code>是指远程过程调用，是一种进程间通信方式，他是一种技术的思想，而不是规范。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即程序员无论是调用本地的还是远程的函数，本质上编写的调用代码基本相同。</p></li><li><p>RPC基本原理</p><p>RPC两个核心模块：通讯，序列化。</p><img src="/codeant/be60/6.png" title="6.png"><img src="/codeant/be60/7.png" title="7.png"></li></ul><h1 id="2、Dubbo"><a href="#2、Dubbo" class="headerlink" title="2、Dubbo"></a>2、Dubbo</h1><h2 id="2-1-简述"><a href="#2-1-简述" class="headerlink" title="2.1 简述"></a>2.1 简述</h2><p>​    <code>Apache Dubbo (incubating)</code> 是一款高性能、轻量级的开源<strong>Java RPC</strong>框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p><p>官网：<a href="http://dubbo.apache.org/" target="_blank" rel="noopener">http://dubbo.apache.org/</a></p><img src="/codeant/be60/5.png" title="5.png"><p>​    <strong>服务提供者（Provider</strong> <strong>）</strong>：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。</p><p>​         <strong>服务消费者（Consumer</strong> <strong>）</strong>: 调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p><p>​         <strong>注册中心（Registry</strong> <strong>）</strong>：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者（如：zookeeper）</p><p>​         <strong>监控中心（Monitor</strong> <strong>）</strong>：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心（dubbo-monitor-simple）</p><p>调用关系说明：</p><ul><li><p>服务容器负责启动，加载，运行服务提供者。</p></li><li><p>服务<strong>提供者</strong>在启动时，向<strong>注册中心注册</strong>自己提供的<strong>服务</strong>。</p></li><li><p>服务<strong>消费者</strong>在启动时，向<strong>注册中心订阅</strong>自己所需的<strong>服务</strong>。</p></li><li><p><strong>注册中心</strong>返回<strong>服务提供者地址列表</strong>给<strong>消费者</strong>，如果<strong>有变更</strong>，注册中心将基于长连接推送变更数据给消费者。</p></li><li><p>服务<strong>消费者</strong>，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p></li><li><p>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</p></li></ul><h2 id="2-2-helloword"><a href="#2-2-helloword" class="headerlink" title="2.2 helloword"></a>2.2 helloword</h2><h3 id="2-2-1-提出需求"><a href="#2-2-1-提出需求" class="headerlink" title="2.2.1 提出需求"></a>2.2.1 提出需求</h3><p>某个电商系统，订单服务需要调用用户服务获取某个用户的所有地址；</p><p>我们现在 需要创建两个服务模块进行测试 </p><table><thead><tr><th>模块</th><th>功能</th></tr></thead><tbody><tr><td>订单服务web模块</td><td>创建订单等</td></tr><tr><td>用户服务service模块</td><td>查询用户地址等</td></tr></tbody></table><p>测试预期结果：</p><p>​         <strong>订单服务</strong>web模块在<strong>A服务器</strong>，<strong>用户服务</strong>模块在<strong>B服务器</strong>，A可以<strong>远程调用</strong>B的功能。</p><h3 id="2-2-2-工程架构"><a href="#2-2-2-工程架构" class="headerlink" title="2.2.2 工程架构"></a>2.2.2 工程架构</h3><p>根据 dubbo《服务化最佳实践》 </p><h4 id="1、分包"><a href="#1、分包" class="headerlink" title="1、分包"></a>1、分包</h4><p>建议将服务接口，服务模型，服务异常等均放在 API 包中，因为服务模型及异常也是 API 的一部分，同时，这样做也符合分包原则：重用发布等价原则(REP)，共同重用原则(CRP)。</p><p>如果需要，也可以考虑在 API 包中放置一份 spring 的引用配置，这样使用方，只需在 spring 加载过程中引用此配置即可，配置建议放在模块的包目录下，以免冲突，如：com/alibaba/china/xxx/dubbo-reference.xml。</p><img src="/codeant/be60/8.png" title="8.png"><ul><li><p>api包（服务接口，服务模型，服务异常等均放在 API 包）</p><p>其中服务模型（entity）必须 <code>implements Serializable</code></p></li></ul><img src="/codeant/be60/9.png" title="9.png"><ul><li>服务提供者包（用户服务模块）</li></ul><img src="/codeant/be60/10.png" title="10.png"><ul><li>消费者包（订单web模块）</li></ul><img src="/codeant/be60/11.png" title="11.png"><h4 id="2、粒度"><a href="#2、粒度" class="headerlink" title="2、粒度"></a>2、粒度</h4><p>服务接口尽可能大粒度，每个服务方法应代表一个功能，而不是某功能的一个步骤，否则将面临分布式事务问题，Dubbo 暂未提供分布式事务支持。</p><p>服务接口建议以业务场景为单位划分，并对相近业务做抽象，防止接口数量爆炸。</p><p>不建议使用过于抽象的通用接口，如：Map query(Map)，这样的接口没有明确语义，会给后期维护带来不便。</p><h4 id="3、dubbo改造"><a href="#3、dubbo改造" class="headerlink" title="3、dubbo改造"></a>3、dubbo改造</h4><h5 id="3-1-spring"><a href="#3-1-spring" class="headerlink" title="3.1 spring"></a>3.1 spring</h5><p>官方文档配置消费者、提供者：<a href="http://dubbo.apache.org/zh-cn/docs/user/quick-start.html" target="_blank" rel="noopener">http://dubbo.apache.org/zh-cn/docs/user/quick-start.html</a></p><ul><li><p>提供者</p><ul><li><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入api ,该模块需要安装在maven仓库，使用install--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example.li<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot_dubbo_0_interface_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入dubbo --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 由于我们使用zookeeper作为注册中心，所以需要操作zookeeper</span></span><br><span class="line"><span class="comment">dubbo 2.6以前的版本引入zkclient操作zookeeper </span></span><br><span class="line"><span class="comment">dubbo 2.6及以后的版本引入curator操作zookeeper</span></span><br><span class="line"><span class="comment">下面两个zk客户端根据dubbo版本2选1即可</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- curator-framework --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>通过Spring 配置引用远程服务</p><p>provider.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:dubbo</span>=<span class="string">"http://dubbo.apache.org/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 提供方应用信息，用于计算依赖关系 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"springboot_dubbo_1_userservice_provider_demo"</span>  /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 使用multicast广播注册中心暴露服务地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 用dubbo协议在20880端口暴露服务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 声明需要暴露的服务接口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.example.li.springboot_dubbo_0_interface_demo.service.userService"</span> <span class="attr">ref</span>=<span class="string">"userServiceImpl"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>加载 Spring 配置</p><p>Provider.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Provider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span>  ClassPathXmlApplicationContext(<span class="string">"classpath:provider.xml"</span>);</span><br><span class="line">        context.start();</span><br><span class="line">        System.in.read(); <span class="comment">// 按任意键退出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>消费者</p><ul><li><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入api ,该模块需要安装在maven仓库，使用install--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example.li<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot_dubbo_0_interface_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入dubbo --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 由于我们使用zookeeper作为注册中心，所以需要引入zkclient和curator操作zookeeper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- curator-framework --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>通过Spring 配置引用远程服务</p><p>consumer.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:dubbo</span>=<span class="string">"http://dubbo.apache.org/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"springboot_dubbo_2_orderservice_consumer_demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:application</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定注册中心地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 生成远程服务代理，可以和本地bean一样使用demoService --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">interface</span>=<span class="string">"com.example.li.springboot_dubbo_0_interface_demo.service.userService"</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>加载Spring配置，并调用远程服务<br>访问<code>springboot_dubbo_2_orderservice_consumer_demo</code>的<code>initOrder</code>请求，会调用<code>UserService</code>获取用户地址；<br>调用成功。说明我们<code>order</code>已经可以调用远程的<code>UserService</code>了；</p></li></ul></li></ul><h5 id="3-2-注解版"><a href="#3-2-注解版" class="headerlink" title="3.2 注解版"></a>3.2 注解版</h5><ul><li><p>提供者</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"springboot_dubbo_1_userservice_provider_demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 扫描包下的dubbo注解 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">"com.example.li.springboot_dubbo_1_userservice_provider_demo.service.impl"</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;<span class="comment">//dubbo的service</span></span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Service</span> <span class="comment">//使用dubbo提供的service注解，注册暴露服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">       <span class="meta">@Autowired</span></span><br><span class="line">     UserAddressMapper userAddressMapper;</span><br></pre></td></tr></table></figure></li><li><p>消费者</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"springboot_dubbo_2_orderservice_consumer_demo"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定注册中心地址 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 扫描包下的dubbo注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">"com.example.li.springboot_dubbo_2_orderservice_consumer_demo.controller"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"><span class="meta">@Reference</span>  <span class="comment">//使用dubbo提供的reference注解引用远程服务</span></span><br><span class="line">UserService userService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="3-3-springboot"><a href="#3-3-springboot" class="headerlink" title="3.3 springboot"></a>3.3 springboot</h5><ul><li><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  &#123;% asset_img 12.png 12.png %&#125;</span><br><span class="line">  在前面配置提供者和消费者需要依赖</span><br><span class="line"></span><br><span class="line">  `com.alibaba.dubbo`, `com.101tec.zkclient`, `org.apache.curator.curator-framework`</span><br><span class="line"></span><br><span class="line">  `dubbo-spring-boot-starter`中包含了这三个jar包</span><br><span class="line"></span><br><span class="line">- 配置application.properties</span><br><span class="line"></span><br><span class="line">  具体配置代表的含义在官网上的解释：http://dubbo.apache.org/zh-cn/docs/user/references/xml/introduction.html</span><br><span class="line"></span><br><span class="line">​```xml</span><br><span class="line">application.name就是服务名，不能跟别的dubbo提供端重复</span><br><span class="line">registry.protocol 是指定注册中心协议</span><br><span class="line">registry.address 是注册中心的地址加端口号</span><br><span class="line">protocol.name 是分布式固定是dubbo,不要改。</span><br><span class="line">base-package  注解方式要扫描的包</span><br></pre></td></tr></table></figure><p>提供者配置：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">    <span class="string">application.name:</span> <span class="string">user-service-provider</span></span><br><span class="line">    <span class="string">registry.address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:2181</span></span><br><span class="line">    <span class="string">registry.protocol:</span> <span class="string">zookeeper</span></span><br><span class="line"></span><br><span class="line">    <span class="string">protocol.name:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="string">protocol.port:</span> <span class="number">20883</span></span><br><span class="line"></span><br><span class="line">    <span class="string">monitor.protocol:</span> <span class="string">registry</span></span><br><span class="line">    <span class="string">scan.base-packages:</span> <span class="string">com.example.li.springboot_dubbo_1_userservice_provider_demo</span></span><br></pre></td></tr></table></figure></p><p>消费者配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dubbo.application.name=order-service-consumer</span><br><span class="line">dubbo.registry.address=zookeeper://127.0.0.1:2181</span><br><span class="line">dubbo.monitor.protocol=registry</span><br><span class="line">dubbo.scan.base-package=com.example.li.springboot_dubbo_2_orderservice_consumer_demo</span><br></pre></td></tr></table></figure></p><ul><li>dubbo注解<br>@Service、@Reference<br><strong>【如果没有在配置中写</strong> <strong>dubbo.scan.base-package,</strong> <strong>还需要在@SpringBootApplication使用@EnableDubbo</strong> <strong>注解】</strong></li></ul><h4 id="4、dubbo配置"><a href="#4、dubbo配置" class="headerlink" title="4、dubbo配置"></a>4、dubbo配置</h4><p>配置文档：<a href="http://dubbo.apache.org/zh-cn/docs/user/references/xml/introduction.html" target="_blank" rel="noopener">http://dubbo.apache.org/zh-cn/docs/user/references/xml/introduction.html</a></p><h5 id="1、重试次数"><a href="#1、重试次数" class="headerlink" title="1、重试次数"></a>1、重试次数</h5><p>失败自动切换，当出现失败，重试其它服务器，但重试会带来更长延迟。可通过 retries=”2” 来设置重试次数(不含第一次)。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">重试次数配置如下：</span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">retries</span>=<span class="string">"2"</span> /&gt;</span></span><br><span class="line">或</span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">retries</span>=<span class="string">"2"</span> /&gt;</span></span><br><span class="line">或</span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">"findFoo"</span> <span class="attr">retries</span>=<span class="string">"2"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2、超时时间"><a href="#2、超时时间" class="headerlink" title="2、超时时间"></a>2、超时时间</h5><p>由于网络或服务端不可靠，会导致调用出现一种不确定的中间状态（超时）。为了避免超时导致客户端资源（线程）挂起耗尽，必须设置超时时间。</p><ul><li>消费端</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">全局超时配置</span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:consumer</span> <span class="attr">timeout</span>=<span class="string">"5000"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">指定接口以及特定方法超时配置</span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">timeout</span>=<span class="string">"2000"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">"sayHello"</span> <span class="attr">timeout</span>=<span class="string">"3000"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>服务端</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">全局超时配置</span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:provider</span> <span class="attr">timeout</span>=<span class="string">"5000"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">指定接口以及特定方法超时配置</span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:provider</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">timeout</span>=<span class="string">"2000"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">"sayHello"</span> <span class="attr">timeout</span>=<span class="string">"3000"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:provider</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3、配置原则"><a href="#3、配置原则" class="headerlink" title="3、配置原则"></a>3、配置原则</h5><p>dubbo推荐在Provider上尽量多配置Consumer端属性：</p><p>1、作服务的提供者，比服务使用方更清楚服务性能参数，如调用的超时时间，合理的重试次数，等等<br>2、在Provider配置后，Consumer不配置则会使用Provider的配置值，即Provider配置可以作为Consumer的缺省值。否则，Consumer会使用Consumer端的全局设置，这对于Provider不可控的，并且往往是不合理的</p><p>配置的覆盖规则：</p><p>1) 方法级配置别优于接口级别，即小Scope优先 </p><p>2) Consumer端配置 优于 Provider配置 优于 全局配置，</p><p>3) 最后是Dubbo Hard Code的配置值（见配置文档）</p><h4 id="4、版本号"><a href="#4、版本号" class="headerlink" title="4、版本号"></a>4、版本号</h4><p>当一个接口实现，出现不兼容升级时，可以用版本号过渡，版本号不同的服务相互间不引用。<br>可以按照以下的步骤进行版本迁移：</p><ol><li><p>在低压力时间段，先升级一半提供者为新版本</p></li><li><p>再将所有消费者升级为新版本</p></li><li><p>然后将剩下的一半提供者升级为新版本</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">老版本服务提供者配置：</span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">version</span>=<span class="string">"1.0.0"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">新版本服务提供者配置：</span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">version</span>=<span class="string">"2.0.0"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">老版本服务消费者配置：</span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"barService"</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">version</span>=<span class="string">"1.0.0"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">新版本服务消费者配置：</span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"barService"</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">version</span>=<span class="string">"2.0.0"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">如果不需要区分版本，可以按照以下的方式配置：</span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"barService"</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">version</span>=<span class="string">"*"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1509716159367-0180b75063d0?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="dubbo" scheme="https://lijinhongpassion.github.io/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>Java-springmvc异常处理</title>
    <link href="https://lijinhongpassion.github.io/codeant/ce37.html"/>
    <id>https://lijinhongpassion.github.io/codeant/ce37.html</id>
    <published>2019-04-15T11:51:30.000Z</published>
    <updated>2019-06-04T08:15:03.825Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1554658615-500836630c96?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1053&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p><a href="https://docs.spring.io/spring-framework/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html" target="_blank" rel="noopener">springmvc官方文档</a>上介绍了几种异常处理方法：</p><ol><li>HandlerExceptionResolver</li><li>@ExceptionHandler</li><li>Annotating Business Exceptions With @ResponseStatus</li><li>Customizing the Default Servlet Container Error Page<br>下面我会针对官方文档的介绍，举示例来讲解。</li></ol><h1 id="1、-HandlerExceptionResolver"><a href="#1、-HandlerExceptionResolver" class="headerlink" title="1、 HandlerExceptionResolver"></a>1、 HandlerExceptionResolver</h1><img src="/codeant/ce37/1.png" title="1.png"><p>关于这部分，对HandlerExceptionResolver方式实现异常处理不进行讲解，对这部分里提到的另外一种方式<code>SimpleMappingExceptionResolver</code>进行演示。</p><p><strong>SimpleMappingExceptionResolver</strong><br><code>SimpleMappingExceptionResolver</code> 允许你获取可能抛出的异常类的名字，并把它映射到一个视图名上去。与Servlet API提供的异常映射特性是功能等价的，可以基于此实现粒度更精细的异常映射。<br>在springmvc中配置<code>SimpleMappingExceptionResolver</code>异常解析器<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--基于SimpleMappingExceptionResolver处理异常--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"exceptionResolver"</span> <span class="class"><span class="keyword">class</span></span>= <span class="string">"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"exceptionMappings"</span>&gt;</span><br><span class="line">            &lt;props&gt;</span><br><span class="line">                &lt;prop key="java.lang.ArrayIndexOutOfBoundsException"&gt;error&lt;/prop&gt;</span><br><span class="line">            &lt;!-- 遇到ArrayIndexOutOfBoundsException异常时，error.jsp页面 --&gt;</span><br><span class="line">            &lt;/props&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><hr><h1 id="2、-ExceptionHandler"><a href="#2、-ExceptionHandler" class="headerlink" title="2、 @ExceptionHandler"></a>2、 @ExceptionHandler</h1><img src="/codeant/ce37/2.png" title="2.png"><p>在第一节（<code>HandlerExceptionResolver</code>）的文档中就提到了用<code>@ExceptionHandler</code>处理异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ExceptionHandler &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Exceptions handled by the annotated method. If empty, will default to any</span></span><br><span class="line"><span class="comment"> * exceptions listed in the method argument list.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Class&lt;? extends Throwable&gt;[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码上看<code>@ExceptionHandler</code> 注解是一个作用于方法的注解，其中注解里面的参数<code>value</code>是一个数组；<br>使用了 <code>@ExceptionHandler</code>方法则会在异常抛出时被调用以处理该异常。这样的方法可以定义在 <code>@Controller</code> 注解的控制器类里，也可以定义在 <code>@ControllerAdvice</code> 类中，后者可以使该异常处理方法被应用到更多的<code>@Controller</code> 控制器中。</p><ul><li><code>@Controller</code> 注解的控制器类里使用<code>@ExceptionHandler</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@ResponseBody</span></span><br><span class="line">   <span class="meta">@ExceptionHandler</span>(ArrayIndexOutOfBoundsException.class)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">handlerMaxUploadSizeExceededException</span><span class="params">(ArrayIndexOutOfBoundsException e)</span></span>&#123;</span><br><span class="line">       <span class="comment">//处理异常的方法</span></span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"处理异常....."</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在控制类中使用<code>@ExceptionHandler</code>，它的所用范围只在它所在控制类中，对于其他控制类所抛出的异常无法处理</p><ul><li><code>@ControllerAdvice</code> 类中使用<code>@ExceptionHandler</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 通过<span class="doctag">@ControllerAdvice</span>注解可以将对于控制器的全局配置放在同一个位置。</span></span><br><span class="line"><span class="comment"> * 2. 注解了<span class="doctag">@Controller</span>的类的方法可以使用<span class="doctag">@ExceptionHandler</span>、<span class="doctag">@InitBinder</span>、<span class="doctag">@ModelAttribute</span>注解到方法上。</span></span><br><span class="line"><span class="comment"> * 3. <span class="doctag">@ControllerAdvice</span>注解将作用在所有注解了<span class="doctag">@RequestMapping</span>的控制器的方法上</span></span><br><span class="line"><span class="comment"> * 4. <span class="doctag">@ExceptionHandler</span>：用于全局处理控制器里的异常。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Li</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/4/15-19:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionController</span> </span>&#123;</span><br><span class="line"><span class="comment">//@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(ArrayIndexOutOfBoundsException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handlerMaxUploadSizeExceededException</span><span class="params">(ArrayIndexOutOfBoundsException e)</span></span>&#123;</span><br><span class="line">        <span class="comment">//处理异常的方法</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"处理异常....."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@ControllerAdvice</code>是对所有控制器的配置，也就是说在这里配置了异常处理，对每个控制器注解了<code>@RequestMapping</code>的方法都会起作用，极大的减少了代码冗余，不需要为每个方法都做try catch操作，也可叫做全局异常处理器</p><hr><h1 id="3、-ResponseStatus"><a href="#3、-ResponseStatus" class="headerlink" title="3、 @ResponseStatus"></a>3、 @ResponseStatus</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ResponseStatus &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The status code to use for the response.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> javax.servlet.http.HttpServletResponse#setStatus(int)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">HttpStatus <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The reason to be used for the response. &lt;p&gt;If this element is not set, it will default to the standard status</span></span><br><span class="line"><span class="comment"> * message for the status code. Note that due to the use of &#123;<span class="doctag">@code</span> HttpServletResponse.sendError(int, String)&#125;,</span></span><br><span class="line"><span class="comment"> * the response will be considered complete and should not be written to any further.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> javax.servlet.http.HttpServletResponse#sendError(int, String)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">reason</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据代码了解到，该注解是在属性和类上使用，value是状态码，reason是原因</p><ul><li>类上使用@ResponseStatus</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义异常类</span></span><br><span class="line"><span class="meta">@ResponseStatus</span>(value = HttpStatus.FORBIDDEN,reason = <span class="string">"@ResponseStatus方式--标记在类上-----错误"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserNameNotMatchPasswordException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//人为抛出异常</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testResponseStatusExceptionResolver"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testResponseStatusExceptionResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UserNameNotMatchPasswordException();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><img src="/codeant/ce37/3.png" title="3.png"><ul><li>方法上使用@ResponseStatus<br>  这种方法还没使用过，具体怎么用还不清楚</li></ul><hr><h1 id="4、-Customizing-the-Default-Servlet-Container-Error-Page"><a href="#4、-Customizing-the-Default-Servlet-Container-Error-Page" class="headerlink" title="4、 Customizing the Default Servlet Container Error Page"></a>4、 Customizing the Default Servlet Container Error Page</h1><img src="/codeant/ce37/5.png" title="5.png"><p>Servlet默认容器错误页面的定制化，从Servlet 3开始，错误页不再需要映射到其他信息了，这意<br>味着，你指定的位置就是对Servlet容器默认错误页的自定制了，你可以在<code>web.xml</code> 中定义一个错误页面 <code>&lt;error-page&gt;</code>元素</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/error<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里错误页的位置所在可以是一个<strong>JSP页面（<location>/error.jsp</location>），或者其他的一些URL</strong>，只要它指定容器里任意一个 <code>@Controller</code>控制器下的处理器方法：<br>写回 <code>HttpServletResponse</code> 的错误信息和错误状态码可以在控制器中通过请求属性来获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorController</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/error"</span>, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">handle</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">map.put(<span class="string">"status"</span>, request.getAttribute(<span class="string">"javax.servlet.error.status_code"</span>));</span><br><span class="line">map.put(<span class="string">"reason"</span>, request.getAttribute(<span class="string">"javax.servlet.error.message"</span>));</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者在JSP中这么使用:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"application/json"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&#123;</span><br><span class="line">status:&lt;%=request.getAttribute(<span class="string">"javax.servlet.error.status_code"</span>) %&gt;,</span><br><span class="line">reason:&lt;%=request.getAttribute(<span class="string">"javax.servlet.error.message"</span>) %&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>github的demo：<a href="https://github.com/LiJinHongPassion/springmvc_fileupload_globalexception_demo" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/springmvc_fileupload_globalexception_demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1554658615-500836630c96?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1053&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="springmvc" scheme="https://lijinhongpassion.github.io/tags/springmvc/"/>
    
      <category term="异常" scheme="https://lijinhongpassion.github.io/tags/%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Java-日志框架类别&amp;配置&amp;使用</title>
    <link href="https://lijinhongpassion.github.io/codeant/573a.html"/>
    <id>https://lijinhongpassion.github.io/codeant/573a.html</id>
    <published>2019-04-12T04:41:22.000Z</published>
    <updated>2019-06-04T08:15:38.953Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1554618501-4aa45b49ecfb?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><ul><li><p>记录系统的一些运行时信息</p></li><li><p>将关键数据打印在控制台</p></li><li><p>自动归档</p></li></ul><h1 id="SLF4J"><a href="#SLF4J" class="headerlink" title="SLF4J"></a>SLF4J</h1><table><thead><tr><th>日志门面  （日志的抽象层）</th><th>日志实现</th></tr></thead><tbody><tr><td><del>JCL（Jakarta  Commons Logging）</del>    SLF4j（Simple  Logging Facade for Java）    <strong><del>jboss-logging</del></strong></td><td>Log4j  JUL（java.util.logging）  Log4j2  <strong>Logback</strong></td></tr></tbody></table><p>左边选一个门面（抽象层）、右边来选一个实现；</p><p>日志门面：  SLF4J；</p><p>日志实现：Logback；</p><p>SpringBoot：底层是Spring框架，Spring框架默认是用JCL；‘</p><p><strong>SpringBoot默认选用 SLF4j和logback; </strong></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="1、如何在系统中使用SLF4j-https-www-slf4j-org-manual-html"><a href="#1、如何在系统中使用SLF4j-https-www-slf4j-org-manual-html" class="headerlink" title="1、如何在系统中使用SLF4j   https://www.slf4j.org/manual.html"></a>1、如何在系统中使用SLF4j   <a href="https://www.slf4j.org/manual.html" target="_blank" rel="noopener">https://www.slf4j.org/manual.html</a></h3><p>以后开发的时候，日志记录方法的调用，<strong>不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法</strong>；</p><p>给系统里面导入slf4j的jar和  logback的实现jar</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(HelloWorld.class);</span><br><span class="line">    logger.info(<span class="string">"Hello World"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图示：<img src="/codeant/573a/1.png" title="1.png"></p><p>每一个日志的实现框架都有自己的配置文件。使用slf4j以后，<strong>配置文件还是做成日志实现框架自己本身的配置文件；</strong></p><h3 id="2、统一框架日志https-www-slf4j-org-legacy-html"><a href="#2、统一框架日志https-www-slf4j-org-legacy-html" class="headerlink" title="2、统一框架日志https://www.slf4j.org/legacy.html"></a>2、统一框架日志<a href="https://www.slf4j.org/legacy.html" target="_blank" rel="noopener">https://www.slf4j.org/legacy.html</a></h3><p>一个系统中可能会有spring,mybatis等框架，但是不同框架使用的日志框架不一样，如何统一日志框架？</p><p><strong>统一日志记录，即使是别的框架和我一起统一使用slf4j进行输出</strong></p><img src="/codeant/573a/2.png" title="2.png"><p><strong>如何让系统中所有的日志都统一到slf4j；</strong></p><p>1、将系统中其他日志框架先排除出去；</p><p>2、用中间包来替换原有的日志框架；</p><p>3、我们导入slf4j其他的实现</p><h3 id="3、SpringBoot日志关系"><a href="#3、SpringBoot日志关系" class="headerlink" title="3、SpringBoot日志关系"></a>3、SpringBoot日志关系</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SpringBoot使用它来做日志功能；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>底层依赖关系</p><img src="/codeant/573a/3.png" title="3.png"><p>总结：</p><p>​    1）、SpringBoot底层也是使用slf4j+logback的方式进行日志记录</p><p>​    2）、SpringBoot也把其他的日志都替换成了slf4j；</p><p>​    3）、中间替换包</p><img src="/codeant/573a/4.png" title="4.png"><p>​    4）、如果我们要引入其他框架？一定要把这个框架的默认日志依赖移除掉？</p><p>​            Spring框架用的是commons-logging；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>SpringBoot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉即可；</strong></p><h3 id="4、日志使用；"><a href="#4、日志使用；" class="headerlink" title="4、日志使用；"></a>4、日志使用；</h3><p><a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-logging" target="_blank" rel="noopener">springboot官方文档-配置日志</a></p><h4 id="1、默认配置"><a href="#1、默认配置" class="headerlink" title="1、默认配置"></a>1、默认配置</h4><p>SpringBoot默认帮我们配置好了日志；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//记录器</span></span><br><span class="line">Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//System.out.println();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//日志的级别；</span></span><br><span class="line"><span class="comment">//由低到高   trace&lt;debug&lt;info&lt;warn&lt;error</span></span><br><span class="line"><span class="comment">//可以调整输出的日志级别；日志就只会在这个级别以以后的高级别生效</span></span><br><span class="line">logger.trace(<span class="string">"这是trace日志..."</span>);</span><br><span class="line">logger.debug(<span class="string">"这是debug日志..."</span>);</span><br><span class="line"><span class="comment">//SpringBoot默认给我们使用的是info级别的，没有指定级别的就用SpringBoot默认规定的级别；root级别</span></span><br><span class="line">logger.info(<span class="string">"这是info日志..."</span>);</span><br><span class="line">logger.warn(<span class="string">"这是warn日志..."</span>);</span><br><span class="line">logger.error(<span class="string">"这是error日志..."</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  日志输出格式：</span><br><span class="line">%d表示日期时间，</span><br><span class="line">%thread表示线程名，</span><br><span class="line">%-5level：级别从左显示5个字符宽度</span><br><span class="line">%logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。 </span><br><span class="line">%msg：日志消息，</span><br><span class="line">%n是换行符</span><br><span class="line">  --&gt;</span><br><span class="line">  %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span><br></pre></td></tr></table></figure><p>SpringBoot修改日志的默认配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">logging.level.com.atguigu=trace</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#logging.path=</span><br><span class="line"># 不指定路径在当前项目下生成springboot.log日志</span><br><span class="line"># 可以指定完整的路径；</span><br><span class="line">#logging.file=G:/springboot.log</span><br><span class="line"></span><br><span class="line"># 在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用 spring.log 作为默认文件</span><br><span class="line">logging.path=/spring/log</span><br><span class="line"></span><br><span class="line">#  在控制台输出的日志的格式</span><br><span class="line">logging.pattern.console=%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span><br><span class="line"># 指定文件中日志输出的格式</span><br><span class="line">logging.pattern.file=%d&#123;yyyy-MM-dd&#125; === [%thread] === %-5level === %logger&#123;50&#125; ==== %msg%n</span><br></pre></td></tr></table></figure><table><thead><tr><th>logging.file</th><th>logging.path</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td>(none)</td><td>(none)</td><td></td><td>只在控制台输出</td></tr><tr><td>指定文件名</td><td>(none)</td><td>my.log</td><td>输出日志到my.log文件</td></tr><tr><td>(none)</td><td>指定目录</td><td>/var/log</td><td>输出到指定目录的 spring.log 文件中</td></tr></tbody></table><h4 id="2、指定配置"><a href="#2、指定配置" class="headerlink" title="2、指定配置"></a>2、指定配置</h4><p>给类路径下放上每个日志框架自己的配置文件即可；SpringBoot就不使用他默认配置的了</p><table><thead><tr><th>Logging System</th><th>Customization</th></tr></thead><tbody><tr><td>Logback</td><td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code> or <code>logback.groovy</code></td></tr><tr><td>Log4j2</td><td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td></tr><tr><td>JDK (Java Util Logging)</td><td><code>logging.properties</code></td></tr></tbody></table><p>logback.xml：直接就被日志框架识别了；</p><p><strong>logback-spring.xml</strong>：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"staging"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- configuration to be enabled when the "staging" profile is active --&gt;</span></span><br><span class="line">  可以指定某段配置只在某个环境下生效</span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"stdout"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        日志输出格式：</span></span><br><span class="line"><span class="comment">%d表示日期时间，</span></span><br><span class="line"><span class="comment">%thread表示线程名，</span></span><br><span class="line"><span class="comment">%-5level：级别从左显示5个字符宽度</span></span><br><span class="line"><span class="comment">%logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。 </span></span><br><span class="line"><span class="comment">%msg：日志消息，</span></span><br><span class="line"><span class="comment">%n是换行符</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ----&gt; [%thread] ---&gt; %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"!dev"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ==== [%thread] ==== %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下错误</p><p> <code>no applicable action for [springProfile]</code></p><h3 id="5、切换日志框架"><a href="#5、切换日志框架" class="headerlink" title="5、切换日志框架"></a>5、切换日志框架</h3><p>可以按照slf4j的日志适配图，进行相关的切换；</p><p>slf4j+log4j的方式；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>切换为log4j2</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p># </p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1554618501-4aa45b49ecfb?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="日志" scheme="https://lijinhongpassion.github.io/tags/%E6%97%A5%E5%BF%97/"/>
    
      <category term="logging" scheme="https://lijinhongpassion.github.io/tags/logging/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-图解HTTP</title>
    <link href="https://lijinhongpassion.github.io/codeant/c29a.html"/>
    <id>https://lijinhongpassion.github.io/codeant/c29a.html</id>
    <published>2019-04-10T13:34:51.000Z</published>
    <updated>2019-06-04T08:16:56.187Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1553531768-a0f91bcfbd3e?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h1 id="1-HTTP状态码"><a href="#1-HTTP状态码" class="headerlink" title="1 HTTP状态码"></a>1 HTTP状态码</h1><table><thead><tr><th>分类</th><th>分类描述</th></tr></thead><tbody><tr><td>1**</td><td>信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td>2**</td><td>成功，操作被成功接收并处理</td></tr><tr><td>3**</td><td>重定向，需要进一步的操作以完成请求</td></tr><tr><td>4**</td><td>客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td>5**</td><td>服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><table><thead><tr><th>状态码</th><th style="text-align:left">状态码英文名称</th><th>中文描述</th></tr></thead><tbody><tr><td>100</td><td style="text-align:left">Continue</td><td>继续。客户端应继续其请求</td></tr><tr><td>101</td><td style="text-align:left">Switching Protocols</td><td>切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td></tr><tr><td></td><td style="text-align:left"></td><td></td></tr><tr><td>200</td><td style="text-align:left">OK</td><td>请求成功。一般用于GET与POST请求</td></tr><tr><td>201</td><td style="text-align:left">Created</td><td>已创建。成功请求并创建了新的资源</td></tr><tr><td>202</td><td style="text-align:left">Accepted</td><td>已接受。已经接受请求，但未处理完成</td></tr><tr><td>203</td><td style="text-align:left">Non-Authoritative Information</td><td>非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td></tr><tr><td>204</td><td style="text-align:left">No Content</td><td>无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td></tr><tr><td>205</td><td style="text-align:left">Reset Content</td><td>重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td>206</td><td style="text-align:left">Partial Content</td><td>部分内容。服务器成功处理了部分GET请求</td></tr><tr><td></td><td style="text-align:left"></td><td></td></tr><tr><td>300</td><td style="text-align:left">Multiple Choices</td><td>多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td></tr><tr><td><strong>301</strong></td><td style="text-align:left">Moved Permanently</td><td>永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td><strong>302</strong></td><td style="text-align:left">Found</td><td>临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td>303</td><td style="text-align:left">See Other</td><td>查看其它地址。与301类似。使用GET和POST请求查看</td></tr><tr><td>304</td><td style="text-align:left">Not Modified</td><td>未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td>305</td><td style="text-align:left">Use Proxy</td><td>使用代理。所请求的资源必须通过代理访问</td></tr><tr><td>306</td><td style="text-align:left">Unused</td><td>已经被废弃的HTTP状态码</td></tr><tr><td>307</td><td style="text-align:left">Temporary Redirect</td><td>临时重定向。与302类似。使用GET请求重定向</td></tr><tr><td></td><td style="text-align:left"></td><td></td></tr><tr><td>400</td><td style="text-align:left">Bad Request</td><td>客户端请求的语法错误，服务器无法理解</td></tr><tr><td>401</td><td style="text-align:left">Unauthorized</td><td>请求要求用户的身份认证</td></tr><tr><td>402</td><td style="text-align:left">Payment Required</td><td>保留，将来使用</td></tr><tr><td>403</td><td style="text-align:left">Forbidden</td><td>服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td>404</td><td style="text-align:left">Not Found</td><td>服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td></tr><tr><td>405</td><td style="text-align:left">Method Not Allowed</td><td>客户端请求中的方法被禁止</td></tr><tr><td>406</td><td style="text-align:left">Not Acceptable</td><td>服务器无法根据客户端请求的内容特性完成请求</td></tr><tr><td>407</td><td style="text-align:left">Proxy Authentication Required</td><td>请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td></tr><tr><td>408</td><td style="text-align:left">Request Time-out</td><td>服务器等待客户端发送的请求时间过长，超时</td></tr><tr><td>409</td><td style="text-align:left">Conflict</td><td>服务器完成客户端的PUT请求是可能返回此代码，服务器处理请求时发生了冲突</td></tr><tr><td>410</td><td style="text-align:left">Gone</td><td>客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td></tr><tr><td>411</td><td style="text-align:left">Length Required</td><td>服务器无法处理客户端发送的不带Content-Length的请求信息</td></tr><tr><td>412</td><td style="text-align:left">Precondition Failed</td><td>客户端请求信息的先决条件错误</td></tr><tr><td>413</td><td style="text-align:left">Request Entity Too Large</td><td>由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td></tr><tr><td>414</td><td style="text-align:left">Request-URI Too Large</td><td>请求的URI过长（URI通常为网址），服务器无法处理</td></tr><tr><td>415</td><td style="text-align:left">Unsupported Media Type</td><td>服务器无法处理请求附带的媒体格式</td></tr><tr><td>416</td><td style="text-align:left">Requested range not satisfiable</td><td>客户端请求的范围无效</td></tr><tr><td>417</td><td style="text-align:left">Expectation Failed</td><td>服务器无法满足Expect的请求头信息</td></tr><tr><td></td><td style="text-align:left"></td><td></td></tr><tr><td>500</td><td style="text-align:left">Internal Server Error</td><td>服务器内部错误，无法完成请求</td></tr><tr><td>501</td><td style="text-align:left">Not Implemented</td><td>服务器不支持请求的功能，无法完成请求</td></tr><tr><td>502</td><td style="text-align:left">Bad Gateway</td><td>作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td></tr><tr><td>503</td><td style="text-align:left">Service Unavailable</td><td>由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr><tr><td>504</td><td style="text-align:left">Gateway Time-out</td><td>充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr><tr><td>505</td><td style="text-align:left">HTTP Version not supported</td><td>服务器不支持请求的HTTP协议的版本，无法完成处理</td></tr></tbody></table><p><strong>301与302</strong></p><ul><li>301：永久跳转，客户端发送请求访问‘/test’的资源，游览器接收到后，因为‘/test’资源路径改变，返回301并设置响应首部字段’Location’:’/newtest’，告诉客户端在下次访问‘/test’的时候，<strong>在客户端直接更改为’/newtest’</strong></li><li>302：临时跳转,客户端发送请求访问‘/test’的资源，游览器接收到后，因为‘/test’资源路径改变，返回302并设置响应首部字段’Location’:’/newtest’，告诉客户端临时跳转到’/newtest’；客户端在下次访问‘/test’资源还是会重复上面的操作，并不会在客户端直接更改访问资源的路径</li></ul><h1 id="2-HTTP结构"><a href="#2-HTTP结构" class="headerlink" title="2 HTTP结构"></a>2 HTTP结构</h1><img src="/codeant/c29a/1.png" title="1.png"><h1 id="3-HTTP首部"><a href="#3-HTTP首部" class="headerlink" title="3 HTTP首部"></a>3 HTTP首部</h1><p><strong>1. 通用首部字段</strong>–9</p><table><thead><tr><th>字段名</th><th>说明</th></tr></thead><tbody><tr><td><strong>Cache-Control</strong></td><td>控制缓存的行为</td></tr><tr><td>Connection</td><td>逐跳首部、连接的管理</td></tr><tr><td>Date</td><td>创建报文的日期时间</td></tr><tr><td>Program</td><td>报文指令</td></tr><tr><td>Trailer</td><td>报文末端的首部一览</td></tr><tr><td>Transfer-Encoding</td><td>指定报文主体的传输编码方式</td></tr><tr><td>Upgrade</td><td>升级为其他协议</td></tr><tr><td>Via</td><td>代理服务器的相关信息</td></tr><tr><td>Warning</td><td>错误通知</td></tr></tbody></table><p><strong>Cache-Control：</strong></p><p>粗体指令为常用指令</p><ul><li>可缓存性<ul><li><strong>public：</strong>表明其他用户也可以利用缓存</li><li><strong>private：</strong>缓存服务器会对该特定用户提供资源缓存服务，<strong>对于其他用户发来的请求，缓存服务器则不会返回缓存</strong></li><li><strong>no-Cache</strong>（不缓存过期的资源）：<ul><li>客户端：客户端发送的请求中包含no-cache指令，表示客户端不会接收缓存过的响应，则中间的缓存服务器（例如nginx服务器）必须将请求转发给源服务器</li><li>服务器端：若是服务器端返回的响应中包含no-cache指令（response.setHeader(……)），那么缓存服务器（例如nginx）就不能对资源进行缓存；<strong>并且在以后都不会再对缓存服务器请求中提出的资源有效性进行确认，且禁止其对响应的资源进行缓存</strong></li></ul></li></ul></li></ul><hr><ul><li>缓存期限和认证<ul><li>s-maxage：该指令和max-age相同，不同点是s-maxage只适用于供对为用户使用的公共缓存服务器（<strong>也就是说只有在代理服务器才会生效</strong>），max-age是在<strong>客户端生效</strong>；使用该指令过后，会忽略对Expires首部字段和max-age指令的处理；eg : Cache-Control:s-maxage=604800（单位秒）</li><li><strong>max-age：</strong>缓存在未过期的时间内是访问的客户端本地的缓存，当缓存过期后才会访问服务器；eg : Cache-Control:max-age=604800（单位秒）</li><li>max-stale：只能由客户端发起请求；客户端对过期的请求接收；eg:Cache-Control:max-stale=604800（<strong>资源过期时间在指定时间内，才会被客户端接收</strong>）； Cache-Control:max-stale（不设置参数表示不论资源过期多久，都接收）</li></ul></li></ul><hr><ul><li>重新验证<ul><li>must-revalidate：这是用在客户端的；在设置了max-age的缓存资源过期后，那我们必须去源服务端重新获取资源，来验证这个缓存资源是否真的过期，而不能直接使用本地缓存；</li><li>proxy-revalidate：要求<strong>所有的</strong>缓存服务器<strong>接收到客户端带有该指令请求</strong>，在返回响应之前，必须在此验证缓存的有效性。</li></ul></li></ul><hr><ul><li><p>其他</p><ul><li><p>no-store（不缓存）：暗示请求（和对应的响应）或者响应中包含机密信息，该指令表示在本地存储不能缓存请求或者响应的任一部分</p></li><li><p>no-transform：表示无论在请求还是响应中，缓存都不能改变实体主体的媒体类型；这样做可防止缓存或代理压缩图片等类似操作。</p></li></ul></li></ul><p><strong>Connection：</strong></p><p>作用</p><ul><li>控制不再转发给代理首部字段</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eg: Connection: Upgeade    //表示首部字段中upgrade字段会被从http中删除后在转发</span><br></pre></td></tr></table></figure><ul><li><p>管理持久化连接</p><ul><li><p>close：当服务器端想明确断开连接时，则指定Connection的值为close</p></li><li><p>Keep-Alive：客户端发送请求给服务器时，服务器会像下图那样加上Keep-Alive首部字段和Connection首部字段后返回响应</p><img src="/codeant/c29a/2.png" title="2.png"></li></ul></li></ul><p><strong>2. 请求首部字段  </strong>–19  </p><p>​                               </p><table><thead><tr><th>字段名</th><th>说明</th></tr></thead><tbody><tr><td><strong>Accept</strong></td><td>用户代理可处理的媒体类型</td></tr><tr><td>Accept-Charset</td><td>优先的字符集</td></tr><tr><td><strong>Accept-Encoding</strong></td><td>优先的内容编码</td></tr><tr><td><strong>Accept-Language</strong></td><td>优先的语言（自然语言）</td></tr><tr><td>Authorization</td><td>Web认证信息</td></tr><tr><td>Expect</td><td>期待服务器的特定行为</td></tr><tr><td>From</td><td>用户的电子邮箱地址</td></tr><tr><td>Host</td><td>请求资源所在的服务器</td></tr><tr><td>If-Match</td><td>比较实体标记（ETag）</td></tr><tr><td>If-Modified-Since</td><td>比较资源的更新时间</td></tr><tr><td>If-None-Match</td><td>比较实体标记（与If-Match相反）</td></tr><tr><td>If-Range</td><td>资源未更新时发送实体Byte的范围请求</td></tr><tr><td>If-Unmodified-Since</td><td>比较资源的更新时间（与If-Modified-Since相反）</td></tr><tr><td>Max-Forwards</td><td>最大传输逐跳数</td></tr><tr><td>Proxy-Authorization</td><td>代理服务器要求客户端的认证信息</td></tr><tr><td>Range</td><td>实体的字节范围请求</td></tr><tr><td>Referer</td><td>对请求中的URI的原始获取方</td></tr><tr><td>TE</td><td>传输编码的优先级</td></tr><tr><td><strong>User-Agent</strong></td><td>HTTP客户端程序的信息</td></tr></tbody></table><p><strong>Accept、Accept-Encoding、Accept-Language</strong>与实体类首部字段Content-Type、Content-Encoding、Content-Language相对应</p><p>客户端发送请求首部字段Accept、Accept-Encoding、Accept-Language，服务器接收后在实体报文里面设置Content-Type、Content-Encoding、Content-Language与之对应响应客户端的请求</p><p><strong>3.响应首部字段</strong>–9</p><table><thead><tr><th><strong>首部字段名</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Accept-Ranges</td><td>是否接受字节范围请求</td></tr><tr><td>Age</td><td>推算资源创建经过时间</td></tr><tr><td><strong>ETag</strong></td><td>资源的匹配信息</td></tr><tr><td>Location</td><td>令客户端重定向至指定URI</td></tr><tr><td>Proxy-Authenticate</td><td>代理服务器对客户端的认证信息</td></tr><tr><td>Retry-After</td><td>对再次发起请求的时机要求</td></tr><tr><td>Server</td><td>HTTP服务器的安装信息</td></tr><tr><td>Vary</td><td>代理服务器缓存的管理信息</td></tr><tr><td>WWW-Authenticate</td><td>服务器对客户端的认证信息</td></tr></tbody></table><p><strong>ETag：</strong></p><p>数据签名，它是一种可将资源以字符串形式做唯一性标识的方式。服务器端会为每份资源分配对应的ETag值。用ETag来标记唯一资源；</p><p>配合if-Match或者if-Non-Match使用（比较实体标记（ETag）），这两个字段都是请求首部字段</p><p>服务器获取到字段后对比ETag，判断是否返回一个新的资源</p><p><strong>4. 实体首部字段  </strong>–10</p><table><thead><tr><th>字段名</th><th>说明</th></tr></thead><tbody><tr><td>Allow</td><td>资源可支持的HTTP方法</td></tr><tr><td><strong>Content-Encoding</strong></td><td>实体主体试用的编码方式</td></tr><tr><td><strong>Content-Language</strong></td><td>实体主体的自然语言</td></tr><tr><td>Content-Length</td><td>实体主体的大小（单位：字节）</td></tr><tr><td>Content-Location</td><td>替换对应资源的URI</td></tr><tr><td>Content-MD5</td><td>实体主体的报文摘要</td></tr><tr><td>Content-Range</td><td>实体主体的位置范围</td></tr><tr><td><strong>Content-Type</strong></td><td>实体主体的媒体类型</td></tr><tr><td>Expires</td><td>实体主体过期的日期时间</td></tr><tr><td><strong>Last-Modified</strong></td><td>资源的最后修改日期时间</td></tr></tbody></table><p><strong>Last-Modified：</strong></p><p>配合If-Modified-Since或者If-Unmodified-Since使用，比较资源的更新时间，这俩个字段是请求首部字段 </p><p><strong>5、为Cookie服务的首部字段</strong></p><table><thead><tr><th>字段名</th><th>说明</th><th>首部类型</th></tr></thead><tbody><tr><td>Set-Cookie</td><td>开始状态管理所使用的Cookie信息</td><td>响应首部字段</td></tr><tr><td>Cookie</td><td>服务器接收到的Cookie信息</td><td>请求首部字段</td></tr></tbody></table><ul><li><p><strong>Set-Cookie字段</strong>的属性</p><p>| 属性         | 说明                                                         |<br>| ———— | ———————————————————— |<br>| NAME=VALUE   | 赋予Cookie名称和值（必须项）eg:id = ‘1312’                   |<br>| expires=Date | Cookie的有效期（若是不明确有效期或者没有设置，则Cookie的有效期为游览器关闭为止） |<br>| path=PATH    | 将服务器上的文件目录作为Cookie的适用对象（若不指定则默认为文档所在的文件目录） |<br>| domain=域名  | 作为Cookie适用对象的域名（若不明确则默认为创建Cookie的服务器的域名） |<br>| Secure       | 仅在HTTPS安全通信时才会发送Cookie                            |<br>| HttpOnly     | 加以限制，使Cookie不能被javascript脚本访问                   |</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eg: Set-Cookie: id=&apos;123&apos;; HttpOnly</span><br></pre></td></tr></table></figure></li><li><p>Cookie</p><p>当服务器通过set-cookie设置cookie信息返回响应给客户端，客户端接收到以后，就将响应首部字段中的set-cookie的cookie信息根据所设置的属性保存等；</p><p>在下一次发送请求的时候根据属性要求将cookie信息写入请求首部字段cookie，再发送；</p><p>客户端接收到多个cookie时，同样可以以多个cookie形式返回给服务器；</p></li></ul><p><strong>6、其他首部字段</strong></p><ul><li>X-Frame_Options</li><li>X-Xss_Protection</li><li>DNT</li><li>P3P</li></ul><h1 id="4-HTTPS"><a href="#4-HTTPS" class="headerlink" title="4 HTTPS"></a>4 HTTPS</h1><p>##<strong>1. HTTP缺点</strong></p><ul><li>明文通信（不加密），内容可能会被窃取</li><li>不验证通信方的身份，身份可能会被伪装；例如cookie泄露，攻击者可利用cookie模拟用户操作</li><li>无法证明报文完整性，内容可能被篡改</li></ul><p>所以HTTP是不安全的通信协议</p><hr><p>##<strong>2. HTTPS = HTTP + 加密 + 认证 + 完整性保护 = HTTP + SSL （或者TLS）</strong></p><p><strong>解释：</strong>HTTP将通信接口部分用SSL或TLS协议代替</p><p>HTTP通信过程：HTTP-&gt;TCP</p><p>HTTPS通信过程：HTTP-&gt;SSL-&gt;TCP</p><hr><h2 id="3-怎么实现HTTP-加密-认证-完整性保护？"><a href="#3-怎么实现HTTP-加密-认证-完整性保护？" class="headerlink" title="3. 怎么实现HTTP + 加密 + 认证 + 完整性保护？"></a><strong>3. 怎么实现HTTP + 加密 + 认证 + 完整性保护？</strong></h2><ol><li><p>加密方式</p><ul><li><p>对称密钥加密（也叫共享密钥加密）：加密和解密同用一个密钥</p><p>问题：如何保证密钥在传输过程中不被窃取</p><p>解决：利用 非对称密钥加密 传输 对称密钥加密中需要使用到的密钥</p></li><li><p>非对称密钥加密（也叫公开密钥加密）：私钥、公钥；发送方先用公钥对内容加密，接收方用自己的私钥进行解密；该方法解决了<strong>对称密钥加密方式</strong>存在的问题，因为即使发送方发送过来的信息在传输途中被窃取，因为攻击者没有私钥，所以无法解密</p><p>问题：无法证明公钥就是真正的公钥，有可能被攻击者替换掉</p><p>解决：使用 数字证书认证机构（CA） 和 相关机关 颁发的 公开密钥证书，在下面第三点会详细阐述</p></li></ul><p>非对称比对称处理速度更慢；</p></li><li><p>HTTPS加密方式<br>HTTPS采用混合加密制度，非对称密钥加密用于传输对称密钥加密使用的密钥，在之后就是使用对称密钥加密传输加密的报文，因为堆成密钥加密方式保证了密钥不会被窃取。</p></li><li><p>HTTPS使用证书</p><ul><li><p>证明公开密钥正确性的证书</p><img src="/codeant/c29a/3.png" title="3.png"><img src="/codeant/c29a/4.png" title="4.png"></li><li><p>证明组织真实性的EV SSL证书</p></li><li><p>用以确认客户端的客户端证书</p><p>证明正在与服务器通信的客户端一直是预料之中的客户端。与服务器证书是一样的原理。</p></li><li><p>自认证机构颁发的自签名证书（无效）</p></li></ul></li></ol><hr><h2 id="4-HTTPS安全通信流程"><a href="#4-HTTPS安全通信流程" class="headerlink" title="4. HTTPS安全通信流程"></a><strong>4. HTTPS安全通信流程</strong></h2><img src="/codeant/c29a/5.png" title="5.png"><h2 id="5-SSL速度"><a href="#5-SSL速度" class="headerlink" title="5. SSL速度"></a><strong>5. SSL速度</strong></h2><p>因为HTTPS与HTTP相比，增加了SSL，导致速度会慢2~100倍。</p><p>SSL的慢：</p><ul><li>通信慢（因为要协商准备加密组件等）</li><li>小号CPU及内存等资源（加密解密操作）</li></ul><p>改善方式：SSL加速器</p><h2 id="6-为什么不一直使用HTTPS"><a href="#6-为什么不一直使用HTTPS" class="headerlink" title="6. 为什么不一直使用HTTPS"></a><strong>6. 为什么不一直使用HTTPS</strong></h2><ul><li>消耗更多的服务器资源，导致单位时间内处理请求的数量减少</li><li>节约购买证书的开销</li></ul><p>使用方式：如果是非敏感信息则使用HTTP通信，反之，包含个人敏感数据时使用HTTPS；在进行HTTPS通信时，所传输的数据不一定全部是敏感数据，所以可选择部分加密，以节约资源。</p><h1 id="5-确认用户身份的认证"><a href="#5-确认用户身份的认证" class="headerlink" title="5 确认用户身份的认证"></a>5 确认用户身份的认证</h1><p>HTTP1.1使用的认证方式</p><ul><li><del>BASIC认证（基本认证）</del>  <strong>不常用</strong></li><li><del>DIGEST认证（摘要认证）</del>  <strong>不常用</strong></li><li><del>SSL客户端认证</del>  （需要客户端导入证书以及证书需要费用，并未普及使用）</li><li>FORMBASE认证（基于表单认证）</li></ul><p>所以现在常用的是表单认证+cookie，使用cookie来管理session会话，并且为了防止XSS攻击，应在cookie里设置httponly属性，这样在js脚本里面就不能使用document.cookie</p><img src="/codeant/c29a/6.png" title="6.png"><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><strong>[1]【日】上野 宣.图解HTTP[M].人民邮电出版社:北京,2014.05:1-165.</strong></p><p><strong>[2]维基百科.HTTP标头字段列表[EB/OL].<a href="https://en.wikipedia.org/wiki/List_of_HTTP_header_fields" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/List_of_HTTP_header_fields</a>.</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1553531768-a0f91bcfbd3e?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="http" scheme="https://lijinhongpassion.github.io/categories/http/"/>
    
    
      <category term="http" scheme="https://lijinhongpassion.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-大型网站技术架构之负载均衡</title>
    <link href="https://lijinhongpassion.github.io/codeant/c670.html"/>
    <id>https://lijinhongpassion.github.io/codeant/c670.html</id>
    <published>2019-04-09T05:58:05.000Z</published>
    <updated>2019-06-04T08:28:16.956Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="通行证" />    <label for="pass">通行证</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX19muP0SLSEr/QK9YBsDK5n1GU7wb3p8RYV1qul0EZqH23uSIHQZW3K0utaHVa8TROyj+McbLhDqF6VN6YIbttaOjlFpr7bY3BBv0EPkrH6jCFJ+poc4w6Jf1Nu9W9SkeJ8LesNRgn5OuRpUY7BZDOCWSCkLtoJJKq2283EUFoI4jE0JwoELJtOkBoz3/L4UVLeChcn62yjuva3yPn+ufZVBuvi4KSqGynskpCLufgW8JqB/6lvAW4DEI1LL5PNxayBz9D+Mkab3d1y61IWEDnp52yy5J8SdYJPpPYzIW8N539XLIUtJ9G8BecXkcqfV3zPxYjijevlW6cWe9rXTYPjvvjFavLrlUO1ZEr4qckWWbuNqcQMWSnB8THB2acPG5riH2kD01immYkv1sOOks3Zyqwt2vsX9Qw/B6SMbY6dpb2UGav8n3/EkQ30J9LrJc/qOscc13CXsn8zjyFs2OJphOM1DcQ+YzAdyUf7iHvQGXCoRo27mDu45FzE/tOcqAsXy6gC1YF+KL/Et+e/18+3NQDk4A3/haVMCAS+WDrVBVH7OApK91KD0U9FMGJtdNH47N6CvyVd9NLu4fqv/c0poulUdwYp/gqQ3IyySz8XZz9oZroPWD8Nn7iHxHKwM14hsjWsH4KovuHR7YBoNTO95l8wBFD+BxBwzOCg0hTwX/lnH0eR5SMcdsR20kTl/zKw4hwxzxcxZ7mbbCxiuWvyQ3IZF1jiwChxo9sGKhWlE4gfwsMQn50hlwIMchYz5XzXOOs3NLwkI97ZqqYY0Gaci0xrqTl0UaJLifa2RutcXBkw0r2sBXrSij+LlxBjbk5Zw2V3uOYYtDF0DeZA1ai0FwIr/gNqGBTnytSwsACuinJyf0ULES95M9+Uqctz/B4znxz0c1DtEiSq9rxz3hdUYurDCqvDUgqUXRrdS3kYblOtdfcqCBOmbVTzBjkPfbFsBO168rIWWRv83TAUcRFJaKYQ1Y3yWAzAXz6tAFuBJ9msvemaGryuizwVDW2EsYgbLhjxjD5ggVJRwFd1ZRs961iEonXmvyQPSavfOhA6OwZ80lIgnaTs/xaPUiQC+ZR5zVs87fGzjgmQkkQtfkE9/AF9O1GTa9jUi2EBzveClLT1/gFRE+fPvfbhpG8/8aybNCSmMBg2LCk/b1/jtALAFD0tdbkJ25uVu4Ot348qLSTOtw3EzJa0y6Of22DJuPxbZ3kuyvpdSlZXExMTAH0NB7KsWlNRfk6hJLA7Q9aulQr1rQ5FWnmLNZ277GojoxOHf71e3NzKxEfHoViiiF6FvhoPglbHfYqwWqr0nIlHnpePb0vEWOFy5iDvNFwbHkrv/4L6JON6v85NNhN+clT8YopXqLc4EvCTcRrUa73LjGdjuvCwhzxJj+8pldM+kr4cTbckdYUQVv3a2hMvbgt36/TrW5xA3OtI0uxOkVLSqfxKI+8x/MtKiVG8wyiXbO6UQ+kgEqHgx+NZC33ozHMmVc1r38fiRSNAkguKU2vbieqPd/gwURAHRNDu2IbE38HfUghzJVewJ7S805+2tlVOD9l3SWD6yZCCC8FLRgusjV1ksMRqPx2mYlufzxXuSBwcdkZ3l774su6v9k6X3onIEFTtwH6hwsL9MM5wpxCbnOPD1mLW586pBLykGSb8tNvtDihUcgg10OEFZGhqDCOtODCqAvt+416hmA2tp8KjdXfsxH0uG6cP/pbQjuZtF/pz2lsNBMOEiDqMh+sfAikNtK6RMnE6c8ST4yBEWebHEul9wY3LJMigLms4tRn+U9GwFCqZylBNYGYj0TmcoBvnMICTckNM5Xq0zMZrriXfCc0UTFdMWarbON82ncSmB1m1/ncdlbyxz8MT9jNd8jTHWXiJ2pKlxQTYKwht/15r4cviP0EUuCP+YFK7stguNsuKyehhr4KQmLEJu5lGNU6xt81s2ykCB2PQtczaIDA5eDsmMw94PdfY9urUL6Md2kUaJPa4thPFW9RBcye07wvYfnp8J88c8VaLIZgwJq5GxNS1JHAt3sXy8RnAlef4amuj6X+Cu58jqH/P2TToh/mAP5vGQPP7xNZheyrP9qDZkeHDYHn26bQTO4RNwqPmxCpUGOH8CwDmwGRAl97TTf3TXQPzR+S5u1GdQgOcshHhtb6OggKyy4iOZWRzSOCzRP6kUE/A/VeaedDbmRYN16v/8pzoL7OojRtrJbcQYafnNIPmXig1YGMP9Rpe5WgpVM1sMHOcIS41VtD86zCpkOihixvELq4m2C4BbKhBCFYsA72L8iM030F7PEaGfnYsQ5TTOyk+pTJ9w1Dnue5sGWVG8FmqXZwovoDL6JehNJc7DQ/maRqyqlOPJa3xnV6aA1XVhbZEZ2YM507dkESW5yayWwU5TNPPyIycdDJPVXaylj+8nTNWSHuRW1insy6Xvexbtvvysn/TVcucgrAGcxZllhlnuZNdxOrEQN7yF7Yw/wjbeIrIGkpU5Cfr5RaQCT2LAq7pq1A6ojLZp80iWNMe/2NFyLKgqizPjO3PqMLJDN1soyz/TOmKevfedrZh12S8EeqI/yWIudZEg+uW9hvbfilL6fbsS41EIqrMVeZA592lJ2Kb6xYQVGFXcFxNZws6sOBfWtu3I5P/2aq/DCBBN8TWZNNFAJkRNzDvYUx4Ifs9t6kHWakGntDPybMNk4brt56Tz+qsvNtxMmGs0oz4ij040zc6A3yoVChcjBZElK32F9a3+FIDNWf2U/zl92ohBwb2GYt5c5yZNF2h/W1Ah/JQlL6/W7TVl+c3zgqHsx5BfXq1CnrK0zhfWtsxFoPbY1x1o9Mlh/dA0o/IZXvlQXMhX6zHKTw86JGfMOLEXIeSiDr6b0rk41jw1lOuMBB4Nihsz6AnQFsTSCp3svdtxphZ5rG10BtcmDr0qhsLtn1o/E4YA72NzcTYx/8BjkHGVPyaYowjsMAR6/XBkkycOSpU2cq/g3wE=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="架构" scheme="https://lijinhongpassion.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="读书笔记" scheme="https://lijinhongpassion.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="架构" scheme="https://lijinhongpassion.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="负载均衡" scheme="https://lijinhongpassion.github.io/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-大型网站技术架构（李智慧著）</title>
    <link href="https://lijinhongpassion.github.io/codeant/7bf5.html"/>
    <id>https://lijinhongpassion.github.io/codeant/7bf5.html</id>
    <published>2019-04-08T12:07:16.000Z</published>
    <updated>2019-06-04T08:28:55.726Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/flagged/photo-1554443883-83db889b4007?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1051&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>最近想学习分布式，但是一直苦于不知道怎么入门。所以就去网上淘了一本关于web架构入门的书。这本书中并没有什么代码，主要是web架构的发展。我认为对于javaweb的初学者很有必要看一下这本书，对后面学习java很有帮助。本文章是针对笔者的弱项进行的知识补充。<br><strong>pdf下载链接：<a href="https://pan.baidu.com/s/1i6LWNUt" target="_blank" rel="noopener">https://pan.baidu.com/s/1i6LWNUt</a> 密码：o7nc</strong></p><h1 id="第一章-大型架构演化"><a href="#第一章-大型架构演化" class="headerlink" title="第一章 大型架构演化"></a>第一章 大型架构演化</h1><img src="/codeant/7bf5/1.png" title="1.png"><p>上图是<strong>书籍上演示的</strong>最后网站架构，在这个架构上大多数问题都能够得到解决。但是在演变过程中的业务拆分不是特别理解，也就是对消息队列（服务器）概念不清楚，它是什么，怎么用。<br>**参考文章：<a href="http://www.codeceo.com/article/web-archte-message-queue.html?from=timeline&amp;isappinstalled=0#10006-weixin-1-52626-6b3bffd01fdde4900130bc5a2751b6d1" target="_blank" rel="noopener">http://www.codeceo.com/article/web-archte-message-queue.html?from=timeline&amp;isappinstalled=0#10006-weixin-1-52626-6b3bffd01fdde4900130bc5a2751b6d1</a></p><p>其实从字面意思理解也能够大致想到消息队列的作用。</p><p>在实际应用中常用的使用场景，异步处理，应用解耦，流量削锋和消息通讯四个场景。 </p><p>下面举个应用解耦例子：</p><p>场景说明：用户下单后，订单系统需要通知库存系统。传统的做法是，订单系统调用库存系统的接口。<br><img src="/codeant/7bf5/2.png" title="2.png"><br>传统模式的缺点：<br>1）  假如库存系统无法访问，则订单减库存将失败，从而导致订单失败；<br>2）  订单系统与库存系统耦合；<br>如何解决以上问题呢？引入应用消息队列后的方案，如下图：<br><img src="/codeant/7bf5/3.png" title="3.png"><br>订单系统：用户下单后，订单系统完成持久化处理，将消息写入消息队列，返回用户订单下单成功。<br>库存系统：订阅下单的消息，采用拉/推的方式，获取下单信息，库存系统根据下单信息，进行库存操作。<br><strong>假如：在下单时库存系统不能正常使用。也不影响正常下单，因为下单后，订单系统写入消息队列就不再关心其他的后续操作了。实现订单系统与库存系统的应用解耦。</strong></p><h1 id="第二章-大型网站架构模式"><a href="#第二章-大型网站架构模式" class="headerlink" title="第二章 大型网站架构模式"></a>第二章 大型网站架构模式</h1><ol><li><p>分层<br>横向维度进行分层</p><ul><li><strong>数据层</strong></li><li><strong>服务层</strong><ul><li>接口层（api）</li><li>逻辑处理层</li></ul></li><li><strong>应用层</strong><ul><li>视图层</li><li>业务逻辑层（controller）</li></ul></li></ul><ol start="2"><li><p>分割<br>纵向维度分割：业务分割为更小的粒度</p></li><li><p>分布式<br>常用分布式方案：</p><pre><code>- 分布式应用和服务- 分布式静态资源- 分布式数据和缓存- 分布式计算- 分布式配置- 分布式锁- 分布式文件系统</code></pre></li><li><p>集群<br>概念：即多台服务器部署相同用于构成一个集群，通过负载均衡设为共同对外提供服务</p></li><li><p>缓存<br>缓存数据特点：</p><pre><code>- 数据访问热点不均衡，频繁访问的数据应该放在缓存中- 数据在某个时段友校，不会很快过期，否则会因数据失效而产生脏读</code></pre><p>常见缓存设计：</p><pre><code>- [CDN](https://baike.baidu.com/item/CDN/420951?fr=aladdin#1)：用户的网络请求总是先到达他的网络服务商那里，可以在这里缓存一些静态资源。- 反向代理：因为反向代理是部署在网站的前端，用户发送请求最先访问到的就是反向代理服务器，所以可以在反向代理服务器上存放一些静态资源，例如门户网站等，这样当用户请求发送到反向代理服务器，反向代理服务器直接返回静态资源给用户，既提升了响应时间，也为后端的应用服务器减轻负载。- 本地缓存：缓存应用程序的热点数据，应用程序获取某些数据可以直接访问缓存，从而减少访问数据库。- 分布式缓存：将数据缓存在一个专门的分布式缓存集群中。</code></pre></li><li><p>异步<br>异步架构是典型的生产者消费者模式，例如消息队列，主要的特性：</p><pre><code>- 提高系统的可用性（异步处理）- 加快网站的响应速度（应用解耦）- 消除并发访问高峰（流量削锋）</code></pre></li><li><p>冗余</p></li></ol><p>因为服务器宕机事件的必然性，要保证其数据不丢失，就需要一定程度的服务器冗余运行，数据冗余备份，这也是为什么访问和负载很小的服务因为需要部署至少两台服务器构成的集群。</p><p>数据库备份方式：定期备份、存档保存、冷备份和热备份</p><ol start="8"><li><p>自动化</p></li><li><p>安全</p></li></ol></li></ol><h1 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h1><ul><li>网站伸缩性架构<ul><li>网站架构（纵向横向分离）    97-98 </li><li>应用服务器集群（负载均衡）    99-106</li><li>分布式缓存集群（如何集群）    106-112</li><li>数据存储服务器集群（关系型数据库的读写分离分库分表、nosql）112-120</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/flagged/photo-1554443883-83db889b4007?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1051&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="https://lijinhongpassion.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="读书笔记" scheme="https://lijinhongpassion.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="架构" scheme="https://lijinhongpassion.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Java-spring&amp;springboot配置文件转换</title>
    <link href="https://lijinhongpassion.github.io/codeant/20de.html"/>
    <id>https://lijinhongpassion.github.io/codeant/20de.html</id>
    <published>2019-04-05T01:37:40.000Z</published>
    <updated>2019-06-04T08:29:26.582Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="通行证" />    <label for="pass">通行证</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      spring的xml文件配置方式 转 springboot的Configuration注解配置方式
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="springboot" scheme="https://lijinhongpassion.github.io/tags/springboot/"/>
    
      <category term="spring" scheme="https://lijinhongpassion.github.io/tags/spring/"/>
    
  </entry>
  
</feed>
