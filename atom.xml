<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code Ant&#39;s Blog</title>
  
  <subtitle>“每天进步一点点”</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lijinhongpassion.github.io/"/>
  <updated>2019-07-19T07:33:04.803Z</updated>
  <id>https://lijinhongpassion.github.io/</id>
  
  <author>
    <name>Code Ant</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2019年下半年计划</title>
    <link href="https://lijinhongpassion.github.io/codeant/1231.html"/>
    <id>https://lijinhongpassion.github.io/codeant/1231.html</id>
    <published>2019-12-31T05:02:43.000Z</published>
    <updated>2019-07-19T07:33:04.803Z</updated>
    
    <content type="html"><![CDATA[<hr><p><blockquote><strong>2019下半年规划</strong></blockquote></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/1231/2019年度计划.png" alt="2019下半年规划"></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;&lt;blockquote&gt;&lt;strong&gt;2019下半年规划&lt;/strong&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPas
      
    
    </summary>
    
    
      <category term="年度计划" scheme="https://lijinhongpassion.github.io/tags/%E5%B9%B4%E5%BA%A6%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Java-springboot+jsp部署问题</title>
    <link href="https://lijinhongpassion.github.io/codeant/dle0.html"/>
    <id>https://lijinhongpassion.github.io/codeant/dle0.html</id>
    <published>2019-09-26T08:39:11.000Z</published>
    <updated>2019-09-26T09:17:38.192Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>今天打包项目的时候遇见一个问题，首先我的项目是基于springboot + jsp，打包的时候我发现jsp以及相关的静态资源都没有打包进jar包，所以我就百度查阅相关解决方案，这里给出一种我成功解决的方法。</p><h2 id="springboot打包结构"><a href="#springboot打包结构" class="headerlink" title="springboot打包结构"></a>springboot打包结构</h2><p>这是打包后的jar包的目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">zf-0.0.1-SNAPSHOT</span><br><span class="line">    ├─BOOT-INF//java代码</span><br><span class="line">    │  ├─classes</span><br><span class="line">    │  │  │  application.yml</span><br><span class="line">    │  │  ├─com</span><br><span class="line">    │  │  │  └─zf</span><br><span class="line">    │  │  │      └─admin</span><br><span class="line">    │  │  │          ├─comment</span><br><span class="line">    │  │  │          ├─conf</span><br><span class="line">    │  │  │          ├─controller</span><br><span class="line">    │  │  │          ├─dao</span><br><span class="line">    │  │  │          ├─pojo</span><br><span class="line">    │  │  │          ├─service</span><br><span class="line">    │  │  │          │  └─Impl </span><br><span class="line">    │  │  │          └─utils</span><br><span class="line">    │  │  │              ├─image</span><br><span class="line">    │  │  │              ├─jwt</span><br><span class="line">    │  │  │              ├─mail</span><br><span class="line">    │  │  │              ├─mybatis</span><br><span class="line">    │  │  │              └─verificationcode       </span><br><span class="line">    │  │  └─mapping</span><br><span class="line">    │  └─lib</span><br><span class="line">    │          </span><br><span class="line">    ├─META-INF//静态资源</span><br><span class="line">    │  ├─maven</span><br><span class="line">    │  │  └─com.zf.admin</span><br><span class="line">    │  │      └─zf</span><br><span class="line">    │  └─resources</span><br><span class="line">    │      ├─css</span><br><span class="line">    │      ├─fonts</span><br><span class="line">    │      ├─images</span><br><span class="line">    │      ├─js</span><br><span class="line">    │      │  ├─libs</span><br><span class="line">    │      │  └─localization</span><br><span class="line">    │      └─WEB-INF</span><br><span class="line">    │          ├─jsp</span><br><span class="line">    │          │  └─admin</span><br><span class="line">    │          └─tld</span><br><span class="line">    └─org</span><br><span class="line">        └─springframework</span><br><span class="line">            └─boot</span><br><span class="line">                └─loader</span><br><span class="line">                    ├─archive </span><br><span class="line">                    ├─data</span><br><span class="line">                    ├─jar</span><br><span class="line">                    └─util</span><br></pre></td></tr></table></figure><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dle0/1.png" alt></p><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><p>pom文件里面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        SpringBoot打包成jar在服务器上无法访问JSP页面问题--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>META-INF/resources<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--版本号一定是1.4.2--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="springboot" scheme="https://lijinhongpassion.github.io/tags/springboot/"/>
    
      <category term="jsp" scheme="https://lijinhongpassion.github.io/tags/jsp/"/>
    
  </entry>
  
  <entry>
    <title>Java-实体类中使用包装类和基本类型的区别（转载）</title>
    <link href="https://lijinhongpassion.github.io/codeant/4aff.html"/>
    <id>https://lijinhongpassion.github.io/codeant/4aff.html</id>
    <published>2019-09-20T10:59:23.000Z</published>
    <updated>2019-09-20T15:09:03.912Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1556909212-d5b604d0c90d?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=500&amp;q=60" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>最近面试的时候，面试官提的一个问题，在实体类（pojo）中是使用包装类还是基本类型？为什么？</p><p>我知道使用包装类型比较好，但是却忘记了好在哪里了。其实关于好在哪里，也不过就是需要把包装类和基本类型搞清楚。</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>首先,分析各自的优缺点：</p><h4 id="基本类型-以int类型为例子"><a href="#基本类型-以int类型为例子" class="headerlink" title="基本类型(以int类型为例子)"></a>基本类型(以int类型为例子)</h4><p><strong>优点</strong></p><ol><li><p>用于计算时效率高</p></li><li><p>不会由于常量池引起比较大小的错误(例如java integer对象判断两个数字是否相等)</p></li></ol><p><strong>缺点</strong></p><ol><li><p>当数据库中查询出结果之后封装结果集的时候，如果返回的值时null时,直接赋值给这个基本类型的字段时,会在运行时报出异常,不能将null赋给一个基本类型,而用Integer就不存在这样都的情况，这个情况暂时没有合适的避免办法.当没有默认值的情况下</p></li><li><p>当页面传来的值是只有字段没有值时或者没有传来对应字段对象时候，赋值给基本类型的值时就会抛出异常.(如：如果表单中没有对应字段存在，那么request中换取到一个为null的值)</p></li></ol><p><strong>缺点的规避方法：</strong><br>a. 设置在数据库中为该字段设置默认值。<br>b. 当用这个字段没有在表单中被提交时就会报错。</p><hr><h4 id="包装类型-Integer"><a href="#包装类型-Integer" class="headerlink" title="包装类型(Integer)"></a>包装类型(Integer)</h4><p><strong>优点</strong></p><ol><li>可以存放null,从数据库中查出值时可能会有null</li></ol><p><strong>缺点</strong></p><ol><li>不能用于两个Integer对象双等的方式来判断两个对象的值相等,会出现错误的。</li></ol><p><strong>缺点规避方法：</strong><br>a. 要用双等判断两个对象的值是否相等时,可以通过调用intValue方法来实现。</p><p>因此，综上所说，实体类采用包装类型比较好。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/78590948" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/78590948</a> 有了基本数据类型，为什么还需要包装类型</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1556909212-d5b604d0c90d?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=500&amp;amp;q=60&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java-Java版本的小爬虫demo</title>
    <link href="https://lijinhongpassion.github.io/codeant/dle2.html"/>
    <id>https://lijinhongpassion.github.io/codeant/dle2.html</id>
    <published>2019-09-03T13:24:39.000Z</published>
    <updated>2019-09-03T14:00:31.961Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1567492623339-d5dfb6325ea3?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1350&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>java版本的小爬虫，爬取的流程如下：</p><ul><li>登录Boss直聘</li><li>获取返回的cookies，以及请求头</li><li>运用http-client库模拟游览器请求，获取html，数据结构为字符串</li><li>利用jsoup库解析html</li></ul><p>完事！！！</p><p>demo地址：<a href="https://github.com/LiJinHongPassion/springboot/tree/master/springboot_crawler_demo" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/springboot/tree/master/springboot_crawler_demo</a></p><hr><h2 id="入门教程"><a href="#入门教程" class="headerlink" title="入门教程"></a>入门教程</h2><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--http请求库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.kevinsawicki<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>http-request<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--解析html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.11.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="CrawlerUtil-java"><a href="#CrawlerUtil-java" class="headerlink" title="CrawlerUtil.java"></a>CrawlerUtil.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.github.kevinsawicki.http.HttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述：Boss直聘 -- 小爬虫</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 官网github：https://github.com/kevinsawicki/http-request</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参考：https://blog.csdn.net/u011910290/article/details/75364917</span></span><br><span class="line"><span class="comment"> *      https://blog.csdn.net/zhanglei500038/article/details/74858395    jsoup</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 乱码问题：https://blog.csdn.net/mycar001/article/details/78391028</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/9/3-17,53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrawlerUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述: 获取整个html</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> LJH-1755497577 2019/9/3 19:02</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getData</span><span class="params">(String url)</span></span>&#123;</span><br><span class="line">        <span class="comment">//设置请求头</span></span><br><span class="line">        Map&lt;String,String&gt; headers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        headers.put(<span class="string">"accept"</span>, <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3"</span>);</span><br><span class="line">        <span class="comment">//解决乱码</span></span><br><span class="line">        <span class="comment">//headers.put("accept-encoding", "gzip, deflate, br");</span></span><br><span class="line">        headers.put(<span class="string">"accept-language"</span>, <span class="string">"zh-CN,zh;q=0.9"</span>);</span><br><span class="line">        headers.put(<span class="string">"cookie"</span>, <span class="string">"lastCity=101040100; _uab_collina=155989425705358786428292; _bl_uid=ejj1ezbR49w72poUUr06qa8iy55n; __c=1567474454; __g=-; Hm_lvt_194df3105ad7148dcf2b98a91b5e727a=1565361209,1566378390,1566981114,1567474455; __l=l=%2Fwww.zhipin.com%2F&amp;r=https%3A%2F%2Fwww.baidu.com%2Fs%3Fie%3DUTF-8%26wd%3Dboss%25E7%259B%25B4%25E8%2581%2598&amp;friend_source=0&amp;friend_source=0; __zp_stoken__=c688fL0GhqXlN%2FYY%2F2ydR1HFd8NS%2B8oaaNAjTZSdiGKLVMq%2BPk1q%2FaMCVkpzfOn1kk38E6u8nCHUaLXH2leUN3NrhA%3D%3D; __a=50395184.1559894257.1566981114.1567474454.68.6.4.68; Hm_lpvt_194df3105ad7148dcf2b98a91b5e727a=1567475125"</span>);</span><br><span class="line">        headers.put(<span class="string">"referer"</span>, <span class="string">"https,//www.zhipin.com/c101040100-p100101/?page=2&amp;ka=page-2"</span>);</span><br><span class="line">        headers.put(<span class="string">"upgrade-insecure-requests"</span>, <span class="string">"1"</span>);</span><br><span class="line">        headers.put(<span class="string">"user-agent"</span>, <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.75 Safari/537.36"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//get方法与之类似</span></span><br><span class="line">        String content = HttpRequest.post(url)</span><br><span class="line">                <span class="comment">//设置请求头</span></span><br><span class="line">                .headers(headers)</span><br><span class="line">                .body();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(content);</span></span><br><span class="line">         <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述: 解析html</span></span><br><span class="line"><span class="comment">     *      利用jsoup工具解析html</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> LJH-1755497577 2019/9/3 19:58</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">analysisData</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Document doc = Jsoup.parse(data);</span><br><span class="line">        Elements rows = doc.select(<span class="string">"div[class=job-list]"</span>).get(<span class="number">0</span>).select(<span class="string">"ul"</span>);</span><br><span class="line">        <span class="keyword">if</span> (rows.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"没有结果"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; rows.get(<span class="number">0</span>).select(<span class="string">"li"</span>).size(); i++)&#123;</span><br><span class="line">                String addr = rows.get(<span class="number">0</span>).select(<span class="string">"li"</span>).get(i).select(<span class="string">"div"</span>).get(<span class="number">0</span>).select(<span class="string">"div"</span>).get(<span class="number">0</span>)</span><br><span class="line">                        .select(<span class="string">"p"</span>).get(<span class="number">0</span>).text();</span><br><span class="line">                String jobName = rows.get(<span class="number">0</span>).select(<span class="string">"li"</span>).get(i).select(<span class="string">"div"</span>).get(<span class="number">0</span>).select(<span class="string">"div"</span>).get(<span class="number">0</span>)</span><br><span class="line">                        .select(<span class="string">"h3"</span>).get(<span class="number">0</span>).select(<span class="string">"a"</span>).get(<span class="number">0</span>).select(<span class="string">"div"</span>).get(<span class="number">0</span>).text();</span><br><span class="line">                String jobMoney = rows.get(<span class="number">0</span>).select(<span class="string">"li"</span>).get(i).select(<span class="string">"div"</span>).get(<span class="number">0</span>).select(<span class="string">"div"</span>).get(<span class="number">0</span>)</span><br><span class="line">                        .select(<span class="string">"h3"</span>).get(<span class="number">0</span>).select(<span class="string">"a"</span>).get(<span class="number">0</span>).select(<span class="string">"span"</span>).get(<span class="number">0</span>).text();</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"--------------------------- 查询结果 ---------------------------"</span>);</span><br><span class="line">                System.out.println(<span class="string">"工作名:"</span> + jobName);</span><br><span class="line">                System.out.println(<span class="string">"工薪:"</span> + jobMoney);</span><br><span class="line">                System.out.println(<span class="string">"地址:"</span> + addr);</span><br><span class="line">                System.out.println(<span class="string">"-----------------------------------------------------------------"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        getData("https://www.zhipin.com/c101040100-p100101/?page=2&amp;ka=page-2");</span></span><br><span class="line">        analysisData(getData(<span class="string">"https://www.zhipin.com/c101040100-p100101/?page=2&amp;ka=page-2"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="方法：getData-String-url"><a href="#方法：getData-String-url" class="headerlink" title="方法：getData(String url)"></a>方法：getData(String url)</h6><p>在获取html的时候，因为请求头设置的原因</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'accept-encoding':'gzip, deflate, br'</span><br></pre></td></tr></table></figure><p>浏览器对于从服务器中返回的对应的gzip压缩的网页，会自动解压缩，所以，其request的时候，添加对应的头，表明自己接受压缩后的数据。</p><p>而此代码中，如果也添加此头信息，结果就是，返回的压缩后的数据，没有解码，而将压缩后的数据当做普通的html文本来处理，当前显示出来的内容，是乱码了。</p><h6 id="方法：analysisData-String-data"><a href="#方法：analysisData-String-data" class="headerlink" title="方法：analysisData(String data)"></a>方法：analysisData(String data)</h6><p>解析html用的是jsoup，根据指定元素名获取指定节点</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dle2/1.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Elements rows = doc.select(<span class="string">"div[class=job-list]"</span>).get(<span class="number">0</span>).select(<span class="string">"ul"</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><ul><li>httpclient官网github：<a href="https://github.com/kevinsawicki/http-request" target="_blank" rel="noopener">https://github.com/kevinsawicki/http-request</a></li><li>httpclient参考：<a href="https://blog.csdn.net/u011910290/article/details/75364917" target="_blank" rel="noopener">https://blog.csdn.net/u011910290/article/details/75364917</a></li><li>jsoup使用：<a href="https://blog.csdn.net/zhanglei500038/article/details/74858395" target="_blank" rel="noopener">https://blog.csdn.net/zhanglei500038/article/details/74858395</a>    </li><li>乱码问题：<a href="https://blog.csdn.net/mycar001/article/details/78391028" target="_blank" rel="noopener">https://blog.csdn.net/mycar001/article/details/78391028</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1567492623339-d5dfb6325ea3?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1350&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="爬虫" scheme="https://lijinhongpassion.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python-爬虫小demo（Boss直聘）</title>
    <link href="https://lijinhongpassion.github.io/codeant/b32c.html"/>
    <id>https://lijinhongpassion.github.io/codeant/b32c.html</id>
    <published>2019-09-03T04:17:52.000Z</published>
    <updated>2019-09-03T05:01:29.304Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1562886812-41775a01195d?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1189&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="## 简述"></a>## 简述</h2><p>很早以前都知道Python爬虫的强大，但是一直没有尝试过，今天就来尝试一下写个Python的小爬虫</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h4 id="python环境"><a href="#python环境" class="headerlink" title="python环境"></a>python环境</h4><p>先介绍以下python的安装教程吧，我习惯于在windows上开发，所以讲一下windows和liunx的环境安装，针对Mac OS系统的安装自行百度。</p><h5 id="windows-10"><a href="#windows-10" class="headerlink" title="windows 10"></a>windows 10</h5><p>进入官网，<a href="https://www.python.org/downloads/windows/；选择稳定版本的windowsx86-64" target="_blank" rel="noopener">https://www.python.org/downloads/windows/；选择稳定版本的windowsx86-64</a> executable installer；下载打开后，<strong>选择自动配置环境变量</strong></p><p>over，就是这么简单（这相当于是java中的jdk安装）</p><h5 id="centos-7-x"><a href="#centos-7-x" class="headerlink" title="centos 7.x"></a>centos 7.x</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> py环境安装</span><br><span class="line"><span class="meta">#</span> 执行项目使用python3 xxx.py</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 安装依赖库（因为没有这些依赖库可能在源代码构件安装时因为缺失底层依赖库而失败）。</span><br><span class="line">yum -y install wget gcc zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wget https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz</span><br><span class="line">tar -xvf Python-3.7.4.tar</span><br><span class="line"></span><br><span class="line">cd Python-3.7.4</span><br><span class="line">./configure --prefix=/usr/local/python37 --enable-optimizations</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 环境变量</span><br><span class="line">cd ~</span><br><span class="line"><span class="meta">cat&gt;</span>.bash_profile&lt;&lt;EOF</span><br><span class="line">export PATH=$PATH:/usr/local/python37/bin</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">source .bash_profile</span><br><span class="line"></span><br><span class="line">echo "---------------测试------------------"</span><br><span class="line">python3 --version</span><br></pre></td></tr></table></figure><hr><h4 id="python编辑器"><a href="#python编辑器" class="headerlink" title="python编辑器"></a>python编辑器</h4><p>等同于Java开发工具idea，idea也可以用于python开发，这里我是用的是pycharm，安装可参考可参考：<a href="https://www.runoob.com/w3cnote/pycharm-windows-install.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/pycharm-windows-install.html</a></p><hr><h2 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h2><p>直聘网爬虫思路：</p><ul><li>获取cookie</li><li>模拟浏览器请求（request库）</li><li>抓取数据（XPath）</li><li>分析数据</li><li>保存数据</li></ul><p>main.py</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 直聘网招聘信息爬虫demo</span><br><span class="line"></span><br><span class="line">from lxml import etree</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">import Info</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> url = "https://www.zhipin.com/c101040100-p100101/?ka=sel-city-101040100"  # 接口地址</span><br><span class="line">url = "https://www.zhipin.com/c101040100-p100101/"  # 接口地址</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 消息头数据</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3',</span><br><span class="line">    'accept-encoding': 'gzip, deflate, br',</span><br><span class="line">    'accept-language': 'zh-CN,zh;q=0.9',</span><br><span class="line">    'cookie': 'lastCity=101040100; _uab_collina=155989425705358786428292; _bl_uid=ejj1ezbR49w72poUUr06qa8iy55n; __c=1567474454; __g=-; Hm_lvt_194df3105ad7148dcf2b98a91b5e727a=1565361209,1566378390,1566981114,1567474455; __l=l=%2Fwww.zhipin.com%2F&amp;r=https%3A%2F%2Fwww.baidu.com%2Fs%3Fie%3DUTF-8%26wd%3Dboss%25E7%259B%25B4%25E8%2581%2598&amp;friend_source=0&amp;friend_source=0; __zp_stoken__=c688fL0GhqXlN%2FYY%2F2ydR1HFd8NS%2B8oaaNAjTZSdiGKLVMq%2BPk1q%2FaMCVkpzfOn1kk38E6u8nCHUaLXH2leUN3NrhA%3D%3D; __a=50395184.1559894257.1566981114.1567474454.68.6.4.68; Hm_lpvt_194df3105ad7148dcf2b98a91b5e727a=1567475125',</span><br><span class="line">    # 'referer': 'https://www.zhipin.com/c101040100-p100101/',</span><br><span class="line">    'referer': 'https://www.zhipin.com/c101040100-p100101/?page=2&amp;ka=page-2',</span><br><span class="line">    'upgrade-insecure-requests': '1',</span><br><span class="line">    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.75 Safari/537.36'</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 获取html</span><br><span class="line">def getData(data_url, data_headers, data_payload):</span><br><span class="line">    r = requests.get(data_url, json=data_payload, headers=data_headers, verify=False)</span><br><span class="line">    s = str(r.content, 'utf8')</span><br><span class="line">    # print(s)</span><br><span class="line">    return s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 分析数据</span><br><span class="line"><span class="meta">#</span> 教程:https://www.cnblogs.com/lei0213/p/7506130.html</span><br><span class="line">def analysisData(data='', xpath_str_f='', xpath_str_b=''):</span><br><span class="line">    html = etree.HTML(data)</span><br><span class="line">    values = []</span><br><span class="line">    try:</span><br><span class="line">        for n in range(1, 20):</span><br><span class="line">            x = xpath_str_f + str(n) + xpath_str_b</span><br><span class="line">            if x == '' or x.__len__() == 0 :</span><br><span class="line">                break</span><br><span class="line">            values.append(html.xpath(x))</span><br><span class="line">    except Exception:</span><br><span class="line">        pass</span><br><span class="line">    else:</span><br><span class="line">        pass</span><br><span class="line">    # for i in values:</span><br><span class="line">    #     print(i[0].text)</span><br><span class="line">    return values</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 爬取一页的数据并打印</span><br><span class="line">def getOnePage(page_url):</span><br><span class="line">    r = getData(page_url, headers, payload)</span><br><span class="line">    names = analysisData(r, '//*[@id="main"]/div/div[2]/ul/li[', ']/div/div[1]/h3/a/div[1]')</span><br><span class="line">    moneys = analysisData(r, '//*[@id="main"]/div/div[2]/ul/li[', ']/div/div[1]/h3/a/span')</span><br><span class="line">    companyNames = analysisData(r, '//*[@id="main"]/div/div[2]/ul/li[', ']/div/div[2]/div/h3/a')</span><br><span class="line">    addrs = analysisData(r, '//*[@id="main"]/div/div[2]/ul/li[', ']/div/div[1]/p')</span><br><span class="line">    companyStatuss = analysisData(r, '//*[@id="main"]/div/div[2]/ul/li[', ']/div/div[2]/div/p')</span><br><span class="line"></span><br><span class="line">    infos = ''</span><br><span class="line">    print(names.__len__())</span><br><span class="line">    for i in range(1, names.__len__()):</span><br><span class="line">        info = Info.Info(names[i][0].text,</span><br><span class="line">                         moneys[i][0].text,</span><br><span class="line">                         companyNames[i][0].text,</span><br><span class="line">                         addrs[i][0].text,</span><br><span class="line">                         companyStatuss[i][0].text,)</span><br><span class="line"></span><br><span class="line">        if info == 'None' or info == None:</span><br><span class="line">            continue</span><br><span class="line">        # infos = infos + info.tostring()</span><br><span class="line">        print(info.tostring())</span><br><span class="line">    return infos</span><br><span class="line"></span><br><span class="line">for i in range(2, 4):</span><br><span class="line">    temp = url + '?page=' + str(i) + '&amp;ka=page-' + str(i)</span><br><span class="line">    print(temp)</span><br><span class="line">    getOnePage(temp)</span><br></pre></td></tr></table></figure><p>Info.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span>:</span></span><br><span class="line">    name = <span class="string">''</span></span><br><span class="line">    money = <span class="string">''</span></span><br><span class="line">    companyName = <span class="string">''</span></span><br><span class="line">    addr = <span class="string">''</span></span><br><span class="line">    companyStatus = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, money, companyName, addr, companyStatus)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.money = money</span><br><span class="line">        self.companyName = companyName</span><br><span class="line">        self.companyStatus = companyStatus</span><br><span class="line">        self.addr = addr</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tostring</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"name："</span> + self.name</span><br><span class="line">              + <span class="string">"\tmoney："</span> + self.money</span><br><span class="line">              + <span class="string">"\tcompanyName："</span> + self.companyName</span><br><span class="line">              + <span class="string">"\taddr："</span> + self.addr</span><br><span class="line">              + <span class="string">"\tcompanyStatus："</span> + self.companyStatus + <span class="string">"\n"</span></span><br><span class="line">              )</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1562886812-41775a01195d?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1189&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://lijinhongpassion.github.io/categories/python/"/>
    
    
      <category term="爬虫" scheme="https://lijinhongpassion.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="python" scheme="https://lijinhongpassion.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Java-由库存问题引发的思考</title>
    <link href="https://lijinhongpassion.github.io/codeant/dle3.html"/>
    <id>https://lijinhongpassion.github.io/codeant/dle3.html</id>
    <published>2019-08-30T10:57:04.000Z</published>
    <updated>2019-08-31T08:15:14.846Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1567060896516-630537369350?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>最近自己在写一个小的电商网站，由此想到一个问题，淘宝是如何解决双十一高并发的情况下商品不超买；我的解决方案就是加锁。加锁方式可以从两个方面出发：</p><ul><li>数据库层面加锁</li><li>应用程序加锁</li></ul><hr><h2 id="数据库层面加锁"><a href="#数据库层面加锁" class="headerlink" title="数据库层面加锁"></a>数据库层面加锁</h2><p>我相信大家都对悲观锁和乐观锁的思想有所了解，在下面我也会花一点时间来参数悲观锁和乐观锁思想；</p><h4 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h4><h6 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h6><p>假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁（共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程）。<strong>传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁</strong>。Java中synchronized和ReentrantLock等独占锁就是悲观锁思想的实现。</p><hr><h6 id="2-实现（mysql中的悲观锁实现）"><a href="#2-实现（mysql中的悲观锁实现）" class="headerlink" title="2. 实现（mysql中的悲观锁实现）"></a>2. 实现（mysql中的悲观锁实现）</h6><p>我会从MySQL的innodb引擎的表级锁和行级锁来解释悲观锁</p><p><em>innodb引擎的表级锁和行级锁是引擎自带锁，不需要我们手动实现</em></p><p><strong>行锁</strong></p><ul><li><p>读锁：读锁是共享的，多个客户可以同时读取同一个资源，但不允许其他客户修改。</p></li><li><p>写锁：写锁是排他的，写锁会阻塞其他的写锁和读锁。</p></li><li><p>注意：InnoDB只有通过索引条件检索数据才使用行级锁，否则，InnoDB将使用表锁</p></li></ul><p><strong>表锁</strong></p><ul><li><p>读读不阻塞：当前用户在读数据，其他的用户也在读数据，不会加锁</p></li><li><p>读写阻塞：当前用户在读数据，其他的用户不能修改当前用户读的数据，会加锁！</p></li><li><p>写写阻塞：当前用户在修改数据，其他的用户不能修改当前用户正在修改的数据，会加锁！</p></li></ul><p><strong>库存问题</strong></p><p>mysql的innodb引擎自带行锁与表锁，所以当多个线程同时下单的时候，其实是串行的，也就是一个线程执行完后再执行下一个线程，所以我们只需要从业务逻辑上判断只要商品的库存量大于0，我们就能够下单</p><p>update t_product set num = num -1 where product_id=? and num &gt; 0</p><hr><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><h6 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1. 概念"></a>1. 概念</h6><p>假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用<strong>版本号机制和CAS算法</strong>实现。乐观锁适用于多读的应用类型，这样可以提高吞吐量，像数据库提供的类似于write_condition机制，其实都是提供的乐观锁。在Java中java.util.concurrent.atomic包下面的原子变量类就是使用了乐观锁的一种实现方式CAS实现的。</p><hr><h6 id="2-实现"><a href="#2-实现" class="headerlink" title="2. 实现"></a>2. 实现</h6><p><strong>版本号机制</strong></p><p>一般是在数据表中加上一个数据版本号version字段，表示数据被修改的次数，当数据被修改时，version值会加一。当线程A要更新数据值时，在读取数据的同时也会读取version值，在提交更新时，若刚才读取到的version值为当前数据库中的version值相等时才更新，否则重试更新操作，直到更新成功。</p><p><strong>CAS算法</strong></p><p>compare and swap（比较与交换），是一种有名的无锁算法。无锁编程，即不使用锁的情况下实现多线程之间的变量同步，也就是在没有线程被阻塞的情况下实现变量的同步，所以也叫非阻塞同步（Non-blocking Synchronization）。CAS算法涉及到三个操作数</p><ul><li><p>需要读写的内存值 V</p></li><li><p>进行比较的值 A</p></li><li><p>拟写入的新值 B</p></li></ul><p>当且仅当 V 的值等于 A时，CAS通过原子方式用新值B来更新V的值，否则不会执行任何操作（比较和替换是一个原子操作）。一般情况下是一个自旋操作，即不断的重试。</p><hr><h6 id="3-缺点"><a href="#3-缺点" class="headerlink" title="3. 缺点"></a>3. 缺点</h6><p><strong>ABA问题</strong></p><p>如果一个变量V初次读取的时候是A值，并且在准备赋值的时候检查到它仍然是A值，那我们就能说明它的值没有被其他线程修改过了吗？很明显是不能的，因为在这段时间它的值可能被改为其他值，然后又改回A，那CAS操作就会误认为它从来没有被修改过。这个问题被称为CAS操作的 </p><hr><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>从上面对两种锁的介绍，我们知道两种锁各有优缺点，不可认为一种好于另一种，<strong>像乐观锁适用于写比较少的情况下（多读场景）</strong>，即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。但如果是多写的情况，一般会经常产生冲突，这就会导致上层应用会不断的进行retry，这样反倒是降低了性能，所以一般<strong>多写的场景下用悲观锁就比较合适</strong>。</p><hr><h2 id="应用程序加锁"><a href="#应用程序加锁" class="headerlink" title="应用程序加锁"></a>应用程序加锁</h2><p>关于此方面还有待学习，根据我自己的想法，我大致理清了一个思路</p><p>对于大型的秒杀系统，有多个mysql数据库集群和tomcat集群；</p><p>秒杀商品时，线程瞬间并发量高，数据库的IO操作十分耗时，系统吞吐量不高，无法保证多个mysql中的数据一致性；</p><p>解决思路：</p><ol><li>提前将秒杀商品库存、商品信息等存放于redis（因为mysql的IO耗时过长，redis的IO操作更为省时）</li><li>首先可以通过nginx限流（限定请求线程数）</li><li>在tomcat服务器上将所有秒杀线程集中存放在一处服务器进行排队（队列）， 将线程有序化</li></ol><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://zhuanlan.zhihu.com/p/40211594" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/40211594</a> 面试必备之乐观锁与悲观锁</p><p><a href="https://juejin.im/post/5b55b842f265da0f9e589e79#heading-11" target="_blank" rel="noopener">https://juejin.im/post/5b55b842f265da0f9e589e79#heading-11</a> 数据库两大神器【索引和锁】</p><p>导图下载地址](<a href="https://github.com/LiJinHongPassion/LiJinHongPassion.github.io/raw/master/codeant/dle3/%E5%BA%93%E5%AD%98%E9%97%AE%E9%A2%98.mmap" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/LiJinHongPassion.github.io/raw/master/codeant/dle3/%E5%BA%93%E5%AD%98%E9%97%AE%E9%A2%98.mmap</a>)</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dle3/1.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1567060896516-630537369350?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="锁" scheme="https://lijinhongpassion.github.io/tags/%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>Java-springboot整合caffeine本地缓存</title>
    <link href="https://lijinhongpassion.github.io/codeant/29cd.html"/>
    <id>https://lijinhongpassion.github.io/codeant/29cd.html</id>
    <published>2019-08-30T05:46:00.000Z</published>
    <updated>2019-08-30T11:18:59.778Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1562184965-071835a7e37a?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><hr><p>demo地址：<a href="https://github.com/LiJinHongPassion/springboot/tree/master/springboot_cache_caffeine_demo" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/springboot/tree/master/springboot_cache_caffeine_demo</a></p><hr><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><hr><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--caffeine-start--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ben-manes.caffeine<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>caffeine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--caffeine-end--&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p><strong>CacheConfig.java</strong></p><p>需要@EnableCaching开启缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 必须要指定这个Bean，refreshAfterWrite=5s这个配置属性才生效</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheLoader&lt;Object, Object&gt; <span class="title">cacheLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CacheLoader&lt;Object, Object&gt; cacheLoader = <span class="keyword">new</span> CacheLoader&lt;Object, Object&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">load</span><span class="params">(Object key)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 重写这个方法将oldValue值返回回去，进而刷新缓存</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">reload</span><span class="params">(Object key, Object oldValue)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cacheLoader;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>application.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cache:</span></span><br><span class="line"><span class="attr">    caffeine:</span></span><br><span class="line"><span class="attr">      spec:</span> <span class="string">initialCapacity=50,maximumSize=500,expireAfterAccess=5s,expireAfterWrite=10s,refreshAfterWrite=5s</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  initialCapacity=[integer]: 初始的缓存空间大小</span></span><br><span class="line"><span class="comment">#  maximumSize=[long]: 缓存的最大条数</span></span><br><span class="line"><span class="comment">#  maximumWeight=[long]: 缓存的最大权重</span></span><br><span class="line"><span class="comment">#  expireAfterAccess=[duration]: 最后一次写入或访问后经过固定时间过期</span></span><br><span class="line"><span class="comment">#  expireAfterWrite=[duration]: 最后一次写入后经过固定时间过期</span></span><br><span class="line"><span class="comment">#  refreshAfterWrite=[duration]: 创建缓存或者最近一次更新缓存后经过固定的时间间隔，刷新缓存</span></span><br><span class="line"><span class="comment">#  weakKeys: 打开key的弱引用</span></span><br><span class="line"><span class="comment">#  weakValues：打开value的弱引用</span></span><br><span class="line"><span class="comment">#  softValues：打开value的软引用</span></span><br><span class="line"><span class="comment">#  recordStats：开发统计功能</span></span><br></pre></td></tr></table></figure><hr><h4 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 用户实体</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span>: com.example.li.springboot_cache_redis_demo.entity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 用户实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: LJH</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2892248514883451461L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Long id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="服务层"><a href="#服务层" class="headerlink" title="服务层"></a>服务层</h4><p>spring提供了下面四种缓存注解：</p><p><strong>@CachePut</strong> 用于某个方法，每次被调用，此方法都执行，并把结果更新到PutCache配置的地方，一般用于缓存更新。</p><p><strong>@CacheEvict</strong> 调用有此注解的方法可以删除一个缓存</p><p><strong>@CachesEvict</strong> 调用有此注解的方法可以删除多个缓存，很多时候一个操作会涉及到多个缓存的更新或删除。</p><p><strong>@Cacheable</strong> 用于某个方法，希望这个方法添加缓存，此方法被调用的时候，如果有缓存，此方法不执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * UserService</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span>: com.example.li.springboot_cache_redis_demo.service.impl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: UserService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: LJH</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Long, User&gt; DATABASES = <span class="keyword">new</span> ConcurrentHashMap();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        DATABASES.put(<span class="number">1L</span>, <span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">"user1"</span>));</span><br><span class="line">        DATABASES.put(<span class="number">2L</span>, <span class="keyword">new</span> User(<span class="number">2L</span>, <span class="string">"user2"</span>));</span><br><span class="line">        DATABASES.put(<span class="number">3L</span>, <span class="keyword">new</span> User(<span class="number">3L</span>, <span class="string">"user3"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存或修改用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 操作结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@CachePut</span>(value = <span class="string">"user"</span>, key = <span class="string">"#user.id"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">saveOrUpdate</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        DATABASES.put(user.getId(), user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Cacheable</span>(value = <span class="string">"user"</span>, key = <span class="string">"#id"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 我们假设从数据库读取</span></span><br><span class="line">        System.out.println(<span class="string">"这是从数据库读取的，不是从缓存读取的"</span>);</span><br><span class="line">        <span class="keyword">return</span> DATABASES.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id key值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@CacheEvict</span>(value = <span class="string">"user"</span>, key = <span class="string">"#id"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        DATABASES.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/30-1:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"saveOrUpdate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">saveOrUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userService.saveOrUpdate(<span class="keyword">new</span> User(<span class="number">4L</span>, <span class="string">"user4"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"get"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"delete"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        userService.delete(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"d-ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>第一次访问<a href="http://localhost:8080/get?id=1后，5秒内再次访问的话，是访问的缓存，不是访问的模拟数据库" target="_blank" rel="noopener">http://localhost:8080/get?id=1后，5秒内再次访问的话，是访问的缓存，不是访问的模拟数据库</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1562184965-071835a7e37a?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="springboot" scheme="https://lijinhongpassion.github.io/tags/springboot/"/>
    
      <category term="caffeine" scheme="https://lijinhongpassion.github.io/tags/caffeine/"/>
    
      <category term="cache" scheme="https://lijinhongpassion.github.io/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>Java-springboot整合guava本地缓存</title>
    <link href="https://lijinhongpassion.github.io/codeant/ddcd.html"/>
    <id>https://lijinhongpassion.github.io/codeant/ddcd.html</id>
    <published>2019-08-30T04:14:38.000Z</published>
    <updated>2019-08-30T11:18:59.662Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1562102010-a7c462e96db7?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><hr><p>前面讲了springboot整合redis作为外部缓存，本文讲解springboot整合guava作为本地缓存，虽然guava已经被新版本的springboot弃用，但是guava还是值得学习的。后面有时间会搭建一个Caffeine缓存的demo</p><p>demo地址：<a href="https://github.com/LiJinHongPassion/springboot/tree/master/springboot_cache_guava_demo" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/springboot/tree/master/springboot_cache_guava_demo</a></p><hr><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><hr><h4 id="为什么要是用内部缓存"><a href="#为什么要是用内部缓存" class="headerlink" title="为什么要是用内部缓存"></a>为什么要是用内部缓存</h4><p>在系统中，有些数据量不大、不常变化，但是访问十分频繁，例如省、市、区数据。针对这种场景，可以将数据加载到应用的内存中，以提升系统的访问效率，减少无谓的数据库和网路的访问。</p><p>内部缓存的限制就是存放的数据总量不能超出内存容量，毕竟还是在 JVM 里的。</p><h4 id="最简单的内部缓存-Map"><a href="#最简单的内部缓存-Map" class="headerlink" title="最简单的内部缓存 - Map"></a>最简单的内部缓存 - Map</h4><p>如果只是需要将一些数据缓存起来，避免不必要的数据库查询，那么 Map 就可以满足。</p><p>对于字典型的数据，在项目启动的时候加载到 Map 中，程序就可以使用了，也很容易更新。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置存放的Map</span></span><br><span class="line">Map&lt;String, String&gt; configs = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line"><span class="comment">// 初始化或者刷新配置的</span></span><br><span class="line"><span class="function">Mappublic <span class="keyword">void</span> <span class="title">reloadConfigs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, String&gt; m = loadConfigFromDB();</span><br><span class="line">    configs = m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">configs.getOrDefault(<span class="string">"auth.id"</span>, <span class="string">"1"</span>);</span><br></pre></td></tr></table></figure><h4 id="功能强大的内部缓存-Guava-Cache-Caffeine"><a href="#功能强大的内部缓存-Guava-Cache-Caffeine" class="headerlink" title="功能强大的内部缓存 - Guava Cache / Caffeine"></a>功能强大的内部缓存 - Guava Cache / Caffeine</h4><p>如果你需要缓存有强大的性能，或者对缓存有更多的控制，可以使用 Guava 里的 Cache 组件。</p><p>它是 Guava 中的缓存工具包，是非常简单易用且功能强大的 JVM 内缓存，支持多种缓存过期策略。</p><p><strong>本地缓存的优点：</strong></p><ul><li>直接使用内存，速度快，通常存取的性能可以达到每秒千万级</li><li>可以直接使用 Java 对象存取</li></ul><p><strong>本地缓存的缺点：</strong></p><ul><li>数据保存在当前实例中，无法共享</li><li>重启应用会丢失</li></ul><h4 id="Guava-Cache-的替代者-Caffeine"><a href="#Guava-Cache-的替代者-Caffeine" class="headerlink" title="Guava Cache 的替代者 Caffeine"></a>Guava Cache 的替代者 Caffeine</h4><p>Spring 5 使用 Caffeine 来代替 Guava Cache，应该是从性能的角度考虑的。从很多性能测试来看 Caffeine 各方面的性能都要比 Guava 要好。</p><p>Caffeine 的 API 的操作功能和 Guava 是基本保持一致的，并且 Caffeine 为了兼容之前 Guava 的用户，做了一个 Guava 的 Adapter， 也是十分的贴心。</p><p>如果想了解更多请参考：<a href="https://blog.csdn.net/qq_38398479/article/details/70578876" target="_blank" rel="noopener">是什么让 Spring 5 放弃了使用 Guava Cache</a>？</p><hr><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><hr><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--guava-start--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.google.guava/guava --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>27.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--因为springboot新版本已经弃用guava作为本地缓存，所以需要切换到以前的spring版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--guava-end--&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p><strong>GuavaCacheConfig.java</strong></p><p>需要@EnableCaching开启缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuavaCacheConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        GuavaCacheManager cacheManager = <span class="keyword">new</span> GuavaCacheManager();</span><br><span class="line">        cacheManager.setCacheBuilder(</span><br><span class="line">                CacheBuilder.newBuilder().</span><br><span class="line">                        <span class="comment">//缓存过期时间</span></span><br><span class="line">                        expireAfterWrite(<span class="number">10</span>, TimeUnit.SECONDS).</span><br><span class="line">                        maximumSize(<span class="number">1000</span>));</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 用户实体</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span>: com.example.li.springboot_cache_redis_demo.entity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 用户实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: LJH</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2892248514883451461L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Long id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="服务层"><a href="#服务层" class="headerlink" title="服务层"></a>服务层</h4><p>spring提供了下面四种缓存注解：</p><p><strong>@CachePut</strong> 用于某个方法，每次被调用，此方法都执行，并把结果更新到PutCache配置的地方，一般用于缓存更新。</p><p><strong>@CacheEvict</strong> 调用有此注解的方法可以删除一个缓存</p><p><strong>@CachesEvict</strong> 调用有此注解的方法可以删除多个缓存，很多时候一个操作会涉及到多个缓存的更新或删除。</p><p><strong>@Cacheable</strong> 用于某个方法，希望这个方法添加缓存，此方法被调用的时候，如果有缓存，此方法不执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * UserService</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span>: com.example.li.springboot_cache_redis_demo.service.impl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: UserService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: LJH</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Long, User&gt; DATABASES = <span class="keyword">new</span> ConcurrentHashMap();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        DATABASES.put(<span class="number">1L</span>, <span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">"user1"</span>));</span><br><span class="line">        DATABASES.put(<span class="number">2L</span>, <span class="keyword">new</span> User(<span class="number">2L</span>, <span class="string">"user2"</span>));</span><br><span class="line">        DATABASES.put(<span class="number">3L</span>, <span class="keyword">new</span> User(<span class="number">3L</span>, <span class="string">"user3"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存或修改用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 操作结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@CachePut</span>(value = <span class="string">"user"</span>, key = <span class="string">"#user.id"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">saveOrUpdate</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        DATABASES.put(user.getId(), user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Cacheable</span>(value = <span class="string">"user"</span>, key = <span class="string">"#id"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 我们假设从数据库读取</span></span><br><span class="line">        System.out.println(<span class="string">"这是从数据库读取的，不是从缓存读取的"</span>);</span><br><span class="line">        <span class="keyword">return</span> DATABASES.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id key值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@CacheEvict</span>(value = <span class="string">"user"</span>, key = <span class="string">"#id"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        DATABASES.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/30-1:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"saveOrUpdate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">saveOrUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userService.saveOrUpdate(<span class="keyword">new</span> User(<span class="number">4L</span>, <span class="string">"user4"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"get"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"delete"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        userService.delete(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"d-ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>第一次访问<a href="http://localhost:8080/get?id=1后，10秒内再次访问的话，是访问的缓存，不是访问的模拟数据库" target="_blank" rel="noopener">http://localhost:8080/get?id=1后，10秒内再次访问的话，是访问的缓存，不是访问的模拟数据库</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1562102010-a7c462e96db7?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1074&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="springboot" scheme="https://lijinhongpassion.github.io/tags/springboot/"/>
    
      <category term="cache" scheme="https://lijinhongpassion.github.io/tags/cache/"/>
    
      <category term="guava" scheme="https://lijinhongpassion.github.io/tags/guava/"/>
    
  </entry>
  
  <entry>
    <title>Java-springboot2.x整合redis缓存</title>
    <link href="https://lijinhongpassion.github.io/codeant/df80.html"/>
    <id>https://lijinhongpassion.github.io/codeant/df80.html</id>
    <published>2019-08-30T02:46:37.000Z</published>
    <updated>2019-08-30T11:18:59.779Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1558981285-501cd9af9426?ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=750&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>在如今高并发的互联网应用中，缓存的地位举足轻重，对提升程序性能帮助不小。而 3.x开始的 Spring也引入了对 Cache的支持，那对于如今发展得如火如荼的 Spring Boot来说自然也是支持缓存特性的。缓存的方式有本地缓存和远程缓存。但本文将讲述如何将reids缓存（远程缓存）应用到 Spring Boot应用中。在以后会讲解本地缓存的搭建。</p><p>demo地址：<a href="https://github.com/LiJinHongPassion/springboot/tree/master/springboot_cache_redis_demo" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/springboot/tree/master/springboot_cache_redis_demo</a></p><hr><h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><p>springboot_cache_redis_demo<br>                │  SpringbootCacheRedisDemoApplication.java    启动类<br>                │<br>                ├─config<br>                │      RedisConfig.java    redis配置文件<br>                │<br>                ├─controller<br>                │      UserController.java<br>                │<br>                ├─entity<br>                │      User.java    实体类<br>                │<br>                └─service<br>                    │  UserService.java<br>                    │<br>                    └─impl<br>                            UserServiceImpl.java</p><hr><h2 id="入门搭建"><a href="#入门搭建" class="headerlink" title="入门搭建"></a>入门搭建</h2><hr><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis-start--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 对象池，使用redis时必须引入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--redis-end--&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p><strong>RedisConfig.java</strong></p><p>需要@EnableCaching开启缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * redis配置</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span>: com.example.li.springboot_cache_redis_demo.config</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: redis配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: LJH</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>(RedisAutoConfiguration.class)</span><br><span class="line"><span class="meta">@EnableCaching</span><span class="comment">//开启缓存</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认情况下的模板只能支持RedisTemplate&lt;String, String&gt;，也就是只能存入字符串，因此支持序列化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Serializable&gt; <span class="title">redisCacheTemplate</span><span class="params">(LettuceConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Serializable&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.setValueSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer());</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>application.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">47.103</span><span class="number">.20</span><span class="number">.12</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">    password:</span> </span><br><span class="line">    <span class="comment"># 连接超时时间（记得添加单位，Duration）</span></span><br><span class="line"><span class="attr">    timeout:</span> <span class="number">10000</span><span class="string">ms</span></span><br><span class="line">    <span class="comment"># Redis默认情况下有16个分片，这里配置具体使用的分片</span></span><br><span class="line"><span class="attr">    database:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">    lettuce:</span></span><br><span class="line"><span class="attr">      pool:</span></span><br><span class="line">        <span class="comment"># 连接池最大连接数（使用负值表示没有限制） 默认 8</span></span><br><span class="line"><span class="attr">        max-active:</span> <span class="number">8</span></span><br><span class="line">        <span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1</span></span><br><span class="line"><span class="attr">        max-wait:</span> <span class="bullet">-1</span><span class="string">ms</span></span><br><span class="line">        <span class="comment"># 连接池中的最大空闲连接 默认 8</span></span><br><span class="line"><span class="attr">        max-idle:</span> <span class="number">8</span></span><br><span class="line">        <span class="comment"># 连接池中的最小空闲连接 默认 0</span></span><br><span class="line"><span class="attr">        min-idle:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">  cache:</span></span><br><span class="line">    <span class="comment"># 一般来说是不用配置的，Spring Cache 会根据依赖的包自行装配</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line">    <span class="string">com.xkcoding:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><hr><h4 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 用户实体</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span>: com.example.li.springboot_cache_redis_demo.entity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 用户实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: LJH</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2892248514883451461L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Long id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="服务层"><a href="#服务层" class="headerlink" title="服务层"></a>服务层</h4><p>spring提供了下面四种缓存注解：</p><p><strong>@CachePut</strong> 用于某个方法，每次被调用，此方法都执行，并把结果更新到PutCache配置的地方，一般用于缓存更新。</p><p><strong>@CacheEvict</strong> 调用有此注解的方法可以删除一个缓存</p><p><strong>@CachesEvict</strong> 调用有此注解的方法可以删除多个缓存，很多时候一个操作会涉及到多个缓存的更新或删除。</p><p><strong>@Cacheable</strong> 用于某个方法，希望这个方法添加缓存，此方法被调用的时候，如果有缓存，此方法不执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * UserService</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span>: com.example.li.springboot_cache_redis_demo.service.impl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: UserService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: LJH</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Long, User&gt; DATABASES = <span class="keyword">new</span> ConcurrentHashMap();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        DATABASES.put(<span class="number">1L</span>, <span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">"user1"</span>));</span><br><span class="line">        DATABASES.put(<span class="number">2L</span>, <span class="keyword">new</span> User(<span class="number">2L</span>, <span class="string">"user2"</span>));</span><br><span class="line">        DATABASES.put(<span class="number">3L</span>, <span class="keyword">new</span> User(<span class="number">3L</span>, <span class="string">"user3"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存或修改用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 操作结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@CachePut</span>(value = <span class="string">"user"</span>, key = <span class="string">"#user.id"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">saveOrUpdate</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        DATABASES.put(user.getId(), user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Cacheable</span>(value = <span class="string">"user"</span>, key = <span class="string">"#id"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 我们假设从数据库读取</span></span><br><span class="line">        <span class="keyword">return</span> DATABASES.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id key值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@CacheEvict</span>(value = <span class="string">"user"</span>, key = <span class="string">"#id"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        DATABASES.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/30-1:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"saveOrUpdate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">saveOrUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userService.saveOrUpdate(<span class="keyword">new</span> User(<span class="number">4L</span>, <span class="string">"user4"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"get"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"delete"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        userService.delete(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"d-ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>每点击一个链接，观察redis对应库的数据变化</p><p><a href="http://localhost:8080/saveOrUpdate" target="_blank" rel="noopener">http://localhost:8080/saveOrUpdate</a><br><a href="http://localhost:8080/get?id=1" target="_blank" rel="noopener">http://localhost:8080/get?id=1</a><br><a href="http://localhost:8080/delete?id=1" target="_blank" rel="noopener">http://localhost:8080/delete?id=1</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1558981285-501cd9af9426?ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=750&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="springboot" scheme="https://lijinhongpassion.github.io/tags/springboot/"/>
    
      <category term="redis" scheme="https://lijinhongpassion.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Java-FastDFS+Nginx文件服务器搭建</title>
    <link href="https://lijinhongpassion.github.io/codeant/284d.html"/>
    <id>https://lijinhongpassion.github.io/codeant/284d.html</id>
    <published>2019-08-28T03:30:54.000Z</published>
    <updated>2019-08-28T11:04:41.522Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1556909211-36987daf7b4d?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>阿里云服务器不能使用公网ip，只能使用内网ip：<a href="https://blog.csdn.net/u010448530/article/details/83995347" target="_blank" rel="noopener">https://blog.csdn.net/u010448530/article/details/83995347</a> </p><p>storage配置、client测试、配置nginx访问中的ip设置为内网ip</p><p>通过nginx代理8888端口实现访问dfs</p><p>阿里云安全组需要开放相关8888端口</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><table><thead><tr><th>名称</th><th>说明</th><th>下载地址</th></tr></thead><tbody><tr><td>centos</td><td>7.6</td><td><a href="http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1810.iso" target="_blank" rel="noopener">centos链接</a></td></tr><tr><td>libfatscommon</td><td>FastDFS分离出的一些公用函数包</td><td>git clone <a href="https://github.com/happyfish100/libfastcommon.git" target="_blank" rel="noopener">https://github.com/happyfish100/libfastcommon.git</a> –depth 1</td></tr><tr><td>FastDFS</td><td>FastDFS本体</td><td>git clone <a href="https://github.com/happyfish100/fastdfs.git" target="_blank" rel="noopener">https://github.com/happyfish100/fastdfs.git</a> –depth 1</td></tr><tr><td>fastdfs-nginx-module</td><td>FastDFS和nginx的关联模块</td><td>git clone <a href="https://github.com/happyfish100/fastdfs-nginx-module.git" target="_blank" rel="noopener">https://github.com/happyfish100/fastdfs-nginx-module.git</a> –depth 1</td></tr><tr><td>nginx</td><td>nginx1.15.4</td><td>wget <a href="http://nginx.org/download/nginx-1.15.4.tar.gz" target="_blank" rel="noopener">http://nginx.org/download/nginx-1.15.4.tar.gz</a></td></tr></tbody></table><h2 id="磁盘目录"><a href="#磁盘目录" class="headerlink" title="磁盘目录"></a>磁盘目录</h2><table><thead><tr><th>说明</th><th>位置</th></tr></thead><tbody><tr><td>所有安装包</td><td>/opt/fastdfs</td></tr><tr><td>安装位置</td><td>/usr/local/fastdfs</td></tr><tr><td>数据存储位置</td><td>/home/dfs</td></tr><tr><td>#这里我为了方便把日志什么的都放到了dfs</td></tr></tbody></table><h2 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git gcc gcc-c++ make automake autoconf libtool pcre pcre-devel zlib zlib-devel openssl-devel wget vim -y</span><br></pre></td></tr></table></figure><p><a href="https://lijinhongpassion.github.io/codeant/b7d4.html">yum源更换为阿里云yum源的教程</a>，解决下载速度慢</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h4 id="安装libfatscommon"><a href="#安装libfatscommon" class="headerlink" title="安装libfatscommon"></a>安装libfatscommon</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.创建进入fastdfs文件夹</span><br><span class="line">mkdir /usr/local/fastdfs #安装目录</span><br><span class="line">mkdir /home/dfs #数据存储位置</span><br><span class="line">    mkdir /opt/fastdfs#安装包存放</span><br><span class="line">    cd /opt/fastdfs/</span><br><span class="line"><span class="meta">#</span> 2.下载</span><br><span class="line">    git clone https://github.com/happyfish100/libfastcommon.git --depth 1</span><br><span class="line"><span class="meta">#</span> 3.拷贝</span><br><span class="line">cp -r libfastcommon/ /usr/local/fastdfs/</span><br><span class="line"><span class="meta">#</span> 4.编译</span><br><span class="line">    cd /usr/local/fastdfs/libfastcommon/</span><br><span class="line">    ./make.sh &amp;&amp; ./make.sh install #编译安装</span><br></pre></td></tr></table></figure><h4 id="安装FastDFS"><a href="#安装FastDFS" class="headerlink" title="安装FastDFS"></a>安装FastDFS</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.进入安装包存放目录</span><br><span class="line">cd /opt/fastdfs</span><br><span class="line"><span class="meta">#</span> 2.下载</span><br><span class="line">git clone https://github.com/happyfish100/fastdfs.git --depth 1</span><br><span class="line"><span class="meta">#</span> 3.拷贝</span><br><span class="line">cp -r fastdfs/ /usr/local/fastdfs/</span><br><span class="line"><span class="meta">#</span> 4.编译</span><br><span class="line">    cd /usr/local/fastdfs/fastdfs/</span><br><span class="line">    ./make.sh &amp;&amp; ./make.sh install #编译安装</span><br><span class="line"><span class="meta">#</span> 5.配置文件准备</span><br><span class="line">    cp /etc/fdfs/tracker.conf.sample /etc/fdfs/tracker.conf</span><br><span class="line">    cp /etc/fdfs/storage.conf.sample /etc/fdfs/storage.conf</span><br><span class="line">    cp /etc/fdfs/client.conf.sample /etc/fdfs/client.conf #客户端文件，测试用</span><br><span class="line">    cp /usr/local/fastdfs/fastdfs/conf/http.conf /etc/fdfs/ #供nginx访问使用</span><br><span class="line">    cp /usr/local/fastdfs/fastdfs/conf/mime.types /etc/fdfs/ #供nginx访问使用</span><br></pre></td></tr></table></figure><h4 id="安装fastdfs-nginx-module"><a href="#安装fastdfs-nginx-module" class="headerlink" title="安装fastdfs-nginx-module"></a>安装fastdfs-nginx-module</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.进入安装包存放目录</span><br><span class="line">cd /opt/fastdfs </span><br><span class="line"><span class="meta">#</span> 2.下载</span><br><span class="line">git clone https://github.com/happyfish100/fastdfs-nginx-module.git --depth 1</span><br><span class="line"><span class="meta">#</span> 3.拷贝</span><br><span class="line">cp -r fastdfs-nginx-module/ /usr/local/fastdfs/</span><br><span class="line"><span class="meta">#</span> 4.复制配置文件</span><br><span class="line">cp /usr/local/fastdfs/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs</span><br></pre></td></tr></table></figure><h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.进入安装包存放目录</span><br><span class="line">cd /opt/fastdfs </span><br><span class="line"><span class="meta">#</span> 2.下载</span><br><span class="line">wget http://nginx.org/download/nginx-1.15.4.tar.gz #下载nginx压缩包</span><br><span class="line"><span class="meta">#</span> 3.解压</span><br><span class="line">tar -zxvf nginx-1.15.4.tar.gz -C /usr/local/fastdfs/ #解压</span><br><span class="line"><span class="meta">#</span> 4.进入解压目录</span><br><span class="line">cd /usr/local/fastdfs/nginx-1.15.4/</span><br><span class="line"><span class="meta">#</span> 5.添加fastdfs-nginx-module模块</span><br><span class="line">./configure --add-module=/usr/local/fastdfs/fastdfs-nginx-module/src/ </span><br><span class="line"><span class="meta">#</span> 6.编译</span><br><span class="line">make &amp;&amp; make install #编译安装</span><br></pre></td></tr></table></figure><h2 id="单机部署"><a href="#单机部署" class="headerlink" title="单机部署"></a>单机部署</h2><h4 id="tracker配置"><a href="#tracker配置" class="headerlink" title="tracker配置"></a>tracker配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 服务器ip为 192.168.26.101</span><br><span class="line"><span class="meta">#</span> 修改tracker.conf</span><br><span class="line">vim /etc/fdfs/tracker.conf</span><br><span class="line"><span class="meta">#</span> 需要修改的内容如下</span><br><span class="line">port=22122  # tracker服务器端口（默认22122,一般不修改）</span><br><span class="line">base_path=/home/dfs  # 存储日志和数据的根目录</span><br></pre></td></tr></table></figure><h4 id="storage配置"><a href="#storage配置" class="headerlink" title="storage配置"></a>storage配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fdfs/storage.conf</span><br><span class="line"><span class="meta">#</span> 需要修改的内容如下</span><br><span class="line">port=23000  # storage服务端口（默认23000,一般不修改）</span><br><span class="line">base_path=/home/dfs  # 数据和日志文件存储根目录</span><br><span class="line">store_path0=/home/dfs  # 第一个存储目录</span><br><span class="line">tracker_server=192.168.26.101:22122  # tracker服务器IP和端口</span><br><span class="line">http.server_port=8888  # http访问文件的端口(默认8888,看情况修改,和nginx中保持一致)</span><br></pre></td></tr></table></figure><h4 id="client测试"><a href="#client测试" class="headerlink" title="client测试"></a>client测试</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fdfs/client.conf</span><br><span class="line"><span class="meta">#</span> 需要修改的内容如下</span><br><span class="line">base_path=/home/dfs</span><br><span class="line">tracker_server=192.168.26.101:22122    # tracker服务器IP和端口</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 请先启动tracker、storage服务，参照启动标题</span><br><span class="line">systemctl stop firewalld.service &amp;&amp; /etc/init.d/fdfs_trackerd start &amp;&amp; /etc/init.d/fdfs_storaged start </span><br><span class="line"><span class="meta">#</span> 保存后测试,返回ID表示成功 如：group1/M00/00/00/xx.tar.gz</span><br><span class="line">fdfs_upload_file /etc/fdfs/client.conf /opt/fastdfs/nginx-1.15.4.tar.gz</span><br></pre></td></tr></table></figure><h4 id="配置nginx访问"><a href="#配置nginx访问" class="headerlink" title="配置nginx访问"></a>配置nginx访问</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fdfs/mod_fastdfs.conf</span><br><span class="line"><span class="meta">#</span>需要修改的内容如下</span><br><span class="line">tracker_server=192.168.26.101:22122  #tracker服务器IP和端口</span><br><span class="line">url_have_group_name=true</span><br><span class="line">store_path0=/home/dfs</span><br><span class="line"><span class="meta">#</span>配置nginx.config</span><br><span class="line">vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line"><span class="meta">#</span>添加如下配置</span><br><span class="line">server &#123;</span><br><span class="line">    listen       8888;    ## 该端口为storage.conf中的http.server_port相同</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    location ~/group[0-9]/ &#123;</span><br><span class="line">        ngx_fastdfs_module;</span><br><span class="line">    &#125;</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">    root   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 请先启动tracker、storage、nginx服务，关闭防火墙，参照启动标题</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>测试下载，用外部浏览器访问刚才已传过的nginx安装包,引用返回的ID</span><br><span class="line">http://192.168.26.101:8888/group1/M00/00/00/wKgAQ1pysxmAaqhAAA76tz-dVgg.tar.gz</span><br><span class="line"><span class="meta">#</span>弹出下载单机部署全部跑通</span><br></pre></td></tr></table></figure><h2 id="分布式部署"><a href="#分布式部署" class="headerlink" title="分布式部署"></a>分布式部署</h2><h4 id="tracker配置-1"><a href="#tracker配置-1" class="headerlink" title="tracker配置"></a>tracker配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 服务器ip为 192.168.26.101</span><br><span class="line"><span class="meta">#</span> 修改tracker.conf</span><br><span class="line">vim /etc/fdfs/tracker.conf</span><br><span class="line"><span class="meta">#</span> 需要修改的内容如下</span><br><span class="line">port=22122  # tracker服务器端口（默认22122,一般不修改）</span><br><span class="line">base_path=/home/dfs  # 存储日志和数据的根目录</span><br></pre></td></tr></table></figure><h4 id="storage配置-1"><a href="#storage配置-1" class="headerlink" title="storage配置"></a>storage配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fdfs/storage.conf</span><br><span class="line"><span class="meta">#</span> 需要修改的内容如下</span><br><span class="line">port=23000  # storage服务端口（默认23000,一般不修改）</span><br><span class="line">base_path=/home/dfs  # 数据和日志文件存储根目录</span><br><span class="line">store_path0=/home/dfs  # 第一个存储目录</span><br><span class="line">tracker_server=192.168.26.101:22122  # 服务器1(tracker服务器IP和端口)</span><br><span class="line">tracker_server=192.168.26.102:22122  # 服务器2</span><br><span class="line">tracker_server=192.168.26.103:22122  # 服务器3</span><br><span class="line">http.server_port=8888  # http访问文件的端口(默认8888,看情况修改,和nginx中保持一致)</span><br><span class="line">vim /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure><h4 id="client测试-1"><a href="#client测试-1" class="headerlink" title="client测试"></a>client测试</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fdfs/client.conf</span><br><span class="line"><span class="meta">#</span> 需要修改的内容如下</span><br><span class="line">base_path=/home/moe/dfs</span><br><span class="line">tracker_server=192.168.26.101:22122  # 服务器1(tracker服务器IP和端口)</span><br><span class="line">tracker_server=192.168.26.102:22122  # 服务器2</span><br><span class="line">tracker_server=192.168.26.103:22122  # 服务器3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 请先启动tracker、storage服务，参照启动标题</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 保存后测试,返回ID表示成功 如：group1/M00/00/00/xx.tar.gz</span><br><span class="line">fdfs_upload_file /etc/fdfs/client.conf /usr/local/src/nginx-1.15.4.tar.gz</span><br></pre></td></tr></table></figure><h4 id="配置nginx访问-1"><a href="#配置nginx访问-1" class="headerlink" title="配置nginx访问"></a>配置nginx访问</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fdfs/mod_fastdfs.conf</span><br><span class="line"><span class="meta">#</span> 需要修改的内容如下</span><br><span class="line">tracker_server=192.168.52.2:22122  # 服务器1</span><br><span class="line">tracker_server=192.168.52.3:22122  # 服务器2</span><br><span class="line">tracker_server=192.168.52.4:22122  # 服务器3</span><br><span class="line">url_have_group_name=true</span><br><span class="line">store_path0=/home/dfs</span><br><span class="line"><span class="meta">#</span> 配置nginx.config</span><br><span class="line">vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line"><span class="meta">#</span> 添加如下配置</span><br><span class="line">server &#123;</span><br><span class="line">    listen       8888;    ## 该端口为storage.conf中的http.server_port相同</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    location ~/group[0-9]/ &#123;</span><br><span class="line">        ngx_fastdfs_module;</span><br><span class="line">    &#125;</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">    root   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><h4 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 不关闭防火墙的话无法使用</span><br><span class="line">systemctl stop firewalld.service # 关闭</span><br><span class="line">systemctl restart firewalld.service # 重启</span><br></pre></td></tr></table></figure><h4 id="tracker"><a href="#tracker" class="headerlink" title="tracker"></a>tracker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/fdfs_trackerd start # 启动tracker服务</span><br><span class="line">/etc/init.d/fdfs_trackerd restart # 重启动tracker服务</span><br><span class="line">/etc/init.d/fdfs_trackerd stop # 停止tracker服务</span><br><span class="line">chkconfig fdfs_trackerd on # 自启动tracker服务</span><br></pre></td></tr></table></figure><h4 id="storage"><a href="#storage" class="headerlink" title="storage"></a>storage</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/fdfs_storaged start # 启动storage服务</span><br><span class="line">/etc/init.d/fdfs_storaged restart # 重动storage服务</span><br><span class="line">/etc/init.d/fdfs_storaged stop # 停止动storage服务</span><br><span class="line">chkconfig fdfs_storaged on # 自启动storage服务</span><br></pre></td></tr></table></figure><h4 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx # 启动nginx</span><br><span class="line">/usr/local/nginx/sbin/nginx -s reload # 重启nginx</span><br><span class="line">/usr/local/nginx/sbin/nginx -s stop # 停止nginx</span><br></pre></td></tr></table></figure><h4 id="检测集群"><a href="#检测集群" class="headerlink" title="检测集群"></a>检测集群</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/fdfs_monitor /etc/fdfs/storage.conf</span><br><span class="line"><span class="meta">#</span> 会显示会有几台服务器 有3台就会 显示 Storage 1-Storage 3的详细信息</span><br></pre></td></tr></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tracker_server # 有几台服务器写几个</span><br><span class="line">group_name # 地址的名称的命名</span><br><span class="line">bind_addr # 服务器ip绑定</span><br><span class="line">store_path_count # store_path(数字)有几个写几个</span><br><span class="line">store_path(数字) # 设置几个储存地址写几个 从0开始</span><br></pre></td></tr></table></figure><h4 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">如果不是root 用户 你必须在除了cd的命令之外 全部加sudo</span><br><span class="line">如果不是root 用户 编译和安装分开进行 先编译再安装</span><br><span class="line">如果上传成功 但是nginx报错404 先检查mod_fastdfs.conf文件中的store_path0是否一致</span><br><span class="line">如果nginx无法访问 先检查防火墙 和 mod_fastdfs.conf文件tracker_server是否一致</span><br><span class="line">如果不是在/usr/local/src文件夹下安装 可能会编译出错</span><br></pre></td></tr></table></figure><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p>参考：<a href="http://www.leftso.com/blog/244" target="_blank" rel="noopener">http://www.leftso.com/blog/244</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.停止服务</span><br><span class="line">service fdfs_trackerd stop</span><br><span class="line">service fdfs_storaged stop</span><br><span class="line"><span class="meta">#</span> 2.通过storage.conf找到base_path和store_path然后删除</span><br><span class="line">cat /etc/fdfs/storage.conf |grep base_path</span><br><span class="line">cat /etc/fdfs/storage.conf |grep store_path</span><br><span class="line"><span class="meta">#</span> 删除## 注意:如果有未备份的文件，请先备份再删除</span><br><span class="line">rm -rf 查询出来的base_path路径</span><br><span class="line">rm -rf 查询出来的store_path路径</span><br><span class="line"><span class="meta">#</span> 3.通过tracker.conf找到base_path然后删除</span><br><span class="line">cat /etc/fdfs/tracker.conf |grep base_path</span><br><span class="line"><span class="meta">#</span> 删除</span><br><span class="line">rm –rf 查询出来的base_path路径</span><br><span class="line"><span class="meta">#</span> 4.删除配置文件目录</span><br><span class="line">rm -rf /etc/fdfs/</span><br><span class="line"><span class="meta">#</span> 5.删除链接文件</span><br><span class="line"><span class="meta">#</span> 删除tracker的链接文件</span><br><span class="line">    rm –rf /usr/local/bin/fdfs_trackerd</span><br><span class="line">    rm –rf /usr/local/bin/stop.sh</span><br><span class="line">    rm –rf /usr/local/bin/restart.sh</span><br><span class="line">    # 删除storage的链接文件</span><br><span class="line">    rm –rf /usr/local/bin/fdfs_storaged</span><br><span class="line"><span class="meta">#</span> 6.删除/usr/bin目录下FastDFS的可执行文件</span><br><span class="line">rm -rf  /usr/bin/fdfs_*</span><br><span class="line"><span class="meta">#</span> 7.删除/usr/include/目录下FastDFS相关的shell脚本</span><br><span class="line">rm -rf /usr/include/fastdfs/</span><br><span class="line"><span class="meta">#</span> 8.删除/usr/lib64目录下的库文件</span><br><span class="line">rm -rf libfdfsclient*</span><br><span class="line"><span class="meta">#</span> 9.删除/usr/lib/目录下的库</span><br><span class="line">rm -rf libfdfsclient*</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1556909211-36987daf7b4d?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="nginx" scheme="https://lijinhongpassion.github.io/tags/nginx/"/>
    
      <category term="fastdfs" scheme="https://lijinhongpassion.github.io/tags/fastdfs/"/>
    
  </entry>
  
  <entry>
    <title>Java-springboot整合security+jwt权限系统设计</title>
    <link href="https://lijinhongpassion.github.io/codeant/dle4.html"/>
    <id>https://lijinhongpassion.github.io/codeant/dle4.html</id>
    <published>2019-08-28T01:35:09.000Z</published>
    <updated>2019-08-28T03:02:21.220Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1563394927360-08299fbdadb3?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><ul><li><p><strong>关于 Spring Security</strong><br>Web系统的认证和权限模块也算是一个系统的基础设施了，几乎任何的互联网服务都会涉及到这方面的要求。在Java EE领域，成熟的安全框架解决方案一般有 Apache Shiro、Spring Security等两种技术选型。Apache Shiro简单易用也算是一大优势，但其功能还是远不如 Spring Security强大。Spring Security可以为 Spring 应用提供声明式的安全访问控制，起通过提供一系列可以在 Spring应用上下文中可配置的Bean，并利用 Spring IoC和 AOP等功能特性来为应用系统提供声明式的安全访问控制功能，减少了诸多重复工作。</p></li><li><p><strong>关于JWT</strong><br>JSON Web Token (JWT)，是在网络应用间传递信息的一种基于 JSON的开放标准（(RFC 7519)，用于作为JSON对象在不同系统之间进行安全地信息传输。主要使用场景一般是用来在 身份提供者和服务提供者间传递被认证的用户身份信息。关于JWT的科普，可以看看阮一峰老师的《JSON Web Token 入门教程》。</p></li></ul><p>本文则结合 Spring Security和 JWT两大利器来打造一个简易的权限系统。</p><p>demo地址：<a href="https://github.com/LiJinHongPassion/springboot/tree/master/springbt_security_jwt" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/springboot/tree/master/springbt_security_jwt</a></p><hr><h2 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h2><p>springbt_security_jwt<br>    │  SpringbtSecurityJwtApplication.java    启动类<br>    │<br>    ├─comm<br>    │      Const.java    常量类<br>    │<br>    ├─config<br>    │      WebSecurityConfig.java    Spring Security配置类<br>    │<br>    ├─controller<br>    │      JwtAuthController.java<br>    │      TestController.java<br>    │<br>    ├─database<br>    │      UserRepository.java    模拟数据源<br>    │<br>    ├─filter<br>    │      JwtTokenFilter.java    jwt过滤器<br>    │<br>    ├─model<br>    │  └─entity<br>    │          Role.java    角色类<br>    │          User.java    用户类<br>    │<br>    ├─service<br>    │  │  AuthService.java    权限服务<br>    │  │  UserService.java<br>    │  │<br>    │  └─impl<br>    │          AuthServiceImpl.java    权限服务接口<br>    │<br>    └─util<br>            JwtTokenUtil.java    jwt工具类（生成jwt和验证jwt）</p><hr><h2 id="入门教程"><a href="#入门教程" class="headerlink" title="入门教程"></a>入门教程</h2><h4 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h4><p><strong>role.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/23-10:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Role</span><span class="params">(Long id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>user.java</strong></p><p>此处所创建的 User类继承了 Spring Security的 UserDetails接口，从而成为了一个符合 Security安全的用户，即通过继承 UserDetails，即可实现 Security中相关的安全功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/23-10:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getRoles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoles</span><span class="params">(List&lt;Role&gt; roles)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roles = roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Long id, String username, String password, List&lt;Role&gt; roles)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">        <span class="keyword">this</span>.roles = roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面为实现UserDetails而需要的重写方法！</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        List&lt;GrantedAuthority&gt; authorities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Role role : roles) &#123;</span><br><span class="line">            authorities.add( <span class="keyword">new</span> SimpleGrantedAuthority( role.getName() ) );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="jwt相关类"><a href="#jwt相关类" class="headerlink" title="jwt相关类"></a>jwt相关类</h4><p><strong>Const.java</strong></p><p>常量类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/23-10:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Const</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> EXPIRATION_TIME = <span class="number">432_000_000</span>;     <span class="comment">// 5天(以毫秒ms计)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SECRET = <span class="string">"CodeAntSecret"</span>;      <span class="comment">// JWT密码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOKEN_PREFIX = <span class="string">"Bearer"</span>;         <span class="comment">// Token前缀</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HEADER_STRING = <span class="string">"Authorization"</span>; <span class="comment">// 存放Token的Header Key</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JwtTokenUtil,java</strong></p><p>主要用于对 JWT Token进行各项操作，比如生成Token、验证Token、刷新Token等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH jwt工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/23-10:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtTokenUtil</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">5625635588908941275L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CLAIM_KEY_USERNAME = <span class="string">"sub"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CLAIM_KEY_CREATED = <span class="string">"created"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsernameFromToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        String username;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Claims claims = getClaimsFromToken(token);</span><br><span class="line">            username = claims.getSubject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            username = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreatedDateFromToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        Date created;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Claims claims = getClaimsFromToken(token);</span><br><span class="line">            created = <span class="keyword">new</span> Date((Long) claims.get(CLAIM_KEY_CREATED));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            created = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> created;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getExpirationDateFromToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        Date expiration;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Claims claims = getClaimsFromToken(token);</span><br><span class="line">            expiration = claims.getExpiration();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            expiration = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> expiration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Claims <span class="title">getClaimsFromToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        Claims claims;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            claims = Jwts.parser()</span><br><span class="line">                    .setSigningKey( Const.SECRET )</span><br><span class="line">                    .parseClaimsJws(token)</span><br><span class="line">                    .getBody();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            claims = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Date <span class="title">generateExpirationDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Date(System.currentTimeMillis() + Const.EXPIRATION_TIME * <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Boolean <span class="title">isTokenExpired</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Date expiration = getExpirationDateFromToken(token);</span><br><span class="line">        <span class="keyword">return</span> expiration.before(<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Boolean <span class="title">isCreatedBeforeLastPasswordReset</span><span class="params">(Date created, Date lastPasswordReset)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (lastPasswordReset != <span class="keyword">null</span> &amp;&amp; created.before(lastPasswordReset));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generateToken</span><span class="params">(UserDetails userDetails)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; claims = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        claims.put(CLAIM_KEY_USERNAME, userDetails.getUsername());</span><br><span class="line">        claims.put(CLAIM_KEY_CREATED, <span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">return</span> generateToken(claims);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">generateToken</span><span class="params">(Map&lt;String, Object&gt; claims)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .setClaims(claims)</span><br><span class="line">                .setExpiration(generateExpirationDate())</span><br><span class="line">                .signWith(SignatureAlgorithm.HS512, Const.SECRET )</span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">canTokenBeRefreshed</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !isTokenExpired(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">refreshToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        String refreshedToken;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Claims claims = getClaimsFromToken(token);</span><br><span class="line">            claims.put(CLAIM_KEY_CREATED, <span class="keyword">new</span> Date());</span><br><span class="line">            refreshedToken = generateToken(claims);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            refreshedToken = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> refreshedToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">validateToken</span><span class="params">(String token, UserDetails userDetails)</span> </span>&#123;</span><br><span class="line">        User user = (User) userDetails;</span><br><span class="line">        <span class="keyword">final</span> String username = getUsernameFromToken(token);</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">                username.equals(user.getUsername())</span><br><span class="line">                        &amp;&amp; !isTokenExpired(token)</span><br><span class="line">                        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JwtTokenFilter.java</strong></p><p>创建Token过滤器，用于每次外部对接口请求时的Token处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/23-10:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtTokenFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtTokenUtil jwtTokenUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span> <span class="params">( HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String authHeader = request.getHeader( Const.HEADER_STRING );</span><br><span class="line">        <span class="keyword">if</span> (authHeader != <span class="keyword">null</span> &amp;&amp; authHeader.startsWith( Const.TOKEN_PREFIX )) &#123;</span><br><span class="line">            <span class="keyword">final</span> String authToken = authHeader.substring( Const.TOKEN_PREFIX.length() );</span><br><span class="line">            String username = jwtTokenUtil.getUsernameFromToken(authToken);</span><br><span class="line">            <span class="keyword">if</span> (username != <span class="keyword">null</span> &amp;&amp; SecurityContextHolder.getContext().getAuthentication() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                UserDetails userDetails = <span class="keyword">this</span>.userDetailsService.loadUserByUsername(username);</span><br><span class="line">                <span class="keyword">if</span> (jwtTokenUtil.validateToken(authToken, userDetails)) &#123;</span><br><span class="line">                        UsernamePasswordAuthenticationToken authentication = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(</span><br><span class="line">                                userDetails, <span class="keyword">null</span>, userDetails.getAuthorities());</span><br><span class="line">                        authentication.setDetails(<span class="keyword">new</span> WebAuthenticationDetailsSource().buildDetails(</span><br><span class="line">                                request));</span><br><span class="line">                        SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="service业务编写"><a href="#service业务编写" class="headerlink" title="service业务编写"></a>service业务编写</h4><p><strong>AuthService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/23-10:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AuthService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">register</span><span class="params">( User userToAdd )</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">login</span><span class="params">( String username, String password )</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>AuthServiceImpl.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/23-10:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthServiceImpl</span> <span class="keyword">implements</span> <span class="title">AuthService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtTokenUtil jwtTokenUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 登录</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">( String username, String password )</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        UsernamePasswordAuthenticationToken upToken = <span class="keyword">new</span> UsernamePasswordAuthenticationToken( username, password );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Authentication authentication = authenticationManager.authenticate(upToken);</span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过用户名获取用户</span></span><br><span class="line">        <span class="keyword">final</span> UserDetails userDetails = userDetailsService.loadUserByUsername( username );</span><br><span class="line">        <span class="keyword">final</span> String token = jwtTokenUtil.generateToken(userDetails);</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">register</span><span class="params">( User userToAdd )</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> String username = userToAdd.getUsername();</span><br><span class="line">        <span class="keyword">if</span>( userRepository.findByUsername(username)!=<span class="keyword">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加密密码，与WebSecurityConfig加密方式对应</span></span><br><span class="line">        BCryptPasswordEncoder encoder = <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">        <span class="keyword">final</span> String rawPassword = userToAdd.getPassword();</span><br><span class="line">        userToAdd.setPassword( encoder.encode(rawPassword) );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userRepository.save(userToAdd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>UserService.java</strong></p><p>需要实现UserDetailsService接口，实现安全验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/23-10:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据用户名加载用户信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        User user = userRepository.findByUsername(s);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"用户不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h4><p><strong>WebSecurityConfig.java</strong></p><p>这是一个高度综合的配置类，主要是通过重写 <code>WebSecurityConfigurerAdapter</code> 的部分 <code>configure</code>配置，来实现用户自定义的部分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/23-10:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled=<span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//jwt过滤器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JwtTokenFilter <span class="title">authenticationTokenFilterBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JwtTokenFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationManager <span class="title">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证service的加密方式</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">( AuthenticationManagerBuilder auth )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.userDetailsService( userService ).passwordEncoder( <span class="keyword">new</span> BCryptPasswordEncoder() );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">( HttpSecurity httpSecurity )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//关闭打开的csrf（跨域）保护</span></span><br><span class="line">        httpSecurity.csrf().disable()</span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(HttpMethod.OPTIONS, <span class="string">"/**"</span>).permitAll()</span><br><span class="line">                .antMatchers(HttpMethod.POST, <span class="string">"/authentication/**"</span>).permitAll()</span><br><span class="line">                .antMatchers(HttpMethod.POST).authenticated()</span><br><span class="line">                .antMatchers(HttpMethod.PUT).authenticated()</span><br><span class="line">                .antMatchers(HttpMethod.DELETE).authenticated()</span><br><span class="line">                .antMatchers(HttpMethod.GET).authenticated();</span><br><span class="line"></span><br><span class="line">        httpSecurity</span><br><span class="line">                .addFilterBefore(authenticationTokenFilterBean(), UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">        httpSecurity.headers().cacheControl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><h6 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h6><p><strong>UserRepository.java</strong></p><p>用户名：codeAnt，密码：codeAnt123，权限：ROLE_NORMAL</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/23-10:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Role&gt; roles = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> &#123;</span><br><span class="line">        roles.add(<span class="keyword">new</span> Role(Long.valueOf(<span class="string">"1"</span>), <span class="string">"ROLE_NORMAL"</span>));</span><br><span class="line">        <span class="comment">//roles.add(new Role(Long.valueOf("2"), "ROLE_ADMIN"));</span></span><br><span class="line">        users.add(<span class="keyword">new</span> User(Long.valueOf(<span class="string">"11621"</span>), <span class="string">"codeAnt"</span>, <span class="string">"$2a$10$Gw.Cf/uL3o21c6jpSHmdY..pi.K9P0KHummmVadYbnMcB1woMa5t."</span>, roles));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findByUsername</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(User user : users)&#123;</span><br><span class="line">            <span class="keyword">if</span>(user.getUsername().equals(s))&#123;</span><br><span class="line">                <span class="keyword">return</span> user;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">save</span><span class="params">(User userToAdd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(findByUsername(userToAdd.getUsername()) == <span class="keyword">null</span>)&#123;</span><br><span class="line">            users.add(userToAdd);</span><br><span class="line">            <span class="keyword">return</span> userToAdd;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h6><p>登录和注册的 Controller：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author LJH</span><br><span class="line"> * 20190312</span><br><span class="line"> */</span><br><span class="line">@RestController</span><br><span class="line">public class JwtAuthController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private AuthService authService;</span><br><span class="line"></span><br><span class="line">    // 登录</span><br><span class="line">    @RequestMapping(value = &quot;/authentication/login&quot;, method = RequestMethod.POST)</span><br><span class="line">    public String createToken( String username,String password ) throws AuthenticationException &#123;</span><br><span class="line">        return authService.login( username, password );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 注册</span><br><span class="line">    @RequestMapping(value = &quot;/authentication/register&quot;, method = RequestMethod.POST)</span><br><span class="line">    public User register( @RequestBody User addedUser ) throws AuthenticationException &#123;</span><br><span class="line">        return authService.register(addedUser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再编写一个测试权限的 Controller：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author LJH</span><br><span class="line"> * @date 2019/8/23-10:35</span><br><span class="line"> * @QQ 1755497577</span><br><span class="line"> */</span><br><span class="line">@RestController</span><br><span class="line">public class TestController &#123;</span><br><span class="line"></span><br><span class="line">    // 测试普通权限</span><br><span class="line">    @PreAuthorize(&quot;hasAuthority(&apos;ROLE_NORMAL&apos;)&quot;)</span><br><span class="line">    @RequestMapping( value=&quot;/normal/test&quot;, method = RequestMethod.GET )</span><br><span class="line">    public String test1() &#123;</span><br><span class="line">        return &quot;ROLE_NORMAL /normal/test接口调用成功！&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 测试管理员权限</span><br><span class="line">    @PreAuthorize(&quot;hasAuthority(&apos;ROLE_ADMIN&apos;)&quot;)</span><br><span class="line">    @RequestMapping( value = &quot;/admin/test&quot;, method = RequestMethod.GET )</span><br><span class="line">    public String test2() &#123;</span><br><span class="line">        return &quot;ROLE_ADMIN /admin/test接口调用成功！&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里给出两个测试接口用于测试权限相关问题，其中接口 <code>/normal/test</code>需要用户具备普通角色（<code>ROLE_NORMAL</code>）即可访问，而接口<code>/admin/test</code>则需要用户具备管理员角色（<code>ROLE_ADMIN</code>）才可以访问。</p><h2 id="启动验证"><a href="#启动验证" class="headerlink" title="启动验证"></a>启动验证</h2><p><strong>数据源用户信息：</strong></p><p>用户名：codeAnt，密码：codeAnt123，权限：ROLE_NORMAL</p><p><strong>验证流程：</strong></p><ul><li>登录：登录获取token</li><li>未携带token访问普通权限</li><li>携带token普通权限</li><li>携带token管理员权限</li></ul><hr><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p><strong>登录</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dle4/c1.png" alt></p><p><strong>未携带token访问普通权限</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dle4/c3.png" alt></p><p><strong>携带token普通权限</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dle4/c2.png" alt></p><p><strong>携带token管理员权限</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dle4/c4.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1563394927360-08299fbdadb3?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="springboot" scheme="https://lijinhongpassion.github.io/tags/springboot/"/>
    
      <category term="jwt" scheme="https://lijinhongpassion.github.io/tags/jwt/"/>
    
      <category term="security" scheme="https://lijinhongpassion.github.io/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>Java-JustAuth第三方授权项目入门使用教程</title>
    <link href="https://lijinhongpassion.github.io/codeant/dle5.html"/>
    <id>https://lijinhongpassion.github.io/codeant/dle5.html</id>
    <published>2019-08-23T12:59:04.000Z</published>
    <updated>2019-08-23T15:15:21.419Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1556742205-e10c9486e506?ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="1-简述"><a href="#1-简述" class="headerlink" title="1. 简述"></a>1. 简述</h2><p>应用场景：在搭建网站过程中，我们可能需要涉及到第三方登录，例如qq，微信，github，钉钉等；常规的办法是到相应的官网上去，集成第三方的sdk来实现授权登录。</p><p>解决方案：JustAuth集成了实际中应用的授权登录，能够快速的进行授权；</p><p>个人demo：<a href="https://github.com/LiJinHongPassion/springboot/tree/master/springboot_justauth_demo" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/springboot/tree/master/springboot_justauth_demo</a></p><hr><h2 id="2-知识理论"><a href="#2-知识理论" class="headerlink" title="2. 知识理论"></a>2. 知识理论</h2><p>在这之前，你需要了解：</p><p><strong><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener">OAuth2.0</a></strong>：OAuth是一个关于授权（authorization）的开放网络标准</p><hr><h2 id="3-授权流程"><a href="#3-授权流程" class="headerlink" title="3. 授权流程"></a>3. 授权流程</h2><p>这里以GitHub为例子，需求是A网站需要集成GitHub的登录授权，流程图如下：</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dle5/1.png" alt></p><p><strong>解释上图流程：</strong></p><ol><li>针对不同的第三方平台，我们需要拥有他的平台账号进入他的开发者中心；</li><li>进入他的开发者中心后，我们需要找到<strong>创建应用</strong>类似的栏目，然后将A网站添加进去，设置回调url，并记录下 id 和 secret；</li><li>最后我们就只需要使用工具实现授权</li></ol><hr><h2 id="4-实例：GitHub"><a href="#4-实例：GitHub" class="headerlink" title="4. 实例：GitHub"></a>4. 实例：GitHub</h2><h4 id="4-1-获取账号"><a href="#4-1-获取账号" class="headerlink" title="4.1. 获取账号"></a>4.1. 获取账号</h4><p>需要账号的自行去注册：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></p><h4 id="4-2-创建应用"><a href="#4-2-创建应用" class="headerlink" title="4.2. 创建应用"></a>4.2. 创建应用</h4><p>进入开发者设置：<a href="https://github.com/settings/developers" target="_blank" rel="noopener">https://github.com/settings/developers</a></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dle5/2.png" alt></p><p>OAuth Apps -&gt; New OAuth App</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dle5/3.png" alt></p><p>记住id和secret</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dle5/4.png" alt></p><h4 id="4-3-使用JustAuth实现授权登陆"><a href="#4-3-使用JustAuth实现授权登陆" class="headerlink" title="4.3 使用JustAuth实现授权登陆"></a>4.3 使用<code>JustAuth</code>实现授权登陆</h4><p>下载官方的demo：<a href="https://gitee.com/yadong.zhang/JustAuth-demo" target="_blank" rel="noopener">https://gitee.com/yadong.zhang/JustAuth-demo</a></p><p>流程：调用授权方法-&gt;确认授权-&gt;跳转回调url-&gt;返回授权信息</p><p><strong>RestAuthController.java</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dle5/6.png" alt></p><p><strong>RestAuthController.java</strong>中的<code>getAuthRequest(String source)</code></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dle5/5.png" alt></p><p><strong>RestAuthController.java</strong>中的<code>login(@PathVariable(&quot;source&quot;) String source, AuthCallback callback)</code></p><p>授权成功后，调用回调地址，这里的回调地址设置的是login方法，authRequest.login(callback)会返回授权信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * oauth平台中配置的授权回调地址，以本项目为例，在创建github授权应用时的回调地址应为：http://127.0.0.1:8443/oauth/callback/github</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/callback/&#123;source&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">login</span><span class="params">(@PathVariable(<span class="string">"source"</span>)</span> String source, AuthCallback callback) </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进入callback："</span> + source + <span class="string">" callback params："</span> + JSONObject.toJSONString(callback));</span><br><span class="line">        AuthRequest authRequest = getAuthRequest(source);</span><br><span class="line">        AuthResponse response = authRequest.login(callback);</span><br><span class="line">        System.out.println(JSONObject.toJSONString(response));</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>AuthCallback</strong>：该对象用于接收回调地址栏返回的code，state等参数，</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dle5/9.png" alt></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dle5/8.png" alt></p><hr><h2 id="5-已集成平台"><a href="#5-已集成平台" class="headerlink" title="5.已集成平台"></a>5.已集成平台</h2><p>具体文档还是需参考官网的文档(<a href="https://docs.justauth.whnb.wang/#/README?id=已集成的平台）：" target="_blank" rel="noopener">https://docs.justauth.whnb.wang/#/README?id=已集成的平台）：</a></p><table><thead><tr><th>平台</th><th>API类</th><th>SDK</th></tr></thead><tbody><tr><td>gitee</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthGiteeRequest.java" target="_blank" rel="noopener">AuthGiteeRequest</a></td><td><a href="https://gitee.com/api/v5/oauth_doc#list_1" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>github</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthGiteeRequest.java" target="_blank" rel="noopener">AuthGithubRequest</a></td><td><a href="https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>weibo</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthGiteeRequest.java" target="_blank" rel="noopener">AuthWeiboRequest</a></td><td><a href="https://open.weibo.com/wiki/授权机制说明" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>钉钉</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthDingTalkRequest.java" target="_blank" rel="noopener">AuthDingTalkRequest</a></td><td><a href="https://open-doc.dingtalk.com/microapp/serverapi2/kymkv6" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>百度</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthBaiduRequest.java" target="_blank" rel="noopener">AuthBaiduRequest</a></td><td><a href="http://developer.baidu.com/wiki/index.php?title=docs/oauth" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>coding</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthCodingRequest.java" target="_blank" rel="noopener">AuthCodingRequest</a></td><td><a href="https://open.coding.net/references/oauth/" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>微云</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthTencentCloudRequest.java" target="_blank" rel="noopener">AuthTencentCloudRequest</a></td><td><a href="https://dev.tencent.com/help/doc/faq/b4e5b7aee786/oauth" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>开源中国</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthOschinaRequest.java" target="_blank" rel="noopener">AuthOschinaRequest</a></td><td><a href="https://www.oschina.net/openapi/docs/oauth2_authorize" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>支付宝</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthAlipayRequest.java" target="_blank" rel="noopener">AuthAlipayRequest</a></td><td><a href="https://alipay.open.taobao.com/docs/doc.htm?spm=a219a.7629140.0.0.336d4b70GUKXOl&amp;treeId=193&amp;articleId=105809&amp;docType=1" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>qq</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthQqRequest.java" target="_blank" rel="noopener">AuthQqRequest</a></td><td><a href="https://wiki.connect.qq.com/使用authorization_code获取access_token" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>微信</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthWeChatRequest.java" target="_blank" rel="noopener">AuthWeChatRequest</a></td><td><a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419316505&amp;token=&amp;lang=zh_CN" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>淘宝</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthTaobaoRequest.java" target="_blank" rel="noopener">AuthTaobaoRequest</a></td><td><a href="https://open.taobao.com/doc.htm?spm=a219a.7386797.0.0.4e00669acnkQy6&amp;source=search&amp;docId=105590&amp;docType=1" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>google</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthGoogleRequest.java" target="_blank" rel="noopener">AuthGoogleRequest</a></td><td><a href="https://developers.google.com/identity/protocols/OpenIDConnect" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>facebook</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthFacebookRequest.java" target="_blank" rel="noopener">AuthFacebookRequest</a></td><td><a href="https://developers.facebook.com/docs/facebook-login/manually-build-a-login-flow" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>抖音</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthDouyinRequest.java" target="_blank" rel="noopener">AuthDouyinRequest</a></td><td><a href="https://www.douyin.com/platform/doc/m-2-1-1" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>linkedin</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthLinkedinRequest.java" target="_blank" rel="noopener">AuthLinkedinRequest</a></td><td><a href="https://docs.microsoft.com/zh-cn/linkedin/shared/authentication/authorization-code-flow?context=linkedin/context" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>微软</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthMicrosoftRequest.java" target="_blank" rel="noopener">AuthMicrosoftRequest</a></td><td><a href="https://docs.microsoft.com/zh-cn/graph/auth/" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>小米</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthMiRequest.java" target="_blank" rel="noopener">AuthMiRequest</a></td><td><a href="https://dev.mi.com/console/doc/detail?pId=711" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>头条</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthToutiaoRequest.java" target="_blank" rel="noopener">AuthToutiaoRequest</a></td><td><a href="https://open.mp.toutiao.com/#/resource?_k=y7mfgk" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>teambition</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthTeambitionRequest.java" target="_blank" rel="noopener">AuthTeambitionRequest</a></td><td><a href="https://docs.teambition.com/" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>人人</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthRenrenRequest.java" target="_blank" rel="noopener">AuthRenrenRequest</a></td><td><a href="http://open.renren.com/wiki/OAuth2.0" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>pinterest</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthPinterestRequest.java" target="_blank" rel="noopener">AuthPinterestRequest</a></td><td><a href="https://developers.pinterest.com/docs/api/overview/?" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>stackoverflow</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthStackOverflowRequest.java" target="_blank" rel="noopener">AuthStackOverflowRequest</a></td><td><a href="https://api.stackexchange.com/docs/authentication" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>华为</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthHuaweiRequest.java" target="_blank" rel="noopener">AuthHuaweiRequest</a></td><td><a href="https://developer.huawei.com/consumer/cn/devservice/doc/30101" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>企业微信</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthWeChatEnterpriseRequest.java" target="_blank" rel="noopener">AuthWeChatEnterpriseRequest</a></td><td><a href="https://open.work.weixin.qq.com/api/doc#90000/90135/90664" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>CSDN</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthCsdnRequest.java" target="_blank" rel="noopener">AuthCsdnRequest</a></td><td>无</td></tr></tbody></table><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://gitee.com/yadong.zhang/JustAuth-demo" target="_blank" rel="noopener">https://gitee.com/yadong.zhang/JustAuth-demo</a>    JustAuth的springboot-demo</p><p><a href="https://gitee.com/yadong.zhang/JustAuth" target="_blank" rel="noopener">https://gitee.com/yadong.zhang/JustAuth</a>    JustAuth的官方项目地址</p><p><a href="https://docs.justauth.whnb.wang/#/README" target="_blank" rel="noopener">https://docs.justauth.whnb.wang/#/README</a>    JustAuth的说明文档</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1556742205-e10c9486e506?ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="justauth" scheme="https://lijinhongpassion.github.io/tags/justauth/"/>
    
  </entry>
  
  <entry>
    <title>Java-单点登陆（sso）之实现篇（Spring Security Oauth2的SSO单点登录+JWT权限控制实践）</title>
    <link href="https://lijinhongpassion.github.io/codeant/1bf9.html"/>
    <id>https://lijinhongpassion.github.io/codeant/1bf9.html</id>
    <published>2019-08-23T01:13:08.000Z</published>
    <updated>2019-08-23T13:47:29.763Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1566405450450-6e6140bf8f98?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="1-简述"><a href="#1-简述" class="headerlink" title="1. 简述"></a>1. 简述</h2><p>前面在概念篇中，我们提及到了sso的<a href="https://lijinhongpassion.github.io/codeant/dde1.html#2-1-登录">登录</a>和<a href="https://lijinhongpassion.github.io/codeant/dde1.html#2-2-注销">注销</a>实现顺序，对实现流程还不是很清楚的可以回去看一下。</p><p>本文则进一步实践一下基于 <code>Spring Security Oauth2</code>实现的多系统单点登录（<code>SSO</code>）和 <code>JWT</code>权限控制功能，毕竟这个需求也还是挺普遍的。</p><hr><h2 id="2-准备"><a href="#2-准备" class="headerlink" title="2. 准备"></a>2. 准备</h2><p>在此之前需要学习和了解一些前置知识包括：</p><ul><li><a href="https://spring.io/projects/spring-security" target="_blank" rel="noopener"><strong>Spring Security</strong></a>：基于 <code>Spring</code>实现的 <code>Web</code>系统的认证和权限模块</li><li><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener"><strong>OAuth2</strong></a>：一个关于授权（<code>authorization</code>）的开放网络标准</li><li><strong>单点登录 (SSO)</strong>：在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统</li><li><a href="https://jwt.io/" target="_blank" rel="noopener"><strong>JWT</strong></a>：在网络应用间传递信息的一种基于 <code>JSON</code>的开放标准（(<code>RFC 7519</code>)，用于作为<code>JSON</code>对象在不同系统之间进行安全地信息传输。主要使用场景一般是用来在 身份提供者和服务提供者间传递被认证的用户身份信息</li></ul><hr><h2 id="3-完成目标"><a href="#3-完成目标" class="headerlink" title="3. 完成目标"></a>3. 完成目标</h2><ul><li>目标1：设计并实现一个第三方授权中心服务（<code>Server</code>），用于完成用户登录，认证和权限处理</li><li>目标2：可以在授权中心下挂载任意多个客户端应用（<code>Client</code>）</li><li>目标3：当用户访问客户端应用的安全页面时，会重定向到授权中心进行身份验证，认证完成后方可访问客户端应用的服务，且多个客户端应用只需要登录一次即可（谓之 “单点登录 <code>SSO</code>”）</li></ul><p>基于此目标驱动，本文设计三个独立服务，分别是：</p><ul><li>一个授权服务中心（<code>codeant-server</code>）</li><li>客户端应用1（<code>codeant-client1</code>）</li><li>客户端应用2（<code>codeant-client2</code>）</li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1566405450450-6e6140bf8f98?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="sso" scheme="https://lijinhongpassion.github.io/tags/sso/"/>
    
      <category term="jwt" scheme="https://lijinhongpassion.github.io/tags/jwt/"/>
    
      <category term="oauth2" scheme="https://lijinhongpassion.github.io/tags/oauth2/"/>
    
  </entry>
  
  <entry>
    <title>Java-单点登陆（sso）之概念篇</title>
    <link href="https://lijinhongpassion.github.io/codeant/dde1.html"/>
    <id>https://lijinhongpassion.github.io/codeant/dde1.html</id>
    <published>2019-08-22T11:56:49.000Z</published>
    <updated>2019-08-23T01:14:06.685Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1566502548870-875212fb031d?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=966&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="1-简述"><a href="#1-简述" class="headerlink" title="1. 简述"></a>1. 简述</h2><p>单点登录（single sign on）是目前应用很广泛的一种模式；在以前我们的登录方式就是当会话关闭后（退出登录或者关闭游览器），我们就需要重新登录服务，或者在百度文库登录账号后，我访问百度网盘，又需要我再次登陆，十分不便，所以单点登陆随势而生；</p><p>应用场景：目前很多系统都是分布式集群服务，有多台服务器，例如百度公司之下有百度文库、百度网盘等，我只需要在百度网站认证（登录）一次，就能访问百度的所有服务；</p><p>思路：</p><ol><li><p>http：在我们正常访问一个网站的时候，由于http是无状态协议，游览器不会保存用户状态，所以无法判断用户是否登录；</p></li><li><p>session：所以我们就利用cookies（也就是session会话机制），当用户登陆该网址后，服务器端就将用户登录信息保存下来，，我们可以给session设置过期时间，每次用户请求服务器资源，就会去访问session是否过期等等，来达到一种有状态的协议；</p></li><li><p>session问题：session会话机制虽然解决了http无状态的问题，但是当服务集群的时候，每个tomcat产生的JSESSIONID不同，不能跨域，导致功能很受局限性，同时也给服务器增添了很大的压力，服务器端需要消耗资源来维护session；</p></li><li><p>jwt：所以根据session会话机制的缺点，我们不能将认证信息保存在服务器；以此换一种思维，客户端可以向服务器发起认证，服务器颁发令牌给客户端，客户端拿到令牌保存下来，每次访问服务器的时候带上令牌，由服务器解密认证，这样服务器端就不需要保存认证信息，这种方式是jwt；有的伙伴觉得跟session差不了多少，但是session会话机制中服务器端是需要保存认证信息，每次访问都是需要去访问数据库的，与jwt方案相比，我认为一次解密操作比一次io操作更节省时间吧，更重要的是session不能跨域；</p></li><li><p>sso：上面都还没提到单点登陆，有了jwt之后，我们能够进行跨域认证，为了保证用户访问安全页面的时候需要是认证过的用户，所以我们可以<strong>建立一个服务器专门来作为认证中心，只有认证中心能接受用户的用户名密码等安全信息，其他系统不提供登录入口，只接受认证中心的间接授权。间接授权通过令牌实现，sso认证中心验证用户的用户名密码没问题，创建授权令牌，在接下来的跳转过程中，授权令牌作为参数发送给各个子系统，子系统拿到令牌，即得到了授权，可以借此创建局部会话，局部会话登录方式与单系统的登录方式相同。</strong></p></li></ol><h2 id="2-sso"><a href="#2-sso" class="headerlink" title="2. sso"></a>2. sso</h2><h4 id="2-1-登录"><a href="#2-1-登录" class="headerlink" title="2.1 登录"></a>2.1 登录</h4><p>   这个过程，也就是单点登录的原理，用下图说明</p><p>   <img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dde1/640.jpg" alt></p><p>下面对上图简要描述</p><p>1、用户访问系统1的受保护资源，系统1发现用户未登录，跳转至sso认证中心，并将自己的地址作为参数；<br>2、sso认证中心发现用户未登录，将用户引导至登录页面；<br>3、用户输入用户名密码提交登录申请；<br>4、sso认证中心校验用户信息，创建用户与sso认证中心之间的会话，称为全局会话，同时创建授权令牌；<br>5、sso认证中心带着令牌跳转会最初的请求地址（系统1）；<br>6、系统1拿到令牌，去sso认证中心校验令牌是否有效；<br>7、sso认证中心校验令牌，返回有效，注册系统1；<br>8、系统1使用该令牌创建与用户的会话，称为局部会话，返回受保护资源；<br>9、用户访问系统2的受保护资源；<br>10、系统2发现用户未登录，跳转至sso认证中心，并将自己的地址作为参数；<br>11、sso认证中心发现用户已登录，跳转回系统2的地址，并附上令牌；<br>12、系统2拿到令牌，去sso认证中心校验令牌是否有效；<br>13、sso认证中心校验令牌，返回有效，注册系统2；<br>14、系统2使用该令牌创建与用户的局部会话，返回受保护资源。</p><p>用户登录成功之后，会与sso认证中心及各个子系统建立会话，用户与sso认证中心建立的会话称为全局会话，用户与各个子系统建立的会话称为局部会话，局部会话建立之后，用户访问子系统受保护资源将不再通过sso认证中心，全局会话与局部会话有如下约束关系</p><p>1、局部会话存在，全局会话一定存在；<br>2、全局会话存在，局部会话不一定存在；<br>3、全局会话销毁，局部会话必须销毁。</p><p>你可以通过博客园、百度、csdn、淘宝等网站的登录过程加深对单点登录的理解，注意观察登录过程中的跳转url与参数</p><h4 id="2-2-注销"><a href="#2-2-注销" class="headerlink" title="2.2 注销"></a>2.2 注销</h4><p>单点登录自然也要单点注销，在一个子系统中注销，所有子系统的会话都将被销毁，用下面的图来说明</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dde1/641.jpg" alt></p><p>sso认证中心一直监听全局会话的状态，一旦全局会话销毁，监听器将通知所有注册系统执行注销操作</p><p>下面对上图简要说明</p><p>1、用户向系统1发起注销请求；<br>2、系统1根据用户与系统1建立的会话id拿到令牌，向sso认证中心发起注销请求；<br>3、sso认证中心校验令牌有效，销毁全局会话，同时取出所有用此令牌注册的系统地址；<br>4、sso认证中心向所有注册系统发起注销请求；<br>5、各注册系统接收sso认证中心的注销请求，销毁局部会话；<br>6、sso认证中心引导用户至登录页面。</p><h4 id="2-3-部署"><a href="#2-3-部署" class="headerlink" title="2.3 部署"></a>2.3 部署</h4><p>单点登录涉及sso认证中心与众子系统，子系统与sso认证中心需要通信以交换令牌、校验令牌及发起注销请求，因而子系统必须集成sso的客户端，sso认证中心则是sso服务端，整个单点登录过程实质是sso客户端与服务端通信的过程，用下图描述</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dde1/642.jpg" alt></p><p>sso认证中心与sso客户端通信方式有多种，这里以简单好用的httpClient为例，web service、rpc、restful api都可以。</p><h2 id="3-实现"><a href="#3-实现" class="headerlink" title="3.实现"></a>3.实现</h2><p><strong>sso-client</strong></p><p>1、拦截子系统未登录用户请求，跳转至sso认证中心；<br>2、接收并存储sso认证中心发送的令牌；<br>3、与sso-server通信，校验令牌的有效性；<br>4、建立局部会话；<br>5、拦截用户注销请求，向sso认证中心发送注销请求；<br>6、接收sso认证中心发出的注销请求，销毁局部会话。<br>　　<br><strong>sso-server</strong></p><p>1、验证用户的登录信息；<br>2、创建全局会话；<br>3、创建授权令牌；<br>4、与sso-client通信发送令牌；<br>5、校验sso-client令牌有效性；<br>6、系统注册；<br>7、接收sso-client注销请求，注销所有会话。</p><p>接下来，我们按照原理来一步步实现sso吧！</p><p><strong>1、sso-client拦截未登录请求</strong></p><p>java拦截请求的方式有servlet、filter、listener三种方式，我们采用filter。在sso-client中新建LoginFilter.java类并实现Filter接口，在doFilter()方法中加入对未登录用户的拦截。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    HttpServletRequest req = (HttpServletRequest) request;</span><br><span class="line">    HttpServletResponse res = (HttpServletResponse) response;</span><br><span class="line">    HttpSession session = req.getSession();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (session.getAttribute(<span class="string">"isLogin"</span>)) &#123;</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//跳转至sso认证中心</span></span><br><span class="line">    res.sendRedirect(<span class="string">"sso-server-url-with-system-url"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、sso-server拦截未登录请求</strong></p><p>拦截从sso-client跳转至sso认证中心的未登录请求，跳转至登录页面，这个过程与sso-client完全一样。</p><p><strong>3、sso-server验证用户登录信息</strong></p><p>用户在登录页面输入用户名密码，请求登录，sso认证中心校验用户信息，校验成功，将会话状态标记为“已登录”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String username, String password, HttpServletRequest req)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.checkLoginInfo(username, password);</span><br><span class="line">    req.getSession().setAttribute(<span class="string">"isLogin"</span>, <span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4、sso-server创建授权令牌</strong></p><p>授权令牌是一串随机字符，以什么样的方式生成都没有关系，只要不重复、不易伪造即可，下面是一个例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String token = UUID.randomUUID().toString();</span><br></pre></td></tr></table></figure><p><strong>5、sso-client取得令牌并校验</strong></p><p>sso认证中心登录后，跳转回子系统并附上令牌，子系统（sso-client）取得令牌，然后去sso认证中心校验，在LoginFilter.java的doFilter()中添加几行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求附带token参数</span></span><br><span class="line">String token = req.getParameter(<span class="string">"token"</span>);</span><br><span class="line"><span class="keyword">if</span> (token != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 去sso认证中心校验token</span></span><br><span class="line">    <span class="keyword">boolean</span> verifyResult = <span class="keyword">this</span>.verify(<span class="string">"sso-server-verify-url"</span>, token);</span><br><span class="line">    <span class="keyword">if</span> (!verifyResult) &#123;</span><br><span class="line">        res.sendRedirect(<span class="string">"sso-server-url"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    chain.doFilter(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>verify() 方法使用httpClient实现，这里仅简略介绍，httpClient详细使用方法请参考官方文档</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HttpPost httpPost = <span class="keyword">new</span> HttpPost(<span class="string">"sso-server-verify-url-with-token"</span>);</span><br><span class="line">HttpResponse httpResponse = httpClient.execute(httpPost);</span><br></pre></td></tr></table></figure><p><strong>6、sso-server接收并处理校验令牌请求</strong></p><p>用户在sso认证中心登录成功后，sso-server创建授权令牌并存储该令牌，所以，sso-server对令牌的校验就是去查找这个令牌是否存在以及是否过期，令牌校验成功后sso-server将发送校验请求的系统注册到sso认证中心（就是存储起来的意思）</p><p>令牌与注册系统地址通常存储在key-value数据库（如redis）中，redis可以为key设置有效时间也就是令牌的有效期。redis运行在内存中，速度非常快，正好sso-server不需要持久化任何数据。</p><p>令牌与注册系统地址可以用下图描述的结构存储在redis中，可能你会问，为什么要存储这些系统的地址？如果不存储，注销的时候就麻烦了，用户向sso认证中心提交注销请求，sso认证中心注销全局会话，但不知道哪些系统用此全局会话建立了自己的局部会话，也不知道要向哪些子系统发送注销请求注销局部会话</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dde1/643.jpg" alt></p><p><strong>7、sso-client校验令牌成功创建局部会话</strong></p><p>令牌校验成功后，sso-client将当前局部会话标记为“已登录”，修改LoginFilter.java，添加几行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (verifyResult) &#123;</span><br><span class="line">    session.setAttribute(<span class="string">"isLogin"</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sso-client还需将当前会话id与令牌绑定，表示这个会话的登录状态与令牌相关，此关系可以用java的hashmap保存，保存的数据用来处理sso认证中心发来的注销请求</p><p><strong>8、注销过程</strong></p><p>用户向子系统发送带有“logout”参数的请求（注销请求），sso-client拦截器拦截该请求，向sso认证中心发起注销请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String logout = req.getParameter(<span class="string">"logout"</span>);</span><br><span class="line"><span class="keyword">if</span> (logout != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.ssoServer.logout(token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sso认证中心也用同样的方式识别出sso-client的请求是注销请求（带有“logout”参数），sso认证中心注销全局会话</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/logout"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">logout</span><span class="params">(HttpServletRequest req)</span> </span>&#123;</span><br><span class="line">    HttpSession session = req.getSession();</span><br><span class="line">    <span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</span><br><span class="line">        session.invalidate();<span class="comment">//触发LogoutListener</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sso认证中心有一个全局会话的监听器，一旦全局会话注销，将通知所有注册系统注销</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogoutListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent event)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过httpClient向所有注册系统发送注销请求</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4-参考文章"><a href="#4-参考文章" class="headerlink" title="4. 参考文章"></a>4. 参考文章</h2><p><a href="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html</a>    JSON Web Token 入门教程</p><p><a href="https://yq.aliyun.com/articles/636281" target="_blank" rel="noopener">https://yq.aliyun.com/articles/636281</a>    单点登录（SSO）看这一篇就够了</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1566502548870-875212fb031d?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=966&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="sso" scheme="https://lijinhongpassion.github.io/tags/sso/"/>
    
  </entry>
  
  <entry>
    <title>Java-easypoi简单使用</title>
    <link href="https://lijinhongpassion.github.io/codeant/48d8.html"/>
    <id>https://lijinhongpassion.github.io/codeant/48d8.html</id>
    <published>2019-08-02T18:18:47.000Z</published>
    <updated>2019-08-02T18:21:43.497Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://cdn.pixabay.com/photo/2019/07/08/13/38/downtown-4324792_1280.jpg" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>本文讲一讲easypoi的简单操作，所有涉及到的表均为单sheet，目前只实现了导出操作，后面会完善数据的导入操作</p><ul><li>单表导出（实体类）</li><li>对象不固定的导出（Map）</li><li>大数据的导出</li></ul><p>demo：<a href="https://github.com/LiJinHongPassion/springboot/tree/master/springboot_poi_demo_v2" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/springboot/tree/master/springboot_poi_demo_v2</a></p><hr><h2 id="文件目录树"><a href="#文件目录树" class="headerlink" title="文件目录树"></a>文件目录树</h2><p>springboot_poi_demo_v2<br>    │  Application.java（启动类）<br>    │<br>    ├─controller<br>    │  ├─exportExcel（导出）<br>    │  │      BigExcelController.java<br>    │  │      MapExcelController.java<br>    │  │      SimpleExcelController.java<br>    │  │<br>    │  └─importExcel（导出）<br>    ├─dao（模拟数据库）<br>    │      DogDao.java<br>    │<br>    ├─hanlder（处理器）<br>    │      ExportLoadDataHandler.java<br>    │<br>    ├─pojo（实体类）<br>    │      Dog.java<br>    │<br>    └─service（服务层）<br>        │  IDogService.java<br>        │<br>        └─impl<br>                DogServiceImpl.java</p><hr><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- easypoi-start --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.afterturn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easypoi-base<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.afterturn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easypoi-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.afterturn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easypoi-annotation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- easypoi-end --&gt;</span></span><br></pre></td></tr></table></figure><h4 id="pojo"><a href="#pojo" class="headerlink" title="pojo"></a><strong>pojo</strong></h4><p>Dog.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.excel.annotation.Excel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述：实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/2-18:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"狗昵称"</span>, orderNum = <span class="string">"0"</span>)</span><br><span class="line">    <span class="keyword">private</span> String dog_name;</span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"性别"</span>, orderNum = <span class="string">"1"</span>)</span><br><span class="line">    <span class="keyword">private</span> String dog_sex;</span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"年龄"</span>, orderNum = <span class="string">"2"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer dog_age;</span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"体重"</span>, orderNum = <span class="string">"3"</span>)</span><br><span class="line">    <span class="keyword">private</span> Float dog_height;</span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"种类"</span>, orderNum = <span class="string">"4"</span>)</span><br><span class="line">    <span class="keyword">private</span> String dog_kind;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDog_name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog_name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDog_name</span><span class="params">(String dog_name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog_name = dog_name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDog_sex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog_sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDog_sex</span><span class="params">(String dog_sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog_sex = dog_sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getDog_age</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog_age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDog_age</span><span class="params">(Integer dog_age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog_age = dog_age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Float <span class="title">getDog_height</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog_height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDog_height</span><span class="params">(Float dog_height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog_height = dog_height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDog_kind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog_kind;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDog_kind</span><span class="params">(String dog_kind)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog_kind = dog_kind;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String dog_name, String dog_sex, Integer dog_age, Float dog_height, String dog_kind)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog_name = dog_name;</span><br><span class="line">        <span class="keyword">this</span>.dog_sex = dog_sex;</span><br><span class="line">        <span class="keyword">this</span>.dog_age = dog_age;</span><br><span class="line">        <span class="keyword">this</span>.dog_height = dog_height;</span><br><span class="line">        <span class="keyword">this</span>.dog_kind = dog_kind;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述: 实体类对象转化为map</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> LJH-1755497577 2019/8/2 19:53</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.util.List&lt;java.util.Map&lt;java.lang.String,java.lang.Object&gt;&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">toMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"狗昵称"</span>, getDog_name());</span><br><span class="line">        map.put(<span class="string">"性别"</span>, getDog_sex());</span><br><span class="line">        map.put(<span class="string">"年龄"</span>, getDog_age());</span><br><span class="line">        map.put(<span class="string">"体重"</span>, getDog_height());</span><br><span class="line">        map.put(<span class="string">"种类"</span>, getDog_kind());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="dao"><a href="#dao" class="headerlink" title="dao"></a><strong>dao</strong></h4><p>DogDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述：dog的数据源</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/2-19:03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Dog&gt; dog_list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;String, Object&gt;&gt; dog_list_map = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Dog d1 = <span class="keyword">new</span> Dog(<span class="string">"宝财"</span>,</span><br><span class="line">                <span class="string">"雌性"</span>,</span><br><span class="line">                (<span class="keyword">int</span>) (Math.random()*<span class="number">99</span>+<span class="number">1</span>),</span><br><span class="line">                (<span class="keyword">float</span>)(Math.random()*<span class="number">99</span>+<span class="number">51</span>),</span><br><span class="line">                <span class="string">"中华田园犬"</span>);</span><br><span class="line">        Dog d2 = <span class="keyword">new</span> Dog(<span class="string">"小芳"</span>,</span><br><span class="line">                <span class="string">"雌性"</span>,</span><br><span class="line">                (<span class="keyword">int</span>) (Math.random()*<span class="number">99</span>+<span class="number">1</span>),</span><br><span class="line">                (<span class="keyword">float</span>)(Math.random()*<span class="number">99</span>+<span class="number">51</span>),</span><br><span class="line">                <span class="string">"贵妃犬"</span>);</span><br><span class="line">        Dog d3 = <span class="keyword">new</span> Dog(<span class="string">"大雄"</span>,</span><br><span class="line">                <span class="string">"雄性"</span>,</span><br><span class="line">                (<span class="keyword">int</span>) (Math.random()*<span class="number">99</span>+<span class="number">1</span>),</span><br><span class="line">                (<span class="keyword">float</span>)(Math.random()*<span class="number">99</span>+<span class="number">51</span>),</span><br><span class="line">                <span class="string">"英国斗牛犬"</span>);</span><br><span class="line">        Dog d4 = <span class="keyword">new</span> Dog(<span class="string">"二哈"</span>,</span><br><span class="line">                <span class="string">"雌性"</span>,</span><br><span class="line">                (<span class="keyword">int</span>) (Math.random()*<span class="number">99</span>+<span class="number">1</span>),</span><br><span class="line">                (<span class="keyword">float</span>)(Math.random()*<span class="number">99</span>+<span class="number">51</span>),</span><br><span class="line">                <span class="string">"拆家犬"</span>);</span><br><span class="line"></span><br><span class="line">        dog_list.add(d1);</span><br><span class="line">        dog_list.add(d2);</span><br><span class="line">        dog_list.add(d3);</span><br><span class="line">        dog_list.add(d4);</span><br><span class="line">        </span><br><span class="line">        dog_list_map.add(d1.toMap());</span><br><span class="line">        dog_list_map.add(d2.toMap());</span><br><span class="line">        dog_list_map.add(d3.toMap());</span><br><span class="line">        dog_list_map.add(d4.toMap());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述: 模拟从数据源获取List&lt;Dog&gt;数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> LJH-1755497577 2019/8/2 19:59</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.util.List&lt;com.example.li.springboot_poi_demo.pojo.Dog&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Dog&gt; <span class="title">getDogsList</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> dog_list; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述: 模拟从数据源获取List&lt;Map&lt;String, Object&gt;&gt;数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> LJH-1755497577 2019/8/2 19:59</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.util.List&lt;com.example.li.springboot_poi_demo.pojo.Dog&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;String, Object&gt;&gt; getDogsListMap()&#123; <span class="keyword">return</span> dog_list_map; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="service"><a href="#service" class="headerlink" title="service"></a><strong>service</strong></h4><p>IDogService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@date</span> 2019/8/2-18:59</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IDogService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function">List&lt;Dog&gt; <span class="title">getDogsList</span><span class="params">()</span></span>;</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; getDogsListMap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DogServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/2-18:58</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogServiceImpl</span> <span class="keyword">implements</span> <span class="title">IDogService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dog&gt; <span class="title">getDogsList</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> DogDao.getDogsList(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; getDogsListMap() &#123; <span class="keyword">return</span> DogDao.getDogsListMap(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="单表导出"><a href="#单表导出" class="headerlink" title="单表导出"></a>单表导出</h2><p>将数据库中一张表的数据导出为excel文件，这里会用到相关注解，注解使用到实体类上，也就是这里的dog.java</p><p>注解相关介绍以及参数：ModelMaps://opensource.afterturn.cn/doc/easypoi.html#40201</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ol><li>获取模拟数据源</li><li>获取ExportParams对象（title, sheetName, ExcelType）</li><li>构造ModelMap</li></ol><h4 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.entity.vo.MapExcelConstants;</span><br><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.entity.vo.NormalExcelConstants;</span><br><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.excel.entity.ExportParams;</span><br><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.excel.entity.enmus.ExcelType;</span><br><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.view.PoiBaseView</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/2-23:01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/SimpleExcelController"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleExcelController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IDogService dogService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"load"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloadByPoiBaseView</span><span class="params">(ModelMap map, ModelMapServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      ModelMapServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 获取模拟数据源</span></span><br><span class="line">        List&lt;Dog&gt; list = dogService.getDogsList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 获取ExportParams对象（title, sheetName, ExcelType）</span></span><br><span class="line">        ExportParams params = <span class="keyword">new</span> ExportParams(<span class="string">"2412312"</span>, <span class="string">"测试dog"</span>, ExcelType.XSSF);</span><br><span class="line">        params.setFreezeCol(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 构造ModelMap</span></span><br><span class="line">        map.put(NormalExcelConstants.DATA_LIST, list);</span><br><span class="line">        map.put(NormalExcelConstants.CLASS, Dog.class);</span><br><span class="line">        map.put(NormalExcelConstants.PARAMS, params);</span><br><span class="line">        <span class="comment">//文件名</span></span><br><span class="line">        map.put(MapExcelConstants.FILE_NAME, <span class="string">"测试dog文件名"</span>);</span><br><span class="line">        PoiBaseView.render(map, request, response, NormalExcelConstants.EASYPOI_EXCEL_VIEW);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>url：<a href="http://localhost:8080/SimpleExcelController/load" target="_blank" rel="noopener">http://localhost:8080/SimpleExcelController/load</a></p><hr><h2 id="对象不固定的导出"><a href="#对象不固定的导出" class="headerlink" title="对象不固定的导出"></a>对象不固定的导出</h2><p>通常情况下我们在数据库查出来的数据格式会是<code>List&lt;Map&lt;String, Object&gt;&gt;</code>，而不是<code>List&lt;Dog&gt;</code>;</p><p>也有可能我们的数据比较复杂，是多个字段组成，没有对应的实体类，所以会以<code>List&lt;Map&lt;String, Object&gt;&gt;</code>存储</p><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><ol><li>编辑表头</li><li>获取对应数据源</li><li>构造ModelMap</li></ol><h4 id="controller-1"><a href="#controller-1" class="headerlink" title="controller"></a>controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.entity.vo.MapExcelConstants;</span><br><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.entity.vo.NormalExcelConstants;</span><br><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.excel.entity.ExportParams;</span><br><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.excel.entity.enmus.ExcelType;</span><br><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.excel.entity.params.ExcelExportEntity;</span><br><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.view.PoiBaseView;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/2-23:10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/MapExcelController"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapExcelController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IDogService dogService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"load"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloadByPoiBaseView</span><span class="params">(ModelMap modelMap, ModelMapServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      ModelMapServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*编辑表头，表1和表2拼成一张表——start*/</span></span><br><span class="line">        <span class="comment">/*表1*/</span></span><br><span class="line">        List&lt;ExcelExportEntity&gt; entity = <span class="keyword">new</span> ArrayList&lt;ExcelExportEntity&gt;();</span><br><span class="line"></span><br><span class="line">        ExcelExportEntity excelentity = <span class="keyword">new</span> ExcelExportEntity(<span class="string">"姓名"</span>, <span class="string">"name"</span>);</span><br><span class="line">        <span class="comment">//竖着合并单元格</span></span><br><span class="line">        excelentity.setNeedMerge(<span class="keyword">true</span>);</span><br><span class="line">        entity.add(excelentity);</span><br><span class="line"></span><br><span class="line">        entity.add(<span class="keyword">new</span> ExcelExportEntity(<span class="string">"性别"</span>, <span class="string">"sex"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*表2*/</span></span><br><span class="line">        excelentity = <span class="keyword">new</span> ExcelExportEntity(<span class="keyword">null</span>, <span class="string">"students"</span>);</span><br><span class="line">        List&lt;ExcelExportEntity&gt; temp = <span class="keyword">new</span> ArrayList&lt;ExcelExportEntity&gt;();</span><br><span class="line">        temp.add(<span class="keyword">new</span> ExcelExportEntity(<span class="string">"姓名"</span>, <span class="string">"name"</span>));</span><br><span class="line">        temp.add(<span class="keyword">new</span> ExcelExportEntity(<span class="string">"性别"</span>, <span class="string">"sex"</span>));</span><br><span class="line">        excelentity.setList(temp);</span><br><span class="line">        entity.add(excelentity);</span><br><span class="line">        <span class="comment">/*编辑表头——end*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*数据源-start*/</span></span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class="line">        Map&lt;String, Object&gt; map_table1;</span><br><span class="line">        Map&lt;String, Object&gt; map_table2_row1;</span><br><span class="line">        Map&lt;String, Object&gt; map_table2_row2;</span><br><span class="line">        Map&lt;String, Object&gt; map_table2_row3;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="comment">/*表1数据源*/</span></span><br><span class="line">            map_table1 = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">            map_table1.put(<span class="string">"name"</span>, <span class="string">"1"</span> + i);</span><br><span class="line">            map_table1.put(<span class="string">"sex"</span>, <span class="string">"2"</span> + i);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*表2数据源*/</span></span><br><span class="line">            List&lt;Map&lt;String, Object&gt;&gt; tempList = <span class="keyword">new</span> ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class="line">            map_table2_row1 = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">            map_table2_row1.put(<span class="string">"name"</span>, <span class="string">"stu1"</span> + i);</span><br><span class="line">            map_table2_row1.put(<span class="string">"sex"</span>, <span class="string">"stu2"</span> + i);</span><br><span class="line"></span><br><span class="line">            map_table2_row2 = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">            map_table2_row2.put(<span class="string">"name"</span>, <span class="string">"stu11"</span> + i);</span><br><span class="line">            map_table2_row2.put(<span class="string">"sex"</span>, <span class="string">"stu22"</span> + i);</span><br><span class="line"></span><br><span class="line">            map_table2_row3 = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">            map_table2_row3.put(<span class="string">"name"</span>, <span class="string">"stu111"</span> + i);</span><br><span class="line">            map_table2_row3.put(<span class="string">"sex"</span>, <span class="string">"stu222"</span> + i);</span><br><span class="line"></span><br><span class="line">            tempList.add(map_table2_row1);</span><br><span class="line">            tempList.add(map_table2_row2);</span><br><span class="line">            tempList.add(map_table2_row3);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*将表2数据合并到表1*/</span></span><br><span class="line">            map_table1.put(<span class="string">"students"</span>, tempList);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*总数据源--一行*/</span></span><br><span class="line">            list.add(map_table1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ExportParams params = <span class="keyword">new</span> ExportParams(<span class="string">"2412312"</span>, <span class="string">"测试复杂"</span>, ExcelType.XSSF);</span><br><span class="line">        <span class="comment">//冻结列</span></span><br><span class="line">        params.setFreezeCol(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回响应下载，构造ModelMap</span></span><br><span class="line">        <span class="comment">//文件内容</span></span><br><span class="line">        modelMap.put(MapExcelConstants.MAP_LIST, list);</span><br><span class="line">        modelMap.put(MapExcelConstants.ENTITY_LIST, entity);</span><br><span class="line">        modelMap.put(MapExcelConstants.PARAMS, params);</span><br><span class="line">        <span class="comment">//文件名</span></span><br><span class="line">        modelMap.put(MapExcelConstants.FILE_NAME, <span class="string">"EasypoiMapExcelViewTest"</span>);</span><br><span class="line">        PoiBaseView.render(modelMap, request, response, MapExcelConstants.EASYPOI_MAP_EXCEL_VIEW);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"loadDog"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloadByPoiBaseViewDog</span><span class="params">(ModelMap modelMap, ModelMapServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      ModelMapServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*1. 编辑表头——start*/</span></span><br><span class="line">        List&lt;ExcelExportEntity&gt; entity = <span class="keyword">new</span> ArrayList&lt;ExcelExportEntity&gt;();</span><br><span class="line">        ExcelExportEntity excelentity ;</span><br><span class="line">        entity.add(<span class="keyword">new</span> ExcelExportEntity(<span class="string">"狗昵称"</span>, <span class="string">"dog_name"</span>));</span><br><span class="line">        entity.add(<span class="keyword">new</span> ExcelExportEntity(<span class="string">"性别"</span>, <span class="string">"dog_sex"</span>));</span><br><span class="line">        entity.add(<span class="keyword">new</span> ExcelExportEntity(<span class="string">"年龄"</span>, <span class="string">"dog_age"</span>));</span><br><span class="line">        entity.add(<span class="keyword">new</span> ExcelExportEntity(<span class="string">"体重"</span>, <span class="string">"dog_height"</span>));</span><br><span class="line">        entity.add(<span class="keyword">new</span> ExcelExportEntity(<span class="string">"种类"</span>, <span class="string">"dog_kind"</span>));</span><br><span class="line">        <span class="comment">/*编辑表头——end*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*2. 数据源-start*/</span></span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = dogService.getDogsListMap();</span><br><span class="line"></span><br><span class="line">        ExportParams params = <span class="keyword">new</span> ExportParams(<span class="string">"2412312"</span>, <span class="string">"测试dog"</span>, ExcelType.XSSF);</span><br><span class="line">        <span class="comment">//冻结列</span></span><br><span class="line">        params.setFreezeCol(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 返回响应下载，构造ModelMap</span></span><br><span class="line">        <span class="comment">//文件内容</span></span><br><span class="line">        modelMap.put(MapExcelConstants.MAP_LIST, list);</span><br><span class="line">        modelMap.put(MapExcelConstants.ENTITY_LIST, entity);</span><br><span class="line">        modelMap.put(MapExcelConstants.PARAMS, params);</span><br><span class="line">        <span class="comment">//文件名</span></span><br><span class="line">        modelMap.put(MapExcelConstants.FILE_NAME, <span class="string">"测试dog"</span>);</span><br><span class="line">        PoiBaseView.render(modelMap, request, response, MapExcelConstants.EASYPOI_MAP_EXCEL_VIEW);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>url-1：<a href="http://localhost:8080/MapExcelController/loadDog" target="_blank" rel="noopener">http://localhost:8080/MapExcelController/loadDog</a></p><p>url-2：<a href="http://localhost:8080/MapExcelController/load" target="_blank" rel="noopener">http://localhost:8080/MapExcelController/load</a></p><hr><h2 id="大数据的导出"><a href="#大数据的导出" class="headerlink" title="大数据的导出"></a>大数据的导出</h2><p>解决导出数据量大,批量查询批量插入方式,防止内存溢出</p><p>大数据导出是当我们的导出数量在几万,到上百万的数据时,一次从数据库查询这么多数据加载到内存然后写入会对我们的内存和CPU都产生压力,这个时候需要我们像分页一样处理导出分段写入Excel缓解Excel的压力，EasyPoi提供的是两个方法 <strong><em>强制使用 xssf版本的Excel </em></strong></p><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><ol><li>实现IExcelExportServer接口，编写处理器</li><li>获取ExportParams对象（title, sheetName, ExcelType）</li><li>构造ModelMap，这里需注意</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*就是我们的查询参数,会带到接口中,供接口查询使用（例如rows,page等）*/</span></span><br><span class="line">map.put(BigExcelConstants.DATA_PARAMS, <span class="keyword">new</span> HashMap&lt;String,String&gt;());</span><br></pre></td></tr></table></figure><h4 id="hanlder"><a href="#hanlder" class="headerlink" title="hanlder"></a>hanlder</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.handler.inter.IExcelExportServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExportLoadDataHandler</span> <span class="keyword">implements</span> <span class="title">IExcelExportServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> LJH-1755497577 2019/8/3 0:58</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj 可以传参数，例如数据库每页查询多少</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 循环查询次数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.util.List&lt;java.lang.Object&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">selectListForExcelExport</span><span class="params">(Object obj, <span class="keyword">int</span> page)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取数据源</span></span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">        List&lt;Dog&gt; dogsList = DogDao.getDogsList();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ( Dog dog : dogsList) &#123;</span><br><span class="line">            list.add(dog);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(page&gt;<span class="number">10000</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="controller-2"><a href="#controller-2" class="headerlink" title="controller"></a>controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.entity.vo.BigExcelConstants;</span><br><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.entity.vo.MapExcelConstants;</span><br><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.excel.entity.ExportParams;</span><br><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.excel.entity.enmus.ExcelType;</span><br><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.handler.inter.IExcelExportServer;</span><br><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.view.PoiBaseView;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 针对导出数据量大,批量查询批量插入方式,防止内存溢出解决的</span></span><br><span class="line"><span class="comment"> * 大数据导出是当我们的导出数量在几万,到上百万的数据时,</span></span><br><span class="line"><span class="comment"> * 一次从数据库查询这么多数据加载到内存然后写入会对我们的内存和CPU都产生压力,</span></span><br><span class="line"><span class="comment"> * 这个时候需要我们像分页一样处理导出分段写入Excel缓解Excel的压力</span></span><br><span class="line"><span class="comment"> * EasyPoi提供的是两个方法 ***强制使用 xssf版本的Excel ***</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/BigExcelController"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigExcelController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*需要自己写处理器*/</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IExcelExportServer excelExportServer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"load"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloadByPoiBaseView</span><span class="params">(ModelMap map, ModelMapServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      ModelMapServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 获取ExportParams对象（title, sheetName, ExcelType）</span></span><br><span class="line">        ExportParams params = <span class="keyword">new</span> ExportParams(<span class="string">"2412312"</span>, <span class="string">"测试"</span>, ExcelType.XSSF);</span><br><span class="line">        params.setFreezeCol(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//2. 构造ModelMap</span></span><br><span class="line">        map.put(BigExcelConstants.CLASS, Dog.class);</span><br><span class="line">        map.put(BigExcelConstants.PARAMS, params);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//就是我们的查询参数,会带到接口中,供接口查询使用（例如rows）</span></span><br><span class="line">        map.put(BigExcelConstants.DATA_PARAMS, <span class="keyword">new</span> HashMap&lt;String,String&gt;());</span><br><span class="line"></span><br><span class="line">        map.put(BigExcelConstants.DATA_INTER,excelExportServer);</span><br><span class="line">        <span class="comment">//文件名</span></span><br><span class="line">        map.put(MapExcelConstants.FILE_NAME, <span class="string">"测试dog"</span>);</span><br><span class="line">        PoiBaseView.render(map, request, response, BigExcelConstants.EASYPOI_BIG_EXCEL_VIEW);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h4><p>url：<a href="http://localhost:8080/BigExcelController/load" target="_blank" rel="noopener">http://localhost:8080/BigExcelController/load</a></p><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://gitee.com/lemur/easypoi" target="_blank" rel="noopener">https://gitee.com/lemur/easypoi</a> （easypoi的gitee地址）</li><li><a href="https://gitee.com/lemur/easypoi-test" target="_blank" rel="noopener">https://gitee.com/lemur/easypoi-test</a>  （easypoi小demo的gitee地址）</li><li><a href="https://opensource.afterturn.cn/doc/easypoi.html" target="_blank" rel="noopener">https://opensource.afterturn.cn/doc/easypoi.html</a>  （easypoi文档地址）</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.pixabay.com/photo/2019/07/08/13/38/downtown-4324792_1280.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="poi" scheme="https://lijinhongpassion.github.io/tags/poi/"/>
    
      <category term="easypoi" scheme="https://lijinhongpassion.github.io/tags/easypoi/"/>
    
  </entry>
  
  <entry>
    <title>Java-RESTful 设计指南</title>
    <link href="https://lijinhongpassion.github.io/codeant/db66.html"/>
    <id>https://lijinhongpassion.github.io/codeant/db66.html</id>
    <published>2019-08-02T08:33:48.000Z</published>
    <updated>2019-08-02T18:21:43.455Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://foter.com/photos/394/black-and-white-image-of-mobile-phone-and-notebook.jpg" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>REST,即Representational State Transfer的缩写，翻译过来就是”表现层状态转化”。</p><ul><li><strong>Resource</strong>（资源） ：对象的单个实例。例如，一只动物。它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的实在。你可以用一个URI（统一资源定位符）指向它，每种资源对应一个特定的URI。要获取这个资源，访问它的URI就可以，因此URI就成了每一个资源的地址或独一无二的识别符。</li><li><strong>集合</strong>：对象的集合。例如，动物。</li><li><strong>第三方</strong>：使用我们接口的开发者</li><li><strong>表现层（Representation）</strong>：”资源”是一种信息实体，它可以有多种外在表现形式。我们把”资源”具体呈现出来的形式，叫做它的”表现层”（Representation）。</li><li><strong>状态转化（State Transfer）</strong> 访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，势必涉及到数据和状态的变化。互联网通信协议HTTP协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生”状态转化”（State Transfer）。而这种转化是建立在表现层之上的，所以就是”表现层状态转化”。</li></ul><p>综合上面的解释，我们总结一下什么是RESTful架构：</p><p>　（1）每一个URI代表一种资源；<br>　（2）客户端和服务器之间，传递这种资源的某种表现层；<br>　（3）客户端通过HTTP动词(GET,POST等等)，对服务器端资源进行操作，实现”表现层状态转化”。</p><h2 id="REST接口规范"><a href="#REST接口规范" class="headerlink" title="REST接口规范"></a>REST接口规范</h2><h4 id="1、动作"><a href="#1、动作" class="headerlink" title="1、动作"></a>1、动作</h4><ul><li>GET （SELECT）：从服务器检索特定资源，或资源列表。</li><li>POST （CREATE）：在服务器上创建一个新的资源。</li><li>PUT （UPDATE）：更新服务器上的资源（客户端提供更新后的整个资源）。</li><li>PATCH （UPDATE）：更新服务器上的资源（客户端提供更改的属性，可以看做作是部分更新）。</li><li>DELETE （DELETE）：从服务器删除资源。</li></ul><h4 id="2、路径（接口命名）"><a href="#2、路径（接口命名）" class="headerlink" title="2、路径（接口命名）"></a>2、路径（接口命名）</h4><p>路径又称”终点”（endpoint），表示API的具体网址。</p><p>在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的”集合”（collection），所以API中的名词也应该使用复数。</p><p>举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。</p><p>接口尽量使用名词，禁止使用动词，下面是一些例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET         /zoos：列出所有动物园</span><br><span class="line">POST        /zoos：新建一个动物园</span><br><span class="line">GET         /zoos/ID：获取某个指定动物园的信息</span><br><span class="line">PUT         /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）</span><br><span class="line">PATCH       /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）</span><br><span class="line">DELETE      /zoos/ID：删除某个动物园</span><br><span class="line">GET         /zoos/ID/animals：列出某个指定动物园的所有动物</span><br><span class="line">DELETE      /zoos/ID/animals/ID：删除某个指定动物园的指定动物</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/getAllCars/createNewCar/deleteAllRedCars</span><br></pre></td></tr></table></figure><p>再比如，某个URI是/posts/show/1，其中show是动词，这个URI就设计错了，正确的写法应该是/posts/1，然后用GET方法表示show。</p><p>如果某些动作是HTTP动词表示不了的，你就应该把动作做成一种资源。比如网上汇款，从账户1向账户2汇款500元，错误的URI是：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST /accounts/1/transfer/500/to/2</span><br></pre></td></tr></table></figure></p><p>正确的写法是把动词transfer改成名词transaction，资源不能是动词，但是可以是一种服务：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/transaction</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1</span><br><span class="line">from=1&amp;to=2&amp;amount=500.00</span><br></pre></td></tr></table></figure></p><p>理清资源的层次结构，比如业务针对的范围是学校，那么学校会是一级资源(/school)，老师(/school/teachers)，学生(/school/students)就是二级资源。</p><h4 id="3、版本（Versioning）"><a href="#3、版本（Versioning）" class="headerlink" title="3、版本（Versioning）"></a>3、版本（Versioning）</h4><p>应该将API的版本号放入URL。如：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">https://api.example.com/v1/</span></span><br></pre></td></tr></table></figure><p>另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。Github采用这种做法。</p><h4 id="4、过滤信息（Filtering）"><a href="#4、过滤信息（Filtering）" class="headerlink" title="4、过滤信息（Filtering）"></a>4、过滤信息（Filtering）</h4><p>如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。下面是一些常见的参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?limit=<span class="number">10</span>：指定返回记录的数量</span><br><span class="line">?offset=<span class="number">10</span>：指定返回记录的开始位置。</span><br><span class="line">?page_number=<span class="number">2</span>&amp;page_size=<span class="number">100</span>：指定第几页，以及每页的记录数。</span><br><span class="line">?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</span><br><span class="line">?animal_type_id=<span class="number">1</span>：指定筛选条件参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。比如，GET /zoo/ID/animals 与 GET /animals?zoo_id=ID 的含义是相同的。</span><br></pre></td></tr></table></figure><h4 id="5、状态码（Status-Codes）"><a href="#5、状态码（Status-Codes）" class="headerlink" title="5、状态码（Status Codes）"></a>5、状态码（Status Codes）</h4><p>状态码范围</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1xx 信息，请求收到，继续处理。范围保留用于底层HTTP的东西，你很可能永远也用不到。</span><br><span class="line">2xx 成功，行为被成功地接受、理解和采纳</span><br><span class="line">3xx 重定向，为了完成请求，必须进一步执行的动作</span><br><span class="line">4xx 客户端错误，请求包含语法错误或者请求无法实现。范围保留用于响应客户端做出的错误，例如。他们提供不良数据或要求不存在的东西。这些请求应该是幂等的，而不是更改服务器的状态。</span><br><span class="line">5xx 范围的状态码是保留给服务器端错误用的。这些错误常常是从底层的函数抛出来的，甚至开发人员也通常没法处理，发送这类状态码的目的以确保客户端获得某种响应。当收到5xx响应时，客户端不可能知道服务器的状态，所以这类状态码是要尽可能的避免。复制代码</span><br></pre></td></tr></table></figure><p>服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</span><br><span class="line">201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</span><br><span class="line">202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</span><br><span class="line">204 NO CONTENT - [DELETE]：用户删除数据成功。</span><br><span class="line">400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</span><br><span class="line">401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</span><br><span class="line">403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</span><br><span class="line">404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</span><br><span class="line">406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</span><br><span class="line">410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</span><br><span class="line">422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</span><br><span class="line">500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</span><br><span class="line">502 网关错误503 Service Unavailable504 网关超时</span><br></pre></td></tr></table></figure><h2 id="HATEOAS"><a href="#HATEOAS" class="headerlink" title="HATEOAS"></a>HATEOAS</h2><p>上面是RESTful API最基本的东西，也是我们平时开发过程中最容易实践到的。实际上，RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。</p><p>比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"link"</span>:</span><br><span class="line">&#123;  </span><br><span class="line">        <span class="attr">"rel"</span>:   <span class="string">"collection https://www.example.com/zoos"</span>,</span><br><span class="line">       <span class="attr">"href"</span>:  <span class="string">"https://api.example.com/zoos"</span>,  </span><br><span class="line">       <span class="attr">"title"</span>: <span class="string">"List of zoos"</span>,  </span><br><span class="line">       <span class="attr">"type"</span>:  <span class="string">"application/vnd.yourformat+json"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API了。rel表示这个API与当前网址的关系（collection关系，并给出该collection的网址），href表示API的路径，title表示API的标题，type表示返回类型Hypermedia API的设计被称为HATEOAS。</p><p>在Spring 中有一个叫做HATEOAS的API 库，通过它我们可以更轻松的创建除符合 HATEOAS 设计的API。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><p><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html（阮一峰，这篇文章大部分内容来源）" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/05/restful_api.html（阮一峰，这篇文章大部分内容来源）</a></p></li><li><p><a href="https://www.baeldung.com/spring-hateoas-tutorial" target="_blank" rel="noopener">https://www.baeldung.com/spring-hateoas-tutorial</a> (RestFul API Tutorial)</p></li><li><p><a href="https://aisensiy.github.io/2017/06/04/spring-boot-and-hateoas/" target="_blank" rel="noopener">https://aisensiy.github.io/2017/06/04/spring-boot-and-hateoas/</a> (Spring中使用HATEOAS)</p></li><li><p><a href="https://spring.io/guides/tutorials/bookmarks/" target="_blank" rel="noopener">https://spring.io/guides/tutorials/bookmarks/</a> (Building REST services with Spring)</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://foter.com/photos/394/black-and-white-image-of-mobile-phone-and-notebook.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="restful" scheme="https://lijinhongpassion.github.io/tags/restful/"/>
    
  </entry>
  
  <entry>
    <title>MySQL-锁（转载）</title>
    <link href="https://lijinhongpassion.github.io/codeant/4a16.html"/>
    <id>https://lijinhongpassion.github.io/codeant/4a16.html</id>
    <published>2019-07-30T11:53:13.000Z</published>
    <updated>2019-07-30T11:56:04.948Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1556909172-54557c7e4fb7?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>参考地址：<a href="https://juejin.im/post/5b55b842f265da0f9e589e79#heading-11" target="_blank" rel="noopener">https://juejin.im/post/5b55b842f265da0f9e589e79#heading-11</a></p><p>mysql中锁的分类如下图所示：排它锁，共享锁，表锁，页锁，间隙锁，意向排它锁，意向共享锁，行锁，读锁，写锁，乐观锁，悲观锁，死锁。这些名词有的博客又直接写锁的英文的简写—&gt;X锁，S锁，IS锁，IX锁，MMVC…</p><p><img src="https://user-gold-cdn.xitu.io/2018/7/23/164c6d7ae44d8ac6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p><ul><li><strong>InnoDB</strong>对于<code>UPDATE、DELETE、INSERT</code>语句，<strong>InnoDB</strong>会<strong>自动</strong>给涉及数据集加排他锁（X)，<strong>InnoDB</strong>引擎常用于写操作</li><li><strong>MyISAM</strong>在执行查询语句<code>SELECT</code>前，会<strong>自动</strong>给涉及的所有表加<strong>读锁</strong>，在执行更新操作（<code>UPDATE、DELETE、INSERT</code>等）前，会<strong>自动</strong>给涉及的表加<strong>写锁</strong>，这个过程并<strong>不需要用户干预</strong>，<strong>MyISAM</strong>常用于读操作</li></ul><p>只会在某些特定的场景下才需要<strong>手动</strong>加锁</p><h2 id="锁的粒度"><a href="#锁的粒度" class="headerlink" title="锁的粒度"></a>锁的粒度</h2><ul><li>表锁（<strong>偏读</strong>）<ul><li>开销小，加锁快；不会出现死锁；锁定力度大，发生锁冲突概率高，并发度最低</li></ul></li><li>行锁（<strong>偏写</strong>）<ul><li>开销大，加锁慢；会出现死锁；锁定粒度小，发生锁冲突的概率低，并发度高</li></ul></li></ul><p>不同的存储引擎支持的锁粒度是不一样的：</p><ul><li><strong>InnoDB行锁和表锁都支持</strong>！</li><li><strong>MyISAM只支持表锁</strong>！</li></ul><font color="#FF0000">InnoDB只有通过<strong>索引条件</strong>检索数据<strong>才使用行级锁</strong>，否则，InnoDB将使用<strong>表锁</strong></font><ul><li>也就是说，<strong>InnoDB的行锁是基于索引的</strong>！</li></ul><hr><h4 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h4><p><strong>表锁下又分为两种模式</strong>：</p><ul><li><p>表读锁（Table Read Lock）</p></li><li><p>表写锁（Table Write Lock）</p></li><li><p>从下图可以清晰看到，在表读锁和表写锁的环境下：读读不阻塞，读写阻塞，写写阻塞！</p><ul><li>读读不阻塞：当前用户在读数据，其他的用户也在读数据，不会加锁</li><li>读写阻塞：当前用户在读数据，其他的用户<strong>不能修改当前用户读的数据</strong>，会加锁！</li><li>写写阻塞：当前用户在修改数据，其他的用户<strong>不能修改当前用户正在修改的数据</strong>，会加锁！</li></ul><p>| 锁类型 | 他人可读 | 他人可写 |<br>| —— | ——– | ——– |<br>| 读锁   | 是       | 否       |<br>| 写锁   | 否       | 否       |</p></li></ul><p>从上面已经看到了：<strong>读锁和写锁是互斥的，读写操作是串行</strong>。</p><ul><li>如果某个进程想要获取读锁，<strong>同时</strong>另外一个进程想要获取写锁。在mysql里边，<strong>写锁是优先于读锁的</strong>！</li><li>写锁和读锁优先级的问题是可以通过参数调节的：<code>max_write_lock_count</code>和<code>low-priority-updates</code></li></ul><p>值得注意的是：</p><ul><li><strong>MyISAM可以</strong>支持查询和插入操作的<strong>并发</strong>进行。可以通过系统变量<code>concurrent_insert</code>来指定哪种模式，在<strong>MyISAM</strong>中它默认是：如果MyISAM表中没有空洞（即表的中间没有被删除的行），MyISAM允许在一个进程读表的同时，另一个进程从<strong>表尾</strong>插入记录。</li><li>但是<strong>InnoDB存储引擎是不支持的</strong>！</li></ul><hr><h4 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h4><p>上边简单讲解了表锁的相关知识，我们使用Mysql一般是使用InnoDB存储引擎的。InnoDB和MyISAM有两个本质的区别：</p><ul><li>InnoDB支持行锁</li><li>InnoDB支持事务</li></ul><p>从上面也说了：我们是<strong>很少手动加表锁</strong>的。表锁对我们程序员来说几乎是透明的，即使InnoDB不走索引，加的表锁也是自动的！</p><p>我们应该<strong>更加关注行锁的内容</strong>，因为InnoDB一大特性就是支持行锁！</p><p>InnoDB实现了以下<strong>两种</strong>类型的行锁。</p><ul><li>共享锁（S锁）：允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁。<ul><li>也叫做<strong>读锁</strong>：读锁是<strong>共享</strong>的，多个客户可以<strong>同时读取同一个</strong>资源，但<strong>不允许其他客户修改</strong>。</li></ul></li><li>排他锁（X锁)：允许获得排他锁的事务更新数据，阻止其他事务取得相同数据集的共享读锁和排他写锁。<ul><li>也叫做<strong>写锁</strong>：写锁是排他的，<strong>写锁会阻塞其他的写锁和读锁</strong>。</li></ul></li></ul><p>看完上面的有没有发现，在一开始所说的：X锁，S锁，读锁，写锁，共享锁，排它锁其实<strong>总共就两个锁</strong>，只不过它们<strong>有多个名字罢了</strong>~~~</p><p>另外，<strong>为了允许行锁和表锁共存，实现多粒度锁机制</strong>，InnoDB还有两种内部使用的意向锁（Intention Locks），这两种意向锁都是<strong>表锁</strong>：</p><ul><li>意向共享锁（IS）：事务打算给数据行加行共享锁，事务在给一个数据行加共享锁前必须先取得该表的IS锁。</li><li>意向排他锁（IX）：事务打算给数据行加行排他锁，事务在给一个数据行加排他锁前必须先取得该表的IX锁。</li><li>意向锁也是数据库隐式帮我们做了，<strong>不需要程序员操心</strong>！</li></ul><hr><h6 id="MVCC和事务的隔离级别"><a href="#MVCC和事务的隔离级别" class="headerlink" title="MVCC和事务的隔离级别"></a>MVCC和事务的隔离级别</h6><p>数据库事务有不同的隔离级别，不同的隔离级别对锁的使用是不同的，<strong>锁的应用最终导致不同事务的隔离级别</strong></p><p>MVCC(Multi-Version Concurrency Control)多版本并发控制，可以简单地认为：<strong>MVCC就是行级锁的一个变种(升级版)</strong>。</p><ul><li>事务的隔离级别就是<strong>通过锁的机制来实现</strong>，只不过<strong>隐藏了加锁细节</strong></li></ul><p>在<strong>表锁中我们读写是阻塞</strong>的，基于提升并发性能的考虑，<strong>MVCC一般读写是不阻塞的</strong>(所以说MVCC很多情况下避免了加锁的操作)</p><ul><li>MVCC实现的<strong>读写不阻塞</strong>正如其名：<strong>多版本</strong>并发控制—&gt;通过一定机制生成一个数据请求<strong>时间点的一致性数据快照（Snapshot)</strong>，并用这个快照来提供一定级别（<strong>语句级或事务级</strong>）的<strong>一致性读取</strong>。从用户的角度来看，好像是<strong>数据库可以提供同一数据的多个版本</strong>。</li></ul><p>快照有<strong>两个级别</strong>：</p><ul><li>语句级<ul><li>针对于<code>Read committed</code>隔离级别</li></ul></li><li>事务级别<ul><li>针对于<code>Repeatable read</code>隔离级别</li></ul></li></ul><p>我们在初学的时候已经知道，事务的隔离级别有<strong>4种</strong>：</p><ul><li>Read uncommitted<ul><li>会出现脏读，不可重复读，幻读</li></ul></li><li>Read committed<ul><li>会出现不可重复读，幻读</li></ul></li><li>Repeatable read<ul><li>会出现幻读(但在Mysql实现的Repeatable read配合gap锁不会出现幻读！)</li></ul></li><li>Serializable<ul><li>串行，避免以上的情况！</li></ul></li></ul><hr><p><code>Read uncommitted</code>会出现的现象—&gt;脏读：<strong>一个事务读取到另外一个事务未提交的数据</strong></p><ul><li>例子：A向B转账，<strong>A执行了转账语句，但A还没有提交事务，B读取数据，发现自己账户钱变多了</strong>！B跟A说，我已经收到钱了。A回滚事务【rollback】，等B再查看账户的钱时，发现钱并没有多。</li><li>出现脏读的本质就是因为<strong>操作(修改)完该数据就立马释放掉锁</strong>，导致读的数据就变成了无用的或者是<strong>错误的数据</strong>。</li></ul><hr><p><code>Read committed</code><strong>避免脏读</strong>的做法其实很简单：</p><ul><li>就是把<strong>释放锁的位置调整到事务提交之后</strong>，此时在事务提交前，其他进程是无法对该行数据进行读取的，包括任何操作</li></ul><p>但<code>Read committed</code>出现的现象—&gt;不可重复读：<strong>一个事务读取到另外一个事务已经提交的数据，也就是说一个事务可以看到其他事务所做的修改</strong></p><ul><li>注：<strong>A查询数据库得到数据，B去修改数据库的数据，导致A多次查询数据库的结果都不一样【危害：A每次查询的结果都是受B的影响的，那么A查询出来的信息就没有意思了】</strong></li></ul><hr><p>上面也说了，<code>Read committed</code>是<strong>语句级别</strong>的快照！<strong>每次读取的都是当前最新的版本</strong>！</p><p><code>Repeatable read</code>避免不可重复读是<strong>事务级别</strong>的快照！每次读取的都是当前事务的版本，即使被修改了，也只会读取当前事务版本的数据。</p><p>呃…如果还是不太清楚，我们来看看InnoDB的MVCC是怎么样的吧(摘抄《高性能MySQL》)</p><p><img src="https://user-gold-cdn.xitu.io/2018/7/23/164c6d7b415dc921?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p><img src="https://user-gold-cdn.xitu.io/2018/7/23/164c6d7b605f98a3?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>至于虚读(幻读)：<strong>是指在一个事务内读取到了别的事务插入的数据，导致前后读取不一致。</strong></p><ul><li>注：<strong>和不可重复读类似，但虚读(幻读)会读到其他事务的插入的数据，导致前后读取不一致</strong></li><li>MySQL的<code>Repeatable read</code>隔离级别加上GAP间隙锁<strong>已经处理了幻读了</strong>。</li></ul><hr><h2 id="锁的方式"><a href="#锁的方式" class="headerlink" title="锁的方式"></a>锁的方式</h2><p>无论是<code>Read committed</code>还是<code>Repeatable read</code>隔离级别，都是为了解决<strong>读写冲突</strong>的问题。</p><p>单纯在<code>Repeatable read</code>隔离级别下我们来考虑一个问题：</p><p><img src="https://user-gold-cdn.xitu.io/2018/7/23/164c6d7b64b8c6fa?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>此时，用户李四的操作就丢失掉了：</p><ul><li><strong>丢失更新</strong>：一个事务的更新<strong>覆盖了其它事务的更新结果</strong>。</li></ul><p>(ps:暂时没有想到比较好的例子来说明更新丢失的问题，虽然上面的例子也是更新丢失，但<strong>一定程度上是可接受的</strong>..不知道有没有人能想到不可接受的更新丢失例子呢…)</p><p>解决的方法：</p><ul><li>使用Serializable隔离级别，事务是串行执行的！</li><li>乐观锁</li><li>悲观锁</li></ul><blockquote><ol><li>乐观锁是一种思想，具体实现是，表中有一个版本字段，第一次读的时候，获取到这个字段。处理完业务逻辑开始更新的时候，需要再次查看该字段的值是否和第一次的一样。如果一样更新，反之拒绝。之所以叫乐观，因为这个模式没有从数据库加锁，等到更新的时候再判断是否可以更新。</li><li>悲观锁是数据库层面加锁，都会阻塞去等待锁。</li></ol></blockquote><h4 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h4><p>所以，按照上面的例子。我们使用悲观锁的话其实很简单(手动加行锁就行了)：</p><ul><li><code>select * from xxxx for update</code></li></ul><p>在select 语句后边加了 <code>for update</code>相当于加了排它锁(写锁)，加了写锁以后，其他的事务就不能对它修改了！需要等待当前事务修改完之后才可以修改.</p><ul><li>也就是说，如果张三使用<code>select ... for update</code>，李四就无法对该条记录修改了~</li></ul><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><p>乐观锁不是数据库层面上的锁，是需要自己手动去加的锁。一般我们添加一个版本字段来实现：</p><p>具体过程是这样的：</p><p>张三<code>select * from table</code> —&gt;会查询出记录出来，同时会有一个version字段</p><p><img src="https://user-gold-cdn.xitu.io/2018/7/23/164c6d7b71fd3e44?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>李四<code>select * from table</code> —&gt;会查询出记录出来，同时会有一个version字段</p><p><img src="https://user-gold-cdn.xitu.io/2018/7/23/164c6d7b71fd3e44?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>李四对这条记录做修改：<code>update A set Name=lisi,version=version+1 where ID=#{id} and version=#{version}</code>，判断之前查询到的version与现在的数据的version进行比较，<strong>同时会更新version字段</strong></p><p>此时数据库记录如下：</p><p><img src="https://user-gold-cdn.xitu.io/2018/7/23/164c6d7bd80faade?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>张三也对这条记录修改：<code>update A set Name=lisi,version=version+1 where ID=#{id} and version=#{version}</code>，但失败了！因为<strong>当前数据库中的版本跟查询出来的版本不一致</strong>！</p><p><img src="https://user-gold-cdn.xitu.io/2018/7/23/164c6d7bda2aa2b3?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><h2 id="间隙锁GAP"><a href="#间隙锁GAP" class="headerlink" title="间隙锁GAP"></a>间隙锁GAP</h2><p>当我们<strong>用范围条件检索数据</strong>而不是相等条件检索数据，并请求共享或排他锁时，InnoDB会给<strong>符合范围条件的已有数据记录的索引项加锁</strong>；对于键值在条件范围内但并不存在的记录，叫做“间隙（GAP)”。InnoDB也会对这个“间隙”加锁，这种锁机制就是所谓的间隙锁。</p><p>值得注意的是：间隙锁只会在<code>Repeatable read</code>隔离级别下使用~</p><p>例子：假如emp表中只有101条记录，其empid的值分别是1,2,…,100,101</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Select * from  emp where empid &gt; 100 for update;</span><br><span class="line"></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>上面是一个范围查询，InnoDB<strong>不仅</strong>会对符合条件的empid值为101的记录加锁，也会对<strong>empid大于101（这些记录并不存在）的“间隙”加锁</strong>。</p><p>InnoDB使用间隙锁的目的有两个：</p><ul><li><strong>为了防止幻读</strong>(上面也说了，<code>Repeatable read</code>隔离级别下再通过GAP锁即可避免了幻读)</li><li>满足恢复和复制的需要<ul><li>MySQL的恢复机制要求：<strong>在一个事务未提交前，其他并发事务不能插入满足其锁定条件的任何记录，也就是不允许出现幻读</strong></li></ul></li></ul><hr><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>并发的问题就少不了死锁，在MySQL中同样会存在死锁的问题。</p><p>但一般来说MySQL通过回滚帮我们解决了不少死锁的问题了，但死锁是无法完全避免的，可以通过以下的经验参考，来尽可能少遇到死锁：</p><ul><li>1）以<strong>固定的顺序</strong>访问表和行。比如对两个job批量更新的情形，简单方法是对id列表先排序，后执行，这样就避免了交叉等待锁的情形；将两个事务的sql顺序调整为一致，也能避免死锁。</li><li>2）<strong>大事务拆小</strong>。大事务更倾向于死锁，如果业务允许，将大事务拆小。</li><li>3）在同一个事务中，尽可能做到<strong>一次锁定</strong>所需要的所有资源，减少死锁概率。</li><li>4）<strong>降低隔离级别</strong>。如果业务允许，将隔离级别调低也是较好的选择，比如将隔离级别从RR调整为RC，可以避免掉很多因为gap锁造成的死锁。</li><li>5）<strong>为表添加合理的索引</strong>。可以看到如果不走索引将会为表的每一行记录添加上锁，死锁的概率大大增大。</li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面说了一大堆关于MySQL数据库锁的东西，现在来简单总结一下。</p><p>表锁其实我们程序员是很少关心它的：</p><ul><li>在MyISAM存储引擎中，当执行SQL语句的时候是自动加的。</li><li>在InnoDB存储引擎中，如果没有使用索引，表锁也是自动加的。</li></ul><p>现在我们大多数使用MySQL都是使用InnoDB，InnoDB支持行锁：</p><ul><li>共享锁–读锁–S锁</li><li>排它锁–写锁–X锁</li></ul><p>在默认的情况下，<code>select</code>是不加任何行锁的~事务可以通过以下语句显示给记录集加共享锁或排他锁。</p><ul><li>共享锁（S）：<code>SELECT * FROM table_name WHERE ... LOCK IN SHARE MODE</code>。</li><li>排他锁（X)：<code>SELECT * FROM table_name WHERE ... FOR UPDATE</code>。</li></ul><p>InnoDB<strong>基于行锁</strong>还实现了MVCC多版本并发控制，MVCC在隔离级别下的<code>Read committed</code>和<code>Repeatable read</code>下工作。MVCC能够实现<strong>读写不阻塞</strong>！</p><p>InnoDB实现的<code>Repeatable read</code>隔离级别配合GAP间隙锁已经避免了幻读！</p><ul><li>乐观锁其实是一种思想，正如其名：认为不会锁定的情况下去更新数据，如果发现不对劲，才不更新(回滚)。在数据库中往往添加一个version字段来实现。</li><li>悲观锁用的就是数据库的行锁，认为数据库会发生并发冲突，直接上来就把数据锁住，其他事务不能修改，直至提交了当前事务</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1556909172-54557c7e4fb7?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://lijinhongpassion.github.io/categories/mysql/"/>
    
    
      <category term="锁" scheme="https://lijinhongpassion.github.io/tags/%E9%94%81/"/>
    
      <category term="mysql" scheme="https://lijinhongpassion.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Java-SpringAOP中JDK动态代理&amp;CGLIB动态代理</title>
    <link href="https://lijinhongpassion.github.io/codeant/717b.html"/>
    <id>https://lijinhongpassion.github.io/codeant/717b.html</id>
    <published>2019-07-25T06:56:55.000Z</published>
    <updated>2019-07-25T07:01:49.522Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1563903227677-988f00ecc0fd?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>官方网站：<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#aop-pfb-proxy-types" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#aop-pfb-proxy-types</a></p><p><strong>ioc干什么</strong>：前面了解到ioc是基于反射机制实现的控制，<code>newInstance()</code>方法获取实例化对象；反转的理解是用户需要什么，用户做个标记（@compment），然后就把需要的东西给他（注入）</p><p><strong>aop干什么</strong>：aop是面向切面编程，通俗的说，就是在方法执行前，执行后做一些额外操作；aop运用的是动态代理机制。</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/717b/1.png" alt></p><p>下面讲的是spring aop的两种动态代理方式的区别。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>首先，我们知道Spring AOP的底层实现有两种方式：一种是JDK动态代理，另一种是CGLib的方式。</p><p>自Java 1.3以后，Java提供了动态代理技术，允许开发者在运行期创建接口的代理实例，后来这项技术被用到了Spring的很多地方。</p><p>JDK动态代理主要涉及java.lang.reflect包下边的两个类：Proxy和InvocationHandler。其中，InvocationHandler是一个接口，可以通过实现该接口定义横切逻辑，并通过反射机制调用目标类的代码，动态地将横切逻辑和业务逻辑编织在一起。</p><p><strong>JDK动态代理的话，他有一个限制，就是它只能为接口创建代理实例，而对于没有通过接口定义业务方法的类，如何创建动态代理实例哪？答案就是CGLib。</strong></p><p>CGLib采用底层的字节码技术，全称是：Code Generation Library，CGLib可以为一个类创建一个子类，在子类中采用方法拦截的技术拦截所有父类方法的调用并顺势织入横切逻辑。</p><h2 id="JDK-和-CGLib动态代理区别"><a href="#JDK-和-CGLib动态代理区别" class="headerlink" title="JDK 和 CGLib动态代理区别"></a>JDK 和 CGLib动态代理区别</h2><h4 id="1、JDK动态代理具体实现原理："><a href="#1、JDK动态代理具体实现原理：" class="headerlink" title="1、JDK动态代理具体实现原理："></a><strong>1、JDK动态代理具体实现原理：</strong></h4><ul><li>通过实现InvocationHandler接口创建自己的调用处理器；</li><li>通过为Proxy类指定ClassLoader对象和一组interface来创建动态代理；</li><li>通过反射机制获取动态代理类的构造函数，其唯一参数类型就是调用处理器接口类型；</li><li>通过构造函数创建动态代理类实例，构造时调用处理器对象作为参数参入；</li></ul><p>JDK动态代理是面向接口的代理模式，如果被代理目标没有接口那么Spring也无能为力，Spring通过Java的反射机制生产被代理接口的新的匿名实现类，重写了其中AOP的增强方法。</p><h4 id="2、CGLib动态代理："><a href="#2、CGLib动态代理：" class="headerlink" title="2、CGLib动态代理："></a><strong>2、CGLib动态代理：</strong></h4><p>CGLib是一个强大、高性能的Code生产类库，可以实现运行期动态扩展java类，Spring在运行期间通过 CGlib继承要被动态代理的类，重写父类的方法，实现AOP面向切面编程呢。</p><p><strong>3、两者对比：</strong></p><ul><li>JDK动态代理是面向接口的。</li><li>CGLib动态代理是通过字节码底层继承要代理类来实现（如果被代理类被final关键字所修饰，那么抱歉会失败）。</li></ul><p><strong>4、使用注意：</strong></p><ul><li>如果要被代理的对象是个实现类，那么Spring会使用JDK动态代理来完成操作（Spirng默认采用JDK动态代理实现机制）；</li><li>如果要被代理的对象不是个实现类那么，Spring会强制使用CGLib来实现动态代理。</li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://cloud.tencent.com/developer/article/1461796" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1461796</a>  太好了！总算有人把动态代理、CGlib、AOP都说清楚了！</p><p><a href="https://zhuanlan.zhihu.com/p/67041662" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/67041662</a>  Spring AOP中的JDK和CGLib动态代理哪个效率更高？</p><p><a href="https://blog.csdn.net/wuruijiang/article/details/78970720" target="_blank" rel="noopener">https://blog.csdn.net/wuruijiang/article/details/78970720</a>  spring的AOP原理，使用场景是什么？</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1563903227677-988f00ecc0fd?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="spring" scheme="https://lijinhongpassion.github.io/categories/spring/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="spring" scheme="https://lijinhongpassion.github.io/tags/spring/"/>
    
      <category term="aop" scheme="https://lijinhongpassion.github.io/tags/aop/"/>
    
  </entry>
  
  <entry>
    <title>Java-nginx安装教程（centos7）</title>
    <link href="https://lijinhongpassion.github.io/codeant/1300.html"/>
    <id>https://lijinhongpassion.github.io/codeant/1300.html</id>
    <published>2019-07-22T14:06:05.000Z</published>
    <updated>2019-07-22T15:00:43.384Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1563729561649-622906a96d99?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>官方网站：<a href="http://nginx.org/" target="_blank" rel="noopener">http://nginx.org/</a></p><p>本文内容：nginx安装、启动、卸载</p><p>系统：CentOS 7.6</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><table><thead><tr><th>名称</th><th>说明</th><th>下载地址（方式）</th></tr></thead><tbody><tr><td>nginx</td><td>1.160</td><td>wget <a href="http://nginx.org/download/nginx-1.16.0.tar.gz" target="_blank" rel="noopener">http://nginx.org/download/nginx-1.16.0.tar.gz</a></td></tr><tr><td>PCRE</td><td>第三方的开发包</td><td>yum install -y pcre pcre-devel</td></tr><tr><td>zlib</td><td>第三方的开发包</td><td>yum install -y zlib zlib-devel</td></tr><tr><td>openssl</td><td>第三方的开发包</td><td>yum install -y openssl openssl-devel</td></tr></tbody></table><h2 id="磁盘目录"><a href="#磁盘目录" class="headerlink" title="磁盘目录"></a>磁盘目录</h2><table><thead><tr><th>说明</th><th>位置</th></tr></thead><tbody><tr><td>安装包备份位置</td><td>/opt/</td></tr><tr><td>压缩包解压位置</td><td>/usr/local/nginx-1.16.0</td></tr><tr><td>安装后nginx位置</td><td>/usr/local/nginx1.16.0</td></tr></tbody></table><h2 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1、需要安装gcc的环境</span><br><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure><h2 id="第三方开发包安装"><a href="#第三方开发包安装" class="headerlink" title="第三方开发包安装"></a>第三方开发包安装</h2><h4 id="PCRE"><a href="#PCRE" class="headerlink" title="PCRE"></a>PCRE</h4><p> PCRE(Perl Compatible Regular Expressions)是一个Perl库，包括 perl 兼容的正则表达式库。nginx的http模块使用pcre来解析正则表达式，所以需要在linux上安装pcre库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure><p>注：pcre-devel是使用pcre开发的一个二次开发库。nginx也需要此库。</p><hr><h4 id="zlib"><a href="#zlib" class="headerlink" title="zlib"></a>zlib</h4><p>zlib库提供了很多种压缩和解压缩的方式，nginx使用zlib对http包的内容进行gzip，所以需要在linux上安装zlib库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure><hr><h4 id="openssl"><a href="#openssl" class="headerlink" title="openssl"></a>openssl</h4><p> OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及SSL协议，并提供丰富的应用程序供测试或其它目的使用。</p><p>nginx不仅支持http协议，还支持https（即在ssl协议上传输http），所以需要在linux安装openssl库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure><hr><h2 id="nginx安装"><a href="#nginx安装" class="headerlink" title="nginx安装"></a>nginx安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1、下载nginx</span><br><span class="line">wget http://nginx.org/download/nginx-1.16.0.tar.gz</span><br><span class="line"><span class="meta">#</span> 2、解压</span><br><span class="line">tar -zxvf nginx-1.16.0.tar.gz -C /usr/local/</span><br><span class="line"><span class="meta">#</span> 3、进入解压目录</span><br><span class="line">cd /usr/local/nginx-1.16.0/</span><br><span class="line"><span class="meta">#</span> 4、使用configure命令创建makeFile文件</span><br><span class="line">        ./configure \</span><br><span class="line">    --prefix=/usr/local/nginx1.16.0 \</span><br><span class="line">    --pid-path=/var/run/nginx/nginx.pid \</span><br><span class="line">    --lock-path=/var/lock/nginx.lock \</span><br><span class="line">    --error-log-path=/var/log/nginx/error.log \</span><br><span class="line">    --http-log-path=/var/log/nginx/access.log \</span><br><span class="line">    --with-http_gzip_static_module \</span><br><span class="line">    --http-client-body-temp-path=/var/temp/nginx/client \</span><br><span class="line">    --http-proxy-temp-path=/var/temp/nginx/proxy \</span><br><span class="line">    --http-fastcgi-temp-path=/var/temp/nginx/fastcgi \</span><br><span class="line">    --http-uwsgi-temp-path=/var/temp/nginx/uwsgi \</span><br><span class="line">    --http-scgi-temp-path=/var/temp/nginx/scgi</span><br><span class="line"><span class="meta">#</span> 5、创建临时目录</span><br><span class="line"><span class="meta">#</span> 注意：启动nginx之前，上边将临时文件目录指定为/var/temp/nginx，需要在/var下创建temp及nginx目录</span><br><span class="line">mkdir -p /var/temp/nginx/fastcgi &amp;&amp; mkdir -p /var/temp/nginx/uwsgi &amp;&amp; mkdir -p /var/temp/nginx/scgi &amp;&amp; mkdir -p /var/temp/nginx/proxy &amp;&amp; mkdir -p /var/temp/nginx/client</span><br><span class="line"><span class="meta">#</span> 4、make 命令编译</span><br><span class="line">make</span><br><span class="line"><span class="meta">#</span> 5、make install 命令安装</span><br><span class="line">make install # 安装完成后会有 /usr/local/nginx1.16.0 文件目录，包含conf、html、sbin</span><br></pre></td></tr></table></figure><hr><h2 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1、进入/usr/local/nginx1.16.0/sbin目录</span><br><span class="line">cd /usr/local/nginx1.16.0/sbin</span><br><span class="line"><span class="meta">#</span> 2、启动</span><br><span class="line">./nginx</span><br><span class="line"><span class="meta">#</span> 3、关闭</span><br><span class="line">./nginx -s stop</span><br><span class="line"><span class="meta">#</span> 推荐使用quit</span><br><span class="line">./nginx -s quit</span><br><span class="line"><span class="meta">#</span> 4、重启（刷新配置文件）</span><br><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 启动成功，会开启master 和 worker两个进程</span><br><span class="line">[root@localhost sbin]# ps -aux | grep nginx</span><br><span class="line">root      12470  0.0  0.0  20556   620 ?        Ss   21:35   0:00 nginx: master process ./nginx</span><br><span class="line">nobody    12471  0.0  0.1  21008  1336 ?        S    21:35   0:00 nginx: worker process</span><br><span class="line">root      12496  0.0  0.0 112724   992 pts/0    S+   21:35   0:00 grep --color=auto nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 启动成功，游览器输入ip，默认是80端口，返回文中出现Welcome to nginx!。注意：是否关闭防火墙</span><br><span class="line">[root@localhost sbin]# systemctl stop firewalld </span><br><span class="line">[root@localhost sbin]# curl 192.168.26.101</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        width: 35em;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href="http://nginx.org/"&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href="http://nginx.com/"&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="开机自启动nginx"><a href="#开机自启动nginx" class="headerlink" title="开机自启动nginx"></a>开机自启动nginx</h2><ol><li>编写shell脚本</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/init.d/nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 输入下面内容</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span> nginx Startup script for the Nginx HTTP Server</span><br><span class="line"><span class="meta">#</span> it is v.0.0.2 version.</span><br><span class="line"><span class="meta">#</span> chkconfig: - 85 15</span><br><span class="line"><span class="meta">#</span> description: Nginx is a high-performance web and proxy server.</span><br><span class="line"><span class="meta">#</span>              It has a lot of features, but it's not for everyone.</span><br><span class="line"><span class="meta">#</span> processname: nginx</span><br><span class="line"><span class="meta">#</span> pidfile: /var/run/nginx.pid</span><br><span class="line"><span class="meta">#</span> config: /usr/local/nginx/conf/nginx.conf</span><br><span class="line">nginxd=/usr/local/nginx1.16.0/sbin/nginx # 安装路径下sbin/nginx</span><br><span class="line">nginx_config=/usr/local/nginx1.16.0/conf/nginx.conf # 安装路径下nginx.conf</span><br><span class="line">nginx_pid=/var/run/nginx.pid</span><br><span class="line">RETVAL=0</span><br><span class="line">prog="nginx"</span><br><span class="line"><span class="meta">#</span> Source function library.</span><br><span class="line">. /etc/rc.d/init.d/functions</span><br><span class="line"><span class="meta">#</span> Source networking configuration.</span><br><span class="line">. /etc/sysconfig/network</span><br><span class="line"><span class="meta">#</span> Check that networking is up.</span><br><span class="line">[ $&#123;NETWORKING&#125; = "no" ] &amp;&amp; exit 0</span><br><span class="line">[ -x $nginxd ] || exit 0</span><br><span class="line"><span class="meta">#</span> Start nginx daemons functions.</span><br><span class="line">start() &#123;</span><br><span class="line">if [ -e $nginx_pid ];then</span><br><span class="line">   echo "nginx already running...."</span><br><span class="line">   exit 1</span><br><span class="line">fi</span><br><span class="line">   echo -n $"Starting $prog: "</span><br><span class="line">   daemon $nginxd -c $&#123;nginx_config&#125;</span><br><span class="line">   RETVAL=$?</span><br><span class="line">   echo</span><br><span class="line">   [ $RETVAL = 0 ] &amp;&amp; touch /var/lock/subsys/nginx</span><br><span class="line">   return $RETVAL</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span> Stop nginx daemons functions.</span><br><span class="line">stop() &#123;</span><br><span class="line">        echo -n $"Stopping $prog: "</span><br><span class="line">        killproc $nginxd</span><br><span class="line">        RETVAL=$?</span><br><span class="line">        echo</span><br><span class="line">        [ $RETVAL = 0 ] &amp;&amp; rm -f /var/lock/subsys/nginx /var/run/nginx.pid</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span> reload nginx service functions.</span><br><span class="line">reload() &#123;</span><br><span class="line">    echo -n $"Reloading $prog: "</span><br><span class="line">    #kill -HUP `cat $&#123;nginx_pid&#125;`</span><br><span class="line">    killproc $nginxd -HUP</span><br><span class="line">    RETVAL=$?</span><br><span class="line">    echo</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span> See how we were called.</span><br><span class="line">case "$1" in</span><br><span class="line">start)</span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">stop)</span><br><span class="line">        stop</span><br><span class="line">        ;;</span><br><span class="line">reload)</span><br><span class="line">        reload</span><br><span class="line">        ;;</span><br><span class="line">restart)</span><br><span class="line">        stop</span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">status)</span><br><span class="line">        status $prog</span><br><span class="line">        RETVAL=$?</span><br><span class="line">        ;;</span><br><span class="line">*)</span><br><span class="line">        echo $"Usage: $prog &#123;start|stop|restart|reload|status|help&#125;"</span><br><span class="line">        exit 1</span><br><span class="line">esac</span><br><span class="line">exit $RETVAL</span><br></pre></td></tr></table></figure><ol start="2"><li>设置文件的访问权限</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> a+x ==&gt; all user can execute  所有用户可执行</span><br><span class="line">chmod a+x /etc/init.d/nginx</span><br></pre></td></tr></table></figure><ol start="3"><li>加入到rc.local文件中</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/rc.local</span><br><span class="line"><span class="meta">#</span> 加入一行  /etc/init.d/nginx start    保存并退出，下次重启会生效。</span><br><span class="line">/etc/init.d/nginx start</span><br></pre></td></tr></table></figure><h2 id="卸载nginx"><a href="#卸载nginx" class="headerlink" title="卸载nginx"></a>卸载nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 停止nginx服务</span><br><span class="line">/usr/local/nginx1.16.0/sbin/nginx -s quit</span><br><span class="line"><span class="meta">#</span> 查找nginx相关文件</span><br><span class="line">find / -name nginx*</span><br><span class="line"><span class="meta">#</span> 删除所有相关的文件</span><br><span class="line">rm -rf 相关文件</span><br><span class="line"><span class="meta">#</span> 卸载第三方开发包</span><br><span class="line">yum remove -y pcre pcre-devel zlib zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1563729561649-622906a96d99?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="nginx" scheme="https://lijinhongpassion.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Java-Java环境搭建（CentOS7）</title>
    <link href="https://lijinhongpassion.github.io/codeant/b7d4.html"/>
    <id>https://lijinhongpassion.github.io/codeant/b7d4.html</id>
    <published>2019-07-21T09:02:34.000Z</published>
    <updated>2019-07-21T09:21:25.973Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1556742044-3c52d6e88c62?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>准备重搭CentOS上的java环境，以前一直没有总结，今天花点时间写个教程。</p><p>这里只是搭建简易的java环境，包含了mysql数据库，tomcat服务器和jdk，至于其他的什么nginx代理，redis数据库以后有时间再出教程吧。</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><table><thead><tr><th>名称</th><th>版本</th><th>下载地址</th></tr></thead><tbody><tr><td>CentOS</td><td>7.6</td><td><a href="http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1810.iso" target="_blank" rel="noopener">http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1810.iso</a></td></tr><tr><td>MySQL</td><td>5.7</td><td>yum安装</td></tr><tr><td>JDK</td><td>8</td><td><a href="https://send.firefox.com/download/9b0ae28c731a638b/#AiSm6AwQ6s1klK76rPl1jQ" target="_blank" rel="noopener">https://send.firefox.com/download/9b0ae28c731a638b/#AiSm6AwQ6s1klK76rPl1jQ</a></td></tr><tr><td>Tomcat</td><td>8.5</td><td><a href="http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.43/bin/apache-tomcat-8.5.43.tar.gz" target="_blank" rel="noopener">http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.43/bin/apache-tomcat-8.5.43.tar.gz</a></td></tr></tbody></table><p>文件失效联系我：<a href="https://wpa.qq.com/msgrd?v=3&amp;uin=1755497577&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener">点击这里鼠标右键打开新标签页联系我</a></p><p>关于centos说明一下，如果你是使用的云服务器，那就更方便，直接看下面教程；</p><p>如果你准备使用win上的VMware虚拟机来跑centos系统的话，百度一大片，我这里给出百度的教程，<a href="https://jingyan.baidu.com/article/08b6a591e505cb14a809220c.html" target="_blank" rel="noopener">安装VMware</a> <a href="https://jingyan.baidu.com/article/0eb457e5d7b28403f0a90577.html" target="_blank" rel="noopener">安装centos7</a>，操作好后修改静态IP</p><h2 id="静态IP"><a href="#静态IP" class="headerlink" title="静态IP"></a>静态IP</h2><p>第一步：更改文件 vi /etc/sysconfig/network-scripts/ifcfg-ens33 的内容:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">OTPROTO="static"  # 手动分配ip</span><br><span class="line">NAME="ens33"  # 网卡设备名，设备名一定要跟文件名一致</span><br><span class="line">DEVICE="ens33"  # 网卡设备名，设备名一定要跟文件名一致</span><br><span class="line">ONBOOT="yes"  # 该网卡是否随网络服务启动</span><br><span class="line">IPADDR="192.168.26.101"  # 该网卡ip地址就是你要配置的固定IP，如果你要用xshell等工具连接，220这个网段最好和你自己的电脑网段一致，否则有可能用xshell连接失败</span><br><span class="line">GATEWAY="192.168.26.2"   # 网关</span><br><span class="line">NETMASK="255.255.255.0"   # 子网掩码</span><br><span class="line">DNS1="192.168.26.2"    # DNS</span><br></pre></td></tr></table></figure><p>第二步：重启网络服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure><p>第三步：测试网络服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><hr><h1 id="更换yum源"><a href="#更换yum源" class="headerlink" title="更换yum源"></a>更换yum源</h1><p><strong>1、备份</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure><p><strong> 2、下载</strong></p><p>下载新的<code>CentOS-Base.repo</code>到<code>/etc/yum.repos.d/</code>,阿里云的yum源，因为自带的太慢了</p><p><strong>CentOS 5</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo</span><br></pre></td></tr></table></figure><p><strong>CentOS 6</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br></pre></td></tr></table></figure><p><strong>CentOS 7</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure><p>注意，如果提示找不到路径，可以手动修改baseurl的地址</p><h1 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h1><p>推荐两个工具<code>xshell</code>,<code>xftp</code>，自行百度怎么使用</p><p> <strong>第一步：</strong> </p><p>   第一步检测系统是否自带安装mysql，若有执行第二句删除系统自带的mysql及其依赖。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum list installed | grep mysql</span><br><span class="line">yum -y remove mysql-libs.x86_64</span><br></pre></td></tr></table></figure><p> <strong>第二步：</strong> 安装</p><p>两种方法：yum安装和压缩包安装，这里只讲yum安装</p><ul><li>安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">1.切换目录</span><br><span class="line">cd /opt/</span><br><span class="line">2.安装wge:</span><br><span class="line">sudo yum install wget</span><br><span class="line">3.下载rpm:</span><br><span class="line">wget http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line">4.安装rpm:</span><br><span class="line">sudo yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line">5.安装MySQL:</span><br><span class="line">sudo yum install mysql-community-server</span><br><span class="line">6.启动MySQL服务:</span><br><span class="line">systemctl start  mysqld.service</span><br><span class="line">7.关闭Mysql服务(如要执行后面的操作,跳过此步骤):</span><br><span class="line">systemctl stop  mysqld.service</span><br><span class="line">8.检查Mysql启动节点:</span><br><span class="line">sudo netstat -tap | grep mysql</span><br><span class="line">9.进入mysql:</span><br><span class="line">    查看mysql默认密码</span><br><span class="line">    grep "password" /var/log/mysqld.log</span><br><span class="line">    结果：2019-07-21T08:41:44.291710Z 1 [Note] A temporary password is generated for root@localhost: f!vik7lr%i1Q(f!vik7lr%i1Q是密码)</span><br><span class="line">mysql   -uroot   -p//此处直接回车</span><br><span class="line">10.修改mysql密码:</span><br><span class="line">ALTER USER 'root'@'localhost' IDENTIFIED BY 'code_ant1755497577@qq.com!mbrD2Sbs7GvUnVdG';</span><br><span class="line">11.设置远程链接:</span><br><span class="line">将所有数据库的所有表（*.*）的所有权限（all privileges），授予通过任何ip（%）访问的root用户，code_ant1755497577@qq.com!mbrD2Sbs7GvUnVdG，最后刷新（flush privileges）即可</span><br><span class="line">授权:</span><br><span class="line"><span class="meta">mysql&gt;</span>grant all privileges on   *.*    to root@'%'identified by 'code_ant1755497577@qq.com!mbrD2Sbs7GvUnVdG';</span><br><span class="line">刷新:</span><br><span class="line"><span class="meta">mysql&gt;</span>flush privileges</span><br><span class="line">12.修改编码:</span><br><span class="line">设置my.cnf配置文件</span><br><span class="line">sudo vi /etc/my.cnf</span><br><span class="line">在mysqld 下面添加</span><br><span class="line">character-set-server=utf8</span><br><span class="line">重启服务器  </span><br><span class="line">service  msyql  restart</span><br><span class="line">进入mysql 并且通过以下命令查看字符编码</span><br><span class="line">show  variables   like   "char%";</span><br></pre></td></tr></table></figure><hr><p>以上操作就已经安装好MySQL了，下面是mysql相关操作，仅做记录</p><ul><li>卸载</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1.查看系统自带的mariaDB:</span><br><span class="line">rpm -qa | grep -i mariadb</span><br><span class="line">2.删除相关的mariadb:</span><br><span class="line"> rpm -e  --nodeps 强制删除mariadb的所有相关软件包</span><br><span class="line">3.查看是否已安装了mysql 组件:</span><br><span class="line">rpm -qa | grep -i mysql</span><br><span class="line">4.卸载相关mysql:</span><br><span class="line">sudo rpm -ev --nodeps -------</span><br><span class="line">5.查询mysql的相关文件:</span><br><span class="line">whereis mysql</span><br><span class="line">6.删除相关mysql文件:</span><br><span class="line">sudo rm -rf ------</span><br><span class="line">**7.注意该目录下的mysql**:</span><br><span class="line"> rm -rf /var/lib/mysql/</span><br><span class="line">8.查询mysql的最后配置:</span><br><span class="line">find / -name mysql</span><br></pre></td></tr></table></figure><ul><li>查看mysql安装位置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.查看所有的已安装软件名称</span><br><span class="line">rpm -qa | grep mysql</span><br><span class="line">2.显示软件的安装路径</span><br><span class="line">rpm -ql mysql-community-server-5.7.26-1.el7.x86_64</span><br></pre></td></tr></table></figure><ul><li>mysql配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">1.配置文件位置，根据上一步 查看mysql安装位置 操作得出位置</span><br><span class="line">cat /etc/my.cnf</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line"><span class="meta">#</span> 有关如何更改设置的建议，请参阅下面地址</span><br><span class="line"><span class="meta">#</span> http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> Remove leading # and set to the amount of RAM for the most important data</span><br><span class="line"><span class="meta">#</span> cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.</span><br><span class="line"><span class="meta">#</span> innodb_buffer_pool_size = 128M</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> Remove leading # to turn on a very important data integrity option: logging</span><br><span class="line"><span class="meta">#</span> changes to the binary log between backups.</span><br><span class="line"><span class="meta">#</span> log_bin</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> Remove leading # to set options mainly useful for reporting servers.</span><br><span class="line"><span class="meta">#</span> The server defaults are faster for transactions and fast SELECTs.</span><br><span class="line"><span class="meta">#</span> Adjust sizes as needed, experiment to find the optimal values.</span><br><span class="line"><span class="meta">#</span> join_buffer_size = 128M</span><br><span class="line"><span class="meta">#</span> sort_buffer_size = 2M</span><br><span class="line"><span class="meta">#</span> read_rnd_buffer_size = 2M</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 数据库数据存储位置</span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Disabling symbolic-links is recommended to prevent assorted security risks</span><br><span class="line">symbolic-links=0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 错误日志</span><br><span class="line">log-error=/var/log/mysqld.log</span><br><span class="line"><span class="meta">#</span> 二进制日志</span><br><span class="line">pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"><span class="meta">#</span> 编码</span><br><span class="line">character-set-server=utf8</span><br></pre></td></tr></table></figure><h1 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h1><ol><li><code>jdk-8u191-linux-x64.tar.gz</code>拷贝至<code>/opt</code>目录下</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp jdk-8u191-linux-x64.tar.gz /opt/</span><br></pre></td></tr></table></figure><ol start="2"><li>解压至<code>/usr/local</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line">tar -zxvf /opt/jdk-8u191-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><h1 id="安装Tomcat"><a href="#安装Tomcat" class="headerlink" title="安装Tomcat"></a>安装Tomcat</h1><ol><li><code>apache-tomcat-8.5.43.tar.gz</code>拷贝至<code>/opt</code>目录下</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp apache-tomcat-8.5.43.tar.gz /opt/</span><br></pre></td></tr></table></figure><ol start="2"><li>解压至<code>/usr/local</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line">tar -zxvf /opt/apache-tomcat-8.5.43.tar.gz</span><br></pre></td></tr></table></figure><h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><ul><li>修改 /etc/profile</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure><p>底部追加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 设置环境变量，需要添加新的，就需要添加 :路径</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH:$TOMCAT_HOME/bin #:$MYSQL_HOME</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>set jdk </span><br><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_191</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>set tomcat</span><br><span class="line">export TOMCAT_HOME=/usr/local/apache-tomcat-8.0.53</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>set mysql的bin文件</span><br><span class="line"><span class="meta">#</span>export MYSQL_HOME=/usr/local/mysql/bin</span><br></pre></td></tr></table></figure><ul><li>source操作</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><ul><li>echo $PATH命令查看是否添加成功</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH</span><br><span class="line">#结果 /usr/local/jdk1.8.0_191/bin:/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin:/usr/local/apache-tomcat-8.5.43</span><br></pre></td></tr></table></figure><ul><li><p>验证</p><ul><li>java</li></ul><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/b7d4/1.jpg" alt></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/b7d4/2.jpg" alt></p></li></ul><hr><ul><li><p>tomcat</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/b7d4/3.jpg" alt></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/b7d4/4.jpg" alt></p></li></ul><hr><ul><li>mysql</li></ul><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/b7d4/5.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1556742044-3c52d6e88c62?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
  </entry>
  
</feed>
