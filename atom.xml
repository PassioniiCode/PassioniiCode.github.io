<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code Ant&#39;s Blog</title>
  
  <subtitle>“每天进步一点点”</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lijinhongpassion.github.io/"/>
  <updated>2021-03-27T03:48:12.995Z</updated>
  <id>https://lijinhongpassion.github.io/</id>
  
  <author>
    <name>Code Ant</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java面试宝典</title>
    <link href="https://lijinhongpassion.github.io/codeant/hmdy.html"/>
    <id>https://lijinhongpassion.github.io/codeant/hmdy.html</id>
    <published>2022-09-27T11:28:38.000Z</published>
    <updated>2021-03-27T03:48:12.995Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://s1.ax1x.com/2020/09/27/0ASvd0.jpg" alt="Java面试宝典 : https://github.com/LiJinHongPassion/How-much-do-you-know-for-java/" style="zoom:200%;"></p><a id="more"></a><hr><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><hr><h3 id="点击下面连接-👇👇👇"><a href="#点击下面连接-👇👇👇" class="headerlink" title="点击下面连接   👇👇👇"></a>点击下面连接   👇👇👇</h3><p>Java面试宝典 : <a href="https://github.com/LiJinHongPassion/How-much-do-you-know-for-java/" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/How-much-do-you-know-for-java/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/09/27/0ASvd0.jpg&quot; alt=&quot;Java面试宝典 : https://github.com/LiJinHongPassion/How-much-do-you-know-for-java/&quot; style=&quot;zoom:200%;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>项目-余额超提线上BUG</title>
    <link href="https://lijinhongpassion.github.io/codeant/11b3.html"/>
    <id>https://lijinhongpassion.github.io/codeant/11b3.html</id>
    <published>2021-03-20T03:34:25.000Z</published>
    <updated>2021-03-27T04:08:47.974Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1593642533144-3d62aa4783ec?ixid=MXwxMjA3fDF8MHxlZGl0b3JpYWwtZmVlZHwxfHx8ZW58MHx8fA%3D%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=500&amp;q=60" style="zoom:200%;"></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><blockquote><p>以下内容为公司其他活动的真实BUG，对公司造成了不小的损失，现已修复。基于学习的态度，询问了相关开发人员关于BUG的产生细节，经过自我思考以及同事的验证，得出了自己的一套解决方案，当然还有很多优化的地方，如有疑问可联系我相互探讨。</p><p>流程图地址：<a href="https://www.processon.com/diagraming/5d5fe635e4b09965facf297a" target="_blank" rel="noopener">https://www.processon.com/diagraming/5d5fe635e4b09965facf297a</a>   </p></blockquote><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a><strong>背景</strong></h2><blockquote><p>某公司在小程序上有多种类型的活动， 其中有部分活动涉及到红包领取，平台红包的领取规则：</p><p>①：活动派发的红包，需要先领取到公司小程序平台账户余额</p><p>②：个人中心账户下再进行余额提现，提到用户的微信账户</p></blockquote><h2 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a><strong>问题复现</strong></h2><blockquote><p>①：用户在平台派发红包（步骤①）变得十分的卡顿，并且其他业务也十分的卡顿</p><p>②：一个账户可重复提现（步骤②，也就是余额只有10元，小程序快速点击了两次提现，但是提现了两次，提现了20元）</p></blockquote><h2 id="事件分析"><a href="#事件分析" class="headerlink" title="事件分析"></a><strong>事件分析</strong></h2><blockquote><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/11b3/项目-余额超提线上BUG/修改前.png" alt="修改前"></p></blockquote><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><blockquote><p>①：平台派发红包（步骤①）变得十分的卡顿，并且其他业务也十分的卡顿</p><blockquote><ul><li>有线程饥饿的问题存在</li></ul></blockquote><p>②：一个账户可重复提现（步骤②，也就是余额只有10元，小程序快速点击了两次提现，但是提现了两次，提现了20元）</p><blockquote><ul><li>Mysql中，提现操作<strong>未验证账户余额是否充足</strong>（扣减提现金额后不能小于0）</li><li><strong>扣减金额应该放在</strong>提现操作<strong>回调前</strong>（金额预扣，回调后若是提现失败，则补偿余额）</li><li>redis锁过期时间太短，<strong>锁提前释放</strong>，导致当前请求未完成的时候，后续请求未获取到锁</li></ul></blockquote></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/11b3/项目-余额超提线上BUG/优化后.png" alt="优化后"></p></blockquote><blockquote><p>上述解决方案不是最佳的解决方案，还有很多地方有待优化，例如<strong>红包领取事件</strong>：</p><ul><li>锁的粒度太大，可以考虑分成多个锁，但是需要避免死锁的产生</li><li>悲观锁的执行是线性的，限制了系统的吞吐量，可以考虑采用乐观锁</li></ul></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>对于金额这类敏感数据，在开发过程中需要对流程进行仔细地梳理，需要考虑并发的情况下会造成什么问题，一定要避免死锁的产生</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1593642533144-3d62aa4783ec?ixid=MXwxMjA3fDF8MHxlZGl0b3JpYWwtZmVlZHwxfHx8ZW58MHx8fA%3D%3D&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=500&amp;amp;q=60&quot; style=&quot;zoom:200%;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="项目经验" scheme="https://lijinhongpassion.github.io/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="bug" scheme="https://lijinhongpassion.github.io/tags/bug/"/>
    
      <category term="项目经验" scheme="https://lijinhongpassion.github.io/tags/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>代写课程/毕设（包售后、远程调试）</title>
    <link href="https://lijinhongpassion.github.io/codeant/kcsj.html"/>
    <id>https://lijinhongpassion.github.io/codeant/kcsj.html</id>
    <published>2020-12-30T08:04:28.000Z</published>
    <updated>2020-03-17T07:24:00.783Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/kcsj/bd.webp" alt></p><a id="more"></a><hr><h1 id="目录见右下脚（看具体的毕设系统），联系方式见文末"><a href="#目录见右下脚（看具体的毕设系统），联系方式见文末" class="headerlink" title="目录见右下脚（看具体的毕设系统），联系方式见文末"></a><font color="#dd0000">目录见右下脚（看具体的毕设系统），联系方式见文末</font></h1><h1 id="页面中图片加载较慢，请耐心等待"><a href="#页面中图片加载较慢，请耐心等待" class="headerlink" title="页面中图片加载较慢，请耐心等待"></a><font color="#dd0000">页面中图片加载较慢，请耐心等待</font></h1><h1 id="写在前面（必读）"><a href="#写在前面（必读）" class="headerlink" title="写在前面（必读）"></a>写在前面（必读）</h1><p><strong>各毕设中使用的技术和系统用处不一定准确和全面，具体使用技术建议参考代码。</strong></p><p>文中的各毕设不一定每一个都非常的完美，有些包含代码+论文，选其中一个自己觉得不错的，用来做毕设。</p><p><strong>论文可以参考，但是不建议直接照搬，因为毕竟要查重</strong></p><h2 id="各毕设开发环境"><a href="#各毕设开发环境" class="headerlink" title="各毕设开发环境"></a>各毕设开发环境</h2><p>由于各个毕设的开发环境可能不同，包括各种编辑器，如：<code>IDEA</code>、<code>Eclipse</code>、<code>MyEclipse</code>，数据库：<code>Mysql</code>、<code>SQL Server</code>、<code>Oracle</code>等。</p><h1 id="业务范围"><a href="#业务范围" class="headerlink" title="业务范围"></a>业务范围</h1><p><strong>业务范围为：</strong></p><ul><li>Java<strong>课程设计</strong>（拥有大量的成品 <strong>【 源码+论文 】</strong>）<ul><li>Java web<strong>毕业设计</strong><ul><li>Python爬虫<ul><li>C/C++<ul><li><strong>大学各种小作业</strong>（sql编写、uml、html、计算机网络、数据结构、网络协议等大量成品）<ul><li><strong><font color="#dd0000">Java web商业单请加微信详谈</font> </strong></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><p><strong>学习资料有偿分享：</strong></p><p><strong>电脑实用工具：</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/kcsj/技巧工具.png" alt></p><p><strong>PPT成套模板：</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/kcsj/ppt.png" alt></p><p><strong>技术视频：</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/kcsj/视频.png" alt></p><hr><h1 id="最新毕设成品（2019-9-至今）"><a href="#最新毕设成品（2019-9-至今）" class="headerlink" title="最新毕设成品（2019.9~至今）"></a>最新毕设成品（2019.9~至今）</h1><font color="#dd0000">页面中图片加载较慢，请耐心等待</font><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/kcsj/new1.png" alt></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/kcsj/new2.png" alt></p><h1 id="毕业设计项目介绍"><a href="#毕业设计项目介绍" class="headerlink" title="毕业设计项目介绍"></a>毕业设计项目<strong>介绍</strong></h1><p>各毕业设计项目将按行业进行分类，从中选取你想选择的毕业设计即可。</p><p>产品保证能够正常运行</p><h2 id="互联网和移动互联网"><a href="#互联网和移动互联网" class="headerlink" title="[ 互联网和移动互联网 ]"></a>[ 互联网和移动互联网 ]</h2><hr><h3 id="项目一：jsp网上招标系统"><a href="#项目一：jsp网上招标系统" class="headerlink" title="项目一：jsp网上招标系统"></a>项目一：jsp网上招标系统</h3><p><strong>介绍</strong></p><blockquote><p>jsp网上招标系统主要用于实现会员的发布任务和接收任务的功能，<br>基本功能包括<br>（1）注册用户部分<br>  1：查看网站流程：查看与网站有关的流程信息，及相关的新闻公告。<br>  2：发布网站留言信息：根据系统提示，发布网站的留言信息。<br>  3：查看已发布的信息：以列表的形式查看已发布信息。<br>  4：发布威客在线信息：根据系统提示，发布网站的留言信息。<br>  5：查看网站成交记录：根据系统提示，查看成交记录信息。</p><p>（2） 管理员部分<br>  1：编辑系统用户信息：添加、编辑用户信息，包括发布者和管理员，以列表的形式显示；<br>  2：编辑网站留言信息：以列表的形式显示网站留言信息，并可对其进行删除等编辑操作；<br>  3：数据备份：不定期进行系统数据备份，以防万一。</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用的技术</strong>：Servlet + JDBC+ JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目二：城市公交查询系统"><a href="#项目二：城市公交查询系统" class="headerlink" title="项目二：城市公交查询系统"></a>项目二：城市公交查询系统</h3><p><strong>介绍</strong></p><blockquote><p>我国许多城市都有一些颇具设计感的公交站台,但我们却很难在这里找到我们出行需要的信息。因此，居民想要找到“静态线路信息”或者“动态实时信息”都感到十分困难。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用的技术：</strong>Servlet + JDBC+ JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目三：基于JSP动漫论坛"><a href="#项目三：基于JSP动漫论坛" class="headerlink" title="项目三：基于JSP动漫论坛"></a>项目三：基于JSP动漫论坛</h3><p><strong>介绍</strong></p><blockquote><p>动漫论坛项目主要用于实现动漫爱好者的互相交流，基本功能包括：注册用户、登录、浏览帖子、发布新帖、回复帖子、等。本系统结构如下：<br>（1）普通用户：<br>  注册用户：如果用户为非会员用户，通过注册，经审核通过之后成为会员，获得一个登陆身份；<br>  登录：如果用户已经是注册会员，可以进行登录，登陆后实现别的功能；<br>  浏览帖子：用户查看系统中的帖子，了解最新的资讯和各种动态等信息；<br>  发布新帖：用户可以发表一些帖子，来与其他论坛用户共享信息；<br>  回复帖子：对于自己或者别的会员发表的帖子，可以进行回复。<br>（2）管理员：<br>  管理员登录：对于已经登录的用户，若权限为管理员，可以进行管理员的登录，登陆之后才能有权限进行下一步操作；<br>  帖子管理：管理员可以对发表的帖子进行查询、修改、删除等操作，对好的帖子进行标识，删除或转移不适合的帖子；<br>  模块管理：论坛中的模块，管理员可对其进行添加、修改、删除等操作；<br>  用户管理：用户注册成功后，管理员可以对用户进行添加、删除操作。<br>（3）游客：<br>  游客可以对论坛进行访问，浏览帖子的功能，但不能参与回复操作，也没有发布帖子的权限。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Struts 1 + JDBC+ JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目四：个人博客系统"><a href="#项目四：个人博客系统" class="headerlink" title="项目四：个人博客系统"></a>项目四：个人博客系统</h3><p><strong>介绍</strong></p><blockquote><p>个人博客系统主要用于发表个人博客，记录个人生活日常，学习心得，技术分享等，供他人浏览，查阅，评论等。</p><p>（1）博主端：<br>  登录模块：登入后台管理系统：首先进入登录页面，需要输入账号和密码。它会使用Shiro进行安全管理，对前台输入的密码进行加密运算，然后与数据库中的进行比较。成功后才能登入后台系统。<br>  博客管理模块：博客管理功能分为写博客和博客信息管理。写博客是博主用来发表编写博客的，需要博客标题，然后选择博客类型，最后将博客内容填入百度的富文本编辑器中，点击发布博客按钮即可发布博客。<br>  博客类别管理模块：博主类别管理系统可以添加，修改和删除博客类型名称和排序序号。将会显示到首页的按日志类别区域。 游客可以从这里查找相关的感兴趣的博客内容<br>  评论信息管理模块：评论管理功能分为评论审核和评论信息管理两部分。评论审核是当有游客或自己发表了评论之后，博主需要在后台管理系统中审核评论。若想将此评论显示在页面上则点击审核通过，否则点击审核不通过。<br>  个人信息管理模块：修改博主的个人信息，可以修改昵称，个性签名，可以添加个人头像，修改个人简介；<br>  系统管理功能模块：友情<strong>链接</strong>管理，修改密码，刷新系统缓存和安全退出，友情<strong>链接</strong>管理可以添加，修改，删除友情<strong>链接</strong>网址<br>（2）游客端：<br>  查询博客：查询具体哪一篇博客<br>  查看博客内容：查看博客内容<br>  查看博主个人信息：查看博主个人简介<br>  发表评论：可以评论具体某篇博客<br>  友情链接：查看友情<strong>链接</strong></p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring + Spring MVC + Mybatis + JSP</li><li><strong>开发工具：</strong>未知</li></ul><hr><h3 id="项目五：网上拍卖系统"><a href="#项目五：网上拍卖系统" class="headerlink" title="项目五：网上拍卖系统"></a>项目五：网上拍卖系统</h3><p><strong>介绍</strong></p><blockquote><p>基于B2C的网上拍卖系统主要用于帮助人们应用互联网方便快捷买到自己所中意的商品，并参与到秒杀与竞拍当中。</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Spring + Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目六：电子书下载系统"><a href="#项目六：电子书下载系统" class="headerlink" title="项目六：电子书下载系统"></a>项目六：电子书下载系统</h3><p><strong>介绍</strong></p><blockquote><p>基于JAVA_JSP电子书下载系统主要用功能包括：</p><p>（1）后台管理:<br>  个人信息管理：实现个密码信息的修改<br>  会员信息管理：实现会员信息的查询、删除<br>  点券充值管理：实现充值信息的查询、审核、删除<br>  类别信息管理：实现图书类别信息增加、删除、修改、查看功能<br>  电子书信息管理：实现电子书信息的增加、删除、修改、查看功能<br>  留言公告管理：实现公告信息的增加、删除、修改、查看功能实现留言信息的查询和删除<br>（2）前台管理：<br>  实现电子书信息的分类查询、作者、书名查询<br>  实现用户信息的注册<br>  实现用户的登录和退出<br>  实现登录用户的留言、重置、书籍下载</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目七：影视创作论坛"><a href="#项目七：影视创作论坛" class="headerlink" title="项目七：影视创作论坛"></a>项目七：影视创作论坛</h3><p><strong>介绍</strong></p><blockquote><p>基于Javaee的影视创作论坛主要用功能包括：</p><p>（1）后台管理:<br>  管理模块：管理员的登录与退出、管理员个人信息的设置<br>  电影管理模块：电影信息的增加、删除、修改、电影分类信息的增加、删除、修改、查看功能<br>  影评管理模块：实现影评信息的增加、删除、修改、查看功能<br>  预告管理模块：实现预告片信息的增加、删除、修改、查看功能<br>  海报管理模块：实现海报信息的增加、删除、修改、查看功能<br>  公告管理模块：实现公告信息的增加、删除、修改、查看功能<br>（2）前台管理：<br>  实现网站首页数据展示、海报展示、预告片浏览、公告预览等<br>  实现电影影评的评论发表、查询评论<br>  站内数据搜索<br>  用户的登录和退出</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目八：Java记账管理系统"><a href="#项目八：Java记账管理系统" class="headerlink" title="项目八：Java记账管理系统"></a>项目八：Java记账管理系统</h3><p><strong>介绍</strong></p><blockquote><p>Java记账管理系统主要用于财务人员可以从账务中判断公司的发展方向。对个人和家庭而言，通过记账可以制定日后的 消费计划，这样才能为理财划出清晰合理的线条。<br>（1）用户注册：<br>  用户通过注册功能注册成功后跳转至登录页面方便登录<br>（2）用户登录：<br>  用户登录成功后：<br>  信息管理：用户可以修改个人的信息<br>  财务管理：用户可以查看自己的财务信息和做一些新的财务记录<br>  财务统计：用户可以查看自己的月收支或年收支，以便做到心里有数<br>（3）管理员登录：<br>  管理员信息管理：可以对管理员信息进行一些基本操作<br>  用户信息管理：可以对用户进行查询和删除等操作，以便管理用户群</p></blockquote><ul><li><strong>数据库：</strong>Oracle</li><li><strong>使用技术：</strong>Servlet + Mybatis + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目九：新闻发布及管理系统"><a href="#项目九：新闻发布及管理系统" class="headerlink" title="项目九：新闻发布及管理系统"></a>项目九：新闻发布及管理系统</h3><p><strong>介绍</strong></p><blockquote><p>Java新闻发布系统新闻发布及管理系统就是一个能够在网上实现新闻的发布及管理，让人们更好的获取更新的新闻资讯。<br>（1）用户管理：<br>  用户注册：新用户注册<br>  用户登录：新用户登录<br>  找回密码：忘记密码找回密码<br>  用户评论：发表对新闻的评论<br>（2）管理员管理：<br>  系统账号管理：管理员管理系统现有账号，进行删除停用等操作<br>  系统公告管理：系统公告的发布和删除<br>  新闻栏目管理：新闻栏目的新增和删除<br>  新闻资讯管理：新闻资讯的新增和删除<br>  注册用户管理：注册用户的删除和冻结<br>  友情链接管理：添加和删除友情<strong>链接</strong>功能<br>  新闻评论管理：删除用户不当评论</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC+ JSP</li><li><strong>开发工具：</strong>未知</li></ul><hr><h3 id="项目十：任务调度系统"><a href="#项目十：任务调度系统" class="headerlink" title="项目十：任务调度系统"></a>项目十：任务调度系统</h3><p><strong>介绍</strong></p><blockquote><p>任务调度试系统，基本功能包括：用户的注册、用户的登录、发起项目、项目详细及搜索等。本系统结构如下：<br>（1）用户的注册登录：<br>  注册模块：完成用户注册功能；<br>  登录模块：完成用户登录功能；<br>（2）发起项目：<br>  发起项目模块：完成了项目及项目下一个或者多个任务的添加；<br>  项目详细:点击项目名称，可以看到项目及任务详细信息;<br>  搜索项目:完成对项目名称的模糊搜索功能</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring+ Spring MVC + Hibernate + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目十一：基于网络爬虫技术的网络新闻分析"><a href="#项目十一：基于网络爬虫技术的网络新闻分析" class="headerlink" title="项目十一：基于网络爬虫技术的网络新闻分析"></a>项目十一：基于网络爬虫技术的网络新闻分析</h3><p><strong>介绍</strong></p><blockquote><p>基于网络爬虫技术的网络新闻分析主要用于网络数据爬取。本系统结构如下：<br>（1）网络爬虫模块。<br>（2）中文分词模块。<br>（3）中3文相似度判定模块。<br>（4）数据结构化存储模块。<br>（5）数据可视化展示模块。</p></blockquote><ul><li><strong>数据库：</strong>无（数据保存方式为直接生成图表）</li><li><strong>使用技术：</strong>HttpClietn + IK分词器 + 相似度算法</li><li><strong>开发工具：</strong>未知</li></ul><hr><h3 id="项目十二：旅游网站设计与实现"><a href="#项目十二：旅游网站设计与实现" class="headerlink" title="项目十二：旅游网站设计与实现"></a>项目十二：旅游网站设计与实现</h3><p><strong>介绍</strong></p><blockquote><p>塞北村镇旅游网站设计主要用于实现旅游景点信息管理，基本功能包括：主界面模块设计，用户注册模块，旅游景点模块，酒店预订模块，后台管理模块等。本系统结构如下：<br>（1）主界模块设计：<br>  首页效果、首页塞北人文、首页酒店信息、首页景点信息、自驾游路线<br>  首页天气预报、在线留言、用户注册、首页后台登录<br>（2）用户注册模块：<br>  用户注册完成后，经过管理员的审核以后方能成功登录。<br>  用户注册成功以后，可以进行预订管理，个人信息管理以及旅游路线管理等功能<br>（3）旅游景点模块：<br>  供用户快速便捷的搜索到自己想要的旅游景点信息。<br>  景点信息展示、景点名称查询、旅游景点效果图，该部分风景的查询与显示。<br>（4）酒店预定模块：<br>  客户登录，可以进行具体资料查看操作。<br>  酒店详细信息、酒店预订、酒店预订成功、酒店预订成功列表所示，可以清晰的展现出酒店订购模块的具体操作和运行效果。<br>（5）后台管理设计：<br>  管理员登录后，可以实施各种操作。实现对网站基本信息的管理。<br>  系统功能列表里主要包括：<br>      1.账号管理，在这里管理员可以修改个人信息，包括密码和个人资料等等。<br>      2.用户注册管理部分是对该网站的申请注册的用户进行验证通过，管理员可以对所有用户进行删除修改和审核。<br>      3.塞北人文添加模块主要是对该网站中塞北人文的管理，管理员可以对塞北人文进行更新修改和删除。<br>      4.塞北故事管理模块。<br>      5.塞北景点进行操作。<br>      6.自驾游路线管理。<br>      7.酒店信息管理模块。<br>      8.留言板管理较为简单。<br>      9.最后包括修改密码和退出登录模块。</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目十三：搜索引擎"><a href="#项目十三：搜索引擎" class="headerlink" title="项目十三：搜索引擎"></a>项目十三：搜索引擎</h3><p><strong>介绍</strong></p><blockquote><p>经过对搜索引擎的研究同时与Lucene自身的特性相结合，搜索引擎需要实现的功能阐述如下：<br>  （1）支持桌面文件搜索,格式包括txt、doc、xls和ppt;<br>  （2）支持分词查询<br>  （3）支持全文搜索<br>  （4）能够高亮显示搜索关键字<br>  （5）显示查询所用的时间<br>  （6）显示搜索历史、过滤关键字</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Lucene + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目十四：网上招聘系统"><a href="#项目十四：网上招聘系统" class="headerlink" title="项目十四：网上招聘系统"></a>项目十四：网上招聘系统</h3><p><strong>介绍</strong></p><blockquote><p>网上招聘系统，包含俩个角色：个人和公司角色。本系统结构如下：个人角色<br>  （1）首页：显示个人可以申请职位的公司信息，实现了查询、申请职位功能<br>  （2）个人信息修改：实现了对个人信息（简历）的修改<br>  （3）下载简历：实现对简历的下载<br>  （4）发布简历<br>  （5）撤销简历<br>  （6）消息通知：实现了对已申请公司是否通过功能<br>公司角色<br>  （1）首页：显示所有申请公司职位的求职者信息<br>  （2）公司信息修改：实现了对公司信息的修改<br>  （3）发布招聘信息<br>  （4）撤销招聘信息<br>  （5）求职者通知：实现了对已申请公司职位的求职者是否通过功能</p></blockquote><ul><li><strong>数据库：</strong>Oracle</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目十五：文章发布系统"><a href="#项目十五：文章发布系统" class="headerlink" title="项目十五：文章发布系统"></a>项目十五：文章发布系统</h3><p><strong>介绍</strong></p><blockquote><p>文章发布系统项目，基本功能包括：网站信息、基础信息、系统管理、个人信息等。本系统结构如下：<br>（1）网站信息：<br>  文章管理：实现添加文章，查询文章功能<br>  文章评论管理：实现根据评论信息查询功能<br>  联系我们：实现对公司信息的修改功能<br>  网站公告:实现对网站公告的修改功能<br>  留言板：实现对留言的回复、删除功能<br>（2）基础信息：<br>  会员管理：实现对会员的显示、查询功能<br>  文章类别管理：实现对文章类别的增加、删除、修改、查询功能<br>（3）系统管理：<br>  添加管理员：实现管理员的添加功能<br>  管理员维护：实现对管理员的修改、删除、查询功能</p><p>（4）个人信息：<br>  基本资料管理：实现对个人资料的修改功能<br>  修改登陆密码：实现修改旧密码功能</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring + Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目十六：物流信息网"><a href="#项目十六：物流信息网" class="headerlink" title="项目十六：物流信息网"></a>项目十六：物流信息网</h3><p><strong>介绍</strong></p><blockquote><p>物流信息网主要用于实现网上自主物流，基本功能包括：登录、查询、时效查询、价格查询、注册等。本系统结构如下：<br>（1）普通用户：<br>  登录：账号、密码；<br>  查询：通过快递编号进行查询；<br>  时效查询：根据出发地和接收地进行查询；<br>  价格查询：根据出发地，接收地以及重量进行查询；<br>  注册：用户进行注册；<br>  合作伙伴：和各个物流公司进行合作。<br>（2）管理员：<br>  管理员登录：对于已经登录的用户，若权限为管理员，可以进行管理员的登录，登陆之后才能有权限进行下一步操作；<br>  物流管理：对物流进行增删改查操作；<br>  地址管理：对物流的到达地址进行管理；<br>  用户管理：用户注册成功后，管理员可以对用户进行添加、删除操作。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目十七：项目管理平台"><a href="#项目十七：项目管理平台" class="headerlink" title="项目十七：项目管理平台"></a>项目十七：项目管理平台</h3><p><strong>介绍</strong></p><blockquote><p>在我国，某些高校或企业一直使用传统人工的方式管理文件档案，这种管理方式存在着许多缺点,如:效率低、保密性差,另外时间一长,将产生大量的文件和数据,这对于查找、更新和维护都带来了不少的困难。作为计算机应用的一部分,使用计算机对文件档案信息进行管理,具有手工管理所无法比拟的优点。所以建立项目管理系统，使管理自动化，提高信息处理的速度和准确性十分必要。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h2 id="企业管理系统"><a href="#企业管理系统" class="headerlink" title="[ 企业管理系统 ]"></a>[ 企业管理系统 ]</h2><hr><h3 id="项目一：CRM客户管理系统"><a href="#项目一：CRM客户管理系统" class="headerlink" title="项目一：CRM客户管理系统"></a>项目一：CRM客户管理系统</h3><p><strong>介绍</strong></p><blockquote><p>基本功能包括客户管理，角色管理以及产品管理。</p><p>（1）客户管理</p><p>​     客户的增加，修改，删除以及查询</p><p>（2）角色管理</p><p>角色的新增和修改。</p><p>（3）产品管理</p><p>​     产品的增加，修改，删除以及查询</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring + Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目二：企业合同管理系统"><a href="#项目二：企业合同管理系统" class="headerlink" title="项目二：企业合同管理系统"></a>项目二：企业合同管理系统</h3><p><strong>介绍</strong></p><blockquote><p>JAVA_JSP企业合同管理系统主要用于实现企业合同的管理，<br>基本功能包括：修改个人密码、合同信息管理、收款提醒模块、安全退出系统等。本系统结构如下：<br>（1）修改个人密码模块：<br>  修改个人密码：实现修改个人密码功能；<br>（2）合同信息管理模块：<br>  合同信息管理：实现合同信息的展示、删除、添加功能；<br>  合同信息录入：实现合同信息的添加功能；<br>  合同信息查询：实现合同信息的查询功能；<br>（3）收款提醒模块：<br>  添加收款提醒： 实现收款提醒的添加功能；<br>  添加收款管理： 实现收款提醒的展示、删除功能；</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>未知</li></ul><hr><h3 id="项目三：企业电子投票系统"><a href="#项目三：企业电子投票系统" class="headerlink" title="项目三：企业电子投票系统"></a>项目三：企业电子投票系统</h3><p><strong>介绍</strong></p><blockquote><p>javaEE健康管理系统主要功能包括：投票、查看投票结果、隐藏/公布投票结果、编辑投票主题等等。本系统结构如下：<br>1.普通用户模块：<br>  1).实现登录功能<br>  2).实现用户登录的退出<br>  3).用户可以对已经开放的主题投票<br>  4).用户可以查看所有已公布了结果的主题的投票结果<br>2.管理员模块：<br>  1).实现登录功能<br>  2).实现用户登录的退出<br>  3).在后台撤销/恢复某个主题，被撤销的主题在前台不可见<br>  4).永久删除某个主题<br>  5).公布/隐藏某主题的投票结果<br>  6).编辑投票主题<br>  7).发布新主题<br>  8).新增/删除用户</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>未知</li></ul><hr><h3 id="项目四：企业快信系统"><a href="#项目四：企业快信系统" class="headerlink" title="项目四：企业快信系统"></a>项目四：企业快信系统</h3><p><strong>介绍</strong></p><blockquote><p>javaEE健康管理系统主要功能包括：投票、查看投票结果、隐藏/公布投票结果、编辑投票主题等等。本系统结构如下：<br>1.普通用户模块：<br>  1).实现登录功能<br>  2).实现用户登录的退出<br>  3).用户可以对已经开放的主题投票<br>  4).用户可以查看所有已公布了结果的主题的投票结果<br>2.管理员模块：<br>  1).实现登录功能<br>  2).实现用户登录的退出<br>  3).在后台撤销/恢复某个主题，被撤销的主题在前台不可见<br>  4).永久删除某个主题<br>  5).公布/隐藏某主题的投票结果<br>  6).编辑投票主题<br>  7).发布新主题<br>  8).新增/删除用户</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Struts2 + JDBC + JSP</li><li><strong>开发工具：</strong>未知</li></ul><hr><h3 id="项目五：固定资产管理系统"><a href="#项目五：固定资产管理系统" class="headerlink" title="项目五：固定资产管理系统"></a>项目五：固定资产管理系统</h3><p><strong>介绍</strong></p><blockquote><p>187固定资产管理系统是对高校固定资产的一个信息化管理系统，基本功能包括：对固定资产的购进、接触、销毁，对物品的使用状态、借出状态、库存状态等进行标识，对各类物品进行编号，根据编号进行查询，根据名称进行查询等。本系统结构如下：<br>（1）系统登录：<br>  用户登录模块：登录功能<br>（2）系统用户管理：<br>  对系统用户的增加<br>  系统用户的权限修改<br>  系统用户的删除<br>  分配系统用户的权限<br>  修改本身登录密码<br>  资产的相关维护<br>（3）员工信息管理：<br>  教工的增加、修改、删除、查询<br>（4）资产入库管理：<br>  资产的录入<br>  资产的属性修改<br>  资产的报废删除<br>  资产的属性查询<br>（5）资产维护管理：<br>  物资的维修、维护物资的信息修改<br>（7）资产借还管理：<br>  增加借出资产<br>  查询借出资产<br>  归还已借出资产</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring + Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目六：企业车辆管理系统"><a href="#项目六：企业车辆管理系统" class="headerlink" title="项目六：企业车辆管理系统"></a>项目六：企业车辆管理系统</h3><p><strong>介绍</strong></p><blockquote><p>通过计算机，能够直接“透视”车辆使用情况，数据计算自动完成，尽量减少人工干预，可以使用车信息更加规范化、透明化。因此，开发一套高效率，无差错的企业车辆管理系统软件十分必要，因此设计了这个企业车辆管理系统。本系统结构如下：<br>(1) 系统管理模块：<br>  在该模块中定义了管理员信息的管理，其功能包括管理员信息添加、查询、删除等操作。<br>(2) 车辆信息管理模块：<br>  在该模块中定义了对车辆信息的管理，其功能包括车辆信息的添加、查询、修改、删除等操作。<br>(3) 驾驶员信息管理模块：<br>  在该模块中定义了对驾驶员信息的管理，其功能包括驾驶员信息的添加、查询、修改、删除等操作。<br>(4) 出车信息管理模块：<br>  在该模块中定义了对出车情况的管理，其功能包括出车情况的添加、查询、修改、删除等操作。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring + Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目七：企业员工信息管理系统"><a href="#项目七：企业员工信息管理系统" class="headerlink" title="项目七：企业员工信息管理系统"></a>项目七：企业员工信息管理系统</h3><p><strong>介绍</strong></p><blockquote><p>企业员工信息管理系统主要用于实现公司的员工相关信息管理，基本功能包括：密码修改、员工管理、部门管理、出勤管理、工资管理、请假审核、我的请假、我的工资等。本系统结构如下：<br>（1）管理员端<br>  密码修改：修改自己的密码。<br>  员工管理：对员工的基本信息进行管理,包括查询、删除、录入。<br>  部门管理：包括添加部门以及添加子部门，删除部门等操作，便于及时更新部门信息。<br>  出勤管理：用于对员工的出勤月份以及天数进行管理，便于计算员工的工资等。<br>  工资管理：用于对员工的每个月的工资进行管理，便于对员工的工资进行管理。<br>  请假审核：用于管理员对员工的请假进行审核并加以回复，便于对员工的请假进行管理。<br>（2）员工端<br>  密码修改：修改自己的密码。<br>  我的请假：查看请假记录和发起请假申请。<br>  我的工资：查看员工自己的工资记录。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring + Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目八：售后服务管理系统"><a href="#项目八：售后服务管理系统" class="headerlink" title="项目八：售后服务管理系统"></a>项目八：售后服务管理系统</h3><p><strong>介绍</strong></p><blockquote><p>本系统的主要任务是为基于JavaEE技术和SQL Server数据库的售后服务管理系统建立一个企业设计。主要技术要求包括:掌握web开发所需的技术,包括HTML和JSP动态网页编程技术,SQL Server数据库知识,等等。主要实现企业售后服务信息的增删改查,顾客信息的增删改查,顾客留言信息的及时反馈保存,管理员帐号增删、登录等。该系统还可以方便制造商跟踪产品的质量和服务和管理以及购买者对企业的建议提交。</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h2 id="电子政务"><a href="#电子政务" class="headerlink" title="[ 电子政务 ]"></a>[ 电子政务 ]</h2><hr><h3 id="项目一：土地档案管理系统"><a href="#项目一：土地档案管理系统" class="headerlink" title="项目一：土地档案管理系统"></a>项目一：土地档案管理系统</h3><p><strong>介绍</strong></p><blockquote><p>土地档案管理系统主要包含功能：</p><p>（1）用户管理</p><p>​     用户登陆与注册</p><p>（2）土地档案管理</p><p>​     土地档案的新增，删除，修改以及查询</p></blockquote><ul><li><strong>数据库：</strong>Oracle</li><li><strong>使用技术：</strong>Spring + Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目二：电子政务网"><a href="#项目二：电子政务网" class="headerlink" title="项目二：电子政务网"></a>项目二：电子政务网</h3><p><strong>介绍</strong></p><blockquote><p>JAVA、JSP电子政务网主要用于实现政府机关的政务管理，基本功能包括：前台管网展示、留言板、后台登陆、修改密码、网站公告、政府网站、领导信箱、表格下载、政务公开、便民电话、新闻动态、地区概况、留言管理等。本系统结构如下：</p><p>（1）电子政务网(前台):<br>  领导信箱模块：实现发送邮件信息功能；<br>  地区概况模块：实现地区概况查看功能；<br>  动态信息模块：实现公告公示功能；<br>  政务信息动态模块：实现政务信息动态查看功能；<br>  法律法规模块：实现法律法规查看功能；<br>  网上办事模块：实现办事指南，意见反馈，表格下载功能；<br>  政务公开模块：实现干部任免，政府文件，政府采购功能;<br>  便民服务模块：实现便民电话，投诉举报功能;<br>  政府部门网站模块：实现政府部门网站查看功能;<br>（2）电子政务网(后台):<br>  修改密码模块: 实现密码修改功能;<br>  网站公告模块: 实现公告查看、添加、删除功能；<br>  政府网站模块：实现网站查看、添加、删除功能；<br>  领导信箱模块：实现领导信箱查看、添加、删除功能；<br>  表格下载模块：实现表格下载查看、添加、删除功能；<br>  政务公开模块：实现政务公开查看、添加、删除功能；<br>  便民电话模块：实现电话查看、添加、删除功能；<br>  新闻动态模块：实现新闻查看、添加、删除功能；<br>  地区概况模块：实现地区概况修改功能；<br>  留言管理模块：实现新闻查看、删除功能；</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Struts2 + JDBC + JSP</li><li><strong>开发工具：</strong>未知</li></ul><hr><h3 id="项目三：户籍管理系统"><a href="#项目三：户籍管理系统" class="headerlink" title="项目三：户籍管理系统"></a>项目三：户籍管理系统</h3><p><strong>介绍</strong></p><blockquote><p>户籍管理管理系统设计主要涵盖两方面的意义：户籍方面，系统上线可以给户籍在管理上带来方便，可以及时了解户籍的状况，有无迁入迁出户籍情况，缴费，欠缴等情况统计，极大的提高了员工的工作效率及准确性；用户方面：可以与户籍管理处交流，可以及时了解户籍的最新动态，户籍的通知以及其他的一些相关申请，方便了查询，节省了时间。</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><p>（该项目服务器不是<code>tomcat</code>而是<code>WebLogic</code>）</p><hr><h2 id="Java基础项目"><a href="#Java基础项目" class="headerlink" title="[ Java基础项目 ]"></a>[ Java基础项目 ]</h2><hr><h3 id="项目一：Java聊天室"><a href="#项目一：Java聊天室" class="headerlink" title="项目一：Java聊天室"></a>项目一：Java聊天室</h3><p><strong>介绍</strong></p><blockquote><p>Java聊天室系统主要用于实现在线聊天，基本功能包括：服务端和客户端。本系统结构如下：<br>（1）服务端：<br>  1、能够开启和关闭服务器<br>  2、等待着客户端从特殊端口发送的请求<br>  3、监听的端口并不是固定的，服务端的端口是能够自定义的<br>  4、能够广播消息向所有连接到服务器的用户<br>（2）客户端：<br>  1、能够和服务端进行连接<br>  2、新的用户能够注册账号<br>  3、通过用户名以及密码完成用户的登陆，连接到聊天室<br>  4、用户能够在聊天室发送消息</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Socket</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目二：Java扫雷游戏"><a href="#项目二：Java扫雷游戏" class="headerlink" title="项目二：Java扫雷游戏"></a>项目二：Java扫雷游戏</h3><p><strong>介绍</strong></p><blockquote><p>简单玩法介绍：<br>当玩家点开第一个格子时雷区开始布雷同时计时开始。然后会在该格子上显示周围8个格子的雷数（如果没有雷则自动点开周围的格子），玩家就需要通过这些数字来判断雷的位置，将是雷的格子标记为小红旗。若玩家认为已标记的格子时错误的，可以再次右击该格子来取消标记。当某一格子被标记时，对于该格子的单击操作是无效的（防止玩家误点击导致游戏失败）。如果玩家将某一格周围8个格子中的雷标记了出来，双击该格子会自动将周围的格子点击一遍，这样可以简化玩家的操作。当玩家将全部的地雷标记出来并且其他的格子点开时，游戏结束。但是如果玩家不小心点到了地雷就会游戏失败，系统自动显示出所有的地雷。如果玩家标识的地雷数量超过了该难度下规定的雷数，计数区会以负数显示超出的雷数并且游戏不会结束。</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目三：俄罗斯方块"><a href="#项目三：俄罗斯方块" class="headerlink" title="项目三：俄罗斯方块"></a>项目三：俄罗斯方块</h3><p><strong>介绍</strong></p><blockquote><p>俄罗斯方块项目，基本功能包括：游戏主界面显示模块、方块及数据显示模块、方块移动控制模块、游戏界面颜色控制模块、游戏进度、等级控制模块等。本项目结构如下：<br>（1）游戏主界面显示模块：<br>  显示游戏和帮助两个菜单；<br>  游戏使用功能键盘，得分 等级；<br>（2）画布、方块显示模块：<br>  可以根据自己的需求来自己动手更改背景图片，在方块下落过程中，根据颜色的变化识别下落的方块。<br>（3）背景画布模块设计：<br>  游戏用继承自JPanel的GameCanvas类控制背景画布的显示，用rows代表画布的行数，cols代表画布的列数，行数和列数决定着画布拥有方格的数目；<br>（4）方块移动、旋转模块<br>  通过更改横坐标或纵坐标，然后重新绘制方块实现方块移动、旋转</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目四：Java即时通讯软件"><a href="#项目四：Java即时通讯软件" class="headerlink" title="项目四：Java即时通讯软件"></a>项目四：Java即时通讯软件</h3><p><strong>介绍</strong></p><blockquote><p>关于java博网即时通讯软件的设计与实现<br>Server方面：<br>  1 运行监控，打开Server,执行对其它用户的监控。<br>  2 关闭监控，关闭Server,不在对其它用户进行监控。<br>  3 阅览用户信息，阅览已登录用户信息。<br>  4 管理用户，强制使被选择的用户退出登录状态。<br>Client方面：<br>  1 申请账号功能，使用者有权限在启动客户端后进行注册以及登录。<br>  2 添加好友功能，用户将陌生人加为好友。<br>  3 删除好友功能，用户有权限可以删除好友。<br>  4 修改个人资料功能，用户有权限可以修改以往设置的所有基本信息。<br>  5 修改头像功能，用户有权限能够修改自己现在的头像。<br>  6 即时聊天功能，用户之间有权限与拥有账号的用户进行即时的聊天。<br>  7 查看聊天记录功能，用户有权限查看与好友过往的聊天记录。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Java Swing + Java Socket</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目五：出租车计价器"><a href="#项目五：出租车计价器" class="headerlink" title="项目五：出租车计价器"></a>项目五：出租车计价器</h3><p><strong>介绍</strong></p><blockquote><p>关于java出租车计价器设计与实现<br>（1）出租车计价系统可以实现出租车信息的管理。<br>  1.1出租车信息的查询：通过数据库查询出租车的车型，车号，以及是否可用<br>  1.2出租车信息的增加：向数据库中添加出租车的车型，车号，以及是否可用<br>  1.3出租车信息的修改：对数据库中已经存在的出租车的车型，车号，以及是否可用的信息进行修改<br>  1.4出租车信息的删除：删除数据库中已经存储的出租车的信息<br>（2）出租车计价系统可以实现司机信息的管理。<br>  2.1司机信息的查询：通过数据库查询出司机的年龄，性别，学历，名字等信息<br>  2.2司机信息的增加：向数据库中添加司机的年龄，性别，学历，名字等信息<br>  2.3司机信息的修改：对数据库中已经存在的司机的年龄，性别，学历，名字等信息进行修改<br>  2.4司机信息的删除：删除数据库中已经存储的司机的信息<br>（3）出租车计价系统可以实现出租车计价功能。<br>  3.1通过java多线程，模拟出租车在路上的情景<br>  3.2通过距离计费的方式，将订单的时间，乘客的信息，订单的价格等插入数据库中<br>（4）出租车计价系统可以实现订单信息的维护<br>  4.1订单信息的查询：通过数据库查询出订单的时间，价格等信息<br>  4.2订单信息的删除：删除数据库中已经存储的订单信息<br>  4.3订单信息的修改：对数据库中已经存在的订单的时间，价格等信息进行修改</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目六：QQ屏幕截图工具"><a href="#项目六：QQ屏幕截图工具" class="headerlink" title="项目六：QQ屏幕截图工具"></a>项目六：QQ屏幕截图工具</h3><p><strong>介绍</strong></p><blockquote><p>基于java的QQ截屏工具的设计和实现能够实现对屏幕的随机截取，复制，保存以及添加文字等操作，便于用户对数据的处理。<br>  （1）随机获取屏幕指定区域；<br>  （2）编辑（添加文字）截图；<br>  （3）存储截图；</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目七：马里奥游戏"><a href="#项目七：马里奥游戏" class="headerlink" title="项目七：马里奥游戏"></a>项目七：马里奥游戏</h3><p><strong>介绍</strong></p><blockquote><p>超级玛丽小游戏的JAVA程序，进入游戏后首先按空格键开始，利用方向键来控制的马里奥的移动，同时检测马里奥与场景中的障碍物和敌人的碰撞，并判断马里奥的可移动性和马里奥的生命值。当马里奥通过最后一个场景后游戏结束。<br>  （1）马里奥<br>  （2）障碍物<br>  （3）敌人</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目八：飞机大战游戏"><a href="#项目八：飞机大战游戏" class="headerlink" title="项目八：飞机大战游戏"></a>项目八：飞机大战游戏</h3><p><strong>介绍</strong></p><blockquote><p>基于Java的飞机大战游戏主要需要我方飞机和敌方飞机，还有子弹，特殊nPC，开始背景，结束背景，以及背景音乐。我方飞机可以随意移动，敌方飞机无规律出现。游戏玩家通过鼠标移动控制飞机移动，我方飞机在游戏开始时就一直能发射子弹，当我方子弹碰到敌方飞机时，敌方飞机消失。当玩家飞机碰到敌方子弹时，生命值减一，直到玩家飞机生命值为一时，游戏结束。基本模块包括：游戏状态控制功能模块、游戏难度的调整模块、游戏界面绘画功能模块、玩家游戏控制功能模块等。本系统结构如下：<br>  （1）游戏状态控制功能模块:游戏的状态控制包括运行及结束游戏，首先进入游戏的开始页面，在游戏进行时，玩家必须躲避或者击落敌方飞机，玩家飞机的生命值降低为0的时候游 戏就会结束，弹出游戏结束界面<br>  （2）游戏难度的调整模块:玩家玩的时间越长游戏的难度越高，敌方飞机的数量越多、敌方飞机出现的频率越高，玩家保证飞机的存活的难度越高，操作难度相应也高。<br>  （3）游戏界面绘画功能模块:左上角会显示玩家飞机当前生命值，游戏时间，当前分数，其他地方用来输出玩家对我方飞机的控制与敌方飞机的动作显示<br>  （4）玩家游戏控制功能模块: 玩家可以通过控制鼠标或者键盘来控制方飞机（Hero airplane）的移动。</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>IntelliJ IDEA</li></ul><hr><h3 id="项目九：愤怒的小鸟游戏"><a href="#项目九：愤怒的小鸟游戏" class="headerlink" title="项目九：愤怒的小鸟游戏"></a>项目九：愤怒的小鸟游戏</h3><p><strong>介绍</strong></p><blockquote><p>基于Java的愤怒的小鸟游戏的设计与实现，基本功能包括：新游戏、载入游戏、控制帮助、退出游戏等。本系统结构如下：<br>（1）新游戏：<br>  需要输入你的昵称；<br>  选择难度：容易、中等、困难、噩梦(每个级别都有5个关卡)<br>（2）载入游戏：<br>  选择你的角色；(会保留你之前的成绩)<br>  选择难度；<br>（3）控制帮助：<br>  抛出小鸟 鼠标控制弧线<br>  扔出鸟蛋 空格<br>  停止飞行 s键<br>  退出游戏 esc键</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目十：雷电游戏（飞机大战）"><a href="#项目十：雷电游戏（飞机大战）" class="headerlink" title="项目十：雷电游戏（飞机大战）"></a>项目十：雷电游戏（飞机大战）</h3><p><strong>介绍</strong></p><blockquote><p>基于java的雷电游戏基本功能包括：敌方飞机随机飞行、我方飞机手动控制飞行，射击比拼，游戏闯关等。本系统结构如下：<br>（1）雷电游戏状态调整功能：<br>  在游戏启动时，游戏会自动进行初始化的验证。<br>  若初始化成功后，界面会自动进行跳转，跳转到游戏开始界面。<br>  有开始、暂停、恢复游戏等选项。<br>（2）雷电游戏难度的升级：<br>  当进入游戏后，随着时间越来越长，游戏难度会越来越大。<br>  界面中敌机增多，对飞机造成伤害的子弹增多，游戏难度增加。<br>  最后会遇到一个血条较长的怪兽，攻击其至血条为0时，自动过关跳转到下一关卡。<br>（3）玩家对飞机的控制功能：<br>玩家可以对飞机进行操控，通过前后左右键来控制飞机的飞行路线。</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目十一：连连看游戏"><a href="#项目十一：连连看游戏" class="headerlink" title="项目十一：连连看游戏"></a>项目十一：连连看游戏</h3><p><strong>介绍</strong></p><blockquote><p>基于java的连连看游戏设计和实现，基本功能包括：消除模块，重新开始模块，刷新模块，选择难度模块，计时模块。本系统结构如下：<br>（1）消除模块：<br>  完成连连看游戏消除动作的模块。<br>（2）重新开始模块：<br>  完成连连看游戏中重新开始新一局游戏功能的模块。<br>（3）刷新模块：<br>  完成连连看游戏中，将游戏中未消除的图片个数记录并重新随机放置等数量图片的功能模块。<br>（4）选择难度模块：<br>  完成游戏中切换游戏难度并开始新一局游戏的模块。<br>（5）计时模块：<br>  完成游戏中倒计时并显示提示信息的模块。<br>（6）状态显示模块：<br>  完成游戏中对游戏得分、闯关数记录的模块。</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目十二：模拟写字板"><a href="#项目十二：模拟写字板" class="headerlink" title="项目十二：模拟写字板"></a>项目十二：模拟写字板</h3><p><strong>介绍</strong></p><blockquote><p>此系统是使用Java语言实现简易写字板程序，能够进行输入文字操作，并具有新建文件，打开文件，保存文件，退出，复制，粘贴，剪切，全选，撤销等多种基本功能。本系统结构如下：<br>（1）菜单栏：<br>  文件模块:要用于操作整个存储或未保存的文档,包括新建，打开，保存，另存为等功能；<br>  编辑模块:编辑模块是对文本内容的基本编辑，包括剪切，复制，粘贴，删除等功能；<br>  格式模块:用于对用户输入内容显示上的操作,包括换行,字体的相关设置等功能；<br>  帮助模块:帮助菜单是用来展示于写字板有关的一些信息；<br>（2）文本区域：<br>  文本区域主要用来承载用户输入的主要内容；</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目十三：推箱子游戏"><a href="#项目十三：推箱子游戏" class="headerlink" title="项目十三：推箱子游戏"></a>项目十三：推箱子游戏</h3><p><strong>介绍</strong></p><blockquote><p>基于JAVA的推箱子游戏系统主要用于实现游戏推箱子功能，提供多种不同难度的关卡。本系统结构如下：<br>（1）初始化模块: 该模块包括屏幕初始化和游戏第一关的初始化。屏幕初始化用于输出欢迎信息和操<br>（2）画图模块: 该模块主要是被其它模块调用，用于画墙、在空地画箱子、在目的地画箱子、画小人和画目的地。<br>（3）移动箱子模块: 该模块用于移动箱子，包括目的地之间、空地之间和目的地与空地之间的箱子移动。<br>（4）移动小人模块: 该模块用于控制小人移动，从而推动箱子到目的地。<br>（5）功能控制模块: 该模块是几个功能函数的集合，包括屏幕输出功能、指定位置状态判断功能和关卡重置功能。</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目十四：坦克大战游戏"><a href="#项目十四：坦克大战游戏" class="headerlink" title="项目十四：坦克大战游戏"></a>项目十四：坦克大战游戏</h3><p><strong>介绍</strong></p><blockquote><p>此系统是使用Java语言实现坦克大战游戏程序，玩家通过连接访问进入游戏，通过操纵坦克来守卫基地，玩家还可以获得超级武器来提升坦克的属性，摧毁全部敌方坦克来取得胜利。本系统结构如下：<br>（1）面板功能：<br>  对双方坦克、基地、河道、草坪、普通墙与铁墙等地图元素,还实现了页面按钮功能，玩家可以点击按钮来实现相应的功能。<br>（2）坦克功能：<br>  操作玩家坦克的方法，还设置了超级武器，玩家吃掉后会获得特殊技能。<br>（3）子弹功能：<br>  设置了子弹打中不同物体对象产生的不同效果。</p></blockquote><ul><li><strong>数据库：</strong>无</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h2 id="ERP（进销存）系统"><a href="#ERP（进销存）系统" class="headerlink" title="[ ERP（进销存）系统 ]"></a>[ ERP（进销存）系统 ]</h2><hr><h3 id="项目一：百货中心供应链管理系统"><a href="#项目一：百货中心供应链管理系统" class="headerlink" title="项目一：百货中心供应链管理系统"></a>项目一：百货中心供应链管理系统</h3><p><strong>介绍</strong></p><blockquote><p>百货中心供应链管理系统主要用于实现了企业管理数据统计等。本系统结构如下：<br>（1）管理界面：<br>  登录模块：实现管理员登录功能；<br>  合作公司管理模块：实现合作公司信息的增加、修改、查看功能；<br>  采购管理模块：实现采购的增加、修改、查看功能；<br>  数据统计模块：实现数据的统计分析功能；</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring + Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目二：采购管理系统"><a href="#项目二：采购管理系统" class="headerlink" title="项目二：采购管理系统"></a>项目二：采购管理系统</h3><p><strong>介绍</strong></p><blockquote><p>本系统是一个独立的系统，用来解决企业采购信息的管理问题。采用JSP技术构建了一个有效而且实用的企业采购信息管理平台，目的是为高效地完成对企业采购信息的管理。经过对课题的深入分析，采购系统需实现以下功能模块：<br>1.用户登录<br>  对用户输入的用户名和密码进行匹配，只有合法的用户可以登录成功，进入主界面，进行操作。是系统安全性的第一层保护层。不同角色的用户登录（比如普通用户和超级管理员）的操作页面不一样。<br>2.供应商管理<br>  灵活管理供货商，及时添加及修改供货商信息，为采购计划的制定提供保障。<br>3.材料管理<br>  对材料进行管理，管理材料种类及库存，及时了解材料的库存信息，有助于做出正确的采购选择。<br>4.订单管理<br>  系统设计了多种订单。不同权限的操作员只能对其拥有权限操作的订单进行操作。<br>5.信息查询<br>  根据关键字快速检索信息。</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目三：仓库管理系统"><a href="#项目三：仓库管理系统" class="headerlink" title="项目三：仓库管理系统"></a>项目三：仓库管理系统</h3><p><strong>介绍</strong></p><blockquote><p>基于WEB的仓库管理系统主要用于实现仓库的出入库管理，基本功能包括：入库模块、出库模块、商品查看模块、用户注册模块、个人信息管理模块等。本系统结构如下：<br>  入库模块：入库新商品，或者是入库已有商品。<br>  出库模块：对已经入库的商品进行出库操作。<br>  商品查看模块：查看目前的库存商品信息。<br>  用户注册模块：进行帐号密码的注册，包括用户其他信息。<br>  个人信息管理模块：查看或者修个个人信息。</p></blockquote><ul><li><strong>数据库：</strong>Oracle</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目四：进销存管理系统"><a href="#项目四：进销存管理系统" class="headerlink" title="项目四：进销存管理系统"></a>项目四：进销存管理系统</h3><p><strong>介绍</strong></p><blockquote><p>进销存管理系统，实现对企业运作过程中的进货、销售、仓储的电子化操作，可以节省大量人力物力，可以说对企业的运作带来不可限量的好处。实现一个简单实用，操作界面友好的进销存管理系统是首要解决的任务。然后一是要实现对库存数据进行分析，对接下来的进货进行一些指导；二是实现对销售数据的采集分析，对企业决策者对下一个季度或者年份的销售计划提供一个参考的功能。系统肯定要具备对进销存的一些基本的增删改查操作。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring Boot（Spring + Spring MVC） + Spring Data JPA + JSP</li><li><strong>开发工具：</strong>Spring tool suit（STS）其实就是装了插件的Eclipse</li></ul><hr><h3 id="项目五：企业财务管理系统"><a href="#项目五：企业财务管理系统" class="headerlink" title="项目五：企业财务管理系统"></a>项目五：企业财务管理系统</h3><p><strong>介绍</strong></p><blockquote><p>企业财务管理系统主要用于实现公司的财务管理，基本功能包括：系统登录、部门信息管理、员工信息管理、资产、经营、费用信息管理等。本系统结构如下：<br>（1）职工端：<br>  登录模块：登录功能；<br>  个人信息模块：可修改个人的信息；<br>  个人工资模块：可查阅自己的工资；<br>  公司资产模块：可查看公司的资产信息；<br>  公司经营模块：可查看公司的经营信息；<br>  公司费用模块：可查看公司的费用信息；<br>  年终资产模块：可查看公司的总资产信息；<br>（2）超级管理员端：<br>  登录模块：实现管理员登录功能；<br>  个人信息模块：可修改个人的信息；<br>  部门信息管理模块：实现部门的增加、修改、删除、查看功能；<br>  职工信息管理模块：实现职工信息的增加、修改、删除、查看功能；<br>  职工工资管理模块：实现职工工资的增加、修改、查看功能；<br>  资产类别管理模块：实现资产类别的增加、删除、查看功能；<br>  资产信息管理模块：实现资产信息的增加、查看功能；<br>  经营信息管理模块：实现经营信息的增加、查看功能；<br>  费用信息管理模块：实现费用信息的增加、查看功能；<br>  年终资产分析模块：实现公司总资产的查看功能；</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Struts + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目六：商品供应管理系统"><a href="#项目六：商品供应管理系统" class="headerlink" title="项目六：商品供应管理系统"></a>项目六：商品供应管理系统</h3><p><strong>介绍</strong></p><blockquote><p>本系统是一个独立的系统，用来解决企业采购信息的管理问题。采用JSP技术构建了一个有效而且实用的企业采购信息管理平台，目的是为高效地完成对企业采购信息的管理。经过对课题的深入分析，采购系统需实现以下功能模块：<br>各个模块实现的功能如下：<br>1.用户登录<br>  对用户输入的用户名和密码进行匹配，只有合法的用户可以登录成功，进入主界面，进行操作。是系统安全性的第一层保护层。不同角色的用户登录（比如普通用户和超级管理员）的操作页面不一样。<br>2.供应商管理<br>  灵活管理供货商，及时添加及修改供货商信息，为采购计划的制定提供保障。<br>3.材料管理<br>  对材料进行管理，管理材料种类及库存，及时了解材料的库存信息，有助于做出正确的采购选择。<br>4.订单管理<br>  系统设计了多种订单。不同权限的操作员只能对其拥有权限操作的订单进行操作。<br>5.信息查询<br>  根据关键字快速检索信息。</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Struts + Hibernate + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目七：工厂进销存管理系统"><a href="#项目七：工厂进销存管理系统" class="headerlink" title="项目七：工厂进销存管理系统"></a>项目七：工厂进销存管理系统</h3><p><strong>介绍</strong></p><blockquote><p>本XXX陶瓷工厂的进销存管理系统是基于eclipse开发环境，前台采用的是Swing 和 AWT 相关组件进行的GUI设计，后台使用的是SQL Server数据库。且该XXX陶瓷工厂的进销存管理系统共分为六大模块，分别为<br>1.基础信息管理模块<br>客户，原料商品，供应商，产品信息的管理和维护<br>2.进货模块<br>  原料商品的进货和退货<br>3.销售模块<br>  产品的销售和销售退货<br>4.查询统计模块<br>  负责查询一些基础信息<br>5.库存管理模块<br>  原料商品的出库，产品的入库，库存盘点和价格修改<br>6.系统管理模块<br>  操作员管理和密码修改</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Java Swing</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目八：物资管理系统"><a href="#项目八：物资管理系统" class="headerlink" title="项目八：物资管理系统"></a>项目八：物资管理系统</h3><p><strong>介绍</strong></p><blockquote><p>恒鑫租赁站长期大量出租各型钢管、扣件、塔吊等建筑施工设备。本系统为恒鑫租赁站提供了一个方便快捷的物资管理系统，方便出租物资的管理。系统功能主要包括：<br>  用户管理，包括管理员信息查看、管理员密码修改；<br>  正常订单管理：包括新增正常订单、修改有误订单、删除错误订单；<br>  资金结算管理：费用统计；<br>  材料租赁管理：包括订单出租查询、器材回收管理、日租金管理、仓库库存管理等。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h2 id="校园相关系统"><a href="#校园相关系统" class="headerlink" title="[ 校园相关系统 ]"></a>[ 校园相关系统 ]</h2><hr><h3 id="项目二：网络考试系统"><a href="#项目二：网络考试系统" class="headerlink" title="项目二：网络考试系统"></a>项目二：网络考试系统</h3><p><strong>介绍</strong></p><blockquote><p>网络考试系统主要用于实现高校在线考试，基本功能包括：自动组卷、试卷发布、试卷批阅、试卷成绩统计等。本系统结构如下：<br>（1）学生端：<br>  登录模块：登录功能；<br>  网络考试模块：可参加考试，并查看考试结果，提交试卷后老师允许的情况下查看错题；<br>（2）超级管理员端：<br>  登录模块：实现管理员登录功能；<br>  用户管理模块：实现用户信息的增加、修改、查看功能；<br>  角色权限管理模块：实现角色的增加、修改、查看功能；<br>  试卷管理模块：实现试卷信息的增加、修改、查看功能；<br>  试题管理模块：实现试题信息的增加、修改、查看功能；<br>（3）试题管理员端（老师）：<br>  试卷管理模块：实现试卷信息的增加、修改、查看功能；<br>  试题管理模块：实现试题信息的增加、修改、查看功能；</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h2 id="医疗项目"><a href="#医疗项目" class="headerlink" title="[ 医疗项目 ]"></a>[ 医疗项目 ]</h2><hr><h3 id="项目一：健康管理系统"><a href="#项目一：健康管理系统" class="headerlink" title="项目一：健康管理系统"></a>项目一：健康管理系统</h3><p><strong>介绍</strong></p><blockquote><p>javaEE健康管理系统主要功能包括：教师登录退出、教师饮食管理、教师健康日志、体检管理等等。本系统结构如下：<br>（1）用户模块：<br>  实现登录功能，退出，用户注册<br>（2）教师饮食管理：<br>  根据教师的相关信息，计算其每天所需热量，给出一周的推荐菜单。<br>（3）教师健康日志：<br>  用户可以记录自己健康日记，记录每一天的睡眠，饮酒，吸烟，血压，体重等情况。<br>（4）教师体检管理：<br>  教师可通过该平台查询每次的体检结果，显示部分项目随时间变化的曲线<br>（5）疾病预测评估：<br>  针对糖尿病和高血压两种疾病，利用数学线性回归的方法，模拟计算出教师患病概率。<br>(6) 后台管理员模块<br>  管理员用户登录功能：通过账号登录系统。<br>  管理员管理教师功能：可以增删改查教师基本信息。<br>  管理员管理体检结果：可以增删改查教师体检记录。<br>  健康新闻管理：可以发布或删除、编辑新闻</p></blockquote><ul><li><strong>数据库：</strong>Oracle</li><li><strong>使用技术：</strong>Spring + Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目二：牙科诊所管理系统"><a href="#项目二：牙科诊所管理系统" class="headerlink" title="项目二：牙科诊所管理系统"></a>项目二：牙科诊所管理系统</h3><p><strong>介绍</strong></p><blockquote><p>为适应医疗信息管理发展的需要，开发基于B/S结构的私人牙科诊所病例管理系统。该系统应具有以下功能：</p><p>（1）登陆模块，可分为管理员登陆和普通用户医生登录三个模块。</p><p>（2）用户注册模块，对用户注册的用户名的要求，不同的用户要求要有不同的用户名。</p><p>（3）系统管理模块，包括添加管理员，管理员密码的修改。</p><p>（4）挂号管理模块，包括患者的名字、性别、年龄、现住地址和患者简介。</p><p>（5）患者管理模块，对患者进行增加、患者删除、患者信息的修改。</p><p>（6）开药管理模块，对药品的增加、删除、修改、查询，患者病历查</p><p>（7）科室管理模块，管理员可以新建，修改，删除，科室信息</p><p>（8）留言管理，管理员可以新建，修改，删除留言信息</p><p>（9）预约挂号模块，用户可以在线进行预约挂号，用户可以选择普通号和专家号。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC+ JSP</li><li><strong>开发工具：</strong>未知</li></ul><hr><h3 id="项目三：医院在线挂号系统"><a href="#项目三：医院在线挂号系统" class="headerlink" title="项目三：医院在线挂号系统"></a>项目三：医院在线挂号系统</h3><p><strong>介绍</strong></p><blockquote><p>医院挂号系统主要用于实现医院的挂号。<br>本系统结构如下：<br>（1）前台功能：<br>  用户注册：注册功能；<br>  用户登录：登录功能；<br>  医院查询：选择医院、科室查询该医院下的医生信息<br>  挂号:选择医生后点击挂号，填写信息完成挂号<br>  管理中心:点击管理中心可以修改个人信息、取消挂号<br>（2）系统管理员：<br>  登录模块：实现管理员登录功能；<br>  医院管理模块：实现医院的增加、删除功能；<br>  科室管理模块：实现科室的增加、删除功能；<br>  公告管理模块：实现公告的增加、删除功能；<br>  退出系统模块：实现用户的退出功能；</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring + Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目四：住院管理系统"><a href="#项目四：住院管理系统" class="headerlink" title="项目四：住院管理系统"></a>项目四：住院管理系统</h3><p><strong>介绍</strong></p><blockquote><p>本系统主要分为六大模块，分别是医生管理模块、病人管理模块、病床管理模块、收费管理模块、统计分析模块和系统功能模块，医生、病人和医院的管理人员都可以通过此系统寻找出自己所需要的信息。</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Servlet + JDBC+ JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h2 id="其他细分行业项目"><a href="#其他细分行业项目" class="headerlink" title="[ 其他细分行业项目 ]"></a>[ 其他细分行业项目 ]</h2><hr><h3 id="项目一：码头船只出行管理系统"><a href="#项目一：码头船只出行管理系统" class="headerlink" title="项目一：码头船只出行管理系统"></a>项目一：码头船只出行管理系统</h3><p><strong>介绍</strong></p><blockquote><p>（1）用户登录模块：<br>  一般（查看）用户，权限只有修改个人信息和查看功能<br>  （操作）用户登录，可以修改自己的信息，还可以对系统内容进行增加、删除和修改<br>  系统管理员，可以修改自己的信息，并且不仅有查看、增删改的基本权限，还有对用户的管理和注册权限</p><p>（2）用户管理模块：<br>  该模块实现对用户的增加，删除和修改<br>（3）个人信息维护模块：<br>  该模块实现用户对自己的名字和密码等个人信息的修改<br>（4）新闻公告管理模块：<br>  该模块实现新闻公告的增加，删除和修改<br>（5）船只管理模块：<br>  该模块实现船只的增加，删除和修改<br>（6）路线管理模块：<br>  该模块实现路线的增加，删除和修改，以及船只与路线关系的管理<br>（7）货柜管理模块：<br>  该模块实现货柜的增加，删除和修改，以及船只与货柜关系的管理</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC+ JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目二：超市积分管理系统"><a href="#项目二：超市积分管理系统" class="headerlink" title="项目二：超市积分管理系统"></a>项目二：超市积分管理系统</h3><p><strong>介绍</strong></p><blockquote><p>超市会员积分管理系统主要用于实现了企业管理数据统计等。本系统结构如下：<br>（1）网络会员管理中心界面：<br>  会员修改密码信息模块：实现会员密码功能；<br>  会员登陆模块：实现会员登陆功能；<br>  会员注册模块：实现会员注册功能；<br>  留言板模块：实现留言板留言功能<br>（2）后台管理界面：<br>  系统用户管理模块：实现管理员的增加、查看功能；<br>  会员信息管理模块：实现会员信息的增加、修改、查看功能；<br>  注册用户管理模块：实现注册用户的增加、修改、查看功能；<br>  会员卡管理模块：实现会员卡信息的增加、查看功能；<br>  商品销售管理模块：实现商品信息的增加、查看功能；<br>  会员积分管理模块：实现合作公司信息的增加、查看功能；<br>  信息统计模块：实现数据统计报表功能；<br>  留言板模块：实现留言板信息的增加、修改、查看功能；</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Servlet + JDBC+ JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目三：保险业务管理系统"><a href="#项目三：保险业务管理系统" class="headerlink" title="项目三：保险业务管理系统"></a>项目三：保险业务管理系统</h3><p><strong>介绍</strong></p><blockquote><p>本系统主要是为了开发一个操作方便、使用快捷、处理高效的保险管理系统。因此，本系统是从人工操作容易产生错误、过程繁琐、工作效率不高，保密性差不足之处，对系统的可操作性、稳定性和实用性有一定的限制，并能安全地保存数据于数据库中来提高其系统的保密性。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring + Struts2 + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目四：机场航班起降与协调管理系统"><a href="#项目四：机场航班起降与协调管理系统" class="headerlink" title="项目四：机场航班起降与协调管理系统"></a>项目四：机场航班起降与协调管理系统</h3><p><strong>介绍</strong></p><blockquote><p>此次项目是一个基于Java的机场航班起降与协调系统（机场航班调度系统）。通过此系统帮助机场地面指挥人员进行更加明确的航班调度和指令发送，尽可能减少航班调度的错误率，尽可能规避航班调度错误的风险，极大程度地避免空难的发生。减少地面指挥人员指令发布的失误率，与航班建立数据上的可视的指令发布，使航班在可能的无线电干扰的情况下可以正常起降。实时管理航班信息，<br>建立地面指挥员与机长之间的指令通信。<br>地面指挥员端：<br>  1.指挥员登录<br>  2.航班信息的浏览<br>  3.航班信息的操作：航班的删除，航班的添加，航班信息的修改，航班信息的搜索<br>  4.指挥信息的操作：指挥信息的查询，指令的发布，指令的修改，指令的删除<br>机长端：<br>  1.机长登录<br>  2.航班信息的查询<br>  3.航班指挥信息的操作：航班指挥信息查询，航班请求的发布，航班请求的删除，航班请求的修改</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC+ JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目五：敬老院管理系统"><a href="#项目五：敬老院管理系统" class="headerlink" title="项目五：敬老院管理系统"></a>项目五：敬老院管理系统</h3><p><strong>介绍</strong></p><blockquote><p>本系统主要是针对敬老院工作人员即管理员和员工设计的。敬老院管理系统将IT技术为养老院提供一个接口便于管理信息,存储老人个人信息和其他信息,查找和更新信息的养老院档案,节省了员工的劳动时间,大大降低了成本。其主要功能包括：<br>系统管理员用户功能介绍：<br>  用户管理员、员工登录、老人信息管理、床位分配管理、护工薪资管理、护工请假记录、老人请假记录、入住费用和事故记录管理。以及对这些功能的增、删、改、查处理<br>普通管理员用户 （护工身份）功能介绍：<br>  密码信息管理用例分析, 老人信息查看用例分析, 请假信息查看用例分析,护工薪资查看用例分析</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC+ JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目六：银行排号系统"><a href="#项目六：银行排号系统" class="headerlink" title="项目六：银行排号系统"></a>项目六：银行排号系统</h3><p><strong>介绍</strong></p><blockquote><p>（1）服务器端<br>  1）取号功能：打开服务器与终端进行通信。由于把服务器设置到了用户的一端，所以在服务器端进行取号，然后把号存到数据库中。<br>  2）统计功能：数据访问层从数据库中查出所有取票人数和等待人数在服务器端界面显示。<br>  3）删除功能：删除当前取票顾客的排号。<br>  4）查询功能：顾客可以从此处了解到所有顾客的取票情况及被处理状况。<br>  5）通知功能：从服务器端获得排号，通过服务器端通知<strong><em>用户到\</em></strong>工作台办理业务。<br>（2）客户端<br>  1） 登录功能：业务员从此处登录，业务员的姓名，密码是事先录入数据库的。<br>  2） 叫号功能：业务员点击处理按钮触发事件发送信息给服务器，服务器从数据库拿到号票，返回给业务员进行业务处理。<br>  3）统计功能：数据访问层从数据库查询总取票人数和查询未处理人数在业务端显示。<br>  4） 删除功能：业务员可以删除数据库中所有的记录，也可以选择删除某条记录。<br>  5）查询功能：业务员可以查询所有顾客的取票情况及业务员对号票的处理情况，这块主要为了能够及时掌握顾客取票信息及业务员处理情况。</p></blockquote><ul><li><strong>数据库：</strong>Oracle</li><li><strong>使用技术：</strong>Java Swing + JDBC</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目七：健身俱乐部会员系统"><a href="#项目七：健身俱乐部会员系统" class="headerlink" title="项目七：健身俱乐部会员系统"></a>项目七：健身俱乐部会员系统</h3><p><strong>介绍</strong></p><blockquote><p>健身俱乐部管理系统主要由六个模块组成。<br>1.会员管理子系统:包括会员个人信息的修改、会员的增加和删除、会员信息查询以及会员卡的管理。<br>2.预约管理子系统:包括健身预约信息的录入、和删除。<br>3.人事资料管理子系统:包括人事资料的添加、删除、修改功能。<br>4.器材管理子系统:包括器材信息的录入、增加和删除、修改、产品信息查询。<br>5.考勤、工资管理子系统:包括考勤、工资信息的录入、增加和删除、修改。<br>6.系统维护子系统:包括修改密码、修改用户名、删除管理员和增加管理员四个功能模块。<br>7.用户管理模块:管理员添加、删除、查询用户基本信息和设置用户权限。</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Servlet + Hibernate + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目八：停车场管理系统1"><a href="#项目八：停车场管理系统1" class="headerlink" title="项目八：停车场管理系统1"></a>项目八：停车场管理系统1</h3><p><strong>介绍</strong></p><blockquote><p>基于Web停车场管理系统主要用于实现停车场相关信息管理，基本功能包括：系统信息管理模块、车位信息管理模块、IC卡信息管理模块、固定车主停车管理模块、临时车辆信息管理模块、系统功能操模块等。本系统结构如下：<br>  (1)系统信息管理模块：角色的增加、删除、修改和查询；用户的增加、删除、修改和查询。<br>  (2)车位信息管理模块：车位信息的增加、删除、修改和查询。<br>  (3)IC卡信息管理模块：IC卡信息的增加、删除、修改和查询。<br>  (4)固定车主停车管理模块：对固定车主的停车信息进行增加、删除、修改和查询<br>  (5)临时车辆信息管理模块：对临时车辆的停车信息进行增加、删除、修改、查询和打印<br>  (6)系统功能操模块：退出登陆、修改密码。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Spring MVC + JDBC + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目九：停车场管理系统2"><a href="#项目九：停车场管理系统2" class="headerlink" title="项目九：停车场管理系统2"></a>项目九：停车场管理系统2</h3><p><strong>介绍</strong></p><blockquote><p>车场管理系统开发出来的目的是为了方便公共场所或者企业等单位的停车管理，管理系统的高效和经济优势巨大，现如今已经有不少的高档次场所都已经引入了这种管理方式，停车场的管理人员和使用人员无需去关注它的内部设计，只需要关注相关信息的呈现和操作，如车辆信息，车位情况，而直观的了解这些无疑可以使管理者迅速的掌握停车场的实施情况，使车辆的停留和出入管理都更加的方便快捷。</p></blockquote><ul><li><strong>数据库：</strong>SQL Server</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>Eclipse</li></ul><hr><h3 id="项目十：酒店管理系统"><a href="#项目十：酒店管理系统" class="headerlink" title="项目十：酒店管理系统"></a>项目十：酒店管理系统</h3><p><strong>介绍</strong></p><blockquote><p>按照总体设计的功能模块和需求分析，酒店管理系统的各个模块的数据字典：<br>1、系统管理员数据：包含的数据项用户名，密码。<br>2、客房类型数据：包含的数据项有id号，类型名称。<br>3、客房信息数据:包含的数据项有房间号，房间面积，房间简介，房间图片，房间类型。<br>4、房间预订数据：包含的数据项有预订客房，预订时间，预订用户的名字及电话，预订天数。<br>5、入住消费数据：包含的数据项有入住客房，入住时间，客户姓名及联系方式，预订天数和消费金额。<br>6、客户信息数据：包含的数据项有客户名字，地址，电话，E-mail。<br>7、特色餐品数据：包含的数据项有名称，描述，图片，价格。<br>8、餐桌预订数据：包含的数据项有预订时间，预订餐桌号，预订人。<br>9、餐饮消费数据：包含的数据项有消费时间，消费金额，消费者姓名。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目十一：挖掘机配件营销系统"><a href="#项目十一：挖掘机配件营销系统" class="headerlink" title="项目十一：挖掘机配件营销系统"></a>项目十一：挖掘机配件营销系统</h3><p><strong>介绍</strong></p><blockquote><p>挖掘机配件销售管理系统是根据挖掘机配件销售的过程来分析该系统，系统分为三大模块。<br>库存管理模块包括：<br>  （1）库存查看，在客户进行咨询或者需要购买的时候可以通过库存查询知道当前库存中有没有货。<br>  （2）配件信息管理，管理系统中所有的配件信息。<br>  （3）配件进货，根据实际情况，及时更新库存，扩大配件的供应量，增加库存。<br>销售管理模块包括：<br>  （1）配件销售，对配件进行销售。<br>  （2）配件退还，用户不满意或者在退换期内可以进行配件退还操作。<br>  （3）利润统计，对系统中销售的利润进行统计和查看，也可以导出EXCEL。<br>用户管理模块：<br>  （1）员工信息管理，该部分主要包含管理员和普通员工的信息。<br>  （2）客户信息录管理，该部分主要管理系统中所有的新老客户信息，方便后期进行跟踪记录和回访等。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>MyEclipse</li></ul><hr><h3 id="项目十二：银行业务绩效考核系统"><a href="#项目十二：银行业务绩效考核系统" class="headerlink" title="项目十二：银行业务绩效考核系统"></a>项目十二：银行业务绩效考核系统</h3><p><strong>介绍</strong></p><blockquote><p>业务绩效考核系统主要目的是使绩效考核信息管理清晰化，基本功能包括：权限处理模块、输入模块、处理模块、统计输出模块、维护模块等。本系统结构如下：<br>1.权限处理模块：<br>  管理员与普通柜员，管理员进入的是管理员页面，普通柜员进入普通柜员的界面。<br>2.输入模块<br>  2.1 普通柜员用户注册：普通柜员通过输入用户名（工号即用户名），名字，密码进行注册，获得进入本系统权限。<br>  2.2 柜员选择柜员身份登入：柜员进入后可以查看本人工作情况的信息。<br>  2.3 管理员界面：登入后，记录柜员工作情况：输入柜员工号，柜员名字，记录业务笔数，最后一栏并记录柜员员工加减分情况（笔数处于10的整数部分为加减分情况，以10分为上限）。除此之外，管理员还能对普通柜员的权限进行修改，删除不必要的用户。<br>  2.4 对管理员输入数据进行处理：比如工号只能为7位，开头必须是882；加分减分的值不能大于10等等。<br>3.处理模块<br>  3.1 查询：输入柜员工号，可以查询到该柜员的工作情况以及加分减分情况及薪酬情况；按日期查询，可以查询到该日期本合作银行每位柜员的工作情况及加减分情况。<br>  3.2 薪酬查询：柜员薪酬计算应计算考核薪酬除以10分为标准分值，考核实际得分乘以分值为可兑现年薪（总行班子成员18000元/季、中层正职12000元/季、中层副职9000元/季、员工6000元/季、短期合同工（三年以下）1500元/季。） 月总分/月天数/10*薪酬标准<br>  4.统计输出模块：比如可以统计本合作银行业务笔数由多到少排名，加减分情况排名。<br>  5.维护模块：对系统进行维护，定期对数据进行备份，对历史数据库进行备份，对密码口令进行维护。</p></blockquote><ul><li><strong>数据库：</strong>MySQL</li><li><strong>使用技术：</strong>Servlet + JDBC + JSP</li><li><strong>开发工具：</strong>未知</li></ul><hr><h2 id="团队介绍"><a href="#团队介绍" class="headerlink" title="团队介绍"></a>团队介绍</h2><p>团队成员主要由毕业大学生组成，对于学生需求更加了解，会尽量满足学生<strong>需求</strong>，帮助同学们顺利<strong>答辩</strong>。</p><p>想<strong><font color="#dd0000">加入团队</font> </strong>的请<strong><font color="#dd0000">查看下方的联系方式</font> </strong></p><h2 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h2><blockquote><p><strong>QQ：1755497577（备注：代写 ）</strong></p></blockquote><div align="center" width="80%"><br>  <img width="30%" src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/kcsj/qq.jpg"><br></div><blockquote><p><strong>微信（备注：代写）</strong></p></blockquote><div align="center" width="80%"><br>  <img width="30%" src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/kcsj/wechat.png"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/kcsj/bd.webp&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="代写" scheme="https://lijinhongpassion.github.io/tags/%E4%BB%A3%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>Java-volatile原理</title>
    <link href="https://lijinhongpassion.github.io/codeant/2334.html"/>
    <id>https://lijinhongpassion.github.io/codeant/2334.html</id>
    <published>2020-08-20T10:16:21.000Z</published>
    <updated>2021-03-27T03:57:15.514Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1558980663-3685c1d673c4?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" style="zoom:200%;"></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="0-volatile"><a href="#0-volatile" class="headerlink" title="0  volatile"></a>0  volatile</h2><blockquote><p>缓存可见性 , 指令有序性, 不保证原子性</p></blockquote><h2 id="1-可见性问题来源"><a href="#1-可见性问题来源" class="headerlink" title="1 可见性问题来源"></a>1 可见性问题来源</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">boolean</span> initFlag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> throw InterruptedException</span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread( ()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span>(!initFlag)&#123;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"end"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread( ()-&gt;&#123;</span><br><span class="line">            <span class="comment">//这里是为了先让线程t1先执行</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            initFlag = <span class="keyword">true</span>;</span><br><span class="line">            System.out.println(<span class="string">"initFlag = "</span> + initFlag);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>上诉代码按照咱们的理解, <code>t2</code>线程启动后, 将<code>initFlag</code>设置为<code>true</code>, <code>t1</code>线程就会结束<code>while</code>循环, 并打印<code>end</code>;  但结果并不是这样</p></blockquote><p><strong>不添加volatile</strong></p><blockquote><p><strong>多线程处理共享变量问题;  该图片是早期的<font color="red">JMM操作流程</font>;会有对<font color="yellow">总线加锁</font>的操作</strong> </p><p>图片中线程2展示了JMM原子操作第一次读取count值时，从主内存中读取count的值后写入到自己的工作内存中，再从工作内存中读取，<strong>待线程结束后将数据写会主存。</strong></p><p>其中线程1第一次读取count值时，从主内存中读取count的值后写入到自己的工作内存中，再从工作内存中读取，<strong>之后的读取的count值都是从自己的工作内存中读取</strong>，并没有发现更新count值的线程对count值的修改。<font color="greeen">出现了可见性的问题</font></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/2334/image-20200819162450398.png" alt="image-20200819162450398"></p><font color="red"><strong>因为加锁的粒度太大,对总线加锁 , 会将所有的线程串化, 失去了多线程的意义, 后期添加了MESI缓存一致性协议 , 只针对缓存行加锁, 可以指定变量开启该协议.</strong></font></blockquote><p><strong>添加volatile</strong></p><blockquote><p>线程2中设置为volatile的变量,<font color="grenn"><strong>在更改值后马上同步回主存, 线程2的后续代码在值写回主存完成后再执行</strong></font></p><p>所有CPU ( 这里指线程1 ) 会不断地<font color="red"><strong>监听总线是否有更新共享变量的操作</strong></font>, <font color="grenn">有更改操作就把所有CPU( 这里指线程1 )上的工作内存中的共享变量变为<strong>失效,  </strong></font><font color="yellow">然后线程1中执行的代码中用到了这个共享变量, 去工作区间拿这个共享变量, 发现该值已经失效, 就会重新去主存获取值</font></p></blockquote><h2 id="2-MESI缓存一致性协议-原理"><a href="#2-MESI缓存一致性协议-原理" class="headerlink" title="2 MESI缓存一致性协议 原理"></a>2 MESI缓存一致性协议 原理</h2><blockquote><p>参考文章 : <a href="https://www.cnblogs.com/yanlong300/p/8986041.html" target="_blank" rel="noopener">https://www.cnblogs.com/yanlong300/p/8986041.html</a></p><p>MESI 是指4种状态的首字母。每个Cache line有4个状态，可用2个bit表示，它们分别是：</p><blockquote><p><strong>缓存行（Cache line）</strong>:缓存存储数据的单元。</p></blockquote><table><thead><tr><th style="text-align:left">状态</th><th style="text-align:left">描述</th><th style="text-align:left">监听任务</th></tr></thead><tbody><tr><td style="text-align:left">M 修改 (Modified)</td><td style="text-align:left">该Cache line有效，数据被修改了，和内存中的数据不一致，数据只存在于本Cache中。</td><td style="text-align:left">缓存行必须时刻监听所有试图读该缓存行相对就主存的操作，这种操作必须在缓存将该缓存行写回主存并将状态变成S（共享）状态之前被延迟执行。</td></tr><tr><td style="text-align:left">E 独享、互斥 (Exclusive)</td><td style="text-align:left">该Cache line有效，数据和内存中的数据一致，数据只存在于本Cache中。</td><td style="text-align:left">缓存行也必须监听其它缓存读主存中该缓存行的操作，一旦有这种操作，该缓存行需要变成S（共享）状态。</td></tr><tr><td style="text-align:left">S 共享 (Shared)</td><td style="text-align:left">该Cache line有效，数据和内存中的数据一致，数据存在于很多Cache中。</td><td style="text-align:left">缓存行也必须监听其它缓存使该缓存行无效或者独享该缓存行的请求，并将该缓存行变成无效（Invalid）。</td></tr><tr><td style="text-align:left">I 无效 (Invalid)</td><td style="text-align:left">该Cache line无效。</td><td style="text-align:left">无</td></tr></tbody></table></blockquote><h2 id="3-volatile的底层-汇编"><a href="#3-volatile的底层-汇编" class="headerlink" title="3 volatile的底层 - 汇编"></a>3 volatile的底层 - 汇编</h2><blockquote><p>其实在变量前面添加<code>volatile</code>关键字, 在汇编语言层次上看, 也就是在未添加关键字的指令上多了一个<code>lock</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; //添加volatile</span><br><span class="line">&gt; lock add dword ptr [rsp]....</span><br><span class="line">&gt; //未添加</span><br><span class="line">&gt; add dword ptr [rsp]....</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>lock指令的作用</strong></p><ol><li>锁定当前<strong>缓存行</strong>区域, 并<strong>写回主内存</strong> ( 防止其他线程操作改变量 )</li><li>这些写回主存的操作会引起其他CPU中的工作内存的该变量失效( MESI协议 )</li></ol></blockquote><h2 id="4-如何保证原子性"><a href="#4-如何保证原子性" class="headerlink" title="4 如何保证原子性"></a>4 如何保证原子性</h2><blockquote><p>结合<code>synchronized</code>, 尽量原子操作类, juc下的atomic包下的类</p></blockquote><h2 id="示例-单例模式"><a href="#示例-单例模式" class="headerlink" title="示例 : 单例模式"></a>示例 : 单例模式</h2><p><strong>1. 不考虑线程安全的懒汉式单例模式</strong></p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">private</span> <span class="keyword">static</span> Test single = <span class="keyword">null</span>;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Test <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">&gt;   <span class="keyword">if</span> (single == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> Test();</span><br><span class="line">&gt;   <span class="keyword">return</span> single;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><strong>2. 考虑过线程安全问题的懒汉式单例模式( DCL double-checked- locking )</strong></p><blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">&gt;  </span><br><span class="line">&gt;  <span class="keyword">private</span> <span class="keyword">static</span> Test single = <span class="keyword">null</span>;</span><br><span class="line">&gt;  </span><br><span class="line">&gt;  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Test <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">&gt;     <span class="keyword">if</span>(single == <span class="keyword">null</span>)&#123;</span><br><span class="line">&gt;         <span class="keyword">synchronized</span>(Test.class)&#123;</span><br><span class="line">&gt;             <span class="keyword">if</span> (single == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> Test();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     <span class="keyword">return</span> single;</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p> <strong>字节码 : </strong>可根据字节码分析, 会发现有<code>有序性</code>的问题存在</p><p> <strong>锁粒度 : </strong><code>Test.class</code> - 类对象</p><p> <strong>问题 : </strong>大量线程访问时候, 虽然保证<code>synchronized</code>代码块里面的代码线程安全的问题, 但是对于<strong><code>synchronized</code>代码块外面的代码有序性无法保证</strong></p><p> 由于锁的粒度太大, 对<code>.class</code>加锁, <strong>阻塞时间会更长,阻塞线程会变得更多</strong>( <font color="red">需要细细体会加粗字体</font> )</p></blockquote><p><strong>3. 考虑过线程安全问题 / 锁粒度更小的懒汉式单例模式</strong></p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Test single = <span class="keyword">null</span>;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Test <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">&gt;   <span class="keyword">if</span>(single == <span class="keyword">null</span>)&#123;</span><br><span class="line">&gt;       <span class="keyword">synchronized</span>(single)&#123;</span><br><span class="line">&gt;           <span class="keyword">if</span> (single == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> Test();</span><br><span class="line">&gt;       &#125;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt; <span class="keyword">return</span> single;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>锁粒度 : </strong><code>single</code> - 类中的变量对象</p><p><strong>优势 : </strong><code>volatile</code>保证了变量的缓存可见性, 有序性, 但是不保证原子性, 所以这里添加 <code>synchronized</code>包装<code>single</code>的原子性, 并且在外层再添加了一个<code>if</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1558980663-3685c1d673c4?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; style=&quot;zoom:200%;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
      <category term="volatile" scheme="https://lijinhongpassion.github.io/categories/java/volatile/"/>
    
      <category term="多线程" scheme="https://lijinhongpassion.github.io/categories/java/volatile/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Redis-利用Redis的原子操作-Incr实现秒杀</title>
    <link href="https://lijinhongpassion.github.io/codeant/f262.html"/>
    <id>https://lijinhongpassion.github.io/codeant/f262.html</id>
    <published>2020-08-18T10:51:32.000Z</published>
    <updated>2021-03-27T03:57:44.261Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1582079302063-33d56135e4e9?ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" style="zoom:200%;"></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><blockquote><p>如果你对redis的CRUD操作还不是很熟悉, 可以去阅读<a href="https://github.com/LiJinHongPassion/springboot/tree/master/springboot-redis-demo" target="_blank" rel="noopener">springboot_redis_demo</a>：springboot整合redis数据库利用redistemplate实现CRUD</p></blockquote><blockquote><p>该篇文章主要是对秒杀中redis的increment介绍, 关于其他秒杀相关可以查看参考文献, 他们已经描述得很全面了</p><p>本文代码 : <a href="https://gitee.com/LiJinHongPassion/utils/tree/master/springboot-redis-incr-demo" target="_blank" rel="noopener">springboot-redis-incr-demo</a> </p></blockquote><hr><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><blockquote><p><strong>环境: </strong>redis, mysql, jdk</p></blockquote><hr><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>多个线程同时修改同一条数据 , MySQL和Redis怎么保证不会出现线程安全</p></blockquote><p><strong>什么是原子性 ?</strong> </p><blockquote><blockquote><p>参考: <a href="https://juejin.im/post/6844904080041574413" target="_blank" rel="noopener">https://juejin.im/post/6844904080041574413</a>     诡异的并发之原子性</p></blockquote><p><strong>一个或者多个操作在 CPU 执行的过程中不被中断的特性称为原子性 。</strong></p><p><strong>数据库事务中 </strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 原子性概念是这样子的：事务被当做一个不可分割的整体，包含在其中的操作要么全部执行，要么全部不执行。且事务在执行过程中如果发生错误，会被回滚到事务开始前的状态，就像这个事务没有执行一样。（也就是说：事务要么被执行，要么一个都没被执行）</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>多线程并发中</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; 原子性概念是这样子的：</span><br><span class="line">&gt; </span><br><span class="line">&gt; 第一种理解：一个线程或进程在执行过程中，没有发生上下文切换。</span><br><span class="line">&gt; 上下文切换：指CPU从一个进程/线程切换到另外一个进程/线程(切换的前提就是获取CPU的使用权)。</span><br><span class="line">&gt; </span><br><span class="line">&gt; 第二种理解：我们把一个线程中的一个或多个操作(不可分割的整体)，在CPU执行过程中不被中断的特性，称为原子性。(执行过程中，一旦发生中断，就会发生上下文切换)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>原子性是</strong>  拒绝<em>多线程操作</em>的,不论是多核还是单核,具有原子性的量 ,  <strong>同一时刻只能有一个线程来对它进行操作。</strong></p></blockquote><hr><h2 id="MySQL锁"><a href="#MySQL锁" class="headerlink" title="MySQL锁"></a>MySQL锁</h2><blockquote><ol><li><p>对于<code>UPDATE、DELETE、INSERT</code>语句，<strong>InnoDB</strong>会<strong>自动</strong>给涉及数据集加排他锁（X)</p></li><li><p><strong>InnoDB行锁和表锁都支持</strong>！</p><ol><li>表锁<ul><li>开销小，加锁快；不会出现死锁；锁定力度大，发生锁冲突概率高，并发度最低</li></ul></li><li>行锁<ul><li>开销大，加锁慢；会出现死锁；锁定粒度小，发生锁冲突的概率低，并发度高</li></ul></li></ol></li><li><p>InnoDB只有通过<strong>索引条件</strong>检索数据<strong>才使用行级锁</strong>，否则，InnoDB将使用<strong>表锁</strong></p></li><li><p><strong>表锁下又分为两种模式</strong>：</p><ul><li><p>表读锁（Table Read Lock）</p></li><li><p>表写锁（Table Write Lock）</p></li><li><p>从下图可以清晰看到，在表读锁和表写锁的环境下：</p></li></ul><p>读读不阻塞，读写阻塞，写写阻塞</p><ul><li>读读不阻塞：当前用户在读数据，其他的用户也在读数据，不会加锁</li></ul></li></ol><ul><li><p>读写阻塞：当前用户在读数据，其他的用户<strong>不能修改当前用户读的数据</strong>，会加锁！</p><ul><li>写写阻塞：当前用户在修改数据，其他的用户<strong>不能修改当前用户正在修改的数据</strong>，会加锁！</li></ul><ol start="5"><li><p>InnoDB实现了以下<strong>两种</strong>类型的行锁。</p><ul><li>共享锁（S锁）：允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁。<ul><li>也叫做<strong>读锁</strong>：读锁是<strong>共享</strong>的，多个客户可以<strong>同时读取同一个</strong>资源，但<strong>不允许其他客户修改</strong>。</li></ul></li><li>排他锁（X锁)：允许获得排他锁的事务更新数据，阻止其他事务取得相同数据集的共享读锁和排他写锁。<ul><li>也叫做<strong>写锁</strong>：写锁是排他的，<strong>写锁会阻塞其他的写锁和读锁</strong>。</li></ul></li></ul></li><li>数据库事务有不同的隔离级别，不同的隔离级别对锁的使用是不同的。MySQL默认使用的可重复读的隔离级别 , 可重复读会导致幻读 , 通过<strong>mvvc和gap锁解决了幻读</strong>( 参考: <a href="https://my.oschina.net/u/566591/blog/3162858?_from=gitee_rec" target="_blank" rel="noopener">https://my.oschina.net/u/566591/blog/3162858?_from=gitee_rec</a> )。<strong>其中mvvc是读写不阻塞的</strong></li></ol></li></ul></blockquote><blockquote><p><strong>结论 : </strong>MySQL对于<code>UPDATE、DELETE、INSERT</code>语句, <strong>都会加锁,</strong> <strong>导致其他的SQL语句阻塞( 也就是写写阻塞 ),</strong> 在高并发的情况下, <strong>虽然保证了数据安全</strong> , 但是数据库会承受大量的IO操作, 大量的操作就会阻塞, 可能会导致宕机等, 所以需要缓冲这些服务, 可以使用MQ来异步操作</p></blockquote><h2 id="Redis锁"><a href="#Redis锁" class="headerlink" title="Redis锁"></a>Redis锁</h2><blockquote><p><strong>参考 : </strong><a href="https://www.cnblogs.com/fengff/p/10913492.html" target="_blank" rel="noopener">https://www.cnblogs.com/fengff/p/10913492.html</a></p></blockquote><h5 id="命令INCR"><a href="#命令INCR" class="headerlink" title="命令INCR"></a>命令<code>INCR</code></h5><blockquote><p><strong>Redis Incr 和 Redis Incrby命令是原子操作</strong></p></blockquote><ul><li>Redis Incr 命令将 key 中储存的数字值增一，如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 INCR 操作。<ul><li>Redis Incrby 命令将 key 中储存的数字加上指定的增量值，如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 INCR 操作。</li><li>在rspringboot中直接是调用<code>redisTemplate.opsForValue().increment(String.valueOf(key), -(long) num)</code>就可以了</li></ul></li></ul><blockquote><p>适用场景 : 计数器，高并发生成订单号，秒杀类的业务逻辑等。</p></blockquote><p><strong>结合项目中的代码来讲: </strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> num 购买数量</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> key 购买的商品ID</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Transactional</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">buy1</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//1. 查询redis上的库存是否充足, 高并发情况下 检查库存 与 减少库存 不是原子性，  以 increment &gt; 0 为准      *</span></span><br><span class="line">       Integer redis_num = Integer.valueOf(</span><br><span class="line">               Objects.requireNonNull(</span><br><span class="line">                       redisTemplate.opsForValue().get(<span class="string">"1"</span>)</span><br><span class="line">               )</span><br><span class="line">       );</span><br><span class="line">       <span class="keyword">if</span> (redis_num &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="string">"库存不足!!"</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 2.减少库存</span></span><br><span class="line">       <span class="keyword">long</span> value = redisTemplate.opsForValue().increment(String.valueOf(key), -(<span class="keyword">long</span>) num);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 库存充足 可以异步操作,即使反馈购买成功的信息,并异步处理 扣减mysql数据库并生成订单</span></span><br><span class="line">       <span class="keyword">if</span> (value &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="comment">// update 数据库中商品库存和订单系统下单，单的状态未待支付</span></span><br><span class="line">           <span class="comment">// 分开两个系统处理时，可以用LCN做分布式事务，但是也是有概率会订单系统的网络超时</span></span><br><span class="line">           <span class="comment">// 也可以使用最终一致性的方式，更新库存成功后，发送mq，等待订单创建生成回调。</span></span><br><span class="line">           <span class="keyword">boolean</span> res = productDao.update(num, key) == <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">if</span> (res) &#123;</span><br><span class="line">               <span class="comment">//创建订单</span></span><br><span class="line">               <span class="comment">//createOrder(req);</span></span><br><span class="line">               <span class="comment">//记录购买日志</span></span><br><span class="line">               productLogDao.insert(<span class="keyword">new</span> CodeantProductLog( <span class="keyword">new</span> Date(), key, num ));</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> <span class="string">"成功购买"</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//恢复扣减的redis库存</span></span><br><span class="line">           redisTemplate.opsForValue().increment(String.valueOf(key), (<span class="keyword">long</span>) num);</span><br><span class="line">           <span class="keyword">return</span> <span class="string">"redis库存不够"</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><code>long value = redisTemplate.opsForValue().increment(String.valueOf(key), -(long) num);</code>在并发情况下是线程安全的 , 因为<code>increment</code>方法调用的是<code>Incrby</code>命令, <code>Incrby</code>是原子操作 ; 多线程的情况下 , 因为是原子操作 , 就只能有一个线程对Key进行修改 , 其他线程修改不了。</p><h5 id="锁SETNX"><a href="#锁SETNX" class="headerlink" title="锁SETNX"></a>锁<code>SETNX</code></h5><blockquote><p>使用<code>!SETNX</code>加锁 , 官方文档 : <a href="http://www.redis.cn/commands/setnx.html" target="_blank" rel="noopener">http://www.redis.cn/commands/setnx.html</a></p></blockquote><blockquote><p>适用场景 : 分布式锁</p></blockquote><h5 id="锁SET"><a href="#锁SET" class="headerlink" title="锁SET"></a>锁<code>SET</code></h5><pre><code>&gt;官方不推荐用来做为锁&gt;&gt;官方文档 : http://www.redis.cn/commands/set.html</code></pre><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><blockquote><p>阅读顺序</p><ol><li><a href="https://www.zhihu.com/question/54895548/answer/923987542" target="_blank" rel="noopener">如何设计秒杀</a></li><li><a href="https://blog.csdn.net/shendl/article/details/51092916?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase" target="_blank" rel="noopener">redis如何设计秒杀</a></li><li><a href="https://mp.weixin.qq.com/s/cdnRmiUFJTIYJVMfgJJw_Q" target="_blank" rel="noopener">redis如何方式超买超卖( 如何扣减库存 )</a></li><li><a href="https://copyfuture.com/blogs-details/20200510085548659corx8bjvdg9td64" target="_blank" rel="noopener">推荐使用redis原子操作+sql乐观锁实现</a></li><li><a href="https://www.cnblogs.com/jiawen010/articles/11350125.html" target="_blank" rel="noopener">redis分布式锁</a></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1582079302063-33d56135e4e9?ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; style=&quot;zoom:200%;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Redis" scheme="https://lijinhongpassion.github.io/categories/Redis/"/>
    
    
      <category term="Redis" scheme="https://lijinhongpassion.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Java-为什么使用HashMap需要重写hashcode和equals方法？</title>
    <link href="https://lijinhongpassion.github.io/codeant/8cb1.html"/>
    <id>https://lijinhongpassion.github.io/codeant/8cb1.html</id>
    <published>2020-08-18T10:28:02.000Z</published>
    <updated>2021-03-27T03:58:03.199Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1597484661643-2f5fef640dd1?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1571&amp;q=80" style="zoom:200%;"></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><h4 id="代码一"><a href="#代码一" class="headerlink" title="代码一"></a><strong>代码一</strong></h4><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">&gt; map.put(<span class="string">"k1"</span>, <span class="string">"v1"</span>);</span><br><span class="line">&gt; System.out.println(map);</span><br><span class="line">&gt; <span class="comment">//结果</span></span><br><span class="line">&gt; &#123;k1=v1&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>上述代码是我们常用的<code>HashMap</code>的方式, 以<code>String</code>作为<code>key</code>, <code>Object</code>作为<code>value</code><br>我们在使用<code>HashMap</code>的时候, 一般都没有注意关于<code>HashMap</code>的<code>equals</code>和<code>hashCode</code>的重写问题</p></blockquote><h4 id="代码二"><a href="#代码二" class="headerlink" title="代码二"></a><strong>代码二</strong></h4><p><strong>问题来了, 首先</strong></p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">&gt; String k1 = <span class="keyword">new</span> String(<span class="string">"key"</span>);</span><br><span class="line">&gt; String k2 = <span class="keyword">new</span> String(<span class="string">"key"</span>);</span><br><span class="line">&gt; System.out.println(k1 == k2);</span><br><span class="line">&gt; map.put( k1, <span class="string">"v1"</span>);</span><br><span class="line">&gt; System.out.println(map);</span><br><span class="line">&gt; map.put( k2, <span class="string">"v2"</span>);</span><br><span class="line">&gt; </span><br><span class="line">&gt; System.out.println(map);</span><br><span class="line">&gt; <span class="comment">//结果</span></span><br><span class="line">&gt; <span class="keyword">false</span></span><br><span class="line">&gt; &#123;key=v1&#125;</span><br><span class="line">&gt; &#123;key=v2&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><code>==</code>是用于基本数据类型的值比较, 引用类型的地址比较, 在这里明显<code>k1</code>和<code>k2</code>是同不是一个<code>String</code>对象, 但是他们的值都是<code>key</code>, 所以按照常理来说利用<code>k2</code>也能改变<code>k1</code>的值</p><p>结果显示的确能够利用<code>k2</code>改变<code>k1</code></p></blockquote><h4 id="代码三"><a href="#代码三" class="headerlink" title="代码三"></a><strong>代码三</strong></h4><p><strong>但是</strong></p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">&gt;  </span><br><span class="line">&gt;  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">&gt; </span><br><span class="line">&gt;      Map&lt;CodeAntKey, Object&gt; map = <span class="keyword">new</span> HashMap&lt;CodeAntKey, Object&gt;();</span><br><span class="line">&gt;      CodeAntKey k1 = <span class="keyword">new</span> CodeAntKey(<span class="string">"key"</span>);</span><br><span class="line">&gt;      CodeAntKey k2 = <span class="keyword">new</span> CodeAntKey(<span class="string">"key"</span>);</span><br><span class="line">&gt;      System.out.println(k1 == k2);</span><br><span class="line">&gt;      map.put( k1, <span class="string">"v1"</span>);</span><br><span class="line">&gt;      System.out.println(map);</span><br><span class="line">&gt;      map.put( k2, <span class="string">"v2"</span>);</span><br><span class="line">&gt;      System.out.println(map);</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">CodeAntKey</span></span>&#123;</span><br><span class="line">&gt;  <span class="keyword">private</span> String key;</span><br><span class="line">&gt; </span><br><span class="line">&gt;  <span class="function"><span class="keyword">public</span> <span class="title">CodeAntKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">&gt;      <span class="keyword">this</span>.key = key;</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="comment">//结果</span></span><br><span class="line">&gt; <span class="keyword">false</span></span><br><span class="line">&gt; &#123;com.company.CodeAntKey@<span class="number">1</span>b6d3586=v1&#125;</span><br><span class="line">&gt; &#123;com.company.CodeAntKey@<span class="number">4554617</span>c=v2, com.company.CodeAntKey@<span class="number">1</span>b6d3586=v1&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>这里我自定义了一个类, 利用相同的属性<code>new</code>了两个对象, 所以这里他们不是同一个对象, 所以为<code>fasle</code></p><p>但是按照上面<code>String</code>的示例来说, 应该<code>k2</code>能够改变<code>k1</code>的值, 但是这里为什么失败了</p></blockquote><h4 id="代码四"><a href="#代码四" class="headerlink" title="代码四"></a><strong>代码四</strong></h4><p><strong>怎样解决</strong></p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">&gt;</span><br><span class="line">&gt;   Map&lt;CodeAntKey, Object&gt; map = <span class="keyword">new</span> HashMap&lt;CodeAntKey, Object&gt;();</span><br><span class="line">&gt;   CodeAntKey k1 = <span class="keyword">new</span> CodeAntKey(<span class="string">"key"</span>);</span><br><span class="line">&gt;   CodeAntKey k2 = <span class="keyword">new</span> CodeAntKey(<span class="string">"key"</span>);</span><br><span class="line">&gt;   System.out.println(k1 == k2);</span><br><span class="line">&gt;   map.put( k1, <span class="string">"v1"</span>);</span><br><span class="line">&gt;   System.out.println(map);</span><br><span class="line">&gt;   map.put( k2, <span class="string">"v2"</span>);</span><br><span class="line">&gt;   System.out.println(map);</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;<span class="class"><span class="keyword">class</span> <span class="title">CodeAntKey</span></span>&#123;</span><br><span class="line">&gt;<span class="keyword">private</span> String key;</span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="title">CodeAntKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">&gt;   <span class="keyword">this</span>.key = key;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="meta">@Override</span></span><br><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">&gt;   <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&gt;   <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> CodeAntKey)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&gt;   CodeAntKey that = (CodeAntKey) o;</span><br><span class="line">&gt;   <span class="keyword">return</span> key.equals(that.key);</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="meta">@Override</span></span><br><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&gt;   <span class="keyword">return</span> Objects.hash(key);</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;<span class="comment">//结果</span></span><br><span class="line">&gt;<span class="keyword">false</span></span><br><span class="line">&gt;&#123;com.company.CodeAntKey@<span class="number">19e7</span>e=v1&#125;</span><br><span class="line">&gt;&#123;com.company.CodeAntKey@<span class="number">19e7</span>e=v2&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>这里的代码跟上面的代码就多了<code>equals</code>和<code>hashCode</code>方法, 然后发现<code>k2</code>可以改变<code>k1</code>的值了</p></blockquote><p><strong>那到底是为什么呢, 下面慢慢道来…</strong></p><hr><h2 id="HashMap的存储方式-PUT"><a href="#HashMap的存储方式-PUT" class="headerlink" title="HashMap的存储方式 - PUT"></a>HashMap的存储方式 - PUT</h2><blockquote><p>在面试的时候经常问这个问题, 大家都是一通<code>jdk1.7之前是数组 + 链表</code>和<code>jdk1.8是数组 + 链表 + 红黑树( 链表长度超过8就使用红黑树 )</code>这样说, 其实也是没有错的</p></blockquote><p><strong>但是HashMap是怎样将数据放至进入他的数据结构中的呢 ? </strong></p><p><strong>先放部分源码, 有兴趣的可以阅读put全部源码的可以去<a href="https://www.cnblogs.com/captainad/p/10905184.html" target="_blank" rel="noopener">https://www.cnblogs.com/captainad/p/10905184.html</a></strong></p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">&gt;  <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&gt; &#125; </span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment">//计算hash值</span></span><br><span class="line">&gt; <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">&gt;  <span class="keyword">int</span> h;</span><br><span class="line">&gt;  <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">&gt;              <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">&gt;   Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">&gt;   <span class="comment">// 如果map还是空的，则先开始初始化，table是map中用于存放索引的表</span></span><br><span class="line">&gt;   <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>) &#123;</span><br><span class="line">&gt;       n = (tab = resize()).length;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   <span class="comment">// 使用hash与数组长度减一的值进行异或得到分散的数组下标，预示着按照计算现在的</span></span><br><span class="line">&gt;   <span class="comment">// key会存放到这个位置上，如果这个位置上没有值，那么直接新建k-v节点存放</span></span><br><span class="line">&gt;   <span class="comment">// 其中长度n是一个2的幂次数</span></span><br><span class="line">&gt;   <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>) &#123;</span><br><span class="line">&gt;       tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;   <span class="comment">// 如果走到else这一步，说明key索引到的数组位置上已经存在内容，即出现了碰撞</span></span><br><span class="line">&gt;   <span class="comment">// 这个时候需要更为复杂处理碰撞的方式来处理，如链表和树</span></span><br><span class="line">&gt;   <span class="keyword">else</span> &#123;</span><br><span class="line">&gt;       Node&lt;K,V&gt; e; K k;</span><br><span class="line">&gt;       <span class="comment">// 其中p已经在上面通过计算索引找到了，即发生碰撞那一个节点</span></span><br><span class="line">&gt;       <span class="comment">// 比较，如果该节点的hash和当前的hash相等，而且key也相等或者</span></span><br><span class="line">&gt;       <span class="comment">// 在key不等于null的情况下key的内容也相等，则说明两个key是</span></span><br><span class="line">&gt;       <span class="comment">// 一样的，则将当前节点p用临时节点e保存</span></span><br><span class="line">&gt;       <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">&gt;               ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">&gt;           e = p;</span><br><span class="line">&gt;       &#125;<span class="keyword">else</span> <span class="keyword">if</span>()&#123;</span><br><span class="line">&gt;           <span class="comment">//...省略</span></span><br><span class="line">&gt;       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">&gt;           <span class="comment">//...省略</span></span><br><span class="line">&gt;       &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;       <span class="comment">// 此时的e是保存的被碰撞的那个节点，即老节点</span></span><br><span class="line">&gt;       <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">&gt;           V oldValue = e.value;</span><br><span class="line">&gt;           <span class="comment">// onlyIfAbsent是方法的调用参数，表示是否替换已存在的值，</span></span><br><span class="line">&gt;           <span class="comment">// 在默认的put方法中这个值是false，所以这里会用新值替换旧值</span></span><br><span class="line">&gt;           <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">&gt;               e.value = value;</span><br><span class="line">&gt;           <span class="comment">// Callbacks to allow LinkedHashMap post-actions</span></span><br><span class="line">&gt;           afterNodeAccess(e);</span><br><span class="line">&gt;           <span class="keyword">return</span> oldValue;</span><br><span class="line">&gt;       &#125;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   <span class="comment">//...省略</span></span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>也就是说<code>hashMap</code>在<code>put</code>的时候是</p><ol><li>需要先计算<code>key</code>的<code>hash</code>值( <code>hash(key)</code> ), </li><li>然后利用<code>hash值</code>去寻址, </li><li>当地址上已经存在内容, 再利用<code>equals</code>比较对象的;</li></ol><p>自定义类在没有重写<code>hashCode</code>的方法时, 默认调用的是Object类的<code>equals()</code>和<code>hashCode()</code>, </p><p><strong><code>Object</code>中的<code>equals()</code>和<code>hashCode()</code></strong></p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">&gt;<span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>所以我们需要重写<code>equals()</code>和<code>hashCode()</code>方法, 不然就会造成<strong>代码四</strong>标题的问题</p><h2 id="HashMap的获取方式-GET"><a href="#HashMap的获取方式-GET" class="headerlink" title="HashMap的获取方式 - GET"></a>HashMap的获取方式 - GET</h2><font size="6px" color="red">为什么在重写equals方法的同时，必须重写hashCode方法</font><p><strong>上源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">    <span class="comment">//确保table不为空，并且计算得到的下标对应table的位置上有节点</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//判断第一个节点是不是要找的key</span></span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="comment">//如果第一个节点就查找链表或者红黑树</span></span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//红黑树上查找</span></span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="comment">//链表上查找</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们试图添加或者找到一个<code>key</code>的时候，方法会去判断哈希值是否相等和值是否相等，都相等的时候才会判断这个<code>key</code>就是要获取的<code>key</code>。也就是说，严格意义上，一个<code>HashMap</code>里是不允许出现相同的<code>key</code>的。</p><p>当我们使用对象作为<code>key</code>的时候，根据原本的<code>hashCode</code>和<code>equals</code>仍然能保证<code>key</code>的唯一性。但是当我们重写了<code>equals</code>方法而不重写<code>hashCode()</code>方法时，可能出现值相等但是因为地址不相等导致哈希值不同，最后导致出现两个相同的<code>key</code>的情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;CodeAnimal, Object&gt; map = <span class="keyword">new</span> HashMap&lt;CodeAnimal, Object&gt;();</span><br><span class="line">        CodeAnimal k1 = <span class="keyword">new</span> CodeAnimal(<span class="string">"ant"</span>, <span class="number">25</span>);</span><br><span class="line">        CodeAnimal k2 = <span class="keyword">new</span> CodeAnimal(<span class="string">"ant"</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"k1 == k2 : "</span> + (k1 == k2));</span><br><span class="line">        map.put( k1, <span class="string">"v1"</span>);</span><br><span class="line">        System.out.println(<span class="string">"1 ---- "</span> + map);</span><br><span class="line">        map.put( k2, <span class="string">"v2"</span>);</span><br><span class="line">        System.out.println(<span class="string">"2 ---- "</span> + map);</span><br><span class="line"></span><br><span class="line">        System.out.println(k1.hashCode());</span><br><span class="line">        System.out.println(k2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CodeAnimal</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CodeAnimal</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> CodeAnimal)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        CodeAnimal that = (CodeAnimal) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(getName(), that.getName()) &amp;&amp;</span><br><span class="line">                Objects.equals(getAge(), that.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">k1 == k2 : <span class="keyword">false</span></span><br><span class="line"><span class="number">1</span> ---- &#123;com.company.CodeAnimal@<span class="number">1</span>b6d3586=v1&#125;</span><br><span class="line"><span class="number">2</span> ---- &#123;com.company.CodeAnimal@<span class="number">4554617</span>c=v2, com.company.CodeAnimal@<span class="number">1</span>b6d3586=v1&#125;</span><br><span class="line"><span class="number">460141958</span></span><br><span class="line"><span class="number">1163157884</span></span><br></pre></td></tr></table></figure><p>上述代码得出, 在两个对象的值相同时, 两个对象分别存入<code>map</code>, 如果不重写<code>hashCode</code>方法 ,就会存在两个<code>key</code>相同</p><blockquote><p>如果调用equals方法得到的结果为true，则两个对象的hashcode值必定相等；</p><p>如果equals方法得到的结果为false，则两个对象的hashcode值不一定不同；</p><p>如果两个对象的hashcode值不等，则equals方法得到的结果必定为false；</p><p>如果两个对象的hashcode值相等，则equals方法得到的结果未知。</p></blockquote><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.cnblogs.com/captainad/p/10905184.html" target="_blank" rel="noopener">HashMap之put方法流程解读</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1597484661643-2f5fef640dd1?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1571&amp;amp;q=80&quot; style=&quot;zoom:200%;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java-tomcat频繁重启,频繁fullGC问题排查</title>
    <link href="https://lijinhongpassion.github.io/codeant/600c.html"/>
    <id>https://lijinhongpassion.github.io/codeant/600c.html</id>
    <published>2020-08-18T10:23:17.000Z</published>
    <updated>2021-03-27T03:57:53.101Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1597484661643-2f5fef640dd1?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=971&amp;q=80" style="zoom:200%;"></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><blockquote><p>上周周末，公司的服务器发生了一次线上事故， 在10000多的并发下，服务器宕机了，一下子就让我想到了调优的相关问题。</p></blockquote><blockquote><p>如何在高并发的情况下 , <strong>如何让tomcat达到性能最优 ?</strong> <strong>以及如何排查引起内存溢出的原因 ?</strong> </p></blockquote><hr><h2 id="可视化工具"><a href="#可视化工具" class="headerlink" title="可视化工具"></a><strong>可视化工具</strong></h2><p>对jvm监控的常见可视化工具，除了jdk本身提供的Jconsole和visualVm以外，还有第三方提供的jprofilter，perfino,Yourkit，Perf4j，JProbe，MAT等。这些工具都极大的丰富了我们定位以及优化jvm方式。</p><p>这些工具的使用，网上有很多教程提供，这里就不再过多介绍了。对于VisualVm来说，比较推荐使用，它除了对jvm的侵入性比较低以外，还是jdk团队自己开发的，相信以后功能会更加丰富和完善。jprofilter对于第三方监控工具，提供的功能和可视化最为完善，目前多数ide都支持其插件，对于上线前的调试以及性能调优可以配合使用。</p><p>另外对于线上dump的heap信息，应该尽量拉去到线下用于可视化工具来分析，这样分析更详细。如果对于一些紧急的问题，必须需要通过线上监控，可以采用 VisualVm的远程功能来进行，这需要使用tool.jar下的MAT功能。</p><hr><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>在排除Tomcat的问题后 , 一般都是考虑JVM的排查和调优 , 一般的步骤如下 : </p><p> <strong>1. 检查各种调优参数是否合理 , 例如检查年轻代和老年代的比例, 以及年轻代中  伊甸园:幸存0区:幸存1区 = 8:1:1</strong></p><p> <strong>2. 检查GC的频率 ( full gc 和young gc )</strong></p><pre><code>- FullGC一天超过一次肯定就不正常了- dump堆的命令 : jmap -dump , 转储内存到线下利用jprofile分析- 发现FullGC频繁的时候优先调查内存泄漏问题 ( 也就是无用对象因为逻辑问题被引用, 导致长时间无法回收 )</code></pre><p> <strong>3. 如果发现CPU持续偏高，排除代码问题后可以找运维咨询下阿里云客服，这次调查过程中就发现CPU 100%是由于服务器问题导致的，进行服务器迁移后就正常 了。数据查询的时候也是算作服务器的入口流量的，如果访问业务没有这么大量，而且没有攻击的问题的话可以往数据库方面调查</strong></p><hr><h2 id="正常参数"><a href="#正常参数" class="headerlink" title="正常参数"></a>正常参数</h2><p>CMS收集器默认分代年龄 : 6 ( YGC 6次后还存活的对象就会晋升到老年代 ) </p><p>Eden区，From Survivor区（简称S0），To Survivor区（简称S1区），三者的默认比例为 : 8:1:1</p><p>新生代和老年代的默认比例为 : 1:2</p><p><strong>FULL GC</strong></p><blockquote><p>时长 : 少则几百毫秒，多则几秒</p><p>频率 : 每隔几个小时甚至几天才执行一次</p></blockquote><p><strong>YOUNG GC</strong></p><blockquote><p>时长 : 总耗时在几十或者上百毫秒是比较正常的</p></blockquote><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><blockquote><p>阅读顺序</p><ol><li><a href="https://www.zhihu.com/question/19867883" target="_blank" rel="noopener">如何做并发测试 – 玩家翁伟</a></li><li><a href="https://segmentfault.com/a/1190000015918707" target="_blank" rel="noopener">TomCat优化</a></li><li><a href="https://mp.weixin.qq.com/s/Sjh9qFPKF250vLQGZig6nw" target="_blank" rel="noopener">线上服务的FGC问题排查，涨知识了</a> – <strong>推荐参考 : 本地有文件</strong></li><li><a href="https://www.ershicimi.com/p/e7fa0ed7ca58a52120420406f31462dd" target="_blank" rel="noopener">记一次线上商城系统高并发的优化 – Java团长</a></li><li><a href="https://segmentfault.com/a/1190000022638726" target="_blank" rel="noopener">一次JVM内存问题导致的线上事故 – 铂赛东</a></li><li><a href="https://blog.csdn.net/cml_blog/article/details/81057966" target="_blank" rel="noopener">一次线上JVM调优实践，FullGC40次/天到10天一次的优化过程</a></li><li><a href="https://segmentfault.com/a/1190000017226359" target="_blank" rel="noopener">十种JVM内存溢出的情况，你碰到过几种？– 煮酒科技</a></li><li><a href="https://my.oschina.net/u/1859679/blog/1552290?_from=gitee_rec" target="_blank" rel="noopener">jvm优化必知系列——监控工具</a></li><li><a href="https://my.oschina.net/feichexia/blog/196575" target="_blank" rel="noopener">JVM性能调优监控工具jps、jstack、jmap、jhat、jstat、hprof使用详解</a></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1597484661643-2f5fef640dd1?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=971&amp;amp;q=80&quot; style=&quot;zoom:200%;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
      <category term="线上" scheme="https://lijinhongpassion.github.io/categories/java/%E7%BA%BF%E4%B8%8A/"/>
    
      <category term="jvm" scheme="https://lijinhongpassion.github.io/categories/java/%E7%BA%BF%E4%B8%8A/jvm/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java锁汇总-15种锁功能的介绍( 转载 )</title>
    <link href="https://lijinhongpassion.github.io/codeant/4e7.html"/>
    <id>https://lijinhongpassion.github.io/codeant/4e7.html</id>
    <published>2020-07-29T13:44:15.000Z</published>
    <updated>2021-03-27T03:57:26.964Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="通行证" />    <label for="pass">通行证</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      摘要
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
      <category term="锁" scheme="https://lijinhongpassion.github.io/categories/java/%E9%94%81/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>MySQL-MySQL常用函数</title>
    <link href="https://lijinhongpassion.github.io/codeant/aeda.html"/>
    <id>https://lijinhongpassion.github.io/codeant/aeda.html</id>
    <published>2020-07-22T10:17:45.000Z</published>
    <updated>2020-07-22T10:25:57.954Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1595341595379-cf1cb694ea1f?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1042&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><p>[toc]</p><h2 id="0、前言"><a href="#0、前言" class="headerlink" title="0、前言"></a>0、前言</h2><p>mysql语句执行顺序分析: https:– <a href="http://www.cnblogs.com/xiaolovewei/p/8999623.html(该blog对每一种SQL语句都进行了分析,值得一看)" target="_blank" rel="noopener">www.cnblogs.com/xiaolovewei/p/8999623.html(该blog对每一种SQL语句都进行了分析,值得一看)</a></p><p><strong>MySQL语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>[<span class="keyword">distinct</span>]  </span><br><span class="line"><span class="keyword">from</span>  </span><br><span class="line"><span class="keyword">join</span>（如<span class="keyword">left</span> <span class="keyword">join</span>）  </span><br><span class="line"><span class="keyword">on</span>  </span><br><span class="line"><span class="keyword">where</span>  </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span>  </span><br><span class="line"><span class="keyword">having</span>  </span><br><span class="line"><span class="keyword">union</span>  </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span>  </span><br><span class="line"><span class="keyword">limit</span></span><br></pre></td></tr></table></figure><p><strong>MySQL执行顺序</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from  </span><br><span class="line">on  </span><br><span class="line">join  </span><br><span class="line">where  </span><br><span class="line">group by  </span><br><span class="line">having  </span><br><span class="line"><span class="keyword">select</span>  </span><br><span class="line"><span class="keyword">distinct</span>  </span><br><span class="line"><span class="keyword">union</span>  </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br></pre></td></tr></table></figure><h2 id="1、数学函数"><a href="#1、数学函数" class="headerlink" title="1、数学函数"></a>1、数学函数</h2><h4 id="1-1-绝对值-abs-x"><a href="#1-1-绝对值-abs-x" class="headerlink" title="1.1 绝对值 - abs(x)"></a>1.1 绝对值 - abs(x)</h4><blockquote><p>返回x的绝对值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ABS</span>( <span class="number">5</span> ),</span><br><span class="line"><span class="keyword">ABS</span>( - <span class="number">2.4</span> ),</span><br><span class="line"><span class="keyword">ABS</span>( - <span class="number">24</span> ),</span><br><span class="line"><span class="keyword">ABS</span>( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果:  52.4240</span></span><br></pre></td></tr></table></figure><h4 id="1-2-进制-bin-x"><a href="#1-2-进制-bin-x" class="headerlink" title="1.2 进制 - bin(x)"></a>1.2 进制 - bin(x)</h4><blockquote><p>返回x的二进制（OCT返回八进制，HEX返回十六进制）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">BIN</span>( <span class="number">23</span> ), <span class="comment"># 二进制</span></span><br><span class="line"><span class="keyword">OCT</span>( <span class="number">23</span> ), <span class="comment"># 八进制</span></span><br><span class="line"><span class="keyword">HEX</span>( <span class="number">23</span> ); <span class="comment"># 十六进制</span></span><br><span class="line"><span class="comment"># 结果:  101112717</span></span><br></pre></td></tr></table></figure><h4 id="1-3-最值-ceiling-x"><a href="#1-3-最值-ceiling-x" class="headerlink" title="1.3 最值 - ceiling(x)"></a>1.3 最值 - ceiling(x)</h4><blockquote><p>返回大于x的最小整数值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CEILING</span>(<span class="number">2.1</span>);</span><br><span class="line"><span class="comment"># 结果:  3</span></span><br></pre></td></tr></table></figure><h4 id="1-4-最值-floor-x"><a href="#1-4-最值-floor-x" class="headerlink" title="1.4 最值 - floor(x)"></a>1.4 最值 - floor(x)</h4><blockquote><p>返回小于x的最大整数值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">FLOOR</span>(<span class="number">2.1</span>);</span><br><span class="line"><span class="comment"># 结果:  2</span></span><br></pre></td></tr></table></figure><h4 id="1-5-e的次方-exp-x"><a href="#1-5-e的次方-exp-x" class="headerlink" title="1.5 e的次方 - exp(x)"></a>1.5 e的次方 - exp(x)</h4><blockquote><p>返回值e（自然对数的底）的x次方</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">exp</span>(<span class="number">2</span>),</span><br><span class="line"><span class="keyword">exp</span>(<span class="number">2.1</span>);</span><br><span class="line"><span class="comment"># 结果:  7.389056098930658.166169912567652</span></span><br></pre></td></tr></table></figure><h4 id="1-6-最值-greatest-x1-x2-…-xn"><a href="#1-6-最值-greatest-x1-x2-…-xn" class="headerlink" title="1.6 最值- greatest(x1,x2,…,xn)"></a>1.6 最值- greatest(x1,x2,…,xn)</h4><blockquote><p>返回集合中最大的值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">GREATEST</span>(<span class="number">2</span>,<span class="number">1</span>,<span class="number">34</span>,<span class="number">24</span>);</span><br><span class="line"><span class="comment"># 结果:  34</span></span><br></pre></td></tr></table></figure><h4 id="1-7-最值-least-x1-x2-…-xn"><a href="#1-7-最值-least-x1-x2-…-xn" class="headerlink" title="1.7 最值- least(x1,x2,…,xn)"></a>1.7 最值- least(x1,x2,…,xn)</h4><blockquote><p> 返回集合中最小的值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">LEAST</span>(<span class="number">2</span>,<span class="number">1</span>,<span class="number">34</span>,<span class="number">24</span>);</span><br><span class="line"><span class="comment"># 结果:  1</span></span><br></pre></td></tr></table></figure><h4 id="1-8-对数-ln-x"><a href="#1-8-对数-ln-x" class="headerlink" title="1.8 对数- ln(x)"></a>1.8 对数- ln(x)</h4><blockquote><p>返回x的自然对数</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">LN</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment"># 结果:  0.6931471805599453</span></span><br></pre></td></tr></table></figure><h4 id="1-9-对数-log-x-y"><a href="#1-9-对数-log-x-y" class="headerlink" title="1.9 对数- log(x,y)"></a>1.9 对数- log(x,y)</h4><blockquote><p>返回x的以y为底的对数</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">LOG</span>(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment"># 结果:  1.5849625007211563</span></span><br></pre></td></tr></table></figure><h4 id="1-10-余数-mod-x-y"><a href="#1-10-余数-mod-x-y" class="headerlink" title="1.10 余数 - mod(x,y)"></a>1.10 余数 - mod(x,y)</h4><blockquote><p>返回x/y的模（余数）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">MOD</span>(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment"># 结果:  2</span></span><br></pre></td></tr></table></figure><h4 id="1-11-圆周率-pi"><a href="#1-11-圆周率-pi" class="headerlink" title="1.11 圆周率 - pi()"></a>1.11 圆周率 - pi()</h4><blockquote><p>返回π的值（圆周率）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">PI</span>();</span><br><span class="line"><span class="comment"># 结果:  3.141593</span></span><br></pre></td></tr></table></figure><h4 id="1-12-随机值-rand"><a href="#1-12-随机值-rand" class="headerlink" title="1.12 随机值 - rand()"></a>1.12 随机值 - rand()</h4><blockquote><p>返回０到１内的随机值,可以通过提供一个参数(种子)使RAND()随机数生成器生成一个指定的值。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">rand</span>();</span><br><span class="line"><span class="comment"># 结果:  0.8417046338708183</span></span><br></pre></td></tr></table></figure><h4 id="1-13-四舍五入-round-x-y"><a href="#1-13-四舍五入-round-x-y" class="headerlink" title="1.13 四舍五入 - round(x,y)"></a>1.13 四舍五入 - round(x,y)</h4><blockquote><p>返回参数x的四舍五入的有y位小数的值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ROUND</span>(<span class="number">5.14591</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment"># 结果:  5.15</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ROUND</span>(<span class="number">5.14591</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment"># 结果:  5</span></span><br></pre></td></tr></table></figure><h4 id="1-14-正负零-sign-x"><a href="#1-14-正负零-sign-x" class="headerlink" title="1.14 正负零 - sign(x)"></a>1.14 正负零 - sign(x)</h4><blockquote><p>返回 X 的符号标志，负数 = -1，整数 = 1，零 = 0</p><p>也可以传字符串，中文 = 0，负数开头 = -1，正数开头 = 1，字母开头 = 0</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">SIGN</span>( - <span class="number">32</span> );<span class="comment"># -1</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">SIGN</span>( <span class="number">0</span> );<span class="comment"># 0</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">SIGN</span>( <span class="number">234</span> );<span class="comment"># 1</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">SIGN</span>( <span class="string">"-1s"</span> );<span class="comment"># -1</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">SIGN</span>( <span class="string">"1s1"</span> );<span class="comment"># 1</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">SIGN</span>( <span class="string">"中文"</span> );<span class="comment"># 0</span></span><br></pre></td></tr></table></figure><h4 id="1-15-平方根-sqrt-x"><a href="#1-15-平方根-sqrt-x" class="headerlink" title="1.15 平方根 - sqrt(x)"></a>1.15 平方根 - sqrt(x)</h4><blockquote><p>返回一个数的平方根</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">sqrt</span>(<span class="number">9</span>);<span class="comment"># 3</span></span><br></pre></td></tr></table></figure><h4 id="1-16-次方-POW-x-y-和-POWER-x-y"><a href="#1-16-次方-POW-x-y-和-POWER-x-y" class="headerlink" title="1.16 次方- POW(x,y) 和 POWER(x,y)"></a>1.16 次方- POW(x,y) 和 POWER(x,y)</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">POW</span>(<span class="number">3</span>,<span class="number">2</span>),<span class="comment"># 3的2次方  9</span></span><br><span class="line">  <span class="keyword">POWER</span>(<span class="number">2</span>,<span class="number">3</span>);<span class="comment"># 2的三次方  8</span></span><br></pre></td></tr></table></figure><h4 id="1-17-保留小数位数-truncate-x-y-和round-x-y"><a href="#1-17-保留小数位数-truncate-x-y-和round-x-y" class="headerlink" title="1.17 保留小数位数 - truncate(x,y)和round(x,y)"></a>1.17 保留小数位数 - truncate(x,y)和round(x,y)</h4><blockquote><p>返回数字x截短为y位小数的结果</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">TRUNCATE</span>(<span class="number">3.1534153</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment"># 结果:  3.15</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ROUND</span>(<span class="number">5.14591</span>,<span class="number">2</span>);<span class="comment"># 四舍五入</span></span><br><span class="line"><span class="comment"># 结果:  5.15</span></span><br></pre></td></tr></table></figure><h2 id="2、聚合函数-常用于GROUP-BY从句的SELECT查询中"><a href="#2、聚合函数-常用于GROUP-BY从句的SELECT查询中" class="headerlink" title="2、聚合函数(常用于GROUP BY从句的SELECT查询中)"></a>2、聚合函数(常用于GROUP BY从句的SELECT查询中)</h2><h4 id="注意执行顺序"><a href="#注意执行顺序" class="headerlink" title="注意执行顺序"></a>注意执行顺序</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.Customer,<span class="keyword">sum</span>(a.OrderPrice)  </span><br><span class="line"><span class="keyword">from</span> orders a  </span><br><span class="line"><span class="keyword">where</span> a.Customer=<span class="string">'Bush'</span> <span class="keyword">or</span> a.Customer = <span class="string">'Adams'</span>  </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a.Customer</span><br></pre></td></tr></table></figure><p>在from，where执行后，执行group by，同时也根据group by的字段，执行sum这个聚合函数。这样的话得到的记录对group by的字段来说是不重复的</p><hr><h4 id="2-1-AVG-col-平均值"><a href="#2-1-AVG-col-平均值" class="headerlink" title="2.1 AVG(col) - 平均值"></a>2.1 AVG(col) - 平均值</h4><blockquote><p>返回指定列的平均值</p></blockquote><h4 id="2-2-COUNT-col-计数"><a href="#2-2-COUNT-col-计数" class="headerlink" title="2.2 COUNT(col) - 计数"></a>2.2 COUNT(col) - 计数</h4><blockquote><p>返回指定列中非NULL值的个数</p></blockquote><h4 id="2-3-MIN-col-最小值-TOP-LIMIT关键字"><a href="#2-3-MIN-col-最小值-TOP-LIMIT关键字" class="headerlink" title="2.3 MIN(col) - 最小值 - TOP\LIMIT关键字"></a>2.3 MIN(col) - 最小值 - TOP\LIMIT关键字</h4><blockquote><p>返回指定列的最小值</p></blockquote><p>这个聚合函数的最值获取只能获取当方面的值, 获取当前课程的前5名的学生信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">2</span> * <span class="keyword">FROM</span> Persons <span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">asc</span></span><br></pre></td></tr></table></figure><h4 id="2-4-MAX-col-最大值-TOP-LIMIT关键字"><a href="#2-4-MAX-col-最大值-TOP-LIMIT关键字" class="headerlink" title="2.4 MAX(col) - 最大值 - TOP\LIMIT关键字"></a>2.4 MAX(col) - 最大值 - TOP\LIMIT关键字</h4><blockquote><p>返回指定列的最大值</p></blockquote><h4 id="2-5-SUM-col-计算集合"><a href="#2-5-SUM-col-计算集合" class="headerlink" title="2.5 SUM(col) - 计算集合"></a>2.5 SUM(col) - 计算集合</h4><blockquote><p>返回指定列的所有值之和</p></blockquote><h4 id="2-6-GROUP-CONCAT-col-……-组合每一组的这个字段"><a href="#2-6-GROUP-CONCAT-col-……-组合每一组的这个字段" class="headerlink" title="2.6 GROUP_CONCAT(col,……) - 组合每一组的这个字段"></a>2.6 GROUP_CONCAT(col,……) - 组合每一组的这个字段</h4><blockquote><p>返回由属于一组的几列的列值连接组合而成的结果(先拼接一行的几列,再把几行的这几列拼接起来)</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">id name type score</span><br><span class="line">1小红数学98</span><br><span class="line">1小红英语70</span><br><span class="line">1小红语文88</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span>,<span class="keyword">group_Concat</span>(<span class="keyword">type</span>,score) <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">id</span></span><br><span class="line">这里拼接的结果是 <span class="number">1</span>小红数学<span class="number">98</span>,英语<span class="number">70</span>,语文<span class="number">88</span></span><br></pre></td></tr></table></figure><h2 id="3、字符串函数"><a href="#3、字符串函数" class="headerlink" title="3、字符串函数"></a>3、字符串函数</h2><h4 id="3-1-连接字符串"><a href="#3-1-连接字符串" class="headerlink" title="3.1 连接字符串"></a>3.1 连接字符串</h4><blockquote><p>CONCAT(s1,s2…,sn)将s1,s2…,sn连接成字符串</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="keyword">CONCAT</span>(<span class="string">'1'</span>,<span class="string">'a'</span>,<span class="string">'65'</span>) <span class="comment">-- 1a65</span></span><br></pre></td></tr></table></figure><h4 id="3-2-连接字符串-–-加间隔"><a href="#3-2-连接字符串-–-加间隔" class="headerlink" title="3.2 连接字符串 – 加间隔"></a>3.2 连接字符串 – 加间隔</h4><blockquote><p>CONCAT_WS(sep,s1,s2…,sn)将s1,s2…,sn连接成字符串，并用sep字符间隔</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="keyword">CONCAT_WS</span>(<span class="string">','</span>,<span class="string">'a'</span>,<span class="string">'65'</span>) <span class="comment">-- a,65</span></span><br></pre></td></tr></table></figure><h4 id="3-3-截取字符串"><a href="#3-3-截取字符串" class="headerlink" title="3.3 截取字符串"></a>3.3 截取字符串</h4><ul><li>left(str,index) 从左边开始数, 截取第index位左边</li><li>right(str,index) 从右边开始数, 截取第index位右边</li><li>substring(str,index)当index&gt;0从左边开始截取直到结束  当index&lt;0从右边开始截取直到结束 当index=0返回空</li><li>substring(str,index,len) 截取str,从index开始，截取len长度</li><li>substring_index(str,delim,count)，str是要截取的字符串，delim是截取的字段 count是从哪里开始截取(为0则是左边第0个开始，1位左边开始第一个选取左边的，-1从右边第一个开始选取右边的</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">left</span>(<span class="string">'hello world'</span>,<span class="number">3</span>), <span class="comment">-- hel</span></span><br><span class="line"><span class="keyword">right</span>(<span class="string">'hello world'</span>,<span class="number">3</span>), <span class="comment">-- rld</span></span><br><span class="line"><span class="comment">-- substring索引从1开始</span></span><br><span class="line"><span class="keyword">substring</span>(<span class="string">'hello world'</span>, <span class="number">-3</span>), <span class="comment">-- rld</span></span><br><span class="line"><span class="keyword">substring</span>(<span class="string">'hello world'</span>, <span class="number">3</span>), <span class="comment">-- llo world</span></span><br><span class="line"><span class="keyword">substring</span>(<span class="string">'hello world'</span>,<span class="number">3</span>,<span class="number">5</span>) <span class="comment">-- llo w</span></span><br><span class="line">substring_index(<span class="string">'hello world'</span>,<span class="number">3</span>,<span class="number">5</span>) <span class="comment">-- llo w</span></span><br></pre></td></tr></table></figure><h4 id="3-4-替换字符串"><a href="#3-4-替换字符串" class="headerlink" title="3.4 替换字符串"></a>3.4 替换字符串</h4><h4 id="3-1-字符的ASCII码值"><a href="#3-1-字符的ASCII码值" class="headerlink" title="3.1 字符的ASCII码值"></a>3.1 字符的ASCII码值</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 语法: ASCII(char)</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ASCII</span>(<span class="string">'字'</span>)<span class="comment">-- 229</span></span><br></pre></td></tr></table></figure><p>ASCII(char)返回字符的ASCII码值<br>BIT_LENGTH(str)返回字符串的比特长度<br>INSERT(str,x,y,instr) 将字符串str从第x位置开始，y个字符长的子串替换为字符串instr，返回结果<br>FIND_IN_SET(str,list)分析逗号分隔的list列表，如果发现str，返回str在list中的位置<br>LCASE(str)或LOWER(str) 返回将字符串str中所有字符改变为小写后的结果</p><p>LTRIM(str) 从字符串str中切掉开头的空格<br>POSITION(substr,str) 返回子串substr在字符串str中第一次出现的位置<br>QUOTE(str) 用反斜杠转义str中的单引号<br>REPEAT(str,srchstr,rplcstr)返回字符串str重复x次的结果<br>REVERSE(str) 返回颠倒字符串str的结果<br>RIGHT(str,x) 返回字符串str中最右边的x个字符<br>RTRIM(str) 返回字符串str尾部的空格<br>STRCMP(s1,s2)比较字符串s1和s2<br>TRIM(str)去除字符串首部和尾部的所有空格<br>UCASE(str)或UPPER(str) 返回将字符串str中所有字符转变为大写后的结果</p><h2 id="4、日期和时间函数"><a href="#4、日期和时间函数" class="headerlink" title="4、日期和时间函数"></a>4、日期和时间函数</h2><h4 id="4-1-yyyy-MM-dd-当前的日期"><a href="#4-1-yyyy-MM-dd-当前的日期" class="headerlink" title="4.1 yyyy-MM-dd  -  当前的日期"></a>4.1 yyyy-MM-dd  -  当前的日期</h4><ul><li>CURDATE()</li><li>CURRENT_DATE() </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CURDATE</span>( ),<span class="comment">-- 2020-07-14</span></span><br><span class="line"><span class="keyword">CURRENT_DATE</span> ( )<span class="comment">-- 2020-07-14</span></span><br></pre></td></tr></table></figure><h4 id="4-2-HH-mm-ss-当前的时间"><a href="#4-2-HH-mm-ss-当前的时间" class="headerlink" title="4.2 HH:mm:ss  -  当前的时间"></a>4.2 HH:mm:ss  -  当前的时间</h4><p>yyyy-MM-dd hh:mm:ss   // 12小时制</p><p>yyyy-MM-dd HH:mm:ss  //24小时制</p><ul><li>CURTIME()</li><li>CURRENT_TIME()</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CURTIME</span>(),<span class="comment">-- 15:56:21</span></span><br><span class="line"><span class="keyword">CURRENT_TIME</span>()<span class="comment">-- 15:56:21</span></span><br></pre></td></tr></table></figure><h4 id="4-3-yyyy-MM-dd-HH-mm-ss-当前的完整时间"><a href="#4-3-yyyy-MM-dd-HH-mm-ss-当前的完整时间" class="headerlink" title="4.3 yyyy-MM-dd HH:mm:ss   -  当前的完整时间"></a>4.3 yyyy-MM-dd HH:mm:ss   -  当前的完整时间</h4><ul><li>NOW()</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">NOW</span>();<span class="comment">-- 2020-07-14 16:21:33</span></span><br></pre></td></tr></table></figure><h4 id="4-4-时间格式化"><a href="#4-4-时间格式化" class="headerlink" title="4.4 时间格式化"></a>4.4 时间格式化</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">DATE_FORMAT</span>( <span class="keyword">NOW</span>( ), <span class="string">'%b %d %Y %h:%i %p'</span> ),<span class="comment">-- Jul 14 2020 04:06 PM</span></span><br><span class="line"><span class="keyword">DATE_FORMAT</span>( <span class="keyword">NOW</span>( ), <span class="string">'%m-%d-%Y'</span> ),<span class="comment">-- 07-14-2020</span></span><br><span class="line"><span class="keyword">DATE_FORMAT</span>( <span class="keyword">NOW</span>( ), <span class="string">'%d %b %y'</span> ),<span class="comment">-- 14 Jul 20</span></span><br><span class="line"><span class="keyword">DATE_FORMAT</span>( <span class="keyword">NOW</span>( ), <span class="string">'%d %b %Y %T'</span> ),<span class="comment">-- 14 Jul 2020 16:06:36</span></span><br><span class="line"><span class="keyword">DATE_FORMAT</span>( <span class="keyword">NOW</span>( ), <span class="string">'%Y-%m-%d %T'</span> ),<span class="comment">-- 2020-07-14 16:06:36</span></span><br><span class="line"><span class="keyword">DATE_FORMAT</span>( <span class="keyword">NOW</span>( ), <span class="string">'%Y-%m-%d %H:%i:%S'</span> ),<span class="comment">-- 2020-07-14 16:06:36</span></span><br><span class="line"><span class="keyword">DATE_FORMAT</span>( <span class="string">'2020/07/14'</span>, <span class="string">'%Y-%m-%d'</span> )<span class="comment">-- 2020-07-14</span></span><br></pre></td></tr></table></figure><h4 id="4-4-日期加-减上指定天数-月数-年数"><a href="#4-4-日期加-减上指定天数-月数-年数" class="headerlink" title="4.4 日期加\减上指定天数\月数\年数"></a>4.4 日期加\减上指定天数\月数\年数</h4><blockquote><p>语法: DATE_ADD(date,INTERVAL int keyword)  – 加日期</p><p>​         DATE_SUB(date,INTERVAL int keyword)  – 减日期</p><p>参考: https:– <a href="http://www.w3school.com.cn/sql/func_date_add.asp" target="_blank" rel="noopener">www.w3school.com.cn/sql/func_date_add.asp</a></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CURRENT_DATE</span>,<span class="comment">-- 2020-07-14</span></span><br><span class="line"><span class="keyword">DATE_SUB</span>( <span class="keyword">CURRENT_DATE</span>, <span class="built_in">INTERVAL</span> <span class="number">6</span> <span class="keyword">MONTH</span> );<span class="comment">-- 2020-01-14   减少6个月</span></span><br></pre></td></tr></table></figure><h4 id="4-5-time时间差"><a href="#4-5-time时间差" class="headerlink" title="4.5 time时间差"></a>4.5 time时间差</h4><blockquote><p>subtime(expr1,expr2)  -  是两个时间相减</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">subtime</span>( <span class="string">'16:01:59'</span>, <span class="string">'16:02:59'</span> )  <span class="comment">--   -00:01:00</span></span><br></pre></td></tr></table></figure><h4 id="4-6-其他"><a href="#4-6-其他" class="headerlink" title="4.6 其他"></a>4.6 其他</h4><h5 id="4-5-1date是-一年的第几天-1-366"><a href="#4-5-1date是-一年的第几天-1-366" class="headerlink" title="4.5.1date是 一年的第几天(1~366)"></a>4.5.1date是 一年的第几天(1~366)</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">DAYOFYEAR</span>( <span class="string">'2020-02-05'</span> )<span class="comment">-- 36</span></span><br></pre></td></tr></table></figure><h5 id="4-5-2-date是-一年的第几周-0-53"><a href="#4-5-2-date是-一年的第几周-0-53" class="headerlink" title="4.5.2 date是 一年的第几周(0~53)"></a>4.5.2 date是 一年的第几周(0~53)</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CURDATE</span>( ),<span class="comment">-- 2020-07-14</span></span><br><span class="line"><span class="keyword">WEEK</span>(<span class="keyword">CURDATE</span>( ))<span class="comment">-- 28</span></span><br></pre></td></tr></table></figure><h5 id="4-5-3-date是-一年的第几月-1-12"><a href="#4-5-3-date是-一年的第几月-1-12" class="headerlink" title="4.5.3 date是 一年的第几月(1-12)"></a>4.5.3 date是 一年的第几月(1-12)</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CURDATE</span>( ),<span class="comment">-- 2020-07-14</span></span><br><span class="line"><span class="keyword">MONTH</span>(<span class="keyword">CURDATE</span>( ))<span class="comment">-- 7</span></span><br></pre></td></tr></table></figure><h5 id="4-5-4date是-一年的第几季度-1-4"><a href="#4-5-4date是-一年的第几季度-1-4" class="headerlink" title="4.5.4date是 一年的第几季度(1-4)"></a>4.5.4date是 一年的第几季度(1-4)</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CURDATE</span>( ),<span class="comment">-- 2020-07-14</span></span><br><span class="line"><span class="keyword">QUARTER</span>(<span class="keyword">CURDATE</span>( ))<span class="comment">-- 3</span></span><br></pre></td></tr></table></figure><h5 id="4-5-5date是-一月的第几天-1-31"><a href="#4-5-5date是-一月的第几天-1-31" class="headerlink" title="4.5.5date是 一月的第几天(1~31)"></a>4.5.5date是 一月的第几天(1~31)</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">DAYOFYEAR</span>( <span class="string">'2020-02-05'</span> )<span class="comment">-- 5</span></span><br></pre></td></tr></table></figure><h5 id="4-5-6date是-一周的第几天-1-7"><a href="#4-5-6date是-一周的第几天-1-7" class="headerlink" title="4.5.6date是 一周的第几天(1~7)"></a>4.5.6date是 一周的第几天(1~7)</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CURDATE</span>( ),<span class="comment">-- 2020-07-14</span></span><br><span class="line"><span class="keyword">DAYOFWEEK</span>( <span class="keyword">CURDATE</span>( ) )<span class="comment">-- 3</span></span><br></pre></td></tr></table></figure><h5 id="4-5-7date是-一周的星期几"><a href="#4-5-7date是-一周的星期几" class="headerlink" title="4.5.7date是 一周的星期几"></a>4.5.7date是 一周的星期几</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CURDATE</span>( ),<span class="comment">-- 2020-07-14</span></span><br><span class="line"><span class="keyword">date_format</span>( <span class="keyword">CURDATE</span>( ), <span class="string">'%W'</span> ),<span class="comment">-- Tuesday</span></span><br><span class="line"><span class="keyword">DAYNAME</span>(<span class="keyword">CURDATE</span>( ))<span class="comment">-- Tuesday</span></span><br></pre></td></tr></table></figure><h5 id="4-5-8-time的小时值-0-23"><a href="#4-5-8-time的小时值-0-23" class="headerlink" title="4.5.8 time的小时值(0~23)"></a>4.5.8 time的小时值(0~23)</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line"><span class="keyword">HOUR</span>( <span class="keyword">CURTIME</span>( ) )<span class="comment">-- 16</span></span><br></pre></td></tr></table></figure><h5 id="4-5-9-time的分钟值-0-59"><a href="#4-5-9-time的分钟值-0-59" class="headerlink" title="4.5.9 time的分钟值(0~59)"></a>4.5.9 time的分钟值(0~59)</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line"><span class="keyword">MINUTE</span>( <span class="keyword">CURTIME</span>( ) )<span class="comment">-- 52</span></span><br></pre></td></tr></table></figure><p>subtime(expr1,expr2)</p><h4 id="示例1-两个日期值之间的差值-月数"><a href="#示例1-两个日期值之间的差值-月数" class="headerlink" title="示例1 - 两个日期值之间的差值(月数)"></a>示例1 - 两个日期值之间的差值(月数)</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">PERIOD_DIFF</span>( <span class="number">200302</span>, <span class="number">199802</span> );<span class="comment">-- 60</span></span><br></pre></td></tr></table></figure><h4 id="示例2-计算年龄"><a href="#示例2-计算年龄" class="headerlink" title="示例2 - 计算年龄"></a>示例2 - 计算年龄</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">TO_DAYS</span>( <span class="keyword">NOW</span>( ) ),<span class="comment">-- 转化为天数737985</span></span><br><span class="line"><span class="keyword">FROM_DAYS</span>( <span class="keyword">TO_DAYS</span>( <span class="keyword">NOW</span>( ) ) - <span class="keyword">TO_DAYS</span>( <span class="string">'1997-07-14'</span> ) ),<span class="comment">-- 转化为年份0023-01-01</span></span><br><span class="line"><span class="keyword">DATE_FORMAT</span>( <span class="keyword">FROM_DAYS</span>( <span class="keyword">TO_DAYS</span>( <span class="keyword">NOW</span>( ) ) - <span class="keyword">TO_DAYS</span>( <span class="string">'1997-07-14'</span> ) ), <span class="string">'%Y'</span> ) + <span class="number">0</span> <span class="keyword">AS</span> age <span class="comment">-- 年龄</span></span><br></pre></td></tr></table></figure><h2 id="5、加密函数"><a href="#5、加密函数" class="headerlink" title="5、加密函数"></a>5、加密函数</h2><blockquote><p>AES_ENCRYPT(str,key)  返回用密钥key对字符串str利用高级加密标准算法加密后的结果，调用AES_ENCRYPT的结果是一个二进制字符串，以BLOB类型存储<br>AES_DECRYPT(str,key)  返回用密钥key对字符串str利用高级加密标准算法解密后的结果<br>DECODE(str,key)   使用key作为密钥解密加密字符串str<br>ENCRYPT(str,salt)   使用UNIXcrypt()函数，用关键词salt(一个可以惟一确定口令的字符串，就像钥匙一样)加密字符串str<br>ENCODE(str,key)   使用key作为密钥加密字符串str，调用ENCODE()的结果是一个二进制字符串，它以BLOB类型存储<br>MD5()    计算字符串str的MD5校验和<br>PASSWORD(str)   返回字符串str的加密版本，这个加密过程是不可逆转的，和UNIX密码加密过程使用不同的算法。<br>SHA()    计算字符串str的安全散列算法(SHA)校验和</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ENCRYPT</span>(<span class="string">'root'</span>,<span class="string">'salt'</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ENCODE</span>(<span class="string">'xufeng'</span>,<span class="string">'key'</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DECODE</span>(<span class="keyword">ENCODE</span>(<span class="string">'xufeng'</span>,<span class="string">'key'</span>),<span class="string">'key'</span>);<span class="comment">#加解密放在一起</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AES_ENCRYPT</span>(<span class="string">'root'</span>,<span class="string">'key'</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AES_DECRYPT</span>(<span class="keyword">AES_ENCRYPT</span>(<span class="string">'root'</span>,<span class="string">'key'</span>),<span class="string">'key'</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MD5</span>(<span class="string">'123456'</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SHA</span>(<span class="string">'123456'</span>);</span><br></pre></td></tr></table></figure><h2 id="6、控制流函数"><a href="#6、控制流函数" class="headerlink" title="6、控制流函数"></a>6、控制流函数</h2><p>MySQL有4个函数是用来进行条件操作的，这些函数可以实现SQL的条件逻辑，允许开发者将一些应用程序业务逻辑转换到数据库后台。</p><h4 id="6-1-IFNULL"><a href="#6-1-IFNULL" class="headerlink" title="6.1 IFNULL()"></a>6.1 IFNULL()</h4><blockquote><p>IFNULL(arg1,arg2)  –  如果arg1不是空，返回arg1，否则返回arg2</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">IFNULL</span>( <span class="number">1</span>, <span class="number">2</span> ),<span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">IFNULL</span>( <span class="literal">NULL</span>, <span class="number">10</span> ),<span class="comment">-- 10</span></span><br><span class="line"><span class="keyword">IFNULL</span>( <span class="number">4</span> * <span class="literal">NULL</span>, <span class="string">'false'</span> );<span class="comment">-- false</span></span><br></pre></td></tr></table></figure><h4 id="6-2-NULLIF"><a href="#6-2-NULLIF" class="headerlink" title="6.2 NULLIF()"></a>6.2 NULLIF()</h4><blockquote><p>NULLIF(arg1,arg2)   –  如果arg1=arg2返回NULL；否则返回arg1</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">NULLIF</span>( <span class="number">1</span>, <span class="number">1</span> ),<span class="comment">-- null</span></span><br><span class="line"><span class="keyword">NULLIF</span>( <span class="string">'A'</span>, <span class="string">'B'</span> ),<span class="comment">-- A</span></span><br><span class="line"><span class="keyword">NULLIF</span>( <span class="number">2</span>+<span class="number">3</span>, <span class="number">4</span>+<span class="number">1</span> );<span class="comment">-- null</span></span><br></pre></td></tr></table></figure><h4 id="6-3-IF"><a href="#6-3-IF" class="headerlink" title="6.3 IF()"></a>6.3 IF()</h4><blockquote><p>IF(test,t,f)  –  如果test是真，返回t；否则返回f</p><p>IF()函数在只有两种可能结果时才适合使用</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">IF</span></span><br><span class="line">( <span class="number">1</span> &lt; <span class="number">10</span>, <span class="number">2</span>, <span class="number">3</span> ),<span class="comment">-- 2</span></span><br><span class="line"><span class="keyword">IF</span></span><br><span class="line">( <span class="number">56</span> &gt; <span class="number">100</span>, <span class="string">'true'</span>, <span class="string">'false'</span> );<span class="comment">-- false</span></span><br></pre></td></tr></table></figure><h4 id="6-4-CASE-WHEN"><a href="#6-4-CASE-WHEN" class="headerlink" title="6.4 CASE WHEN"></a>6.4 CASE WHEN</h4><blockquote><p>CASE  WHEN[test1]   THEN [result1]…ELSE   [default]   END  –  如果testN是真，则返回resultN，否则返回default</p><p>CASE [test] WHEN[val1] THEN [result]…ELSE [default]  END  – 如果test和valN相等，则返回resultN，否则返回default</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CASE</span></span><br><span class="line"><span class="string">'green'</span> </span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">'red'</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="string">'stop'</span> </span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">'green'</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="string">'go'</span> <span class="keyword">END</span>;<span class="comment">-- go</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CASE</span> </span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">1</span> &gt; <span class="number">2</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="string">'stop'</span> </span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">5</span> &gt; <span class="number">4</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="string">'go'</span> <span class="keyword">END</span>;<span class="comment">-- go</span></span><br></pre></td></tr></table></figure><h2 id="7、格式化函数"><a href="#7、格式化函数" class="headerlink" title="7、格式化函数"></a>7、格式化函数</h2><h4 id="7-1-时间格式化"><a href="#7-1-时间格式化" class="headerlink" title="7.1 时间格式化"></a>7.1 时间格式化</h4><blockquote><p>DATE_FORMAT(date,fmt)  依照字符串fmt格式化日期date值</p></blockquote><h4 id="7-2-数字格式化"><a href="#7-2-数字格式化" class="headerlink" title="7.2 数字格式化"></a>7.2 数字格式化</h4><blockquote><p>FORMAT(x,y)   把x格式化为以逗号隔开的数字序列，y是结果的小数位数</p></blockquote><h4 id="7-3-IP地址转数字"><a href="#7-3-IP地址转数字" class="headerlink" title="7.3 IP地址转数字"></a>7.3 IP地址转数字</h4><blockquote><p>INET_ATON(ip)   返回IP地址的数字表示</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="keyword">INET_ATON</span>(<span class="string">'0.0.78.32'</span>) <span class="comment">-- 20000</span></span><br></pre></td></tr></table></figure><h4 id="7-4-数字转IP地址"><a href="#7-4-数字转IP地址" class="headerlink" title="7.4 数字转IP地址"></a>7.4 数字转IP地址</h4><blockquote><p>INET_NTOA(num)   返回数字所代表的IP地址</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="keyword">INET_NTOA</span>(<span class="number">20000</span>) <span class="comment">-- 0.0.78.32</span></span><br></pre></td></tr></table></figure><h2 id="8、类型转化函数"><a href="#8、类型转化函数" class="headerlink" title="8、类型转化函数"></a>8、类型转化函数</h2><p>为了进行数据类型转化，MySQL提供了CAST()函数，它可以把一个值转化为指定的数据类型。类型有：</p><ul><li>BINARY</li><li>CHAR  (字符串)</li><li>DATE</li><li>TIME</li><li>DATETIME</li><li>SIGNED  (正负数)</li><li>UNSIGNED  (非负数)</li></ul><p>示例：</p><p>SELECT CAST(NOW() AS SIGNED INTEGER),CURDATE()+0;</p><p>SELECT ‘f’=BINARY ‘F’,’f’=CAST(‘F’ AS BINARY);</p><h2 id="9、系统信息函数"><a href="#9、系统信息函数" class="headerlink" title="9、系统信息函数"></a>9、系统信息函数</h2><h4 id="9-1-当前数据库名-DATABASE"><a href="#9-1-当前数据库名-DATABASE" class="headerlink" title="9.1 当前数据库名 - DATABASE()"></a>9.1 当前数据库名 - DATABASE()</h4><blockquote><p>DATABASE()   返回当前数据库名</p></blockquote><h4 id="9-2-BENCHMARK-count-expr"><a href="#9-2-BENCHMARK-count-expr" class="headerlink" title="9.2 BENCHMARK(count,expr)"></a>9.2 BENCHMARK(count,expr)</h4><blockquote><p>BENCHMARK(count,expr)  将表达式expr重复运行count次</p></blockquote><h4 id="9-3-当前客户的连接ID-CONNECTION-ID"><a href="#9-3-当前客户的连接ID-CONNECTION-ID" class="headerlink" title="9.3 当前客户的连接ID  -  CONNECTION_ID()"></a>9.3 当前客户的连接ID  -  CONNECTION_ID()</h4><blockquote><p>CONNECTION_ID()   返回当前客户的连接ID</p></blockquote><h4 id="9-4-FOUND-ROWS"><a href="#9-4-FOUND-ROWS" class="headerlink" title="9.4 FOUND_ROWS()"></a>9.4 FOUND_ROWS()</h4><blockquote><p>FOUND_ROWS()   返回最后一个SELECT查询进行检索的总行数</p></blockquote><h4 id="9-5-当前登陆用户名-USER-SYSTEM-USER"><a href="#9-5-当前登陆用户名-USER-SYSTEM-USER" class="headerlink" title="9.5 当前登陆用户名  -  USER() \ SYSTEM_USER()"></a>9.5 当前登陆用户名  -  USER() \ SYSTEM_USER()</h4><blockquote><p>USER()或SYSTEM_USER()  返回当前登陆用户名</p></blockquote><h4 id="9-6-MySQL的版本-VERSION"><a href="#9-6-MySQL的版本-VERSION" class="headerlink" title="9.6 MySQL的版本  -  VERSION()"></a>9.6 MySQL的版本  -  VERSION()</h4><blockquote><p>VERSION()   返回MySQL服务器的版本</p></blockquote><p>示例：</p><p>SELECT DATABASE(),VERSION(),USER();</p><p>SELECTBENCHMARK(9999999,LOG(RAND()<em>PI()));#该例中,MySQL计算LOG(RAND()</em>PI())表达式9999999次。</p><h2 id="10、正则"><a href="#10、正则" class="headerlink" title="10、正则"></a>10、正则</h2><h4 id="10-1-REGEXP"><a href="#10-1-REGEXP" class="headerlink" title="10.1 REGEXP"></a>10.1 REGEXP</h4><blockquote><p>REGEXP BINARY 匹配区分大小写.  </p><p>REGEXP 不区分大小写的匹配</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> person_tbl <span class="keyword">WHERE</span> <span class="keyword">name</span> REGEXP <span class="string">'ok$'</span>;</span><br></pre></td></tr></table></figure><h4 id="10-2-REGEXP-BINARY"><a href="#10-2-REGEXP-BINARY" class="headerlink" title="10.2 REGEXP BINARY"></a>10.2 REGEXP BINARY</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> person_tbl <span class="keyword">WHERE</span> <span class="keyword">name</span> REGEXP <span class="built_in">BINARY</span> <span class="string">'ok$'</span>;</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ol><li>ID生成</li></ol><blockquote><p>需求: 课程前缀 + 0001 + 球会后缀,   数字部分个位逢4跳过,  当ID某一ID删除后, 下次生成可再使用</p></blockquote><blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; -- 建表sql</span><br><span class="line">&gt; CREATE TABLE `student_register_info_log` (</span><br><span class="line">&gt; `student_register_info_log_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '学员登记审核ID',</span><br><span class="line">&gt; `student_number` varchar(64) CHARACTER SET utf8 NOT NULL COMMENT '学籍卡号',</span><br><span class="line">&gt; `audit_status` tinyint(4) DEFAULT NULL COMMENT '审核状态(0待审核、1通过、2不通过)',</span><br><span class="line">&gt; PRIMARY KEY (`student_register_info_log_id`) USING BTREE</span><br><span class="line">&gt; ) ENGINE=InnoDB AUTO_INCREMENT=190 DEFAULT CHARSET=utf8mb4 COMMENT='学员审核信息管理';</span><br><span class="line">&gt; </span><br><span class="line">&gt; </span><br><span class="line">&gt; -- 添加数据</span><br><span class="line">&gt; INSERT INTO `golf_import`.`student_register_info_log`(`student_register_info_log_id`, `student_number`,`audit_status`) VALUES (166,'TDXXXS0001cqcs',0);</span><br><span class="line">&gt; INSERT INTO `golf_import`.`student_register_info_log`(`student_register_info_log_id`, `student_number`,`audit_status`) VALUES (167,'TDXXXS0003cqcs',0);</span><br><span class="line">&gt; INSERT INTO `golf_import`.`student_register_info_log`(`student_register_info_log_id`, `student_number`,`audit_status`) VALUES (168,'TDXXXS0005cqcs',0);</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&gt;-- 解决sql</span><br><span class="line">&gt;SELECT</span><br><span class="line">&gt;       LPAD( min( a.number ), 4, '0' ) AS number</span><br><span class="line">&gt;   FROM</span><br><span class="line">&gt;   (</span><br><span class="line">&gt;       SELECT</span><br><span class="line">&gt;       IF( exponent &gt; 0, number + POWER( 10, exponent - 1 ), number ) AS number</span><br><span class="line">&gt;       FROM</span><br><span class="line">&gt;       (</span><br><span class="line">&gt;           SELECT</span><br><span class="line">&gt;           locate( 4, REVERSE( CAST( SUBSTRING( student_number, 7, 4 ) AS SIGNED ) + 1 ) ) AS exponent,</span><br><span class="line">&gt;           CAST( SUBSTRING( student_number, 7, 4 ) AS SIGNED ) + 1 AS number</span><br><span class="line">&gt;           from</span><br><span class="line">&gt;           (</span><br><span class="line">&gt;               SELECT</span><br><span class="line">&gt;               student_number</span><br><span class="line">&gt;               FROM</span><br><span class="line">&gt;               student_register_info_log</span><br><span class="line">&gt;               WHERE</span><br><span class="line">&gt;               student_number REGEXP BINARY '^TDXXXS[0-9]&#123;4&#125;cqcs'</span><br><span class="line">&gt;               AND audit_status = 0</span><br><span class="line">&gt;               AND company_id = 826</span><br><span class="line">&gt;           ) a</span><br><span class="line">&gt;       ) a UNION</span><br><span class="line">&gt;       SELECT</span><br><span class="line">&gt;       1 AS number</span><br><span class="line">&gt;   ) a</span><br><span class="line">&gt;LEFT JOIN (</span><br><span class="line">&gt;                   SELECT</span><br><span class="line">&gt;                   CAST( SUBSTRING( student_number,7, 4 ) AS SIGNED ) AS number</span><br><span class="line">&gt;                   from</span><br><span class="line">&gt;                   (</span><br><span class="line">&gt;                       SELECT</span><br><span class="line">&gt;                       student_number</span><br><span class="line">&gt;                       FROM</span><br><span class="line">&gt;                       student_register_info_log</span><br><span class="line">&gt;                       WHERE</span><br><span class="line">&gt;                       student_number REGEXP BINARY '^TDXXXS[0-9]&#123;4&#125;cqcs'</span><br><span class="line">&gt;                       AND audit_status = 0</span><br><span class="line">&gt;                       AND company_id = 826</span><br><span class="line">&gt;                   ) a</span><br><span class="line">&gt;               ) b ON a.number = b.number</span><br><span class="line">&gt;   WHERE</span><br><span class="line">&gt;       a.number &lt; 10000</span><br><span class="line">&gt;       AND b.number IS NULL</span><br><span class="line">&gt;      </span><br><span class="line">&gt;-- 结果</span><br><span class="line">&gt;0002</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1595341595379-cf1cb694ea1f?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1042&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://lijinhongpassion.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://lijinhongpassion.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL-关于主从复制引发的对读写分离的思考</title>
    <link href="https://lijinhongpassion.github.io/codeant/zcfz.html"/>
    <id>https://lijinhongpassion.github.io/codeant/zcfz.html</id>
    <published>2020-07-21T04:23:22.000Z</published>
    <updated>2020-07-25T04:33:18.733Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1470506028280-a011fb34b6f7?ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=1049&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="0-简述"><a href="#0-简述" class="headerlink" title="0.简述"></a>0.简述</h2><blockquote><p>今天闲得无聊, 根据以前的笔记, 在服务器上搭建了MySQL的主从复制.</p><p><strong>这里先把结论说了:</strong>   搭建了主从复制后的读写分离, 不建议将从库的InnoDB搜索引擎换为MyISAM.  因为主库将数据同步到从库也是一个写操作.所以主从库的搜索引擎需要保持一致</p><p><strong>建议: </strong>如果你要解决<strong>数据库的读性能瓶颈</strong>, 可以先在<strong>缓存</strong>方面进行设计优化</p></blockquote><blockquote><p><strong>主从复制是干什么的:  </strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/zcfz/主从复制.bmp" alt></p><p>上图描述的是主从复制在项目中担任什么角色.</p><p>在你的项目中, 如果没有存在读写分离, 那上面写的MySQL从库的作用<strong>仅仅作为数据备份</strong>, 没有其他作用.</p><hr><p><strong>读写分离是干什么的:  </strong></p><p>因为读写都在一个数据库上, 会给数据库很大的压力. 所以我们可以让主库来专注于数据更新( 增删改 )操作,  从库来用于查询操作. </p><p>读写分离是用来解决<strong>数据库的读性能瓶颈</strong>的。</p><p>主库:  增删改操作</p><p>从库:  查询操作</p></blockquote><hr><h2 id="1-InnoDB和-MyISAM"><a href="#1-InnoDB和-MyISAM" class="headerlink" title="1.InnoDB和 MyISAM"></a>1.InnoDB和 MyISAM</h2><p>参考文献: <a href="https://www.runoob.com/w3cnote/mysql-different-nnodb-myisam.html" target="_blank" rel="noopener">MySQL存储引擎InnoDB与Myisam的六大区别</a></p><table><thead><tr><th style="text-align:center"></th><th style="text-align:left">MyISAM</th><th>InnoDB</th></tr></thead><tbody><tr><td style="text-align:center"><strong>SELECT  UPDATE,INSERT，Delete操作</strong></td><td style="text-align:left">如果执行大量的SELECT，MyISAM是更好的选择</td><td><strong>1.</strong>如果你的数据执行大量的<strong>INSERT或UPDATE</strong>，出于性能方面的考虑，应该使用InnoDB表<br><br> <strong>2.DELETE  FROM table</strong>时，InnoDB不会重新建立表，而是一行一行的删除。<br><br>  <strong>3.LOAD  TABLE FROM MASTER操作对InnoDB</strong>是不起作用的，解决方法是首先把InnoDB表改成MyISAM表，导入数据后再改成InnoDB表，但是对于使用的额外的InnoDB特性（例如外键）的表不适用</td></tr></tbody></table><blockquote><p>由上可知,  MyISAM适合于大量的读操作,  InnoDB适合大量的写操作</p><p>这里就引发出思考了,我是否可以将从库的搜索引擎更换为MyISAM</p></blockquote><hr><h2 id="2-问题"><a href="#2-问题" class="headerlink" title="2.问题"></a>2.问题</h2><p><strong>问题一: </strong></p><blockquote><p><strong>是否可以将从库的搜索引擎改为MyISAM ?  </strong>也就是</p><p>主库:  InnoDB</p><p>从库:  MyISAM </p></blockquote><blockquote><p><strong>结论: 不建议</strong></p><p><strong>原因: </strong>因为主库将数据同步到从库也是一个写操作.  当主库的写操作数量十分巨大的时候, 需要考虑MyISAM在大量写操作的情况下会造成什么样的后果. </p><hr></blockquote><p><strong>问题二: </strong></p><blockquote><p><strong>MyISAM在大量写操作的情况下会造成什么样的后果.</strong></p></blockquote><blockquote><p><strong>结论: 大量的写操作会造成锁表, 导致读写的效率都不高</strong></p><p><strong>原因:</strong>  </p><ul><li><strong>MyISAM</strong>在执行查询语句<code>SELECT</code>前，会<strong>自动</strong>给涉及的所有表加<strong>读锁</strong>，在执行更新操作（<code>UPDATE、DELETE、INSERT</code>等）前，会<strong>自动</strong>给涉及的表加<strong>写锁</strong>，这个过程并<strong>不需要用户干预</strong>，<strong>MyISAM</strong>常用于读操作</li><li><strong>MyISAM只支持表锁</strong>！</li><li><strong>表锁</strong><ul><li>开销小，加锁快；不会出现死锁；锁定力度大，发生锁冲突概率高，并发度最低</li></ul></li><li>在表读锁和表写锁的环境下：<strong>读读不阻塞，读写阻塞，写写阻塞</strong>！</li><li>读读不阻塞：当前用户在读数据，其他的用户也在读数据，不会加锁</li><li>读写阻塞：当前用户在读数据，其他的用户<strong>不能修改当前用户读的数据</strong>，会加锁！</li><li>写写阻塞：当前用户在修改数据，其他的用户<strong>不能修改当前用户正在修改的数据</strong>，会加锁！</li><li>如果某个进程想要获取读锁，<strong>同时</strong>另外一个进程想要获取写锁。在mysql里边，<strong>写锁是优先于读锁的</strong>！</li><li>写锁和读锁优先级的问题是可以通过参数调节的：<code>max_write_lock_count</code>和<code>low-priority-updates</code></li><li><strong>MyISAM可以</strong>支持查询和插入操作的<strong>并发</strong>进行。可以通过系统变量<code>concurrent_insert</code>来指定哪种模式，在<strong>MyISAM</strong>中它默认是：如果MyISAM表中没有空洞（即表的中间没有被删除的行），MyISAM允许在一个进程读表的同时，另一个进程从<strong>表尾</strong>插入记录。</li></ul><p><strong>参考文章:  </strong><a href="https://juejin.im/post/5b55b842f265da0f9e589e79#heading-11" target="_blank" rel="noopener">MySQL-锁</a> – 主要阅读关于MyISAM引擎 锁的相关知识</p><hr></blockquote><p><strong>所以, 主从复制读写分离,  还是老老实实的使用Innodb引擎吧 ! ! </strong></p><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.runoob.com/w3cnote/mysql-different-nnodb-myisam.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/mysql-different-nnodb-myisam.html</a>   MySQL存储引擎InnoDB与Myisam的六大区别</p><p><a href="https://juejin.im/post/5b55b842f265da0f9e589e79#heading-11" target="_blank" rel="noopener">https://juejin.im/post/5b55b842f265da0f9e589e79#heading-11</a> MySQL-锁</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1470506028280-a011fb34b6f7?ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1049&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://lijinhongpassion.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://lijinhongpassion.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>2020年上半年计划</title>
    <link href="https://lijinhongpassion.github.io/codeant/20201.html"/>
    <id>https://lijinhongpassion.github.io/codeant/20201.html</id>
    <published>2020-06-30T05:02:43.000Z</published>
    <updated>2020-02-02T03:52:54.492Z</updated>
    
    <content type="html"><![CDATA[<hr><p><blockquote><strong>2020年上半年计划</strong></blockquote></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/20201/2020年度计划.png" alt="2020年上半年计划"></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;&lt;blockquote&gt;&lt;strong&gt;2020年上半年计划&lt;/strong&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPa
      
    
    </summary>
    
    
      <category term="年度计划" scheme="https://lijinhongpassion.github.io/tags/%E5%B9%B4%E5%BA%A6%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Java-一二线城市知名 IT 互联网公司名单！</title>
    <link href="https://lijinhongpassion.github.io/codeant/ed00.html"/>
    <id>https://lijinhongpassion.github.io/codeant/ed00.html</id>
    <published>2020-05-25T01:02:47.000Z</published>
    <updated>2020-05-25T01:37:25.647Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="通行证" />    <label for="pass">通行证</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      仅作为参考
    
    </summary>
    
      <category term="招聘" scheme="https://lijinhongpassion.github.io/categories/%E6%8B%9B%E8%81%98/"/>
    
    
      <category term="招聘" scheme="https://lijinhongpassion.github.io/tags/%E6%8B%9B%E8%81%98/"/>
    
  </entry>
  
  <entry>
    <title>Java-文字转声音</title>
    <link href="https://lijinhongpassion.github.io/codeant/1e6a.html"/>
    <id>https://lijinhongpassion.github.io/codeant/1e6a.html</id>
    <published>2020-05-21T08:21:25.000Z</published>
    <updated>2020-05-21T08:54:06.211Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1589923188900-85dae523342b?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><p>[toc]</p><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h2><p>本文是利用Java代码，将文本转化为语音。其主要的流程是：录入文本-&gt;生成音频-&gt;播放音频。</p><p>Github：<a href="https://github.com/LiJinHongPassion/springboot/tree/master/vioce" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/springboot/tree/master/vioce</a></p><h2 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2 代码实现"></a>2 代码实现</h2><h4 id="2-1-POM"><a href="#2-1-POM" class="headerlink" title="2.1 POM"></a>2.1 POM</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.jacob/jacob 文字转语音 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hynnet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jacob<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-导入dll"><a href="#2-2-导入dll" class="headerlink" title="2.2 导入dll"></a>2.2 导入dll</h4><p>将<code>jacob-1.18-x64.dll</code>放入JDK的bin目录下。该文件在<a href="https://github.com/LiJinHongPassion/springboot/tree/master/vioce" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/springboot/tree/master/vioce</a></p><h4 id="2-3-main函数"><a href="#2-3-main函数" class="headerlink" title="2.3 main函数"></a>2.3 main函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.jacob.activeX.ActiveXComponent;</span><br><span class="line"><span class="keyword">import</span> com.jacob.com.Dispatch;</span><br><span class="line"><span class="keyword">import</span> com.jacob.com.Variant;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述: 文字转语音测试 jdk bin文件中需要导入jacob-1.17-M2-x64.dll</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH-1755497577 2020/5/21 15:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jacobtest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 语音转文字并播放</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">textToSpeech</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        ActiveXComponent ax = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ax = <span class="keyword">new</span> ActiveXComponent(<span class="string">"Sapi.SpVoice"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 运行时输出语音内容</span></span><br><span class="line">            Dispatch spVoice = ax.getObject();</span><br><span class="line">            <span class="comment">// 音量 0-100</span></span><br><span class="line">            ax.setProperty(<span class="string">"Volume"</span>, <span class="keyword">new</span> Variant(<span class="number">100</span>));</span><br><span class="line">            <span class="comment">// 语音朗读速度 -10 到 +10</span></span><br><span class="line">            ax.setProperty(<span class="string">"Rate"</span>, <span class="keyword">new</span> Variant(-<span class="number">2</span>));</span><br><span class="line">            <span class="comment">// 执行朗读</span></span><br><span class="line">            Dispatch.call(spVoice, <span class="string">"Speak"</span>, <span class="keyword">new</span> Variant(text));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 下面是构建文件流把生成语音文件</span></span><br><span class="line"></span><br><span class="line">            ax = <span class="keyword">new</span> ActiveXComponent(<span class="string">"Sapi.SpFileStream"</span>);</span><br><span class="line">            Dispatch spFileStream = ax.getObject();</span><br><span class="line"></span><br><span class="line">            ax = <span class="keyword">new</span> ActiveXComponent(<span class="string">"Sapi.SpAudioFormat"</span>);</span><br><span class="line">            Dispatch spAudioFormat = ax.getObject();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置音频流格式</span></span><br><span class="line">            Dispatch.put(spAudioFormat, <span class="string">"Type"</span>, <span class="keyword">new</span> Variant(<span class="number">22</span>));</span><br><span class="line">            <span class="comment">// 设置文件输出流格式</span></span><br><span class="line">            Dispatch.putRef(spFileStream, <span class="string">"Format"</span>, spAudioFormat);</span><br><span class="line">            <span class="comment">// 调用输出 文件流打开方法，创建一个.wav文件</span></span><br><span class="line">            Dispatch.call(spFileStream, <span class="string">"Open"</span>, <span class="keyword">new</span> Variant(<span class="string">"./text.wav"</span>), <span class="keyword">new</span> Variant(<span class="number">3</span>), <span class="keyword">new</span> Variant(<span class="keyword">true</span>));</span><br><span class="line">            <span class="comment">// 设置声音对象的音频输出流为输出文件对象</span></span><br><span class="line">            Dispatch.putRef(spVoice, <span class="string">"AudioOutputStream"</span>, spFileStream);</span><br><span class="line">            <span class="comment">// 设置音量 0到100</span></span><br><span class="line">            Dispatch.put(spVoice, <span class="string">"Volume"</span>, <span class="keyword">new</span> Variant(<span class="number">100</span>));</span><br><span class="line">            <span class="comment">// 设置朗读速度</span></span><br><span class="line">            Dispatch.put(spVoice, <span class="string">"Rate"</span>, <span class="keyword">new</span> Variant(-<span class="number">2</span>));</span><br><span class="line">            <span class="comment">// 开始朗读</span></span><br><span class="line">            Dispatch.call(spVoice, <span class="string">"Speak"</span>, <span class="keyword">new</span> Variant(text));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 关闭输出文件</span></span><br><span class="line">            Dispatch.call(spFileStream, <span class="string">"Close"</span>);</span><br><span class="line">            Dispatch.putRef(spVoice, <span class="string">"AudioOutputStream"</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            spAudioFormat.safeRelease();</span><br><span class="line">            spFileStream.safeRelease();</span><br><span class="line">            spVoice.safeRelease();</span><br><span class="line">            ax.safeRelease();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        textToSpeech(<span class="string">"hello, code ant"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-扩展"><a href="#3-扩展" class="headerlink" title="3 扩展"></a>3 扩展</h2><h4 id="3-1-缺陷"><a href="#3-1-缺陷" class="headerlink" title="3.1 缺陷"></a>3.1 缺陷</h4><p>因为该程序是需要生成音频文件的，文件需要存储在服务器端口。</p><h4 id="3-2-解决方式"><a href="#3-2-解决方式" class="headerlink" title="3.2 解决方式"></a>3.2 解决方式</h4><p>在后期在网站上添加该功能后，因为生成的音频也属于网站资源，所以在什么时候删除该资源是我们需要考虑的。</p><p><strong>方法一（懒汉式）</strong>：</p><p>客户端再加载资源的时候，不主动去加载该音频。</p><p>当资源被第一次请求后，服务器端处理完该请求就直接删除音频文件。若是该资源一直未被请求，则定时清除音频文件。</p><p><strong>方法二（饿汉式）</strong>：</p><p>在页面加载或者点击完按钮的时候，浏览器就主动去请求该资源，然后服务器接收到请求后，并处理完成后，服务器端就直接删除。</p><p>客户端在接收到服务器返回的音频资源后，<strong>可采用缓存（浏览器自带缓存功能）\持久化（保存在本地）存储文件</strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1589923188900-85dae523342b?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java-spring事务传播性（转载）</title>
    <link href="https://lijinhongpassion.github.io/codeant/b019.html"/>
    <id>https://lijinhongpassion.github.io/codeant/b019.html</id>
    <published>2020-04-23T12:21:17.000Z</published>
    <updated>2020-04-23T12:25:10.172Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1558981806-ec527fa84c39?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><p>本文转载于： <a href="https://segmentfault.com/a/1190000013341344" target="_blank" rel="noopener">https://segmentfault.com/a/1190000013341344</a> </p><p>##前言</p><p>Spring在TransactionDefinition接口中规定了7种类型的事务传播行为。事务传播行为是Spring框架独有的事务增强特性，他不属于的事务实际提供方数据库行为。这是Spring为我们提供的强大的工具箱，使用事务传播行可以为我们的开发工作提供许多便利。但是人们对他的误解也颇多，你一定也听过“service方法事务最好不要嵌套”的传言。要想正确的使用工具首先需要了解工具。本文对七种事务传播行为做详细介绍，内容主要代码示例的方式呈现。</p><h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><h2 id="1-什么是事务传播行为？"><a href="#1-什么是事务传播行为？" class="headerlink" title="1. 什么是事务传播行为？"></a>1. 什么是事务传播行为？</h2><p>事务传播行为用来描述由某一个事务传播行为修饰的方法被嵌套进另一个方法的时事务如何传播。</p><p>用伪代码说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void methodA()&#123;</span><br><span class="line">   methodB();</span><br><span class="line">   //doSomething</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Transaction(Propagation=XXX)</span><br><span class="line">public void methodB()&#123;</span><br><span class="line">   //doSomething</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中<code>methodA()</code>方法嵌套调用了<code>methodB()</code>方法，<code>methodB()</code>的事务传播行为由<code>@Transaction(Propagation=XXX)</code>设置决定。这里需要注意的是<code>methodA()</code>并没有开启事务，某一个事务传播行为修饰的方法并不是必须要在开启事务的外围方法中调用。</p><h2 id="2-Spring中七种事务传播行为"><a href="#2-Spring中七种事务传播行为" class="headerlink" title="2. Spring中七种事务传播行为"></a>2. Spring中七种事务传播行为</h2><table><thead><tr><th>事务传播行为类型</th><th>说明</th></tr></thead><tbody><tr><td>PROPAGATION_REQUIRED</td><td>如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。</td></tr><tr><td>PROPAGATION_SUPPORTS</td><td>支持当前事务，如果当前没有事务，就以非事务方式执行。</td></tr><tr><td>PROPAGATION_MANDATORY</td><td>使用当前的事务，如果当前没有事务，就抛出异常。</td></tr><tr><td>PROPAGATION_REQUIRES_NEW</td><td>新建事务，如果当前存在事务，把当前事务挂起。</td></tr><tr><td>PROPAGATION_NOT_SUPPORTED</td><td>以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</td></tr><tr><td>PROPAGATION_NEVER</td><td>以非事务方式执行，如果当前存在事务，则抛出异常。</td></tr><tr><td>PROPAGATION_NESTED</td><td>如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。</td></tr></tbody></table><p>定义非常简单，也很好理解，下面我们就进入代码测试部分，验证我们的理解是否正确。</p><h1 id="代码验证"><a href="#代码验证" class="headerlink" title="代码验证"></a>代码验证</h1><p>文中代码以传统三层结构中两层呈现，即Service和Dao层，由Spring负责依赖注入和注解式事务管理，DAO层由Mybatis实现，你也可以使用任何喜欢的方式，例如，Hibernate,JPA,JDBCTemplate等。数据库使用的是MySQL数据库，你也可以使用任何支持事务的数据库，并不会影响验证结果。</p><p>首先我们在数据库中创建两张表：</p><p><strong>user1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user1` (</span><br><span class="line">  `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` VARCHAR(45) NOT NULL DEFAULT &apos;&apos;,</span><br><span class="line">  PRIMARY KEY(`id`)</span><br><span class="line">)</span><br><span class="line">ENGINE = InnoDB;</span><br></pre></td></tr></table></figure><p><strong>user2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user2` (</span><br><span class="line">  `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` VARCHAR(45) NOT NULL DEFAULT &apos;&apos;,</span><br><span class="line">  PRIMARY KEY(`id`)</span><br><span class="line">)</span><br><span class="line">ENGINE = InnoDB;</span><br></pre></td></tr></table></figure><p>然后编写相应的Bean和DAO层代码：</p><p><strong>User1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class User1 &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line">   //get和set方法省略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>User2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class User2 &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line">   //get和set方法省略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>User1Mapper</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface User1Mapper &#123;</span><br><span class="line">    int insert(User1 record);</span><br><span class="line">    User1 selectByPrimaryKey(Integer id);</span><br><span class="line">    //其他方法省略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>User2Mapper</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface User2Mapper &#123;</span><br><span class="line">    int insert(User2 record);</span><br><span class="line">    User2 selectByPrimaryKey(Integer id);</span><br><span class="line">    //其他方法省略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后也是具体验证的代码由service层实现，下面我们分情况列举。</p><h2 id="1-PROPAGATION-REQUIRED"><a href="#1-PROPAGATION-REQUIRED" class="headerlink" title="1.PROPAGATION_REQUIRED"></a>1.PROPAGATION_REQUIRED</h2><p>我们为User1Service和User2Service相应方法加上<code>Propagation.REQUIRED</code>属性。</p><p><strong>User1Service方法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class User1ServiceImpl implements User1Service &#123;</span><br><span class="line">    //省略其他...</span><br><span class="line">    @Override</span><br><span class="line">    @Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line">    public void addRequired(User1 user)&#123;</span><br><span class="line">        user1Mapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>User2Service方法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class User2ServiceImpl implements User2Service &#123;</span><br><span class="line">    //省略其他...</span><br><span class="line">    @Override</span><br><span class="line">    @Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line">    public void addRequired(User2 user)&#123;</span><br><span class="line">        user2Mapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    @Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line">    public void addRequiredException(User2 user)&#123;</span><br><span class="line">        user2Mapper.insert(user);</span><br><span class="line">        throw new RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-场景一"><a href="#1-1-场景一" class="headerlink" title="1.1 场景一"></a>1.1 场景一</h3><p>此场景外围方法没有开启事务。</p><p><strong>验证方法1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void notransaction_exception_required_required()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addRequired(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addRequired(user2);</span><br><span class="line">    </span><br><span class="line">    throw new RuntimeException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>验证方法2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void notransaction_required_required_exception()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addRequired(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addRequiredException(user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别执行验证方法，结果：</p><table><thead><tr><th>验证方法序号</th><th>数据库结果</th><th>结果分析</th></tr></thead><tbody><tr><td>1</td><td>“张三”、“李四”均插入。</td><td>外围方法未开启事务，插入“张三”、“李四”方法在自己的事务中独立运行，外围方法异常不影响内部插入“张三”、“李四”方法独立的事务。</td></tr><tr><td>2</td><td>“张三”插入，“李四”未插入。</td><td>外围方法没有事务，插入“张三”、“李四”方法都在自己的事务中独立运行,所以插入“李四”方法抛出异常只会回滚插入“李四”方法，插入“张三”方法不受影响。</td></tr></tbody></table><p><strong>结论：通过这两个方法我们证明了在外围方法未开启事务的情况下<code>Propagation.REQUIRED</code>修饰的内部方法会新开启自己的事务，且开启的事务相互独立，互不干扰。</strong></p><h3 id="1-2-场景二"><a href="#1-2-场景二" class="headerlink" title="1.2 场景二"></a>1.2 场景二</h3><p>外围方法开启事务，这个是使用率比较高的场景。</p><p><strong>验证方法1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line"> @Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line"> public void transaction_exception_required_required()&#123;</span><br><span class="line">     User1 user1=new User1();</span><br><span class="line">     user1.setName(&quot;张三&quot;);</span><br><span class="line">     user1Service.addRequired(user1);</span><br><span class="line">     </span><br><span class="line">     User2 user2=new User2();</span><br><span class="line">     user2.setName(&quot;李四&quot;);</span><br><span class="line">     user2Service.addRequired(user2);</span><br><span class="line">     </span><br><span class="line">     throw new RuntimeException();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>验证方法2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line">public void transaction_required_required_exception()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addRequired(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addRequiredException(user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>验证方法3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Transactional</span><br><span class="line">@Override</span><br><span class="line">public void transaction_required_required_exception_try()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addRequired(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    try &#123;</span><br><span class="line">        user2Service.addRequiredException(user2);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        System.out.println(&quot;方法回滚&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别执行验证方法，结果：</p><table><thead><tr><th>验证方法序号</th><th>数据库结果</th><th>结果分析</th></tr></thead><tbody><tr><td>1</td><td>“张三”、“李四”均未插入。</td><td>外围方法开启事务，内部方法加入外围方法事务，外围方法回滚，内部方法也要回滚。</td></tr><tr><td>2</td><td>“张三”、“李四”均未插入。</td><td>外围方法开启事务，内部方法加入外围方法事务，内部方法抛出异常回滚，外围方法感知异常致使整体事务回滚。</td></tr><tr><td>3</td><td>“张三”、“李四”均未插入。</td><td>外围方法开启事务，内部方法加入外围方法事务，内部方法抛出异常回滚，即使方法被catch不被外围方法感知，整个事务依然回滚。</td></tr></tbody></table><p><strong>结论：以上试验结果我们证明在外围方法开启事务的情况下<code>Propagation.REQUIRED</code>修饰的内部方法会加入到外围方法的事务中，所有<code>Propagation.REQUIRED</code>修饰的内部方法和外围方法均属于同一事务，只要一个方法回滚，整个事务均回滚。</strong></p><h2 id="2-PROPAGATION-REQUIRES-NEW"><a href="#2-PROPAGATION-REQUIRES-NEW" class="headerlink" title="2.PROPAGATION_REQUIRES_NEW"></a>2.PROPAGATION_REQUIRES_NEW</h2><p>我们为User1Service和User2Service相应方法加上<code>Propagation.REQUIRES_NEW</code>属性。<br><strong>User1Service方法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class User1ServiceImpl implements User1Service &#123;</span><br><span class="line">    //省略其他...</span><br><span class="line">    @Override</span><br><span class="line">    @Transactional(propagation = Propagation.REQUIRES_NEW)</span><br><span class="line">    public void addRequiresNew(User1 user)&#123;</span><br><span class="line">        user1Mapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    @Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line">    public void addRequired(User1 user)&#123;</span><br><span class="line">        user1Mapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>User2Service方法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class User2ServiceImpl implements User2Service &#123;</span><br><span class="line">    //省略其他...</span><br><span class="line">    @Override</span><br><span class="line">    @Transactional(propagation = Propagation.REQUIRES_NEW)</span><br><span class="line">    public void addRequiresNew(User2 user)&#123;</span><br><span class="line">        user2Mapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    @Transactional(propagation = Propagation.REQUIRES_NEW)</span><br><span class="line">    public void addRequiresNewException(User2 user)&#123;</span><br><span class="line">        user2Mapper.insert(user);</span><br><span class="line">        throw new RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-场景一"><a href="#2-1-场景一" class="headerlink" title="2.1 场景一"></a>2.1 场景一</h3><p>外围方法没有开启事务。</p><p><strong>验证方法1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void notransaction_exception_requiresNew_requiresNew()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addRequiresNew(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addRequiresNew(user2);</span><br><span class="line">    throw new RuntimeException();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>验证方法2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void notransaction_requiresNew_requiresNew_exception()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addRequiresNew(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addRequiresNewException(user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别执行验证方法，结果：</p><table><thead><tr><th>验证方法序号</th><th>数据库结果</th><th>结果分析</th></tr></thead><tbody><tr><td>1</td><td>“张三”插入，“李四”插入。</td><td>外围方法没有事务，插入“张三”、“李四”方法都在自己的事务中独立运行,外围方法抛出异常回滚不会影响内部方法。</td></tr><tr><td>2</td><td>“张三”插入，“李四”未插入</td><td>外围方法没有开启事务，插入“张三”方法和插入“李四”方法分别开启自己的事务，插入“李四”方法抛出异常回滚，其他事务不受影响。</td></tr></tbody></table><p><strong>结论：通过这两个方法我们证明了在外围方法未开启事务的情况下<code>Propagation.REQUIRES_NEW</code>修饰的内部方法会新开启自己的事务，且开启的事务相互独立，互不干扰。</strong></p><h3 id="2-2-场景二"><a href="#2-2-场景二" class="headerlink" title="2.2 场景二"></a>2.2 场景二</h3><p>外围方法开启事务。</p><p><strong>验证方法1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line">public void transaction_exception_required_requiresNew_requiresNew()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addRequired(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addRequiresNew(user2);</span><br><span class="line">    </span><br><span class="line">    User2 user3=new User2();</span><br><span class="line">    user3.setName(&quot;王五&quot;);</span><br><span class="line">    user2Service.addRequiresNew(user3);</span><br><span class="line">    throw new RuntimeException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>验证方法2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line">public void transaction_required_requiresNew_requiresNew_exception()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addRequired(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addRequiresNew(user2);</span><br><span class="line">    </span><br><span class="line">    User2 user3=new User2();</span><br><span class="line">    user3.setName(&quot;王五&quot;);</span><br><span class="line">    user2Service.addRequiresNewException(user3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>验证方法3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line">public void transaction_required_requiresNew_requiresNew_exception_try()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addRequired(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addRequiresNew(user2);</span><br><span class="line">    User2 user3=new User2();</span><br><span class="line">    user3.setName(&quot;王五&quot;);</span><br><span class="line">    try &#123;</span><br><span class="line">        user2Service.addRequiresNewException(user3);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        System.out.println(&quot;回滚&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别执行验证方法，结果：</p><table><thead><tr><th>验证方法序号</th><th>数据库结果</th><th>结果分析</th></tr></thead><tbody><tr><td>1</td><td>“张三”未插入，“李四”插入，“王五”插入。</td><td>外围方法开启事务，插入“张三”方法和外围方法一个事务，插入“李四”方法、插入“王五”方法分别在独立的新建事务中，外围方法抛出异常只回滚和外围方法同一事务的方法，故插入“张三”的方法回滚。</td></tr><tr><td>2</td><td>“张三”未插入，“李四”插入，“王五”未插入。</td><td>外围方法开启事务，插入“张三”方法和外围方法一个事务，插入“李四”方法、插入“王五”方法分别在独立的新建事务中。插入“王五”方法抛出异常，首先插入 “王五”方法的事务被回滚，异常继续抛出被外围方法感知，外围方法事务亦被回滚，故插入“张三”方法也被回滚。</td></tr><tr><td>3</td><td>“张三”插入，“李四”插入，“王五”未插入。</td><td>外围方法开启事务，插入“张三”方法和外围方法一个事务，插入“李四”方法、插入“王五”方法分别在独立的新建事务中。插入“王五”方法抛出异常，首先插入“王五”方法的事务被回滚，异常被catch不会被外围方法感知，外围方法事务不回滚，故插入“张三”方法插入成功。</td></tr></tbody></table><p><strong>结论：在外围方法开启事务的情况下<code>Propagation.REQUIRES_NEW</code>修饰的内部方法依然会单独开启独立事务，且与外部方法事务也独立，内部方法之间、内部方法和外部方法事务均相互独立，互不干扰。</strong></p><h2 id="3-PROPAGATION-NESTED"><a href="#3-PROPAGATION-NESTED" class="headerlink" title="3.PROPAGATION_NESTED"></a>3.PROPAGATION_NESTED</h2><p>我们为User1Service和User2Service相应方法加上<code>Propagation.NESTED</code>属性。<br><strong>User1Service方法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class User1ServiceImpl implements User1Service &#123;</span><br><span class="line">    //省略其他...</span><br><span class="line">    @Override</span><br><span class="line">    @Transactional(propagation = Propagation.NESTED)</span><br><span class="line">    public void addNested(User1 user)&#123;</span><br><span class="line">        user1Mapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>User2Service方法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class User2ServiceImpl implements User2Service &#123;</span><br><span class="line">    //省略其他...</span><br><span class="line">    @Override</span><br><span class="line">    @Transactional(propagation = Propagation.NESTED)</span><br><span class="line">    public void addNested(User2 user)&#123;</span><br><span class="line">        user2Mapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    @Transactional(propagation = Propagation.NESTED)</span><br><span class="line">    public void addNestedException(User2 user)&#123;</span><br><span class="line">        user2Mapper.insert(user);</span><br><span class="line">        throw new RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-场景一"><a href="#3-1-场景一" class="headerlink" title="3.1 场景一"></a>3.1 场景一</h3><p>此场景外围方法没有开启事务。</p><p><strong>验证方法1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void notransaction_exception_nested_nested()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addNested(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addNested(user2);</span><br><span class="line">    throw new RuntimeException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>验证方法2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void notransaction_nested_nested_exception()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addNested(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addNestedException(user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别执行验证方法，结果：</p><table><thead><tr><th>验证方法序号</th><th>数据库结果</th><th>结果分析</th></tr></thead><tbody><tr><td>1</td><td>“张三”、“李四”均插入。</td><td>外围方法未开启事务，插入“张三”、“李四”方法在自己的事务中独立运行，外围方法异常不影响内部插入“张三”、“李四”方法独立的事务。</td></tr><tr><td>2</td><td>“张三”插入，“李四”未插入。</td><td>外围方法没有事务，插入“张三”、“李四”方法都在自己的事务中独立运行,所以插入“李四”方法抛出异常只会回滚插入“李四”方法，插入“张三”方法不受影响。</td></tr></tbody></table><p><strong>结论：通过这两个方法我们证明了在外围方法未开启事务的情况下<code>Propagation.NESTED</code>和<code>Propagation.REQUIRED</code>作用相同，修饰的内部方法都会新开启自己的事务，且开启的事务相互独立，互不干扰。</strong></p><h3 id="3-2-场景二"><a href="#3-2-场景二" class="headerlink" title="3.2 场景二"></a>3.2 场景二</h3><p>外围方法开启事务。</p><p><strong>验证方法1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Transactional</span><br><span class="line">@Override</span><br><span class="line">public void transaction_exception_nested_nested()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addNested(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addNested(user2);</span><br><span class="line">    throw new RuntimeException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>验证方法2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Transactional</span><br><span class="line">@Override</span><br><span class="line">public void transaction_nested_nested_exception()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addNested(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    user2Service.addNestedException(user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>验证方法3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Transactional</span><br><span class="line">@Override</span><br><span class="line">public void transaction_nested_nested_exception_try()&#123;</span><br><span class="line">    User1 user1=new User1();</span><br><span class="line">    user1.setName(&quot;张三&quot;);</span><br><span class="line">    user1Service.addNested(user1);</span><br><span class="line">    </span><br><span class="line">    User2 user2=new User2();</span><br><span class="line">    user2.setName(&quot;李四&quot;);</span><br><span class="line">    try &#123;</span><br><span class="line">        user2Service.addNestedException(user2);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        System.out.println(&quot;方法回滚&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别执行验证方法，结果：</p><table><thead><tr><th>验证方法序号</th><th>数据库结果</th><th>结果分析</th></tr></thead><tbody><tr><td>1</td><td>“张三”、“李四”均未插入。</td><td>外围方法开启事务，内部事务为外围事务的子事务，外围方法回滚，内部方法也要回滚。</td></tr><tr><td>2</td><td>“张三”、“李四”均未插入。</td><td>外围方法开启事务，内部事务为外围事务的子事务，内部方法抛出异常回滚，且外围方法感知异常致使整体事务回滚。</td></tr><tr><td>3</td><td>“张三”插入、“李四”未插入。</td><td>外围方法开启事务，内部事务为外围事务的子事务，插入“李四”内部方法抛出异常，可以单独对子事务回滚。</td></tr></tbody></table><p><strong>结论：以上试验结果我们证明在外围方法开启事务的情况下<code>Propagation.NESTED</code>修饰的内部方法属于外部事务的子事务，外围主事务回滚，子事务一定回滚，而内部子事务可以单独回滚而不影响外围主事务和其他子事务</strong></p><h2 id="4-REQUIRED-REQUIRES-NEW-NESTED异同"><a href="#4-REQUIRED-REQUIRES-NEW-NESTED异同" class="headerlink" title="4. REQUIRED,REQUIRES_NEW,NESTED异同"></a>4. REQUIRED,REQUIRES_NEW,NESTED异同</h2><p>由“1.2 场景二”和“3.2 场景二”对比，我们可知：<br><strong>NESTED和REQUIRED修饰的内部方法都属于外围方法事务，如果外围方法抛出异常，这两种方法的事务都会被回滚。但是REQUIRED是加入外围方法事务，所以和外围事务同属于一个事务，一旦REQUIRED事务抛出异常被回滚，外围方法事务也将被回滚。而NESTED是外围方法的子事务，有单独的保存点，所以NESTED方法抛出异常被回滚，不会影响到外围方法的事务。</strong></p><p>由“2.2 场景二”和“3.2 场景二”对比，我们可知：<br><strong>NESTED和REQUIRES_NEW都可以做到内部方法事务回滚而不影响外围方法事务。但是因为NESTED是嵌套事务，所以外围方法回滚之后，作为外围方法事务的子事务也会被回滚。而REQUIRES_NEW是通过开启新的事务实现的，内部事务和外围事务是两个事务，外围事务回滚不会影响内部事务。</strong></p><h2 id="5-其他事务传播行为"><a href="#5-其他事务传播行为" class="headerlink" title="5. 其他事务传播行为"></a>5. 其他事务传播行为</h2><p>鉴于文章篇幅问题，其他事务传播行为的测试就不在此一一描述了，感兴趣的读者可以去源码中自己寻找相应测试代码和结果解释。传送门：<a href="https://github.com/TmTse/transaction-test" target="_blank" rel="noopener">https://github.com/TmTse/tran…</a></p><h1 id="模拟用例"><a href="#模拟用例" class="headerlink" title="模拟用例"></a>模拟用例</h1><p>介绍了这么多事务传播行为，我们在实际工作中如何应用呢？下面我来举一个示例：</p><p>假设我们有一个注册的方法，方法中调用添加积分的方法，如果我们希望添加积分不会影响注册流程（即添加积分执行失败回滚不能使注册方法也回滚），我们会这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line">     </span><br><span class="line">     @Transactional</span><br><span class="line">     public void register(User user)&#123;</span><br><span class="line">                </span><br><span class="line">         try &#123;</span><br><span class="line">             membershipPointService.addPoint(Point point);</span><br><span class="line">         &#125; catch (Exception e) &#123;</span><br><span class="line">            //省略...</span><br><span class="line">         &#125;</span><br><span class="line">         //省略...</span><br><span class="line">     &#125;</span><br><span class="line">     //省略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还规定注册失败要影响<code>addPoint()</code>方法（注册方法回滚添加积分方法也需要回滚），那么<code>addPoint()</code>方法就需要这样实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class MembershipPointServiceImpl implements MembershipPointService&#123;</span><br><span class="line">     </span><br><span class="line">     @Transactional(propagation = Propagation.NESTED)</span><br><span class="line">     public void addPoint(Point point)&#123;</span><br><span class="line">                </span><br><span class="line">         try &#123;</span><br><span class="line">             recordService.addRecord(Record record);</span><br><span class="line">         &#125; catch (Exception e) &#123;</span><br><span class="line">            //省略...</span><br><span class="line">         &#125;</span><br><span class="line">         //省略...</span><br><span class="line">     &#125;</span><br><span class="line">     //省略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们注意到了在<code>addPoint()</code>中还调用了<code>addRecord()</code>方法，这个方法用来记录日志。他的实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class RecordServiceImpl implements RecordService&#123;</span><br><span class="line">     </span><br><span class="line">     @Transactional(propagation = Propagation.NOT_SUPPORTED)</span><br><span class="line">     public void addRecord(Record record)&#123;</span><br><span class="line">                </span><br><span class="line">        </span><br><span class="line">         //省略...</span><br><span class="line">     &#125;</span><br><span class="line">     //省略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们注意到<code>addRecord()</code>方法中<code>propagation = Propagation.NOT_SUPPORTED</code>，因为对于日志无所谓精确，可以多一条也可以少一条，所以<code>addRecord()</code>方法本身和外围<code>addPoint()</code>方法抛出异常都不会使<code>addRecord()</code>方法回滚，并且<code>addRecord()</code>方法抛出异常也不会影响外围<code>addPoint()</code>方法的执行。</p><p>通过这个例子相信大家对事务传播行为的使用有了更加直观的认识，通过各种属性的组合确实能让我们的业务实现更加灵活多样。</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>通过上面的介绍，相信大家对Spring事务传播行为有了更加深入的理解，希望大家日常开发工作有所帮助。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1558981806-ec527fa84c39?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
      <category term="spring" scheme="https://lijinhongpassion.github.io/categories/java/spring/"/>
    
      <category term="transaction" scheme="https://lijinhongpassion.github.io/categories/java/spring/transaction/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java-你真的懂了try{return}finally{return};吗？</title>
    <link href="https://lijinhongpassion.github.io/codeant/beee.html"/>
    <id>https://lijinhongpassion.github.io/codeant/beee.html</id>
    <published>2020-02-26T02:59:46.000Z</published>
    <updated>2020-02-26T15:01:42.400Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1580602972248-1f93dd762133?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1051&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>我们常知的<code>try catch finally</code>是捕获处理异常的，但是<code>try{return}finally{return};</code>的执行顺序是怎样的呢？<code>try{return}finally{};</code>呢？下面就来简单了解一下。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><strong>例一：try{return}finally{};</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    System.out.println(method1());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        ++x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果：1</strong></p><p><strong>例二：try{return}finally{return};</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    System.out.println(method1());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果：2</strong></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>根据jdk的官方描述，try里面遇到return的时候，先将值存储于<strong>常量池</strong>，再继续执行finally里面的代码。finally代码执行完毕后再返回<strong>常量池里的那个结果</strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1580602972248-1f93dd762133?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1051&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java-Java线程之守护线程&amp;用户进程</title>
    <link href="https://lijinhongpassion.github.io/codeant/25c3.html"/>
    <id>https://lijinhongpassion.github.io/codeant/25c3.html</id>
    <published>2020-02-11T09:02:19.000Z</published>
    <updated>2020-02-11T10:52:56.588Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1581405919332-d9f2f192dc6e?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>在Java中有两类线程：User Thread(用户线程)、Daemon Thread(守护线程) </p><p>用个比较通俗的比如，任何一个守护线程都是整个JVM中所有非守护线程的保姆：</p><p>只要当前JVM实例中尚存在任何一个非守护线程没有结束，守护线程就全部工作；只有当最后一个非守护线程结束时，守护线程随着JVM一同结束工作。<br>Daemon的作用是为其他线程的运行提供便利服务，守护线程最典型的应用就是 GC (垃圾回收器)，它就是一个很称职的守护者</p><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><blockquote><p>以下内容转载至： <a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1306580788183074" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/1252599548343744/1306580788183074</a> </p></blockquote><h4 id="什么是守护线程"><a href="#什么是守护线程" class="headerlink" title="什么是守护线程"></a>什么是守护线程</h4><p>Java程序入口就是由JVM启动<code>main</code>线程，<code>main</code>线程又可以启动其他线程。当所有线程都运行结束时，JVM退出，进程结束。</p><p>如果有一个线程没有退出，JVM进程就不会退出。所以，必须保证所有线程都能及时结束。</p><p>但是有一种线程的目的就是无限循环，例如，一个定时触发任务的线程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(LocalTime.now());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果这个线程不结束，JVM进程就无法结束。问题是，由谁负责结束这个线程？</p><p>然而这类线程经常没有负责人来负责结束它们。但是，当其他线程结束时，JVM进程又必须要结束，怎么办？</p><p>答案是使用守护线程（Daemon Thread）。</p><p>守护线程是指为其他线程服务的线程。在JVM中，所有非守护线程都执行完毕后，无论有没有守护线程，虚拟机都会自动退出。</p><p>因此，JVM退出时，不必关心守护线程是否已结束。</p><hr><h4 id="创建守护线程"><a href="#创建守护线程" class="headerlink" title="创建守护线程"></a>创建守护线程</h4><p>如何创建守护线程呢？方法和普通线程一样，只是在调用<code>start()</code>方法前，调用<code>setDaemon(true)</code>把该线程标记为守护线程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Thread t = <span class="keyword">new</span> MyThread();</span><br><span class="line">t.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure><p>在守护线程中，编写代码要注意：守护线程不能持有任何需要关闭的资源，例如打开文件等，因为虚拟机退出时，守护线程没有任何机会来关闭文件，这会导致数据丢失。</p><hr><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p> (1) thread.setDaemon(true)必须在thread.start()之前设置，否则会跑出一个IllegalThreadStateException异常。你不能把      正在运行的常规线程设置为守护线程。<br>(2) 在Daemon线程中产生的新线程也是Daemon的。<br>(3) 不要认为所有的应用都可以分配给Daemon来进行服务，比如读写操作或者计算逻辑。 </p><hr><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>守护线程是为其他线程服务的线程；</p><p>所有非守护线程都执行完毕后，虚拟机退出；</p><p>守护线程不能持有需要关闭的资源（如打开文件等）。</p><hr><h4 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h4><ul><li>定义：守护线程–也称“服务线程”，在没有用户线程可服务时会自动离开。</li><li>优先级：守护线程的优先级比较低，用于为系统中的其它对象和线程提供服务。</li><li>设置：通过setDaemon(true)来设置线程为“守护线程”；将一个用户线程设置为守护线程的方式是在线程对象创建之前 用线程对象的setDaemon方法。</li><li>example: 垃圾回收线程就是一个经典的守护线程，当我们的程序中不再有任何运行的Thread,程序就不会再产生垃圾，垃圾回收器也就无事可做，所以当垃圾回收线程是JVM上仅剩的线程时，垃圾回收线程会自动离开。它始终在低级别的状态中运行，用于实时监控和管理系统中的可回收资源。</li><li>生命周期：守护进程（Daemon）是运行在后台的一种特殊进程。它独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。也就是说守护线程不依赖于终端，但是依赖于系统，与系统“同生共死”。那Java的守护线程是什么样子的呢。当JVM中所有的线程都是守护线程的时候，JVM就可以退出了；如果还有一个或以上的非守护线程则JVM不会退出。 </li></ul><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/25c3/1.png" alt="Hotspot JVM 后台运行的主要系统线程"></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>参考文章中含有例子，可参考。</p><p><a href="https://blog.csdn.net/shimiso/article/details/8964414" target="_blank" rel="noopener">Java中守护线程的总结</a></p><p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1306580788183074" target="_blank" rel="noopener">廖雪峰 – 守护线程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1581405919332-d9f2f192dc6e?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="Java" scheme="https://lijinhongpassion.github.io/tags/Java/"/>
    
      <category term="thread" scheme="https://lijinhongpassion.github.io/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>Redis-redis为什么是单线程</title>
    <link href="https://lijinhongpassion.github.io/codeant/redis1.html"/>
    <id>https://lijinhongpassion.github.io/codeant/redis1.html</id>
    <published>2020-02-11T06:35:49.000Z</published>
    <updated>2020-02-12T05:27:26.266Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1581293738311-c1e14c2513dc?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>本文我们主要来了解redis和memcached的区别，以此深入了解redis为什么是单线程。</p><blockquote><p>开局一张图：客户端与 redis 的一次通信过程</p></blockquote><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/redis1/1.jpg" alt="客户端与 redis 的一次通信过程"></p><h2 id="redis-和-memcached-的区别"><a href="#redis-和-memcached-的区别" class="headerlink" title="redis 和 memcached 的区别"></a>redis 和 memcached 的区别</h2><p>对于 redis 和 memcached 我总结了下面四点。现在公司一般都是用 redis 来实现缓存，而且 redis 自身也越来越强大了！</p><ol><li><strong>redis支持更丰富的数据类型（支持更复杂的应用场景）</strong>：Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，zset，hash等数据结构的存储。memcache支持简单的数据类型，String。</li><li><strong>Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用,而Memecache把数据全部存在内存之中。</strong></li><li><strong>集群模式</strong>：memcached没有原生的集群模式，需要依靠客户端来实现往集群中分片写入数据；但是 redis 目前是原生支持 cluster 模式的.</li><li><strong>Memcached是多线程，非阻塞IO复用的网络模型；Redis使用单线程的多路 IO 复用模型。</strong></li></ol><blockquote><p>来自网络上的一张图，这里分享给大家！</p></blockquote><p><img src="http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-9-24/61603179.jpg" alt="redis 和 memcached 的区别"></p><h2 id="redis为什么是单线程"><a href="#redis为什么是单线程" class="headerlink" title="redis为什么是单线程"></a>redis为什么是单线程</h2><blockquote><p>以下内容来自： <a href="https://www.zhihu.com/search?type=content&amp;q=redis为什么是单线程的" target="_blank" rel="noopener">知乎 - redis为什么是单线程</a> </p></blockquote><p>以前一直有个误区，以为：高性能服务器 一定是 多线程来实现的</p><p>原因很简单因为误区二导致的：多线程 一定比 单线程 效率高。其实不然。</p><p>在说这个事前希望大家都能对 CPU 、 内存 、 硬盘的速度都有了解了，这样可能理解得更深刻一点，不了解的朋友点：CPU到底比内存跟硬盘快多少</p><p>redis 核心就是 如果我的数据全都在内存里，我单线程的去操作 就是效率最高的，为什么呢，因为多线程的本质就是 CPU 模拟出来多个线程的情况，这种模拟出来的情况就有一个代价，就是上下文的切换，对于一个内存的系统来说，它没有上下文的切换就是效率最高的。redis 用 单个CPU 绑定一块内存的数据，然后针对这块内存的数据进行多次读写的时候，都是在一个CPU上完成的，所以它是单线程处理这个事。在内存的情况下，这个方案就是最佳方案 —— 阿里 沈询</p><p>因为一次CPU上下文的切换大概在 1500ns 左右。</p><p>从内存中读取 1MB 的连续数据，耗时大约为 250us，假设1MB的数据由多个线程读取了1000次，那么就有1000次时间上下文的切换，</p><p>那么就有1500ns * 1000 = 1500us ，我单线程的读完1MB数据才250us ,你光时间上下文的切换就用了1500us了，我还不算你每次读一点数据 的时间，</p><p>那什么时候用多线程的方案呢？</p><p>答案是：下层的存储等慢速的情况。比如磁盘</p><blockquote><p>IOPS (Input/Output Per Second)即每秒的输入输出量(或读写次数)，是衡量磁盘性能的主要指标之一。IOPS是指单位时间内系统能处理的I/O请求数量，I/O请求通常为读或写数据操作请求。随机读写频繁的应用，如OLTP(Online Transaction Processing)，IOPS是关键衡量指标。</p></blockquote><blockquote><p>另一个重要指标是数据吞吐量(Throughput)，指单位时间内可以成功传输的数据数量。对于大量顺序读写的应用，如VOD(Video On Demand)，则更关注吞吐量指标。</p></blockquote><p>内存是一个 IOPS （ 每秒的读写次数 ）非常高的系统，因为我想申请一块内存就申请一块内存，销毁一块内存我就销毁一块内存，内存的申请和销毁是很容易的。而且内存是可以动态的申请大小的。</p><p>磁盘的特性是：IOPS很低很低，但吞吐量很高。这就意味着，大量的读写操作都必须攒到一起，再提交到磁盘的时候，性能最高。为什么呢？</p><p>如果我有一个事务组的操作（就是几个已经分开了的事务请求，比如写读写读写，这么五个操作在一起），在内存中，因为IOPS非常高，我可以一个一个的完成，但是如果在磁盘中也有这种请求方式的话，</p><p>我第一个写操作是这样完成的：我先在硬盘中寻址，大概花费10ms，然后我读一个数据可能花费1ms然后我再运算（忽略不计），再写回硬盘又是10ms ，总共21ms</p><p>第二个操作去读花了10ms, 第三个又是写花费了21ms ,然后我再读10ms, 写21ms ，五个请求总共花费83ms，这还是最理想的情况下，这如果在内存中，大概1ms不到。</p><p>所以对于磁盘来说，它吞吐量这么大，那最好的方案肯定是我将N个请求一起放在一个buff里，然后一起去提交。</p><p>方法就是用异步：将请求和处理的线程不绑定，请求的线程将请求放在一个buff里，然后等buff快满了，处理的线程再去处理这个buff。然后由这个buff 统一的去写入磁盘，或者读磁盘，这样效率就是最高。java里的 IO不就是这么干的么~</p><p>对于慢速设备，这种处理方式就是最佳的，慢速设备有磁盘，网络 ，SSD 等等，</p><p>多线程 ，异步的方式处理这些问题非常常见，大名鼎鼎的netty 就是这么干的。</p><p>终于把 redis 为什么是单线程说清楚了，把什么时候用单线程跟多线程也说清楚了，其实也是些很简单的东西，只是基础不好的时候，就真的尴尬。。。。</p><p>补一发大师语录：来说说，为何单核cpu绑定一块内存效率最高</p><p>“我们不能任由操作系统负载均衡，因为我们自己更了解自己的程序，所以我们可以手动地为其分配CPU核，而不会过多地占用CPU”，默认情况下单线程在进行系统调用的时候会随机使用CPU内核，为了优化Redis，我们可以使用工具为单线程绑定固定的CPU内核，减少不必要的性能损耗！</p><p>redis作为单进程模型的程序，为了充分利用多核CPU，常常在一台server上会启动多个实例。而为了减少切换的开销，有必要为每个实例指定其所运行的CPU。</p><p>Linux 上 taskset 可以将某个进程绑定到一个特定的CPU。你比操作系统更了解自己的程序，为了避免调度器愚蠢的调度你的程序，或是为了在多线程程序中避免缓存失效造成的开销。</p><p>顺便再提一句：redis 的瓶颈在网络上 。。。。</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h4 id="使用Redis有什么缺点？"><a href="#使用Redis有什么缺点？" class="headerlink" title="使用Redis有什么缺点？"></a><strong>使用Redis有什么缺点？</strong></h4><ul><li>缓存和数据库双写一致性问题</li><li>缓存雪崩问题</li><li>缓存击穿问题</li><li>缓存的并发竞争问题</li></ul><h4 id="单线程的Redis为什么这么快？"><a href="#单线程的Redis为什么这么快？" class="headerlink" title="单线程的Redis为什么这么快？"></a><strong>单线程的Redis为什么这么快？</strong></h4><ul><li>多路复用</li><li>Resp协议</li><li>单线程</li><li>内存操作</li></ul><p>（面试官会针对这几点详细提问）</p><h4 id="Redis的数据类型及使用场景（这5种类型你用到过几个？）"><a href="#Redis的数据类型及使用场景（这5种类型你用到过几个？）" class="headerlink" title="Redis的数据类型及使用场景（这5种类型你用到过几个？）"></a><strong>Redis的数据类型及使用场景</strong>（这5种类型你用到过几个？）</h4><p><strong>String：</strong>一般做一些复杂的计数功能的缓存；<br><strong>Hash：</strong>存储二维数据或对象；<br><strong>List：</strong>可实现队列，栈及有序的数据存储；<br><strong>Set：</strong>常用于黑名单，微信抽奖等功能，应用场景多变；<br><strong>SortedSet：</strong>做排行榜应用，取TOPN操作；延时任务；做范围查找。</p><h4 id="Redis过期策略和内存淘汰机制？"><a href="#Redis过期策略和内存淘汰机制？" class="headerlink" title="Redis过期策略和内存淘汰机制？"></a><strong>Redis过期策略和内存淘汰机制？</strong></h4><p>这个面试题，我只回答了定期删除，没答全，面试官提出一种惰性删除策略，有点懵，回去查了一下资料才搞明白；</p><h4 id="Redis和数据库双写一致性问题；"><a href="#Redis和数据库双写一致性问题；" class="headerlink" title="Redis和数据库双写一致性问题；"></a><strong>Redis和数据库双写一致性问题；</strong></h4><p>（最终一致性和强一致性）</p><h4 id="如何应对缓存穿透和缓存雪崩问题？"><a href="#如何应对缓存穿透和缓存雪崩问题？" class="headerlink" title="如何应对缓存穿透和缓存雪崩问题？"></a><strong>如何应对缓存穿透和缓存雪崩问题？</strong></h4><p>中小型的公司一般遇不到这些问题，但是大并发的项目，流量有几百万左右，这两个问题一定要深刻考虑。</p><h4 id="如何解决Redis并发竞争Key问题？"><a href="#如何解决Redis并发竞争Key问题？" class="headerlink" title="如何解决Redis并发竞争Key问题？"></a><strong>如何解决Redis并发竞争Key问题？</strong></h4><p>这个没答上来。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1581293738311-c1e14c2513dc?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="redis" scheme="https://lijinhongpassion.github.io/categories/redis/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="redis" scheme="https://lijinhongpassion.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Java-初探HBuilder开发APP</title>
    <link href="https://lijinhongpassion.github.io/codeant/hbuilder1.html"/>
    <id>https://lijinhongpassion.github.io/codeant/hbuilder1.html</id>
    <published>2020-02-02T06:03:08.000Z</published>
    <updated>2020-02-02T03:53:28.295Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1580489647132-f8a797717fa4?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1189&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>时隔几个月，中途都在找工作，没时间学习新东西，所以今天怀着好奇心，简单写个教程，供自己和大家一起查看，如果说有地方写的不对，欢迎大家来交谈。</p><h2 id="APP开发"><a href="#APP开发" class="headerlink" title="APP开发"></a>APP开发</h2><p>现在的安卓APP开发也无非是两种方式：</p><ul><li>原生安卓</li><li>H5</li></ul><p>之前我写过原生的安卓APP的demo，发现原生的安卓开发很繁琐（也因为自己原来十分的菜，当然现在也菜），后面一直想学习一下H5的APP开发，但是对于前端知识我一直不是很敏感，很排挤，所以一直就放下了。说远了，这里我就简单讲一下利用<code>hbuilder</code>开发一个<code>APP</code>并且安装到手机上的教程。<strong>这里不涉及到后端的开发</strong></p><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>jdk8</td><td>利用jdk的keytool生成证书</td></tr><tr><td>hbuilderx或hbuilder</td><td>开发页面并打包</td></tr><tr><td>MUI</td><td>开发APP所用的前端框架，可以了解</td></tr><tr><td>真机安卓手机一台</td><td>测试</td></tr></tbody></table><h4 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h4><h5 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h5><p>创建前端项目，选择mui前端框架中的带有登录和设置的模板</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/hbuilder1/1.png" alt></p><hr><h5 id="填写项目设置"><a href="#填写项目设置" class="headerlink" title="填写项目设置"></a>填写项目设置</h5><p>打开项目下的manifest.json，填写Dcloud appid，申请教程 <a href="https://ask.dcloud.net.cn/article/35907" target="_blank" rel="noopener">https://ask.dcloud.net.cn/article/35907</a> </p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/hbuilder1/2.png" alt></p><p>设置app图标</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/hbuilder1/2.png" alt></p><hr><h5 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h5><p>这里我编写了一个bat脚本，该脚本运行的前提是 你的java环境变量配置好了</p><p>密钥生成的参考网址为：<a href="https://blog.csdn.net/weixin_42036591/article/details/88752679" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42036591/article/details/88752679</a></p><p><strong>记住输入的密钥口令，后面填写需要</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">@title 证书生成 -- 前提 jdk8</span><br><span class="line"></span><br><span class="line">rem 本脚本编写逻辑参考一下网址：https://blog.csdn.net/weixin_42036591/article/details/88752679</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> java_home=%JAVA_HOME%;</span><br><span class="line"></span><br><span class="line">rem 截取字符串，去除分号</span><br><span class="line">rem 进入java的bin目录下</span><br><span class="line"><span class="built_in">cd</span> /d %java_home:~0,-1%<span class="string">"/bin"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rem 开始生成证书</span><br><span class="line">rem keytool  -genkey  -<span class="built_in">alias</span>  证书别名  -keyalg  RSA   -validity 100 -keystore ceshi.keystore</span><br><span class="line">keytool  -genkey  -<span class="built_in">alias</span>  ceshi  -keyalg  RSA   -validity 100 -keystore ceshi.keystore</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"在打开的文件夹中搜索.keystore后缀的密钥文件"</span></span><br><span class="line">start <span class="string">""</span> %java_home:~0,-1%<span class="string">"/bin"</span></span><br><span class="line"> </span><br><span class="line">pause</span><br></pre></td></tr></table></figure><hr><h5 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h5><p>打包也有两种打包方式：</p><ul><li>云打包（推荐）</li><li>本地打包</li></ul><p>这里说一下云打包，发行-&gt;原生app-云打包</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/hbuilder1/3.png" alt></p><hr><h5 id="打包成功"><a href="#打包成功" class="headerlink" title="打包成功"></a>打包成功</h5><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/hbuilder1/4.png" alt></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/hbuilder1/5.gif" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1580489647132-f8a797717fa4?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1189&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="Java" scheme="https://lijinhongpassion.github.io/tags/Java/"/>
    
      <category term="app" scheme="https://lijinhongpassion.github.io/tags/app/"/>
    
      <category term="hbuilder" scheme="https://lijinhongpassion.github.io/tags/hbuilder/"/>
    
      <category term="mui" scheme="https://lijinhongpassion.github.io/tags/mui/"/>
    
  </entry>
  
  <entry>
    <title>2019年下半年计划</title>
    <link href="https://lijinhongpassion.github.io/codeant/1231.html"/>
    <id>https://lijinhongpassion.github.io/codeant/1231.html</id>
    <published>2019-12-31T05:02:43.000Z</published>
    <updated>2019-10-12T01:23:34.781Z</updated>
    
    <content type="html"><![CDATA[<hr><p><blockquote><strong>2019下半年规划</strong></blockquote><br><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/1231/2019年度计划.png" alt="2019下半年规划"></p><p><blockquote>非常喜欢的视频，侵删！</blockquote></p><h2 id><a href="#" class="headerlink" title=" "></a><div style="position: relative;margin-bottom: 30px;float: left;width: 100%; height: 0;padding-bottom: 75%;"><iframe src="//player.youku.com/embed/XNDM4MzgxMzEzMg==" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute;width: 100%;height: 100%;left: 0;top: 0;"> </iframe></div></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;&lt;blockquote&gt;&lt;strong&gt;2019下半年规划&lt;/strong&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion
      
    
    </summary>
    
    
      <category term="年度计划" scheme="https://lijinhongpassion.github.io/tags/%E5%B9%B4%E5%BA%A6%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-Neo4j实战之入门案例理解neo4j</title>
    <link href="https://lijinhongpassion.github.io/codeant/neo4j2.html"/>
    <id>https://lijinhongpassion.github.io/codeant/neo4j2.html</id>
    <published>2019-11-14T07:16:10.000Z</published>
    <updated>2019-11-14T07:37:38.796Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1573666008508-3825beb91997?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="1-简述"><a href="#1-简述" class="headerlink" title="1 简述"></a>1 简述</h2><p>本文只介绍一个例子，参照更多示例可以查看书本第二章</p><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2 示例"></a>2 示例</h2><p>假设人与人之间并不是一种朋友的关系，而你感兴趣的是人群之间的关联模型。一个组可能包含几个人，并且一个人也可能属于多个组。在传统的关系数据库中，通常会使用三个表的模型表达这种情景：一个人员表、一个组表和一个用于连接人和组的多对多关系链接表，如图2-1所示。</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/neo4j2/2.1.1.png" alt></p><p>在Neo4j中，你可以将用户和组以同样的模型描述为节点，将组成员描述为节点之间的关系，如图2-2所示。</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/neo4j2/2.1.2.png" style="zoom:50%;"></p><p>在这里你大致可以看到节点是图形数据库的数据模型实体（与RDBMS的术语对应），而关系勿庸置疑是节点之间的关系或连接。用纯语言表达这个图表的关系就是“一个人属于一个组”。</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/neo4j2/2.1.3.png" style="zoom:50%;"></p><p>图2-2所示的模式出现在图2-3的几个地方。事实上，整个图2-3可以通过叠加几次图2-2得到。</p><p>当查询这个模型中的数据时，可能有两个问题需要回答。首先，对于一个给定的人，这个人属于哪个组？第二，对于一个给定的组，哪些人属于这个组？使用Neo4j的查询语言Cypher很容易实现。</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/neo4j2/code1.png" alt></p><p>看上去这种模式适合我们的实例。通过从“一个人属于一个组”的简单关系开始，我们仅仅通过重复这种关系就能生成一个复杂的图形。我们最初的图2-2实际上代表了整个图形</p><p>对于更复杂的模型，有时按相反的方向思考更容易理解。可以首先在系统中画一张图把例子中所有不同的东西表示为节点，然后绘制箭头表示出这些节点之间的所有不同种类的关系。一旦开始看到重复的图案，就可以把它们拉出来并把它们归属为更小的图片单元。</p><h2 id="3-复杂示例"><a href="#3-复杂示例" class="headerlink" title="3 复杂示例"></a>3 复杂示例</h2><p>让我们多看几个不同的例子，看看它是如何分解成更小的图案的。在大型组织中，基于用户不同的角色、不同的任务和不同的组别授予其权限访问不同的系统。下面是用户可能具有的访问权限示例。</p><ul><li>直接的——你有权限访问共享文件系统中你自己文件夹中的文件。</li><li>基于某任务——作为数据库的管理员，你有权限连接到数据库控制台。</li><li>基于组成员——作为市场和销售团队的成员，你有权限连接到联系人管理系统。</li><li>基于对组所有成员指定的任务——作为一个开发团队的成员，所有的成员都有源代码控制提交的任务，都有权限从源代码库中取出代码并进行修改后返回原代码库。</li></ul><p>图2-4是一个未连接的授予这些权限的访问控制系统图。</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/neo4j2/2.4.png" style="zoom:50%;"></p><p>图2-5显示了所绘实体之间可能存在的关系的同一图形。</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/neo4j2/2.5.png" style="zoom:50%;"></p><p>正如你所看到的，有几种从用户到权限的可能路径。为了找出一个用户所拥有的权限，你需要找出一个用户节点通过任何途径连接的所有权限节点。在传统的关系数据库中，这需要一个复杂的查询表达每一个不同路径的join操作。</p><ul><li>从用户直接到权限（一表join操作）。</li><li>从用户到组再到权限（二表join操作）。</li><li>从用户到任务再到权限（二表join操作）。</li><li>从用户到组、到任务再到权限（三表join操作）。</li></ul><p>使用Cypher，一个短的查询即可实现：</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/neo4j2/code2.png" alt></p><p>这将匹配任何第一个具有用户标签且其指定的属性值为姓名（name）的节点与第二个标记为权限节点的节点对，并且在它们之间有一个可以是任意长度的路径。最后，返回所有匹配了的权限名称。</p><p>现在假设你想对这个模型添加一个新功能，以反映组织的层次结构。用户不仅可以属于组，组还可以是较大组的下级组，例如，Tester、UXDesigner和Coder，可能隶属于开发组的小组。图2-6显示了在组之间具有下级组（subgroup_of）隶属关系扩展的新模型。</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/neo4j2/2.6.png" style="zoom:50%;"></p><p>要改变关系数据库的查询以支持此模型的方案可不是一件容易的事，而最初模型的Cypher查询也完全适合这一扩展的模型，因为对用户查询一个权限与查询一个关系没有任何区别。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>看见具体的案例过后，在关系复杂的实体类中，会发现确实比RDBMS方便很多，下一章节会对neo4j开发入门进行总结</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1573666008508-3825beb91997?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="neo4j" scheme="https://lijinhongpassion.github.io/categories/neo4j/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="neo4j" scheme="https://lijinhongpassion.github.io/tags/neo4j/"/>
    
  </entry>
  
</feed>
