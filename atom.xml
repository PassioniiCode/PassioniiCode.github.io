<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code Ant&#39;s Blog</title>
  
  <subtitle>“每天进步一点点”</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lijinhongpassion.github.io/"/>
  <updated>2019-10-12T01:23:34.781Z</updated>
  <id>https://lijinhongpassion.github.io/</id>
  
  <author>
    <name>Code Ant</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2019年下半年计划</title>
    <link href="https://lijinhongpassion.github.io/codeant/1231.html"/>
    <id>https://lijinhongpassion.github.io/codeant/1231.html</id>
    <published>2019-12-31T05:02:43.000Z</published>
    <updated>2019-10-12T01:23:34.781Z</updated>
    
    <content type="html"><![CDATA[<hr><p><blockquote><strong>2019下半年规划</strong></blockquote><br><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/1231/2019年度计划.png" alt="2019下半年规划"></p><p><blockquote>非常喜欢的视频，侵删！</blockquote></p><h2 id><a href="#" class="headerlink" title=" "></a><div style="position: relative;margin-bottom: 30px;float: left;width: 100%; height: 0;padding-bottom: 75%;"><iframe src="//player.youku.com/embed/XNDM4MzgxMzEzMg==" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute;width: 100%;height: 100%;left: 0;top: 0;"> </iframe></div></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;&lt;blockquote&gt;&lt;strong&gt;2019下半年规划&lt;/strong&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion
      
    
    </summary>
    
    
      <category term="年度计划" scheme="https://lijinhongpassion.github.io/tags/%E5%B9%B4%E5%BA%A6%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Java-rabbitmq延时队列的实现（延时消费&amp;延时重试）</title>
    <link href="https://lijinhongpassion.github.io/codeant/rbtmq1.html"/>
    <id>https://lijinhongpassion.github.io/codeant/rbtmq1.html</id>
    <published>2019-10-16T09:51:23.000Z</published>
    <updated>2019-10-16T10:00:22.009Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1571198317078-76a4b545b2c1?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1073&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>阅读该部分的代码以及文章，必须了解的知识有：</p><ul><li>搭建安装好rabbitmq - server</li><li>rabbitmq 四种路由规则中的三种（direct、topic、fanout）</li></ul><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>本文代码地址：<a href="https://github.com/LiJinHongPassion/springboot/tree/master/springboot_rabbitmq_demo/rabbitmq-demo（延时队列）" target="_blank" rel="noopener">代码地址</a> </p><p>何为延迟队列？</p><p>顾名思义，延迟队列就是进入该队列的消息会被延迟消费的队列。而一般的队列，消息一旦入队了之后就会被消费者马上消费。</p><p>场景一：在订单系统中，一个用户下单之后通常有30分钟的时间进行支付，如果30分钟之内没有支付成功，那么这个订单将进行一场处理。这是就可以使用延时队列将订单信息发送到延时队列。</p><p>场景二：用户希望通过手机远程遥控家里的智能设备在指定的时间进行工作。这时候就可以将用户指令发送到延时队列，当指令设定的时间到了再将指令推送到只能设备。</p><h2 id="延迟队列能做什么？"><a href="#延迟队列能做什么？" class="headerlink" title="延迟队列能做什么？"></a>延迟队列能做什么？</h2><p>延迟队列多用于需要延迟工作的场景。最常见的是以下两种场景：</p><h4 id="延迟消费"><a href="#延迟消费" class="headerlink" title="延迟消费"></a><strong>延迟消费</strong></h4><p>比如：</p><ol><li>用户生成订单之后，需要过一段时间校验订单的支付状态，如果订单仍未支付则需要及时地关闭订单。</li><li>用户注册成功之后，需要过一段时间比如一周后校验用户的使用情况，如果发现用户活跃度较低，则发送邮件或者短信来提醒用户使用。</li></ol><h4 id="延迟重试"><a href="#延迟重试" class="headerlink" title="延迟重试"></a><strong>延迟重试</strong></h4><p>比如消费者从队列里消费消息时失败了，但是想要延迟一段时间后自动重试。</p><p>如果不使用延迟队列，那么我们只能通过一个轮询扫描程序去完成。这种方案既不优雅，也不方便做成统一的服务便于开发人员使用。但是使用延迟队列的话，我们就可以轻而易举地完成。</p><h2 id="如何实现？"><a href="#如何实现？" class="headerlink" title="如何实现？"></a>如何实现？</h2><p>别急，在下文中，我们将详细介绍如何利用Spring Boot加RabbitMQ来实现<strong>延迟消费</strong>和<strong>延迟重试</strong>队列。</p><h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><p>在介绍具体的实现思路之前，我们先来介绍一下RabbitMQ的两个特性，一个是Time-To-Live Extensions，另一个是Dead Letter Exchanges。</p><p><strong>Time-To-Live Extensions</strong></p><p>RabbitMQ允许我们为消息或者队列设置TTL（time to live），也就是过期时间。TTL表明了一条消息可在队列中存活的最大时间，单位为毫秒。也就是说，当某条消息被设置了TTL或者当某条消息进入了设置了TTL的队列时，这条消息会在经过TTL秒后“死亡”，成为Dead Letter。如果既配置了消息的TTL，又配置了队列的TTL，那么较小的那个值会被取用。更多资料请查阅官方文档。</p><p><strong>Dead Letter Exchange</strong></p><p>刚才提到了，被设置了TTL的消息在过期后会成为Dead Letter。其实在RabbitMQ中，一共有三种消息的“死亡”形式：</p><ol><li>消息被拒绝。通过调用basic.reject或者basic.nack并且设置的requeue参数为false。</li><li>消息因为设置了TTL而过期。</li><li>消息进入了一条已经达到最大长度的队列。</li></ol><p>如果队列设置了Dead Letter Exchange（DLX），那么这些Dead Letter就会被重新publish到Dead Letter Exchange，通过Dead Letter Exchange路由到其他队列。更多资料请查阅官方文档。</p><h4 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h4><p>将RabbitMQ的TTL和DLX特性结合在一起，实现一个延迟队列。</p><h5 id="延迟消费-1"><a href="#延迟消费-1" class="headerlink" title="延迟消费"></a><strong>延迟消费</strong></h5><p>延迟消费是延迟队列最为常用的使用模式。如下图所示，生产者产生的消息首先会进入缓冲队列（图中红色队列）。通过RabbitMQ提供的TTL扩展，这些消息会被设置过期时间，也就是延迟消费的时间。等消息过期之后，这些消息会通过配置好的DLX转发到实际消费队列（图中蓝色队列），以此达到延迟消费的效果。<br> <img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/rbtmq1/1延时消费.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/rbtmq1/2延时消费实际流程图.png" alt></p><p><strong>代码实现流程</strong></p><ul><li>创建queue、exchange、绑定路由规则 – QueueConfig.java</li><li>设置队列消息的过期时间 – ExpirationMessagePostProcessor.java</li><li>发送消息到exchange – ApplicationTests.java下的testDelayQueuePerMessageTTL()方法</li><li>从exchange接收消息 – ProcessReceiver.java</li></ul><p><strong>具体代码请参考：<a href="https://github.com/LiJinHongPassion/springboot/tree/master/springboot_rabbitmq_demo/rabbitmq-demo（延时队列）/延时消费" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/springboot/tree/master/springboot_rabbitmq_demo/rabbitmq-demo（延时队列）/延时消费</a> </strong></p><p>方法一： <a href="https://github.com/LiJinHongPassion/springboot/tree/master/springboot_rabbitmq_demo/rabbitmq-demo（延时队列）/延时消费/springboot-rabbitmq-delay-message" target="_blank" rel="noopener">springboot-rabbitmq-delay-message</a> </p><p>方法二： <a href="https://github.com/LiJinHongPassion/springboot/tree/master/springboot_rabbitmq_demo/rabbitmq-demo（延时队列）/延时消费/springboot-rabbitmq-delay-queue" target="_blank" rel="noopener">springboot-rabbitmq-delay-queue</a> </p><hr><h5 id="延迟重试-1"><a href="#延迟重试-1" class="headerlink" title="延迟重试"></a><strong>延迟重试</strong></h5><p>延迟重试本质上也是延迟消费的一种，但是这种模式的结构与普通的延迟消费的流程图较为不同，所以单独拎出来介绍。</p><p>如下图所示，消费者发现该消息处理出现了异常，比如是因为网络波动引起的异常。那么如果不等待一段时间，直接就重试的话，很可能会导致在这期间内一直无法成功，造成一定的资源浪费。那么我们可以将其先放在缓冲队列中（图中红色队列），等消息经过一段的延迟时间后再次进入实际消费队列中（图中蓝色队列），此时由于已经过了“较长”的时间了，异常的一些波动通常已经恢复，这些消息可以被正常地消费。 <img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/rbtmq1/延时重试.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/rbtmq1/延时重试实际流程图.png" alt></p><p><strong>代码实现流程</strong></p><ul><li>创建queue、exchange、绑定路由规则、监听器 – QueueConfig.java</li><li>设置队列消息的过期时间（只针对方法二需要该文件） – ExpirationMessagePostProcessor.java</li><li>发送消息到exchange – ApplicationTests.java下的testFailMessage()方法</li><li>从exchange接收消息 – ProcessReceiver.java</li></ul><p><strong>具体代码请参考：<a href="https://github.com/LiJinHongPassion/springboot/tree/master/springboot_rabbitmq_demo/rabbitmq-demo（延时队列）/延时重试" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/springboot/tree/master/springboot_rabbitmq_demo/rabbitmq-demo（延时队列）/延时重试</a> </strong></p><p>方法一： <a href="https://github.com/LiJinHongPassion/springboot/tree/master/springboot_rabbitmq_demo/rabbitmq-demo（延时队列）/延时重试/springboot-rabbitmq-delay-message" target="_blank" rel="noopener">springboot-rabbitmq-delay-message</a> </p><p>方法二： <a href="https://github.com/LiJinHongPassion/springboot/tree/master/springboot_rabbitmq_demo/rabbitmq-demo（延时队列）/延时重试/springboot-rabbitmq-delay-queue" target="_blank" rel="noopener">springboot-rabbitmq-delay-queue</a> </p><h4 id="查看测试结果"><a href="#查看测试结果" class="headerlink" title="查看测试结果"></a><strong>查看测试结果</strong></h4><h5 id="延迟消费场景"><a href="#延迟消费场景" class="headerlink" title="延迟消费场景"></a><strong>延迟消费场景</strong></h5><p>延迟消费的场景测试我们分为了TTL设置在消息上和TTL设置在队列上两种。首先，我们先看一下TTL设置在消息上的测试结果：</p><p><a href="https://files.jb51.net/file_images/article/201711/2017112111255062.gif" target="_blank" rel="noopener"><img src="https://files.jb51.net/file_images/article/201711/2017112111255062.gif" alt="动图点击查看"></a></p><p>从上图中我们可以看到，ProcessReceiver分别经过1秒、2秒、3秒收到消息。测试结果表明消息不仅被延迟消费了，而且每条消息的延迟时间是可以被个性化设置的。TTL设置在消息上的延迟消费场景测试成功。</p><p>然后，TTL设置在队列上的测试结果如下图：</p><p><a href="https://files.jb51.net/file_images/article/201711/2017112111255063.gif" target="_blank" rel="noopener"><img src="https://files.jb51.net/file_images/article/201711/2017112111255063.gif" alt="动图点击查看"></a> </p><p>从上图中我们可以看到，ProcessReceiver经过了4秒的延迟之后，同时收到了3条消息。测试结果表明消息不仅被延迟消费了，同时也证明了当TTL设置在队列上的时候，消息的过期时间是固定的。TTL设置在队列上的延迟消费场景测试成功。</p><hr><h5 id="延迟重试场景"><a href="#延迟重试场景" class="headerlink" title="延迟重试场景"></a><strong>延迟重试场景</strong></h5><p>接下来，我们再来看一下延迟重试的测试结果：</p><p><a href="https://files.jb51.net/file_images/article/201711/2017112111255064.gif" target="_blank" rel="noopener"><img src="https://files.jb51.net/file_images/article/201711/2017112111255064.gif" alt="动图点击查看"></a> </p><p>ProcessReceiver首先收到了3条会触发FAIL的消息，然后将其移动到缓冲队列之后，过了4秒，又收到了刚才的那3条消息。延迟重试场景测试成功。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要是叙述了延时消费和延时重试，根据不同的应用场景，灵活运用两种方式，例如下订单的时候，我们可以两种方式结合起来用，延时消费 + 延时重试等等，是需要不同的应用场景的</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p> <a href="https://www.jb51.net/article/128702.htm" target="_blank" rel="noopener">https://www.jb51.net/article/128702.htm</a>     Spring Boot与RabbitMQ结合实现延迟队列的示例</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1571198317078-76a4b545b2c1?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1073&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="rabbitmq" scheme="https://lijinhongpassion.github.io/categories/rabbitmq/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="rabbitmq" scheme="https://lijinhongpassion.github.io/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>Java-Thread05之自定义线程池</title>
    <link href="https://lijinhongpassion.github.io/codeant/dxc05.html"/>
    <id>https://lijinhongpassion.github.io/codeant/dxc05.html</id>
    <published>2019-10-12T08:18:02.000Z</published>
    <updated>2019-10-12T08:36:20.400Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1570730739784-7c284457d15c?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述-自定义线程池（注意拒绝策略）"><a href="#简述-自定义线程池（注意拒绝策略）" class="headerlink" title="简述 - 自定义线程池（注意拒绝策略）"></a>简述 - 自定义线程池（注意拒绝策略）</h2><p>demo：<a href="https://github.com/LiJinHongPassion/ThreadTest" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/ThreadTest</a></p><p>线程池的组成<br>一般的线程池主要分为以下 4 个组成部分：</p><pre><code>1. 线程池管理器：用于创建并管理线程池2. 工作线程：线程池中的线程3. 任务接口：每个任务必须实现的接口，用于工作线程调度其运行4. 任务队列：用于存放待处理的任务，提供一种缓冲机制</code></pre><hr><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dxc05/1.png" alt></p><p>观察之前提到的四种线程池的获取方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                      <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                      <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">             Executors.defaultThreadFactory(), defaultHandler);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">            (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                    <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                    <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>其实最终返回的都是一个ThreadPoolExecutor，那么我们只要返回一个自定义的ThreadPoolExecutor就行了</strong></p><h2 id="ThreadPoolExecutor的构造函数"><a href="#ThreadPoolExecutor的构造函数" class="headerlink" title="ThreadPoolExecutor的构造函数"></a>ThreadPoolExecutor的构造函数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                              ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                              RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">            maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">            maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">            keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">        <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">        <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">        <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">        <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">        <span class="keyword">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>参数解释：</p><pre><code>1. corePoolSize：指定了线程池中的线程数量。2. maximumPoolSize：指定了线程池中的最大线程数量。3. keepAliveTime：当前线程池数量超过 corePoolSize 时，多余的空闲线程的存活时间，即多次时间内会被销毁。4. unit：keepAliveTime 的单位。5. workQueue：任务队列，被提交但尚未被执行的任务。6. threadFactory：线程工厂，用于创建线程，一般用默认的即可。7. handler：拒绝策略，当任务太多来不及处理，如何拒绝任务。</code></pre><h2 id="自定义线程池MyPool"><a href="#自定义线程池MyPool" class="headerlink" title="自定义线程池MyPool"></a><strong>自定义线程池MyPool</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPool</span> <span class="keyword">extends</span> <span class="title">ThreadPoolExecutor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MyPool</span><span class="params">(<span class="keyword">int</span> corePoolSize, <span class="keyword">int</span> maximumPoolSize, <span class="keyword">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述:自定义线程池</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> LJH-1755497577 2019/10/12 14:55</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> corePoolSize 指定了线程池中的线程数量。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maximumPoolSize 指定了线程池中的最大线程数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keepAliveTime 当前线程池数量超过 corePoolSize 时，多余的空闲线程的存活时间，即多次时间内会被销毁。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit keepAliveTime 的单位。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> workQueue 任务队列，被提交但尚未被执行的任务。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> threadFactory 线程工厂，用于创建线程，一般用默认的即可。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler 拒绝策略，当任务太多来不及处理，如何拒绝任务。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.util.concurrent.ThreadPoolExecutor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ThreadPoolExecutor <span class="title">getInstance</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                 <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                 <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                 TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                 BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                 ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                 RejectedExecutionHandler handler)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyPool( corePoolSize,  maximumPoolSize,  keepAliveTime,</span><br><span class="line">                unit,  workQueue, threadFactory, handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService poolExecutor = MyPool.getInstance(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;(), Executors.defaultThreadFactory(),</span><br><span class="line">                <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; <span class="number">10</span>; a++)&#123;</span><br><span class="line">            poolExecutor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()  + <span class="string">"-----自定义线程池执行"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        poolExecutor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="重要参数讲解"><a href="#重要参数讲解" class="headerlink" title="重要参数讲解"></a>重要参数讲解</h2><h4 id="RejectedExecutionHandler-handler：拒绝策略"><a href="#RejectedExecutionHandler-handler：拒绝策略" class="headerlink" title="RejectedExecutionHandler handler：拒绝策略"></a>RejectedExecutionHandler handler：拒绝策略</h4><p>线程池中的线程已经用完了，无法继续为新任务服务，同时，等待队列也已经排满了，再也塞不下新任务了。这时候我们就需要拒绝策略机制合理的处理这个问题。<br>JDK 内置的拒绝策略如下：</p><pre><code>1. AbortPolicy ： 直接抛出异常，阻止系统正常运行。2. CallerRunsPolicy ： 只要线程池未关闭，该策略直接在调用者线程中，运行当前被丢弃的任务。显然这样做不会真的丢弃任务，但是，任务提交线程的性能极有可能会急剧下降。3. DiscardOldestPolicy ： 丢弃最老的一个请求，也就是即将被执行的一个任务，并尝试再次提交当前任务。4. DiscardPolicy ： 该策略默默地丢弃无法处理的任务，不予任何处理。如果允许任务丢失，这是最好的一种方案。</code></pre><p>以上内置拒绝策略均实现了 RejectedExecutionHandler 接口，若以上策略仍无法满足实际需要，完全可以自己扩展 RejectedExecutionHandler 接口。</p><p><strong>注意</strong>：之前的四种拒绝策略的默认为new AbortPolicy();</p><h4 id="BlockingQueue-workQueue：任务阻塞队列"><a href="#BlockingQueue-workQueue：任务阻塞队列" class="headerlink" title="BlockingQueue workQueue：任务阻塞队列"></a>BlockingQueue<runnable> workQueue：任务阻塞队列</runnable></h4><pre><code>1. ArrayBlockingQueue ：由数组结构组成的有界阻塞队列。2. LinkedBlockingQueue ：由链表结构组成的有界阻塞队列。3. PriorityBlockingQueue ：支持优先级排序的无界阻塞队列。4. DelayQueue：使用优先级队列实现的无界阻塞队列。5. SynchronousQueue：不存储元素的阻塞队列。6. LinkedTransferQueue：由链表结构组成的无界阻塞队列。7. LinkedBlockingDeque：由链表结构组成的双向阻塞队列</code></pre><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dxc05/2.png" alt></p><p>阻塞队列，关键字是阻塞，先理解阻塞的含义，在阻塞队列中，线程阻塞有这样的两种情况</p><ol><li>当队列中没有数据的情况下，消费者端的所有线程都会被自动阻塞（挂起），直到有数据放<br>入队列。<br><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dxc05/3.png" alt></li><li>当队列中填满数据的情况下，生产者端的所有线程都会被自动阻塞（挂起），直到队列中有<br>空的位置，线程被自动唤醒。<br><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dxc05/4.png" alt></li></ol><p>​    关于阻塞队列的详情需自行查阅百度</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1570730739784-7c284457d15c?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="多线程" scheme="https://lijinhongpassion.github.io/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="多线程" scheme="https://lijinhongpassion.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java-Thread04之四种线程池</title>
    <link href="https://lijinhongpassion.github.io/codeant/dxc04.html"/>
    <id>https://lijinhongpassion.github.io/codeant/dxc04.html</id>
    <published>2019-10-12T08:05:44.000Z</published>
    <updated>2019-10-12T08:30:22.083Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1556912998-c57cc6b63cd7?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述-四种线程池"><a href="#简述-四种线程池" class="headerlink" title="简述 - 四种线程池"></a>简述 - 四种线程池</h2><p>demo：<a href="https://github.com/LiJinHongPassion/ThreadTest" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/ThreadTest</a></p><ol><li><p>线程池的概念：</p><p> 线程池就是首先创建一些线程，它们的集合称为线程池。使用线程池可以很好地提高性能，线程池在系统启动时即创建大量空闲的线程，程序将一个任务传给线程池，线程池就会启动一条线程来执行这个任务，执行结束以后，该线程并不会死亡，而是再次返回线程池中成为空闲状态，等待执行下一个任务。</p></li><li><p>线程池的工作机制</p><p> 2.1 在线程池的编程模式下，任务是提交给整个线程池，而不是直接提交给某个线程，线程池在拿到任务后，就在内部寻找是否有空闲的线程，如果有，则将任务交给某个空闲的线程。</p><p> 2.1 一个线程同时只能执行一个任务，但可以同时向一个线程池提交多个任务。</p></li><li><p><strong>使用线程池的原因：</strong></p><p> 多线程运行时间，系统不断的启动和关闭新线程，成本非常高，会过渡消耗系统资源，以及过渡切换线程的危险，从而可能导致系统资源的崩溃。这时，线程池就是最好的选择了。</p></li><li><p>线程池的组成</p><ol><li>线程池管理器：用于创建并管理线程池</li><li>工作线程：线程池中的线程</li><li>任务接口：每个任务必须实现的接口，用于工作线程调度其运行</li><li>任务队列：用于存放待处理的任务，提供一种缓冲机制</li></ol></li></ol><hr><p>Java 里面线程池的顶级接口是 Executor，但是严格意义上讲 Executor 并不是一个线程池，而只是一个执行线程的工具。真正的线程池接口是 ExecutorService。</p><ol><li>线程池的返回值ExecutorService简介：<br> ExecutorService是Java提供的用于管理线程池的类。该类的两个作用：控制线程数量和重用线程</li><li>具体的4种常用的线程池：（返回值都是ExecutorService）<ul><li>newCachedThreadPool</li><li>newFixedThreadPool</li><li>newScheduledThreadPool</li><li>newSingleThreadExecutor<br><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dxc04/threadpool.png" alt></li></ul></li></ol><hr><h2 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool"></a>newCachedThreadPool</h2><p>创建一个可根据需要创建新线程的线程池，但是在以前构造的线程可用时将<strong>重用</strong>它们。<br>对于执行很多短期异步任务的程序而言，这些线程池通常可提高程序性能。<strong>调用 execute 将重用以前构造的线程（如果线程可用）。如果现有线程没有可用的，则创建一个新线程并添加到池中。终止并从缓存中移除那些已有 60 秒钟未被使用的线程。</strong>因此，长时间保持空闲的线程池不会使用任何资源。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">pool01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个可缓存线程池</span></span><br><span class="line">        ExecutorService cachedThreadPool = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//sleep可明显看到使用的是线程池里面以前的线程，没有创建新的线程</span></span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            cachedThreadPool.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="comment">//打印正在执行的缓存线程信息</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"正在被执行"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭线程池</span></span><br><span class="line">        cachedThreadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>线程池为无限大，当执行当前任务时上一个任务已经完成，会复用执行上一个任务的线程，而不用每次新建线程</p><p><strong>执行结果</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pool-1-thread-1正在被执行</span><br><span class="line">pool-1-thread-1正在被执行</span><br><span class="line">pool-1-thread-1正在被执行</span><br><span class="line">pool-1-thread-1正在被执行</span><br><span class="line">pool-1-thread-1正在被执行</span><br><span class="line">pool-1-thread-1正在被执行</span><br><span class="line">pool-1-thread-1正在被执行</span><br><span class="line">pool-1-thread-1正在被执行</span><br><span class="line">pool-1-thread-1正在被执行</span><br><span class="line">pool-1-thread-1正在被执行</span><br></pre></td></tr></table></figure></p><h2 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h2><p>创建一个<strong>可重用固定线程数的线程池</strong>，以共享的无界队列方式来运行这些线程。<br>在任意点，在大多数 nThreads 线程会处于处理任务的活动状态。如果在所有线程处于活动状态时提交附加任务，则在有可用线程之前，附加任务将在队列中等待。如果在关闭前的执行期间由于失败而导致任何线程终止，那么一个新线程将代替它执行后续的任务（如果需要）。在某个线程被显式地关闭之前，池中的线程将一直存在。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">pool02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个可重用固定个数的线程池</span></span><br><span class="line">        ExecutorService fixedThreadPool = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            fixedThreadPool.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//打印正在执行的缓存线程信息</span></span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">"正在被执行"</span>);</span><br><span class="line">                        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭线程池</span></span><br><span class="line">        fixedThreadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因为线程池大小为3，每个任务输出打印结果后sleep 2秒，所以每两秒打印3个结果。<br>定长线程池的大小最好根据系统资源进行设置。如Runtime.getRuntime().availableProcessors()</p><p><strong>执行结果</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pool-1-thread-1正在被执行</span><br><span class="line">pool-1-thread-2正在被执行</span><br><span class="line">pool-1-thread-3正在被执行</span><br><span class="line">pool-1-thread-1正在被执行</span><br><span class="line">pool-1-thread-3正在被执行</span><br><span class="line">pool-1-thread-2正在被执行</span><br><span class="line">pool-1-thread-1正在被执行</span><br><span class="line">pool-1-thread-3正在被执行</span><br><span class="line">pool-1-thread-2正在被执行</span><br><span class="line">pool-1-thread-1正在被执行</span><br></pre></td></tr></table></figure></p><h2 id="newScheduledThreadPool"><a href="#newScheduledThreadPool" class="headerlink" title="newScheduledThreadPool"></a>newScheduledThreadPool</h2><p>创建一个定长线程池，<strong>支持定时及周期性任务执行</strong><br>ScheduledExecutorService</p><ul><li>schedule(Runnable, long, TimeUnit) – 延时执行（只执行一次）</li><li>schedule(Callable<v>, long, TimeUnit) – 延时执行</v></li><li>scheduleAtFixedRate(Runnable ,long ,long ,TimeUnit) – 周期执行</li><li>scheduleWithFixedDelay(Runnable ,long ,long ,TimeUnit) – 周期执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">pool03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ScheduledExecutorService scheduledThreadPool= Executors.newScheduledThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 描述：延时执行（只执行一次）</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@author</span> LJH-1755497577 2019/10/12 13:35</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> command 执行线程</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> delay 延时</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> unit 计时单位</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        scheduledThreadPool.schedule(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"延迟三秒执行"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 描述：周期执行</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@author</span> LJH-1755497577 2019/10/12 13:35</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> command 执行线程</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> initialDelay 初始化延时</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> period 两次开始执行最小间隔时间</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> unit 计时单位</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        scheduledThreadPool.scheduleAtFixedRate(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"延迟 1 秒后每三秒执行一次"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="number">1</span>,<span class="number">3</span>,TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 描述：周期执行</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@author</span> LJH-1755497577 2019/10/12 13:35</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> command 执行线程</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> initialDelay 初始化延时</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> period 前一次执行结束到下一次执行开始的间隔时间（间隔执行延迟时间）</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> unit 计时单位</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        scheduledThreadPool.scheduleWithFixedDelay(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"延迟 1 秒后每上一个线程执行完成后，间隔3秒，开始下一次线程执行"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="number">1</span>,<span class="number">3</span>,TimeUnit.SECONDS);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//关闭线程池</span></span><br><span class="line">        scheduledThreadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="newSingleThreadExecutor"><a href="#newSingleThreadExecutor" class="headerlink" title="newSingleThreadExecutor"></a>newSingleThreadExecutor</h2><p>创建一个单线程化的线程池（这个线程池只有一个线程），它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。这个线程池可以在线程死后（或发生异常时）重新启动一个线程来替代原来的线程继续执行下去！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">pool04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个单线程化的线程池</span></span><br><span class="line">        ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line">            singleThreadExecutor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//结果依次输出，相当于顺序执行各个任务</span></span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">"正在被执行,打印的值是:"</span> + index);</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭线程池</span></span><br><span class="line">        singleThreadExecutor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>执行结果</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pool-1-thread-1正在被执行,打印的值是:0</span><br><span class="line">pool-1-thread-1正在被执行,打印的值是:1</span><br><span class="line">pool-1-thread-1正在被执行,打印的值是:2</span><br><span class="line">pool-1-thread-1正在被执行,打印的值是:3</span><br><span class="line">pool-1-thread-1正在被执行,打印的值是:4</span><br><span class="line">pool-1-thread-1正在被执行,打印的值是:5</span><br><span class="line">pool-1-thread-1正在被执行,打印的值是:6</span><br><span class="line">pool-1-thread-1正在被执行,打印的值是:7</span><br><span class="line">pool-1-thread-1正在被执行,打印的值是:8</span><br><span class="line">pool-1-thread-1正在被执行,打印的值是:9</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1556912998-c57cc6b63cd7?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="多线程" scheme="https://lijinhongpassion.github.io/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="多线程" scheme="https://lijinhongpassion.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java-Thread03之多线程线程状态</title>
    <link href="https://lijinhongpassion.github.io/codeant/dxc03.html"/>
    <id>https://lijinhongpassion.github.io/codeant/dxc03.html</id>
    <published>2019-10-12T07:58:36.000Z</published>
    <updated>2019-10-12T08:04:31.730Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1562101806-6a5f9ec69f41?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述-线程状态"><a href="#简述-线程状态" class="headerlink" title="简述 - 线程状态"></a>简述 - 线程状态</h2><p>demo：<a href="https://github.com/LiJinHongPassion/ThreadTest" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/ThreadTest</a></p><p>当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。</p><p>在线程的生命周期中，有几种状态呢？在API中 java.lang.Thread.State 这个枚举中给出了六种线程状态：<br>这里先列出各个线程状态发生的条件，下面将会对每种状态进行详细解析<br><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dxc03/线程状态.png" alt></p><p>我们不需要去研究这几种状态的实现原理，我们只需知道在做线程操作中存在这样的状态。那我们怎么去理解这几个状态呢，新建与被终止还是很容易理解的，我们就研究一下线程从Runnable（可运行）状态与非运行状态之间的转换问题。</p><h4 id="提前了解-sleep和wait的区别"><a href="#提前了解-sleep和wait的区别" class="headerlink" title="提前了解 - sleep和wait的区别"></a>提前了解 - sleep和wait的区别</h4><ol><li>对于 sleep()方法，我们首先要知道该方法是属于 Thread 类中的。而 wait()方法，则是属于Object 类中的。</li><li>sleep()方法导致了程序暂停执行指定的时间，让出 cpu 该其他线程，但是他的监控状态依然保持者，当指定的时间到了又会自动恢复运行状态。</li><li>在调用 <strong>sleep()</strong>方法的过程中，线程<strong>不会释放对象锁</strong>。</li><li>而当调用<strong> wait()</strong>方法的时候，线程<strong>会放弃对象锁</strong>，进入等待此对象的等待锁定池，只有针对此对象调用 notify()方法后本线程才进入对象锁定池准备获取对象锁进入运行状态。</li></ol><h2 id="Timed-Waiting-（计时等待）"><a href="#Timed-Waiting-（计时等待）" class="headerlink" title="Timed Waiting （计时等待）"></a>Timed Waiting （计时等待）</h2><p>Timed Waiting在API中的描述为：一个正在限时等待另一个线程执行一个（唤醒）动作的线程处于这一状态。<br>单独的去理解这句话，真是玄之又玄，其实我们在之前的操作中已经接触过这个状态了，在哪里呢？在我们写卖票的案例中，为了减少线程执行太快，现象不明显等问题，我们在run方法中添加了sleep语句，这样就强制当前正在执行的线程休眠（暂停执行），以“减慢线程”。其实当我们调用了sleep方法之后，当前执行的线程就进入到“休眠状态”，其实就是所谓的Timed Waiting(计时等待)，那么我们通过一个案例加深对该状态的一个理解。<br><strong>实现一个计数器，计数到100，在每个数字之间暂停1秒，每隔10个数字输出一个字符串</strong><br>代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((i) % <span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"‐‐‐‐‐‐‐"</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(i);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//线程睡眠1秒，超时后自动唤醒</span></span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                System.out.print(<span class="string">"    线程睡眠1秒！\n"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MyThread().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过案例可以发现， sleep方法的使用还是很简单的。我们需要记住下面几点：</p><ol><li>进入 TIMED_WAITING 状态的一种常见情形是调用的 sleep 方法，单独的线程也可以调用，不一定非要有协作关系。</li><li><strong>为了让其他线程有机会执行</strong>，可以将Thread.sleep()的调用放线程run()之内。这样才能保证该线程执行过程中会睡眠</li><li>sleep与锁无关，线程睡眠到期自动苏醒，并返回到Runnable（可运行）状态。<br><blockquote>小提示：sleep()中指定的时间是线程不会运行的最短时间。因此，sleep()方法不能保证该线程睡眠到期后就<br>开始立刻执行。(这里我理解为线程调度的原因，例如时间片调度)</blockquote></li></ol><p><strong>执行过程</strong><br><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dxc03/timewaiting.png" alt></p><h2 id="BLOCKED-（锁阻塞）"><a href="#BLOCKED-（锁阻塞）" class="headerlink" title="BLOCKED （锁阻塞）"></a>BLOCKED （锁阻塞）</h2><p>Blocked 状态在API中的介绍为：一个正在阻塞等待一个监视器锁（锁对象）的线程处于这一状态。<br>我们已经学完同步机制，那么这个状态是非常好理解的了。比如，线程A与线程B代码中使用同一锁，如果线程A获取到锁，线程A进入到Runnable状态，那么线程B就进入到Blocked锁阻塞状态。这是由Runnable状态进入Blocked状态。除此Waiting以及Time Waiting状态也会在某种情况下进入阻塞状态，而这部分内容作为扩充知识点带领大家了解一下。</p><p><strong>执行过程</strong><br><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dxc03/blocked.png" alt></p><h2 id="Waiting-（无限等待）"><a href="#Waiting-（无限等待）" class="headerlink" title="Waiting （无限等待）"></a>Waiting （无限等待）</h2><p>Wating状态在API中介绍为：一个正在无限期等待另一个线程执行一个特别的（唤醒）动作的线程处于这一状态。<br>那么我们之前遇到过这种状态吗？答案是并没有。我们通过一段代码来学习一下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread02</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 演示waiting</span></span><br><span class="line">        <span class="comment">//name:等待线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//                while (true) &#123;</span></span><br><span class="line">                    <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            System.out.println(Thread.currentThread().getName() + <span class="string">"=== 获取到锁对象，调用wait方法，进入waiting状态，释放锁对象"</span>);</span><br><span class="line">                            obj.wait();  <span class="comment">//无限等待</span></span><br><span class="line">                            <span class="comment">//obj.wait(5000); //计时等待, 5秒 时间到，自动醒来</span></span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">"=== 继续执行"</span>);</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">"=== 从waiting状态醒来，获取到锁对象，继续执行了"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"等待线程"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//name:唤醒线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//while (true)&#123;   //每隔3秒 唤醒一次</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"‐‐‐‐‐ 等待3秒钟"</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"‐‐‐‐‐ 获取到锁对象, 调用notify方法，释放锁对象"</span>);</span><br><span class="line">                    obj.notify();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">        &#125;, <span class="string">"唤醒线程"</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过上述案例我们会发现，一个调用了某个对象的 Object.wait 方法的线程会等待另一个线程调用此对象的Object.notify()方法 或 Object.notifyAll()方法。</p><p>其实waiting状态并不是一个线程的操作，它体现的是多个线程间的通信，可以理解为多个线程之间的协作关系，多个线程会争取锁，同时相互之间又存在协作关系。就好比在公司里你和你的同事们，你们可能存在晋升时的竞争，但更多时候你们更多是一起合作以完成某些任务。</p><p>当多个线程协作时，比如A，B线程，如果A线程在Runnable（可运行）状态中调用了wait()方法那么A线程就进入了Waiting（无限等待）状态，同时失去了同步锁。假如这个时候B线程获取到了同步锁，在运行状态中调用了notify()方法，那么就会将无限等待的A线程唤醒。注意是唤醒，如果获取到锁对象，那么A线程唤醒后就进入Runnable（可运行）状态；如果没有获取锁对象，那么就进入到Blocked（锁阻塞状态）。</p><p><strong>执行过程</strong><br><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dxc03/waiting.png" alt></p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dxc03/others.png" alt></p><p>一条有意思的tips:<br>我们在翻阅API的时候会发现Timed Waiting（计时等待） 与 Waiting（无限等待） 状态联系还是很紧密的，比如Waiting（无限等待） 状态中wait方法是空参的，而timed waiting（计时等待） 中wait方法是带参的。这种带参的方法，其实是一种倒计时操作，相当于我们生活中的小闹钟，我们设定好时间，到时通知，可是如果提前得到（唤醒）通知，那么设定好时间在通知也就显得多此一举了，那么这种设计方案其实是一举两得。如果没有得到（唤醒）通知，那么线程就处于Timed Waiting状态,直到倒计时完毕自动醒来；如果在倒计时期间得到（唤醒）通知，那么线程从Timed Waiting状态立刻唤醒。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1562101806-6a5f9ec69f41?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="多线程" scheme="https://lijinhongpassion.github.io/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="多线程" scheme="https://lijinhongpassion.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java-Thread02之线程安全</title>
    <link href="https://lijinhongpassion.github.io/codeant/dxc02.html"/>
    <id>https://lijinhongpassion.github.io/codeant/dxc02.html</id>
    <published>2019-10-12T07:54:42.000Z</published>
    <updated>2019-10-12T07:59:41.071Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1570760295437-3627311f8fbe?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1046&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述-线程安全"><a href="#简述-线程安全" class="headerlink" title="简述 - 线程安全"></a>简述 - 线程安全</h2><p>demo：<a href="https://github.com/LiJinHongPassion/ThreadTest" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/ThreadTest</a></p><p><strong>问题</strong><br>如果有多个线程在同时运行，而这些线程可能会同时运行这段代码。程序每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。我们通过一个案例，演示线程的安全问题：<br>电影院要卖票，我们模拟电影院的卖票过程。假设要播放的电影是 “葫芦娃大战奥特曼”，本次电影的座位共100个(本场电影只能卖100张票)。我们来模拟电影院的售票窗口，实现多个窗口同时卖 “葫芦娃大战奥特曼”这场电影票(多个窗口一起卖这100张票)需要窗口，采用线程对象来模拟；需要票，Runnable接口子类来模拟<br>模拟票：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 执行卖票操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//每个窗口卖票的操作</span></span><br><span class="line">        <span class="comment">//窗口 永远开启</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;<span class="comment">//有票 可以卖</span></span><br><span class="line">                <span class="comment">//出票操作</span></span><br><span class="line">                <span class="comment">//使用sleep模拟一下出票时间</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto‐generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//获取当前线程对象的名字</span></span><br><span class="line">                String name = Thread.currentThread().getName();</span><br><span class="line">                System.out.println(name + <span class="string">"正在卖:"</span> + ticket‐‐);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;    </span><br><span class="line">        <span class="comment">//创建线程任务对象        </span></span><br><span class="line">        Ticket ticket = <span class="keyword">new</span> Ticket();        </span><br><span class="line">        <span class="comment">//创建三个窗口对象        </span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(ticket, <span class="string">"窗口1"</span>);        </span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(ticket, <span class="string">"窗口2"</span>);        </span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(ticket, <span class="string">"窗口3"</span>);        </span><br><span class="line">               </span><br><span class="line">        <span class="comment">//同时卖票        </span></span><br><span class="line">        t1.start();        </span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();        </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果中有一部分这样现象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">窗口3正在卖:5</span><br><span class="line">窗口3正在卖:4</span><br><span class="line">窗口1正在卖:3</span><br><span class="line">窗口2正在卖:4</span><br><span class="line">窗口1正在卖:2</span><br><span class="line">窗口3正在卖:0</span><br><span class="line">窗口3正在卖:-1</span><br><span class="line">窗口2正在卖:1</span><br></pre></td></tr></table></figure></p><p>发现程序出现了两个问题：</p><ol><li>相同的票数,比如5这张票被卖了两回。</li><li>不存在的票，比如0票与-1票，是不存在的。<br>这种问题，几个窗口(线程)<strong>票数不同步了</strong>，这种问题称为线程不安全。线程安全问题都是由全局变量及静态变量引起的。若每个线程中对全局变量、静态变量只有读操作，而无写操作，一般来说，这个全局变量是线程安全的；若有多个线程同时执行写操作，一般都需要考虑线程同步，否则的话就可能影响线程安全。</li></ol><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><p>当我们使用多个线程访问同一资源的时候，且多个线程中对资源有写的操作，就容易出现线程安全问题。要解决上述多线程并发访问一个资源的安全性问题:也就是解决重复票与不存在票问题，Java中提供了同步机制(synchronized)来解决。<br>根据案例简述：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">窗口1线程进入操作的时候，窗口2和窗口3线程只能在外等着，窗口1操作结束，窗口1和窗口2和窗口3才有机会进入代码去执行。也就是说在某个线程修改共享资源的时候，其他线程不能修改该资源，等待修改完毕同步之后，才能去抢夺CPU资源，完成对应的操作，保证了数据的同步性，解决了线程不安全的现象。</span><br></pre></td></tr></table></figure></p><p>为了保证每个线程都能正常执行原子操作,Java引入了线程同步机制。<br>那么怎么去使用呢？有三种方式完成同步操作：</p><p><blockquote></blockquote></p><ol><li>同步代码块。</li><li>同步方法。</li><li>锁机制。<br></li></ol><h4 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h4><p>同步代码块 ： synchronized 关键字可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问。<br>格式:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步锁)&#123;</span><br><span class="line">      需要同步操作的代码</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>同步锁:<br>对象的同步锁只是一个概念,可以想象为在对象上标记了一个锁.</p><ol><li>锁对象 可以是任意类型。</li><li>多个线程对象 要使用同一把锁。<br>注意:在任何时候,最多允许一个线程拥有同步锁,谁拿到锁就进入代码块,其他的线程只能在外等着(BLOCKED)。<br>使用同步代码块解决代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;    </span><br><span class="line">    </span><br><span class="line">    Object lock = <span class="keyword">new</span> Object();    </span><br><span class="line">    <span class="comment">/*    </span></span><br><span class="line"><span class="comment">    * 执行卖票操作    </span></span><br><span class="line"><span class="comment">    */</span>    </span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="comment">//每个窗口卖票的操作         </span></span><br><span class="line">        <span class="comment">//窗口 永远开启         </span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;        </span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;            </span><br><span class="line">                <span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;<span class="comment">//有票 可以卖                </span></span><br><span class="line">                    <span class="comment">//出票操作                    </span></span><br><span class="line">                    <span class="comment">//使用sleep模拟一下出票时间                     </span></span><br><span class="line">                    <span class="keyword">try</span> &#123;                    </span><br><span class="line">                        Thread.sleep(<span class="number">50</span>);                        </span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;                    </span><br><span class="line">                        e.printStackTrace();                        </span><br><span class="line">                    &#125;                    </span><br><span class="line">                    <span class="comment">//获取当前线程对象的名字                     </span></span><br><span class="line">                    String name = Thread.currentThread().getName();                    </span><br><span class="line">                    System.out.println(name+<span class="string">"正在卖:"</span>+ticket‐‐);                    </span><br><span class="line">                &#125;                </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h4><p>使用synchronized修饰的方法,就叫做同步方法,保证A线程执行该方法的时候,其他线程只能在方法外等着。<br>格式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/*可能会产生线程安全问题的代码*/</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>同步锁是谁?<br>对于非static方法,同步锁就是this。<br>对于static方法,我们使用当前方法所在类的字节码对象(类名.class)。<br>使用同步方法代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket02</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 执行卖票操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//每个窗口卖票的操作         </span></span><br><span class="line">        <span class="comment">//窗口 永远开启         </span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            sellTicket();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 锁对象 是 谁调用这个方法 就是谁</span></span><br><span class="line"><span class="comment">     *   隐含 锁对象 就是  this</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sellTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;<span class="comment">//有票 可以卖  </span></span><br><span class="line">            <span class="comment">//出票操作</span></span><br><span class="line">            <span class="comment">//使用sleep模拟一下出票时间</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto‐generated catch block  </span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取当前线程对象的名字</span></span><br><span class="line">            String name = Thread.currentThread().getName();</span><br><span class="line">            System.out.println(name + <span class="string">"正在卖:"</span> + ticket‐‐);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Lock-锁"><a href="#Lock-锁" class="headerlink" title="Lock 锁"></a>Lock 锁</h4><p>java.util.concurrent.locks.Lock 机制提供了比synchronized代码块和synchronized方法更广泛的锁定操作,同步代码块/同步方法具有的功能Lock都有,除此之外更强大,更体现面向对象。Lock锁也称同步锁，加锁与释放锁方法化了，如下：</p><ul><li>public void lock() :加同步锁。</li><li>public void unlock() :释放同步锁。<br>使用如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket03</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 执行卖票操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//每个窗口卖票的操作         </span></span><br><span class="line">        <span class="comment">//窗口 永远开启         </span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;<span class="comment">//有票 可以卖</span></span><br><span class="line">                <span class="comment">//出票操作                 </span></span><br><span class="line">                <span class="comment">//使用sleep模拟一下出票时间                 </span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto‐generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//获取当前线程对象的名字</span></span><br><span class="line">                String name = Thread.currentThread().getName();</span><br><span class="line">                System.out.println(name + <span class="string">"正在卖:"</span> + ticket--);</span><br><span class="line">            &#125;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1570760295437-3627311f8fbe?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1046&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="多线程" scheme="https://lijinhongpassion.github.io/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="多线程" scheme="https://lijinhongpassion.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java-Thread01之创建线程</title>
    <link href="https://lijinhongpassion.github.io/codeant/dxc01.html"/>
    <id>https://lijinhongpassion.github.io/codeant/dxc01.html</id>
    <published>2019-10-12T07:50:28.000Z</published>
    <updated>2019-10-12T08:23:32.459Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1570749960335-08b0b98c26d0?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述-线程创建"><a href="#简述-线程创建" class="headerlink" title="简述 - 线程创建"></a>简述 - 线程创建</h2><p>demo：<a href="https://github.com/LiJinHongPassion/ThreadTest" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/ThreadTest</a></p><h2 id="四种创建方式分类"><a href="#四种创建方式分类" class="headerlink" title="四种创建方式分类"></a>四种创建方式分类</h2><p><strong>有返回值</strong></p><ul><li>实现callable接口</li><li></li></ul><p><strong>无返回值</strong></p><ul><li>继承 Thread 类</li><li>实现 Runnable 接口</li></ul><hr><p><strong>thread类api</strong></p><ul><li>继承 Thread 类</li><li>实现 Runnable 接口</li></ul><p><strong>线程池</strong></p><ul><li>实现callable接口</li><li></li></ul><hr><p><strong>Thread 类</strong><br>在上一天内容中我们已经可以完成最基本的线程开启，那么在我们完成操作过程中用到了 java.lang.Thread 类，API中该类中定义了有关线程的一些方法，具体如下：<br>构造方法：</p><ul><li>public Thread() :分配一个新的线程对象。</li><li>public Thread(String name) :分配一个指定名字的新的线程对象。</li><li>public Thread(Runnable target) :分配一个带有指定目标新的线程对象。</li><li>public Thread(Runnable target,String name) :分配一个带有指定目标新的线程对象并指定名字。<br>常用方法：</li><li>public String getName() :获取当前线程名称。</li><li>public void start() :导致此线程开始执行; Java虚拟机调用此线程的run方法。</li><li>public void run() :此线程要执行的任务在此处定义代码。</li><li>public static void sleep(long millis) :使当前正在执行的线程以指定的毫秒数暂停（暂时停止执行）。</li><li>public static Thread currentThread() :返回对当前正在执行的线程对象的引用。<br>翻阅API后得知创建线程的方式总共有两种，一种是继承Thread类方式，一种是实现Runnable接口方式，方式一我们上一天已经完成，接下来讲解方式二实现的方式。</li></ul><h2 id="继承-Thread-类"><a href="#继承-Thread-类" class="headerlink" title="继承 Thread 类"></a>继承 Thread 类</h2><p>Thread 类本质上是实现了 Runnable 接口的一个实例，代表一个线程的实例。启动线程的唯一方法就是通过 Thread 类的 start()实例方法。start()方法是一个 native 方法，它将启动一个新线程，并执行 run()方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyThread.run()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动</span></span><br><span class="line">MyThread myThread1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">myThread1.start();</span><br></pre></td></tr></table></figure></p><h2 id="实现-Runnable-接口"><a href="#实现-Runnable-接口" class="headerlink" title="实现 Runnable 接口"></a>实现 Runnable 接口</h2><p>如果自己的类已经 extends 另一个类，就无法直接 extends Thread，此时，可以实现一个Runnable 接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">OtherClass</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyThread.run()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动 MyThread，需要首先实例化一个 Thread，并传入自己的 MyThread 实例：</span></span><br><span class="line">MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(myThread);</span><br><span class="line">thread.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//事实上，当传入一个 Runnable target 参数给 Thread 后，Thread 的 run()方法就会调用target.run()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">        target.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="ExecutorService-、Callable-、Future-有返回值-线程"><a href="#ExecutorService-、Callable-、Future-有返回值-线程" class="headerlink" title="ExecutorService 、Callable 、Future 有返回值 线程"></a>ExecutorService 、Callable<class> 、Future 有返回值 线程</class></h2><p>有返回值的任务必须实现 Callable 接口，类似的，无返回值的任务必须 Runnable 接口。执行Callable 任务后，可以获取一个 Future 的对象，在该对象上调用 get 就可以获取到 Callable 任务返回的 Object 了，再结合线程池接口 ExecutorService 就可以实现传说中有返回结果的多线程了。</p><h2 id="Thread-和Runnable的区别"><a href="#Thread-和Runnable的区别" class="headerlink" title="Thread 和Runnable的区别"></a>Thread 和Runnable的区别</h2><p>如果一个类继承Thread，则不适合资源共享。但是如果实现了Runable接口的话，则很容易的实现资源共享。<br>总结：<br>实现Runnable接口比继承Thread类所具有的优势：</p><ol><li>适合多个相同的程序代码的线程去共享同一个资源。</li><li>可以避免java中的单继承的局限性。</li><li>增加程序的健壮性，实现解耦操作，代码可以被多个线程共享，代码和线程独立。</li><li>线程池只能放入实现<strong>Runable或Callable类</strong>线程，不能直接放入继承Thread的类。<br><blockquote>扩充：在java中，每次程序运行至少启动2个线程。一个是main线程，一个是垃圾收集线程。因为每当使用java命令执行一个类的时候，实际上都会启动一个JVM，每一个JVM其实在就是在操作系统中启动了一个进程。</blockquote><h2 id="匿名内部类方式实现线程的创建"><a href="#匿名内部类方式实现线程的创建" class="headerlink" title="匿名内部类方式实现线程的创建"></a>匿名内部类方式实现线程的创建</h2>使用线程的内匿名内部类方式，可以方便的实现每个线程执行不同的线程任务操作。<br>使用匿名内部类的方式实现Runnable接口，重新Runnable接口中的run方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoNameInnerClassThread</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;            </span><br><span class="line"><span class="comment">// new Runnable()&#123;      </span></span><br><span class="line"><span class="comment">// public void run()&#123;          </span></span><br><span class="line"><span class="comment">// for (int i = 0; i &lt; 20; i++) &#123;              </span></span><br><span class="line"><span class="comment">// System.out.println("张宇:"+i);                  </span></span><br><span class="line"><span class="comment">// &#125;              </span></span><br><span class="line"><span class="comment">// &#125;            </span></span><br><span class="line"><span class="comment">//    &#125;; //‐‐‐这个整体  相当于new MyRunnable()    </span></span><br><span class="line">        Runnable r = <span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                   System.out.println(<span class="string">"张宇:"</span>+i);  </span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">new</span> Thread(r).start();</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1570749960335-08b0b98c26d0?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="多线程" scheme="https://lijinhongpassion.github.io/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="多线程" scheme="https://lijinhongpassion.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java-Thread00之多线程知识准备</title>
    <link href="https://lijinhongpassion.github.io/codeant/dxc00.html"/>
    <id>https://lijinhongpassion.github.io/codeant/dxc00.html</id>
    <published>2019-10-12T07:30:12.000Z</published>
    <updated>2019-10-12T07:49:51.727Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1556740714-a8395b3bf30f?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>之前对多线程一直有排斥心理，每一次学一点点就放弃了，最近狠下心来从新学习，顺便做一个笔记，供大家参考一下。</p><p>demo：<a href="https://github.com/LiJinHongPassion/ThreadTest" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/ThreadTest</a></p><h2 id="后期学习目录"><a href="#后期学习目录" class="headerlink" title="后期学习目录"></a>后期学习目录</h2><p>thread01：<a href="https://lijinhongpassion.github.io/codeant/dxc01.html">创建线程</a><br>thread02：<a href="https://lijinhongpassion.github.io/codeant/dxc02.html">线程安全（同步问题）</a><br>thread03：<a href="https://lijinhongpassion.github.io/codeant/dxc03.html">线程状态</a><br>thread04：<a href="https://lijinhongpassion.github.io/codeant/dxc04.html">四种线程池</a><br>thread05：<a href="https://lijinhongpassion.github.io/codeant/dxc05.html">自定义线程池</a></p><h2 id="提前了解"><a href="#提前了解" class="headerlink" title="提前了解"></a>提前了解</h2><h4 id="1-并发与并行"><a href="#1-并发与并行" class="headerlink" title="1 并发与并行"></a>1 并发与并行</h4><ul><li><strong>并发</strong>：指两个或多个事件在<strong>同一个时间段内</strong>发生。</li><li><strong>并行</strong>：指两个或多个事件在<strong>同一时刻</strong>发生（同时发生）。</li></ul><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dxc00/并行与并发.bmp" alt></p><p>在操作系统中，安装了多个程序，<strong>并发</strong>指的是在一段时间内宏观上有多个程序同时运行，这在单 CPU 系统中，每一时刻只能有一道程序执行，即微观上这些程序是分时的交替运行，只不过是给人的感觉是同时运行，那是因为分时交替运行的时间是非常短的。</p><p>而在多个 CPU 系统中，则<strong>这些可以并发执行的程序便可以分配到多个处理器上（CPU），实现多任务并行执行</strong>，即利用每个处理器来处理一个可以并发执行的程序，这样多个程序便可以同时执行。目前电脑市场上说的多核 CPU，便是多核处理器，核 越多，并行处理的程序越多，能大大的提高电脑运行的效率。</p><blockquote><p>注意：单核处理器的计算机肯定是不能并行的处理多个任务的，只能是多个任务在单个CPU上并发运行。同理,线程也是一样的，从宏观角度上理解线程是并行运行的，但是从微观角度上分析却是串行运行的，即一个线程一个线程的去运行，当系统只有一个CPU时，线程会以某种顺序执行多个线程，我们把这种情况称之为线程调度。</p></blockquote><h4 id="2-线程与进程"><a href="#2-线程与进程" class="headerlink" title="2 线程与进程"></a>2 线程与进程</h4><ul><li><p><strong>进程</strong>：是指一个内存中运行的应用程序，每个进程都有一个独立的内存空间，一个应用程序可以同时运行多个进程；进程也是程序的一次执行过程，是系统运行程序的基本单位；系统运行一个程序即是一个进程从创建、运行到消亡的过程。</p></li><li><p><strong>线程</strong>：线程是进程中的一个执行单元，负责当前进程中程序的执行，一个进程中至少有一个线程。一个进程中是可以有多个线程的，这个应用程序也可以称之为多线程程序。 </p><p>简而言之：一个程序运行后至少有一个进程，一个进程中可以包含多个线程 </p></li></ul><p>我们可以再电脑底部任务栏，右键—–&gt;打开任务管理器,可以查看当前任务的进程：</p><p><strong>进程</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dxc00/进程概念.png" alt></p><p><strong>线程</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dxc00/线程概念.png" alt></p><p><strong>线程调度:</strong></p><ul><li><p>分时调度</p><p>所有线程轮流使用 CPU 的使用权，平均分配每个线程占用 CPU 的时间。</p></li><li><p>抢占式调度</p><p>优先让优先级高的线程使用 CPU，如果线程的优先级相同，那么会随机选择一个(线程随机性)，Java使用的为抢占式调度。</p><ul><li>设置线程的优先级</li></ul><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dxc00/设置线程优先级.bmp" alt="设置线程优先级"></p><ul><li><p>抢占式调度详解</p><p>大部分操作系统都支持多进程并发运行，现在的操作系统几乎都支持同时运行多个程序。比如：现在我们上课一边使用编辑器，一边使用录屏软件，同时还开着画图板，dos窗口等软件。此时，这些程序是在同时运行，”感觉这些软件好像在同一时刻运行着“。</p><p>实际上，CPU(中央处理器)使用抢占式调度模式在多个线程间进行着高速的切换。对于CPU的一个核而言，某个时刻，只能执行一个线程，而 CPU的在多个线程间切换速度相对我们的感觉要快，看上去就是在同一时刻运行。<br>其实，多线程程序并不能提高程序的运行速度，但能够提高程序运行效率，让CPU的使用率更高。</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dxc00/抢占式调度.bmp" alt="抢占式调度"></p></li></ul></li></ul><h4 id="3-同步和异步"><a href="#3-同步和异步" class="headerlink" title="3 同步和异步"></a>3 同步和异步</h4><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dxc00/sync.png" alt="抢占式调度"></p><h4 id="4-同步锁和死锁"><a href="#4-同步锁和死锁" class="headerlink" title="4 同步锁和死锁"></a>4 同步锁和死锁</h4><p><strong>同步锁</strong><br>当多个线程同时访问同一个数据时，很容易出现问题。为了避免这种情况出现，我们要保证线程同步互斥，就是指并发执行的多个线程，在同一时间内只允许一个线程访问共享数据。 Java 中可以使用 synchronized 关键字来取得一个对象的同步锁。</p><p><strong>死锁</strong><br>何为死锁，就是多个线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>学习文档\面试\4 JAVA.pdf中的多线程部分<br>学习文档\多线程\黑马程序员-异常 + 多线程基础中的多线程部分</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1556740714-a8395b3bf30f?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="多线程" scheme="https://lijinhongpassion.github.io/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="多线程" scheme="https://lijinhongpassion.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java-SSM基础框架搭建（内含视频教学）</title>
    <link href="https://lijinhongpassion.github.io/codeant/dle7.html"/>
    <id>https://lijinhongpassion.github.io/codeant/dle7.html</id>
    <published>2019-10-02T00:29:27.000Z</published>
    <updated>2019-10-02T04:07:45.862Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1569916616603-cf060bff0cf5?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=992&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><p>##简述</p><p>今天主要讲诉一下ssm框架的搭建过程，由于springboot的广泛使用，很多人都忘记了怎么搭建ssm项目，这里做一个温习。</p><p><strong>demo地址：</strong><a href="https://github.com/LiJinHongPassion/ssmdemo2" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/ssmdemo2</a></p><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><ul><li>温习ssm框架</li><li>学习ssm框架，从而加深对springboot项目的灵活使用</li></ul><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><table><thead><tr><th>名称</th><th>版本</th></tr></thead><tbody><tr><td>idea</td><td>2019</td></tr><tr><td>jdk</td><td>1.8</td></tr><tr><td>tomcat</td><td>8.5</td></tr><tr><td>maven</td><td>3.5</td></tr><tr><td>mysql</td><td>5.7</td></tr></tbody></table><h4 id="spring的请求方式"><a href="#spring的请求方式" class="headerlink" title="spring的请求方式"></a>spring的请求方式</h4><p>首先我们需要知道一个http请求是怎么经过spring的处理后得到响应的。</p><p><img src="https://img-blog.csdn.net/20161229134539820?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemd6Y3p6dw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p>了解了请求的处理过程，下面开始搭建项目。</p><p>因为idea需要初始化项目索引，所以会导致很卡，会很吃内存。</p><p>配置ssm主要涉及到下面几个配置文件：</p><ul><li>spring-mvc.xml  mvc配置</li><li>spring-mybatis.xml  整合mybatis</li><li>jdbc.properties  数据库连接池的属性配置</li><li>web.xml</li></ul><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><p>这里项目结构不对，需要重新添加需要的文件夹，完成后如下：</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dle7/1.png" alt></p><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><p>修改pom.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring版本号 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mybatis版本号 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.2.6<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- spring核心包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-oxm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mybatis核心包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mybatis/spring包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入java ee jar 包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaee-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入Mysql数据库链接jar包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入dbcp的jar包，用来在applicationContext.xml中配置数据库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 映入JSON --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.jackson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-mapper-asl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上传组件包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="spring-mvc-xml配置"><a href="#spring-mvc-xml配置" class="headerlink" title="spring-mvc.xml配置"></a>spring-mvc.xml配置</h4><p>添加依赖后，开始配置项目，先配置mvc</p><p>主要配置下面几个方面：</p><ul><li>静态资源访问权限</li><li>开启注解</li><li>视图解析</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context/spring-context-3.1.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--静态资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/pic/**"</span> <span class="attr">location</span>=<span class="string">"/pic/"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.cqut.li.test_ssm.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--避免IE执行AJAX时，返回JSON出现下载文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mappingJacksonHttpMessageConverter"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"mappingJacksonHttpMessageConverter"</span>/&gt;</span>    <span class="comment">&lt;!-- JSON转换器 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义跳转的文件的前后缀 ，视图模式配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 默认编码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 文件大小最大值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"10485760000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 内存中的最大值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxInMemorySize"</span> <span class="attr">value</span>=<span class="string">"40960"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="spring-mybatis-xml配置"><a href="#spring-mybatis-xml配置" class="headerlink" title="spring-mybatis.xml配置"></a>spring-mybatis.xml配置</h4><p>该配置文件主要是用于整合mybatis，主要配置以下内容：</p><ul><li>数据库连接池</li><li>事务</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context/spring-context-3.1.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描，扫描标注了service、repository等注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.cqut.li.test_ssm.*"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"propertyConfigurer"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 初始化连接大小 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;initialSize&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接池最大数量 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"$&#123;maxActive&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接池最大空闲 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;maxIdle&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接池最小空闲 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;minIdle&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 获取连接最大等待时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"$&#123;maxWait&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自动扫描mapping.xml文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapping/*.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.cqut.li.test_ssm.dao"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- (事务管理)transaction manager, use JtaTransactionManager for global tx --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="jdbc-properties配置"><a href="#jdbc-properties配置" class="headerlink" title="jdbc.properties配置"></a>jdbc.properties配置</h4><p>下面需要配置jdbc配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">driver=com.mysql.jdbc.Driver</span><br><span class="line">#url=jdbc:mysql://127.0.0.1:3306/laboratory?useUnicode=true&amp;characterEncoding=utf8</span><br><span class="line">#url=jdbc:mysql://superc102.vicp.cc:3307/laboratory?useUnicode=true&amp;characterEncoding=utf8</span><br><span class="line">url=jdbc\:mysql\://127.0.0.1\:3306/financialtest?useUnicode\=true&amp;characterEncoding\=utf8</span><br><span class="line">username=root</span><br><span class="line">password=root</span><br><span class="line">#定义初始连接数</span><br><span class="line">initialSize=1</span><br><span class="line">#定义最大连接数</span><br><span class="line">maxActive=20</span><br><span class="line">#定义最大空闲</span><br><span class="line">maxIdle=20</span><br><span class="line">#定义最小空闲</span><br><span class="line">minIdle=1</span><br><span class="line">#定义最大等待</span><br><span class="line">maxWait=60000</span><br><span class="line">#处理超时断开连接而没有销毁的情况</span><br><span class="line">#验证查询语句</span><br><span class="line">validationQuery=SELECT COUNT(*) FROM role</span><br><span class="line">#周期性检测-半个小时</span><br><span class="line">timeBetweenEvictionRunsMillis=1800000</span><br><span class="line">#连接空闲时间 --半个小时</span><br><span class="line">minEvictableIdleTimeMillis=1800000</span><br><span class="line">#取得对象时是否进行验证，检查对象是否有效</span><br><span class="line">testOnBorrow=true</span><br><span class="line">#返回对象时是否进行验证，检查对象是否有效</span><br><span class="line">testOnReturn=true</span><br><span class="line">#空闲时是否进行验证，检查对象是否有效</span><br><span class="line">testWhileIdle=true</span><br></pre></td></tr></table></figure><h4 id="web-xml配置"><a href="#web-xml配置" class="headerlink" title="web.xml配置"></a>web.xml配置</h4><p>主要配置以下内容：</p><ul><li>spring容器</li><li>编码过滤器</li><li>mvc分发器</li><li>spring监听器</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 加载配置文件，初始化容器 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 编码过滤器，过滤乱码 --&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>spring监听器<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 防止spring内存溢出监听器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.util.IntrospectorCleanupListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- spring mvc servlet 分发器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- DEFAULT PAGE --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="项目启动配置"><a href="#项目启动配置" class="headerlink" title="项目启动配置"></a>项目启动配置</h4><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dle7/2.png" alt></p><h2 id="项目导入-amp-测试（视频）"><a href="#项目导入-amp-测试（视频）" class="headerlink" title="项目导入&amp;测试（视频）"></a>项目导入&amp;测试（视频）</h2><div style="position: relative;margin-bottom: 30px;float: left;width: 100%; height: 0;padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=69732312&cid=120835662&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute;width: 100%;height: 100%;left: 0;top: 0;"> </iframe></div>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1569916616603-cf060bff0cf5?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=992&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="ssm" scheme="https://lijinhongpassion.github.io/tags/ssm/"/>
    
  </entry>
  
  <entry>
    <title>Java-springboot+jsp部署问题</title>
    <link href="https://lijinhongpassion.github.io/codeant/dle0.html"/>
    <id>https://lijinhongpassion.github.io/codeant/dle0.html</id>
    <published>2019-09-26T08:39:11.000Z</published>
    <updated>2019-09-27T07:41:42.068Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1556745757-8d76bdb6984b?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=966&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>今天打包项目的时候遇见一个问题，首先我的项目是基于springboot + jsp，打包的时候我发现jsp以及相关的静态资源都没有打包进jar包，所以我就百度查阅相关解决方案，这里给出一种我成功解决的方法。</p><h2 id="springboot打包结构"><a href="#springboot打包结构" class="headerlink" title="springboot打包结构"></a>springboot打包结构</h2><p>这是打包后的jar包的目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">zf-0.0.1-SNAPSHOT</span><br><span class="line">    ├─BOOT-INF//java代码</span><br><span class="line">    │  ├─classes</span><br><span class="line">    │  │  │  application.yml</span><br><span class="line">    │  │  ├─com</span><br><span class="line">    │  │  │  └─zf</span><br><span class="line">    │  │  │      └─admin</span><br><span class="line">    │  │  │          ├─comment</span><br><span class="line">    │  │  │          ├─conf</span><br><span class="line">    │  │  │          ├─controller</span><br><span class="line">    │  │  │          ├─dao</span><br><span class="line">    │  │  │          ├─pojo</span><br><span class="line">    │  │  │          ├─service</span><br><span class="line">    │  │  │          │  └─Impl </span><br><span class="line">    │  │  │          └─utils</span><br><span class="line">    │  │  │              ├─image</span><br><span class="line">    │  │  │              ├─jwt</span><br><span class="line">    │  │  │              ├─mail</span><br><span class="line">    │  │  │              ├─mybatis</span><br><span class="line">    │  │  │              └─verificationcode       </span><br><span class="line">    │  │  └─mapping</span><br><span class="line">    │  └─lib</span><br><span class="line">    │          </span><br><span class="line">    ├─META-INF//静态资源</span><br><span class="line">    │  ├─maven</span><br><span class="line">    │  │  └─com.zf.admin</span><br><span class="line">    │  │      └─zf</span><br><span class="line">    │  └─resources</span><br><span class="line">    │      ├─css</span><br><span class="line">    │      ├─fonts</span><br><span class="line">    │      ├─images</span><br><span class="line">    │      ├─js</span><br><span class="line">    │      │  ├─libs</span><br><span class="line">    │      │  └─localization</span><br><span class="line">    │      └─WEB-INF</span><br><span class="line">    │          ├─jsp</span><br><span class="line">    │          │  └─admin</span><br><span class="line">    │          └─tld</span><br><span class="line">    └─org</span><br><span class="line">        └─springframework</span><br><span class="line">            └─boot</span><br><span class="line">                └─loader</span><br><span class="line">                    ├─archive </span><br><span class="line">                    ├─data</span><br><span class="line">                    ├─jar</span><br><span class="line">                    └─util</span><br></pre></td></tr></table></figure><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dle0/1.png" alt></p><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><p>pom文件里面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        SpringBoot打包成jar在服务器上无法访问JSP页面问题--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>META-INF/resources<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--版本号一定是1.4.2--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1556745757-8d76bdb6984b?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=966&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="springboot" scheme="https://lijinhongpassion.github.io/tags/springboot/"/>
    
      <category term="jsp" scheme="https://lijinhongpassion.github.io/tags/jsp/"/>
    
  </entry>
  
  <entry>
    <title>Java-实体类中使用包装类和基本类型的区别（转载）</title>
    <link href="https://lijinhongpassion.github.io/codeant/4aff.html"/>
    <id>https://lijinhongpassion.github.io/codeant/4aff.html</id>
    <published>2019-09-20T10:59:23.000Z</published>
    <updated>2019-09-20T15:09:03.912Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1556909212-d5b604d0c90d?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=500&amp;q=60" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>最近面试的时候，面试官提的一个问题，在实体类（pojo）中是使用包装类还是基本类型？为什么？</p><p>我知道使用包装类型比较好，但是却忘记了好在哪里了。其实关于好在哪里，也不过就是需要把包装类和基本类型搞清楚。</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>首先,分析各自的优缺点：</p><h4 id="基本类型-以int类型为例子"><a href="#基本类型-以int类型为例子" class="headerlink" title="基本类型(以int类型为例子)"></a>基本类型(以int类型为例子)</h4><p><strong>优点</strong></p><ol><li><p>用于计算时效率高</p></li><li><p>不会由于常量池引起比较大小的错误(例如java integer对象判断两个数字是否相等)</p></li></ol><p><strong>缺点</strong></p><ol><li><p>当数据库中查询出结果之后封装结果集的时候，如果返回的值时null时,直接赋值给这个基本类型的字段时,会在运行时报出异常,不能将null赋给一个基本类型,而用Integer就不存在这样都的情况，这个情况暂时没有合适的避免办法.当没有默认值的情况下</p></li><li><p>当页面传来的值是只有字段没有值时或者没有传来对应字段对象时候，赋值给基本类型的值时就会抛出异常.(如：如果表单中没有对应字段存在，那么request中换取到一个为null的值)</p></li></ol><p><strong>缺点的规避方法：</strong><br>a. 设置在数据库中为该字段设置默认值。<br>b. 当用这个字段没有在表单中被提交时就会报错。</p><hr><h4 id="包装类型-Integer"><a href="#包装类型-Integer" class="headerlink" title="包装类型(Integer)"></a>包装类型(Integer)</h4><p><strong>优点</strong></p><ol><li>可以存放null,从数据库中查出值时可能会有null</li></ol><p><strong>缺点</strong></p><ol><li>不能用于两个Integer对象双等的方式来判断两个对象的值相等,会出现错误的。</li></ol><p><strong>缺点规避方法：</strong><br>a. 要用双等判断两个对象的值是否相等时,可以通过调用intValue方法来实现。</p><p>因此，综上所说，实体类采用包装类型比较好。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/78590948" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/78590948</a> 有了基本数据类型，为什么还需要包装类型</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1556909212-d5b604d0c90d?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=500&amp;amp;q=60&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java-Java版本的小爬虫demo</title>
    <link href="https://lijinhongpassion.github.io/codeant/dle2.html"/>
    <id>https://lijinhongpassion.github.io/codeant/dle2.html</id>
    <published>2019-09-03T13:24:39.000Z</published>
    <updated>2019-09-03T14:00:31.961Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1567492623339-d5dfb6325ea3?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1350&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>java版本的小爬虫，爬取的流程如下：</p><ul><li>登录Boss直聘</li><li>获取返回的cookies，以及请求头</li><li>运用http-client库模拟游览器请求，获取html，数据结构为字符串</li><li>利用jsoup库解析html</li></ul><p>完事！！！</p><p>demo地址：<a href="https://github.com/LiJinHongPassion/springboot/tree/master/springboot_crawler_demo" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/springboot/tree/master/springboot_crawler_demo</a></p><hr><h2 id="入门教程"><a href="#入门教程" class="headerlink" title="入门教程"></a>入门教程</h2><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--http请求库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.kevinsawicki<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>http-request<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--解析html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.11.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="CrawlerUtil-java"><a href="#CrawlerUtil-java" class="headerlink" title="CrawlerUtil.java"></a>CrawlerUtil.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.github.kevinsawicki.http.HttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述：Boss直聘 -- 小爬虫</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 官网github：https://github.com/kevinsawicki/http-request</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参考：https://blog.csdn.net/u011910290/article/details/75364917</span></span><br><span class="line"><span class="comment"> *      https://blog.csdn.net/zhanglei500038/article/details/74858395    jsoup</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 乱码问题：https://blog.csdn.net/mycar001/article/details/78391028</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/9/3-17,53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrawlerUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述: 获取整个html</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> LJH-1755497577 2019/9/3 19:02</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getData</span><span class="params">(String url)</span></span>&#123;</span><br><span class="line">        <span class="comment">//设置请求头</span></span><br><span class="line">        Map&lt;String,String&gt; headers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        headers.put(<span class="string">"accept"</span>, <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3"</span>);</span><br><span class="line">        <span class="comment">//解决乱码</span></span><br><span class="line">        <span class="comment">//headers.put("accept-encoding", "gzip, deflate, br");</span></span><br><span class="line">        headers.put(<span class="string">"accept-language"</span>, <span class="string">"zh-CN,zh;q=0.9"</span>);</span><br><span class="line">        headers.put(<span class="string">"cookie"</span>, <span class="string">"lastCity=101040100; _uab_collina=155989425705358786428292; _bl_uid=ejj1ezbR49w72poUUr06qa8iy55n; __c=1567474454; __g=-; Hm_lvt_194df3105ad7148dcf2b98a91b5e727a=1565361209,1566378390,1566981114,1567474455; __l=l=%2Fwww.zhipin.com%2F&amp;r=https%3A%2F%2Fwww.baidu.com%2Fs%3Fie%3DUTF-8%26wd%3Dboss%25E7%259B%25B4%25E8%2581%2598&amp;friend_source=0&amp;friend_source=0; __zp_stoken__=c688fL0GhqXlN%2FYY%2F2ydR1HFd8NS%2B8oaaNAjTZSdiGKLVMq%2BPk1q%2FaMCVkpzfOn1kk38E6u8nCHUaLXH2leUN3NrhA%3D%3D; __a=50395184.1559894257.1566981114.1567474454.68.6.4.68; Hm_lpvt_194df3105ad7148dcf2b98a91b5e727a=1567475125"</span>);</span><br><span class="line">        headers.put(<span class="string">"referer"</span>, <span class="string">"https,//www.zhipin.com/c101040100-p100101/?page=2&amp;ka=page-2"</span>);</span><br><span class="line">        headers.put(<span class="string">"upgrade-insecure-requests"</span>, <span class="string">"1"</span>);</span><br><span class="line">        headers.put(<span class="string">"user-agent"</span>, <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.75 Safari/537.36"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//get方法与之类似</span></span><br><span class="line">        String content = HttpRequest.post(url)</span><br><span class="line">                <span class="comment">//设置请求头</span></span><br><span class="line">                .headers(headers)</span><br><span class="line">                .body();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(content);</span></span><br><span class="line">         <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述: 解析html</span></span><br><span class="line"><span class="comment">     *      利用jsoup工具解析html</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> LJH-1755497577 2019/9/3 19:58</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">analysisData</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Document doc = Jsoup.parse(data);</span><br><span class="line">        Elements rows = doc.select(<span class="string">"div[class=job-list]"</span>).get(<span class="number">0</span>).select(<span class="string">"ul"</span>);</span><br><span class="line">        <span class="keyword">if</span> (rows.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"没有结果"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; rows.get(<span class="number">0</span>).select(<span class="string">"li"</span>).size(); i++)&#123;</span><br><span class="line">                String addr = rows.get(<span class="number">0</span>).select(<span class="string">"li"</span>).get(i).select(<span class="string">"div"</span>).get(<span class="number">0</span>).select(<span class="string">"div"</span>).get(<span class="number">0</span>)</span><br><span class="line">                        .select(<span class="string">"p"</span>).get(<span class="number">0</span>).text();</span><br><span class="line">                String jobName = rows.get(<span class="number">0</span>).select(<span class="string">"li"</span>).get(i).select(<span class="string">"div"</span>).get(<span class="number">0</span>).select(<span class="string">"div"</span>).get(<span class="number">0</span>)</span><br><span class="line">                        .select(<span class="string">"h3"</span>).get(<span class="number">0</span>).select(<span class="string">"a"</span>).get(<span class="number">0</span>).select(<span class="string">"div"</span>).get(<span class="number">0</span>).text();</span><br><span class="line">                String jobMoney = rows.get(<span class="number">0</span>).select(<span class="string">"li"</span>).get(i).select(<span class="string">"div"</span>).get(<span class="number">0</span>).select(<span class="string">"div"</span>).get(<span class="number">0</span>)</span><br><span class="line">                        .select(<span class="string">"h3"</span>).get(<span class="number">0</span>).select(<span class="string">"a"</span>).get(<span class="number">0</span>).select(<span class="string">"span"</span>).get(<span class="number">0</span>).text();</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"--------------------------- 查询结果 ---------------------------"</span>);</span><br><span class="line">                System.out.println(<span class="string">"工作名:"</span> + jobName);</span><br><span class="line">                System.out.println(<span class="string">"工薪:"</span> + jobMoney);</span><br><span class="line">                System.out.println(<span class="string">"地址:"</span> + addr);</span><br><span class="line">                System.out.println(<span class="string">"-----------------------------------------------------------------"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        getData("https://www.zhipin.com/c101040100-p100101/?page=2&amp;ka=page-2");</span></span><br><span class="line">        analysisData(getData(<span class="string">"https://www.zhipin.com/c101040100-p100101/?page=2&amp;ka=page-2"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="方法：getData-String-url"><a href="#方法：getData-String-url" class="headerlink" title="方法：getData(String url)"></a>方法：getData(String url)</h6><p>在获取html的时候，因为请求头设置的原因</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'accept-encoding':'gzip, deflate, br'</span><br></pre></td></tr></table></figure><p>浏览器对于从服务器中返回的对应的gzip压缩的网页，会自动解压缩，所以，其request的时候，添加对应的头，表明自己接受压缩后的数据。</p><p>而此代码中，如果也添加此头信息，结果就是，返回的压缩后的数据，没有解码，而将压缩后的数据当做普通的html文本来处理，当前显示出来的内容，是乱码了。</p><h6 id="方法：analysisData-String-data"><a href="#方法：analysisData-String-data" class="headerlink" title="方法：analysisData(String data)"></a>方法：analysisData(String data)</h6><p>解析html用的是jsoup，根据指定元素名获取指定节点</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dle2/1.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Elements rows = doc.select(<span class="string">"div[class=job-list]"</span>).get(<span class="number">0</span>).select(<span class="string">"ul"</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><ul><li>httpclient官网github：<a href="https://github.com/kevinsawicki/http-request" target="_blank" rel="noopener">https://github.com/kevinsawicki/http-request</a></li><li>httpclient参考：<a href="https://blog.csdn.net/u011910290/article/details/75364917" target="_blank" rel="noopener">https://blog.csdn.net/u011910290/article/details/75364917</a></li><li>jsoup使用：<a href="https://blog.csdn.net/zhanglei500038/article/details/74858395" target="_blank" rel="noopener">https://blog.csdn.net/zhanglei500038/article/details/74858395</a>    </li><li>乱码问题：<a href="https://blog.csdn.net/mycar001/article/details/78391028" target="_blank" rel="noopener">https://blog.csdn.net/mycar001/article/details/78391028</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1567492623339-d5dfb6325ea3?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1350&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="爬虫" scheme="https://lijinhongpassion.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python-爬虫小demo（Boss直聘）</title>
    <link href="https://lijinhongpassion.github.io/codeant/b32c.html"/>
    <id>https://lijinhongpassion.github.io/codeant/b32c.html</id>
    <published>2019-09-03T04:17:52.000Z</published>
    <updated>2019-09-03T05:01:29.304Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1562886812-41775a01195d?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1189&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="## 简述"></a>## 简述</h2><p>很早以前都知道Python爬虫的强大，但是一直没有尝试过，今天就来尝试一下写个Python的小爬虫</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h4 id="python环境"><a href="#python环境" class="headerlink" title="python环境"></a>python环境</h4><p>先介绍以下python的安装教程吧，我习惯于在windows上开发，所以讲一下windows和liunx的环境安装，针对Mac OS系统的安装自行百度。</p><h5 id="windows-10"><a href="#windows-10" class="headerlink" title="windows 10"></a>windows 10</h5><p>进入官网，<a href="https://www.python.org/downloads/windows/；选择稳定版本的windowsx86-64" target="_blank" rel="noopener">https://www.python.org/downloads/windows/；选择稳定版本的windowsx86-64</a> executable installer；下载打开后，<strong>选择自动配置环境变量</strong></p><p>over，就是这么简单（这相当于是java中的jdk安装）</p><h5 id="centos-7-x"><a href="#centos-7-x" class="headerlink" title="centos 7.x"></a>centos 7.x</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> py环境安装</span><br><span class="line"><span class="meta">#</span> 执行项目使用python3 xxx.py</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 安装依赖库（因为没有这些依赖库可能在源代码构件安装时因为缺失底层依赖库而失败）。</span><br><span class="line">yum -y install wget gcc zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wget https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz</span><br><span class="line">tar -xvf Python-3.7.4.tar</span><br><span class="line"></span><br><span class="line">cd Python-3.7.4</span><br><span class="line">./configure --prefix=/usr/local/python37 --enable-optimizations</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 环境变量</span><br><span class="line">cd ~</span><br><span class="line"><span class="meta">cat&gt;</span>.bash_profile&lt;&lt;EOF</span><br><span class="line">export PATH=$PATH:/usr/local/python37/bin</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">source .bash_profile</span><br><span class="line"></span><br><span class="line">echo "---------------测试------------------"</span><br><span class="line">python3 --version</span><br></pre></td></tr></table></figure><hr><h4 id="python编辑器"><a href="#python编辑器" class="headerlink" title="python编辑器"></a>python编辑器</h4><p>等同于Java开发工具idea，idea也可以用于python开发，这里我是用的是pycharm，安装可参考可参考：<a href="https://www.runoob.com/w3cnote/pycharm-windows-install.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/pycharm-windows-install.html</a></p><hr><h2 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h2><p>直聘网爬虫思路：</p><ul><li>获取cookie</li><li>模拟浏览器请求（request库）</li><li>抓取数据（XPath）</li><li>分析数据</li><li>保存数据</li></ul><p>main.py</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 直聘网招聘信息爬虫demo</span><br><span class="line"></span><br><span class="line">from lxml import etree</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">import Info</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> url = "https://www.zhipin.com/c101040100-p100101/?ka=sel-city-101040100"  # 接口地址</span><br><span class="line">url = "https://www.zhipin.com/c101040100-p100101/"  # 接口地址</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 消息头数据</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3',</span><br><span class="line">    'accept-encoding': 'gzip, deflate, br',</span><br><span class="line">    'accept-language': 'zh-CN,zh;q=0.9',</span><br><span class="line">    'cookie': 'lastCity=101040100; _uab_collina=155989425705358786428292; _bl_uid=ejj1ezbR49w72poUUr06qa8iy55n; __c=1567474454; __g=-; Hm_lvt_194df3105ad7148dcf2b98a91b5e727a=1565361209,1566378390,1566981114,1567474455; __l=l=%2Fwww.zhipin.com%2F&amp;r=https%3A%2F%2Fwww.baidu.com%2Fs%3Fie%3DUTF-8%26wd%3Dboss%25E7%259B%25B4%25E8%2581%2598&amp;friend_source=0&amp;friend_source=0; __zp_stoken__=c688fL0GhqXlN%2FYY%2F2ydR1HFd8NS%2B8oaaNAjTZSdiGKLVMq%2BPk1q%2FaMCVkpzfOn1kk38E6u8nCHUaLXH2leUN3NrhA%3D%3D; __a=50395184.1559894257.1566981114.1567474454.68.6.4.68; Hm_lpvt_194df3105ad7148dcf2b98a91b5e727a=1567475125',</span><br><span class="line">    # 'referer': 'https://www.zhipin.com/c101040100-p100101/',</span><br><span class="line">    'referer': 'https://www.zhipin.com/c101040100-p100101/?page=2&amp;ka=page-2',</span><br><span class="line">    'upgrade-insecure-requests': '1',</span><br><span class="line">    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.75 Safari/537.36'</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 获取html</span><br><span class="line">def getData(data_url, data_headers, data_payload):</span><br><span class="line">    r = requests.get(data_url, json=data_payload, headers=data_headers, verify=False)</span><br><span class="line">    s = str(r.content, 'utf8')</span><br><span class="line">    # print(s)</span><br><span class="line">    return s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 分析数据</span><br><span class="line"><span class="meta">#</span> 教程:https://www.cnblogs.com/lei0213/p/7506130.html</span><br><span class="line">def analysisData(data='', xpath_str_f='', xpath_str_b=''):</span><br><span class="line">    html = etree.HTML(data)</span><br><span class="line">    values = []</span><br><span class="line">    try:</span><br><span class="line">        for n in range(1, 20):</span><br><span class="line">            x = xpath_str_f + str(n) + xpath_str_b</span><br><span class="line">            if x == '' or x.__len__() == 0 :</span><br><span class="line">                break</span><br><span class="line">            values.append(html.xpath(x))</span><br><span class="line">    except Exception:</span><br><span class="line">        pass</span><br><span class="line">    else:</span><br><span class="line">        pass</span><br><span class="line">    # for i in values:</span><br><span class="line">    #     print(i[0].text)</span><br><span class="line">    return values</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 爬取一页的数据并打印</span><br><span class="line">def getOnePage(page_url):</span><br><span class="line">    r = getData(page_url, headers, payload)</span><br><span class="line">    names = analysisData(r, '//*[@id="main"]/div/div[2]/ul/li[', ']/div/div[1]/h3/a/div[1]')</span><br><span class="line">    moneys = analysisData(r, '//*[@id="main"]/div/div[2]/ul/li[', ']/div/div[1]/h3/a/span')</span><br><span class="line">    companyNames = analysisData(r, '//*[@id="main"]/div/div[2]/ul/li[', ']/div/div[2]/div/h3/a')</span><br><span class="line">    addrs = analysisData(r, '//*[@id="main"]/div/div[2]/ul/li[', ']/div/div[1]/p')</span><br><span class="line">    companyStatuss = analysisData(r, '//*[@id="main"]/div/div[2]/ul/li[', ']/div/div[2]/div/p')</span><br><span class="line"></span><br><span class="line">    infos = ''</span><br><span class="line">    print(names.__len__())</span><br><span class="line">    for i in range(1, names.__len__()):</span><br><span class="line">        info = Info.Info(names[i][0].text,</span><br><span class="line">                         moneys[i][0].text,</span><br><span class="line">                         companyNames[i][0].text,</span><br><span class="line">                         addrs[i][0].text,</span><br><span class="line">                         companyStatuss[i][0].text,)</span><br><span class="line"></span><br><span class="line">        if info == 'None' or info == None:</span><br><span class="line">            continue</span><br><span class="line">        # infos = infos + info.tostring()</span><br><span class="line">        print(info.tostring())</span><br><span class="line">    return infos</span><br><span class="line"></span><br><span class="line">for i in range(2, 4):</span><br><span class="line">    temp = url + '?page=' + str(i) + '&amp;ka=page-' + str(i)</span><br><span class="line">    print(temp)</span><br><span class="line">    getOnePage(temp)</span><br></pre></td></tr></table></figure><p>Info.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span>:</span></span><br><span class="line">    name = <span class="string">''</span></span><br><span class="line">    money = <span class="string">''</span></span><br><span class="line">    companyName = <span class="string">''</span></span><br><span class="line">    addr = <span class="string">''</span></span><br><span class="line">    companyStatus = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, money, companyName, addr, companyStatus)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.money = money</span><br><span class="line">        self.companyName = companyName</span><br><span class="line">        self.companyStatus = companyStatus</span><br><span class="line">        self.addr = addr</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tostring</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"name："</span> + self.name</span><br><span class="line">              + <span class="string">"\tmoney："</span> + self.money</span><br><span class="line">              + <span class="string">"\tcompanyName："</span> + self.companyName</span><br><span class="line">              + <span class="string">"\taddr："</span> + self.addr</span><br><span class="line">              + <span class="string">"\tcompanyStatus："</span> + self.companyStatus + <span class="string">"\n"</span></span><br><span class="line">              )</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1562886812-41775a01195d?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1189&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://lijinhongpassion.github.io/categories/python/"/>
    
    
      <category term="爬虫" scheme="https://lijinhongpassion.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="python" scheme="https://lijinhongpassion.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Java-由库存问题引发的思考</title>
    <link href="https://lijinhongpassion.github.io/codeant/dle3.html"/>
    <id>https://lijinhongpassion.github.io/codeant/dle3.html</id>
    <published>2019-08-30T10:57:04.000Z</published>
    <updated>2019-10-02T00:25:37.342Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1567060896516-630537369350?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><p><strong>QQ：1755497577（备注：博客）</strong></p><p><strong>B站：code_ant（java相关培训视频）</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/springboot/master/wechat.png" alt="微信搜索公众号：CodeAnt"></p><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>最近自己在写一个小的电商网站，由此想到一个问题，淘宝是如何解决双十一高并发的情况下商品不超买；我的解决方案就是加锁。加锁方式可以从两个方面出发：</p><ul><li>数据库层面加锁</li><li>应用程序加锁</li></ul><hr><h2 id="数据库层面加锁"><a href="#数据库层面加锁" class="headerlink" title="数据库层面加锁"></a>数据库层面加锁</h2><p>我相信大家都对悲观锁和乐观锁的思想有所了解，在下面我也会花一点时间来参数悲观锁和乐观锁思想；</p><h4 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h4><h6 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h6><p>假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁（共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程）。<strong>传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁</strong>。Java中synchronized和ReentrantLock等独占锁就是悲观锁思想的实现。</p><hr><h6 id="2-实现（mysql中的悲观锁实现）"><a href="#2-实现（mysql中的悲观锁实现）" class="headerlink" title="2. 实现（mysql中的悲观锁实现）"></a>2. 实现（mysql中的悲观锁实现）</h6><p>我会从MySQL的innodb引擎的表级锁和行级锁来解释悲观锁</p><p><em>innodb引擎的表级锁和行级锁是引擎自带锁，不需要我们手动实现</em></p><p><strong>行锁</strong></p><ul><li><p>读锁：读锁是共享的，多个客户可以同时读取同一个资源，但不允许其他客户修改。</p></li><li><p>写锁：写锁是排他的，写锁会阻塞其他的写锁和读锁。</p></li><li><p>注意：InnoDB只有通过索引条件检索数据才使用行级锁，否则，InnoDB将使用表锁</p></li></ul><p><strong>表锁</strong></p><ul><li><p>读读不阻塞：当前用户在读数据，其他的用户也在读数据，不会加锁</p></li><li><p>读写阻塞：当前用户在读数据，其他的用户不能修改当前用户读的数据，会加锁！</p></li><li><p>写写阻塞：当前用户在修改数据，其他的用户不能修改当前用户正在修改的数据，会加锁！</p></li></ul><p><strong>库存问题</strong></p><p>mysql的innodb引擎自带行锁与表锁，所以当多个线程同时下单的时候，其实是串行的，也就是一个线程执行完后再执行下一个线程，所以我们只需要从业务逻辑上判断只要商品的库存量大于0，我们就能够下单</p><p>update t_product set num = num -1 where product_id=? and num &gt; 0</p><hr><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><h6 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1. 概念"></a>1. 概念</h6><p>假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用<strong>版本号机制和CAS算法</strong>实现。乐观锁适用于多读的应用类型，这样可以提高吞吐量，像数据库提供的类似于write_condition机制，其实都是提供的乐观锁。在Java中java.util.concurrent.atomic包下面的原子变量类就是使用了乐观锁的一种实现方式CAS实现的。</p><hr><h6 id="2-实现"><a href="#2-实现" class="headerlink" title="2. 实现"></a>2. 实现</h6><p><strong>版本号机制</strong></p><p>一般是在数据表中加上一个数据版本号version字段，表示数据被修改的次数，当数据被修改时，version值会加一。当线程A要更新数据值时，在读取数据的同时也会读取version值，在提交更新时，若刚才读取到的version值为当前数据库中的version值相等时才更新，否则重试更新操作，直到更新成功。</p><p><strong>CAS算法</strong></p><p>compare and swap（比较与交换），是一种有名的无锁算法。无锁编程，即不使用锁的情况下实现多线程之间的变量同步，也就是在没有线程被阻塞的情况下实现变量的同步，所以也叫非阻塞同步（Non-blocking Synchronization）。CAS算法涉及到三个操作数</p><ul><li><p>需要读写的内存值 V</p></li><li><p>进行比较的值 A</p></li><li><p>拟写入的新值 B</p></li></ul><p>当且仅当 V 的值等于 A时，CAS通过原子方式用新值B来更新V的值，否则不会执行任何操作（比较和替换是一个原子操作）。一般情况下是一个自旋操作，即不断的重试。</p><hr><h6 id="3-缺点"><a href="#3-缺点" class="headerlink" title="3. 缺点"></a>3. 缺点</h6><p><strong>ABA问题</strong></p><p>如果一个变量V初次读取的时候是A值，并且在准备赋值的时候检查到它仍然是A值，那我们就能说明它的值没有被其他线程修改过了吗？很明显是不能的，因为在这段时间它的值可能被改为其他值，然后又改回A，那CAS操作就会误认为它从来没有被修改过。这个问题被称为CAS操作的 </p><hr><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>从上面对两种锁的介绍，我们知道两种锁各有优缺点，不可认为一种好于另一种，<strong>像乐观锁适用于写比较少的情况下（多读场景）</strong>，即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。但如果是多写的情况，一般会经常产生冲突，这就会导致上层应用会不断的进行retry，这样反倒是降低了性能，所以一般<strong>多写的场景下用悲观锁就比较合适</strong>。</p><hr><h2 id="应用程序加锁"><a href="#应用程序加锁" class="headerlink" title="应用程序加锁"></a>应用程序加锁</h2><p>关于此方面还有待学习，根据我自己的想法，我大致理清了一个思路</p><p>对于大型的秒杀系统，有多个mysql数据库集群和tomcat集群；</p><p>秒杀商品时，线程瞬间并发量高，数据库的IO操作十分耗时，系统吞吐量不高，无法保证多个mysql中的数据一致性；</p><p>解决思路：</p><ol><li>提前将秒杀商品库存、商品信息等存放于redis（因为mysql的IO耗时过长，redis的IO操作更为省时）</li><li>首先可以通过nginx限流（限定请求线程数）</li><li>在tomcat服务器上将所有秒杀线程集中存放在一处服务器进行排队（队列）， 将线程有序化</li></ol><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://zhuanlan.zhihu.com/p/40211594" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/40211594</a> 面试必备之乐观锁与悲观锁</p><p><a href="https://juejin.im/post/5b55b842f265da0f9e589e79#heading-11" target="_blank" rel="noopener">https://juejin.im/post/5b55b842f265da0f9e589e79#heading-11</a> 数据库两大神器【索引和锁】</p><p>导图下载地址](<a href="https://github.com/LiJinHongPassion/LiJinHongPassion.github.io/raw/master/codeant/dle3/%E5%BA%93%E5%AD%98%E9%97%AE%E9%A2%98.mmap" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/LiJinHongPassion.github.io/raw/master/codeant/dle3/%E5%BA%93%E5%AD%98%E9%97%AE%E9%A2%98.mmap</a>)</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dle3/1.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1567060896516-630537369350?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="锁" scheme="https://lijinhongpassion.github.io/tags/%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>Java-springboot整合caffeine本地缓存</title>
    <link href="https://lijinhongpassion.github.io/codeant/29cd.html"/>
    <id>https://lijinhongpassion.github.io/codeant/29cd.html</id>
    <published>2019-08-30T05:46:00.000Z</published>
    <updated>2019-08-30T11:18:59.778Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1562184965-071835a7e37a?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><hr><p>demo地址：<a href="https://github.com/LiJinHongPassion/springboot/tree/master/springboot_cache_caffeine_demo" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/springboot/tree/master/springboot_cache_caffeine_demo</a></p><hr><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><hr><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--caffeine-start--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ben-manes.caffeine<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>caffeine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--caffeine-end--&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p><strong>CacheConfig.java</strong></p><p>需要@EnableCaching开启缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 必须要指定这个Bean，refreshAfterWrite=5s这个配置属性才生效</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheLoader&lt;Object, Object&gt; <span class="title">cacheLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CacheLoader&lt;Object, Object&gt; cacheLoader = <span class="keyword">new</span> CacheLoader&lt;Object, Object&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">load</span><span class="params">(Object key)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 重写这个方法将oldValue值返回回去，进而刷新缓存</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">reload</span><span class="params">(Object key, Object oldValue)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cacheLoader;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>application.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cache:</span></span><br><span class="line"><span class="attr">    caffeine:</span></span><br><span class="line"><span class="attr">      spec:</span> <span class="string">initialCapacity=50,maximumSize=500,expireAfterAccess=5s,expireAfterWrite=10s,refreshAfterWrite=5s</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  initialCapacity=[integer]: 初始的缓存空间大小</span></span><br><span class="line"><span class="comment">#  maximumSize=[long]: 缓存的最大条数</span></span><br><span class="line"><span class="comment">#  maximumWeight=[long]: 缓存的最大权重</span></span><br><span class="line"><span class="comment">#  expireAfterAccess=[duration]: 最后一次写入或访问后经过固定时间过期</span></span><br><span class="line"><span class="comment">#  expireAfterWrite=[duration]: 最后一次写入后经过固定时间过期</span></span><br><span class="line"><span class="comment">#  refreshAfterWrite=[duration]: 创建缓存或者最近一次更新缓存后经过固定的时间间隔，刷新缓存</span></span><br><span class="line"><span class="comment">#  weakKeys: 打开key的弱引用</span></span><br><span class="line"><span class="comment">#  weakValues：打开value的弱引用</span></span><br><span class="line"><span class="comment">#  softValues：打开value的软引用</span></span><br><span class="line"><span class="comment">#  recordStats：开发统计功能</span></span><br></pre></td></tr></table></figure><hr><h4 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 用户实体</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span>: com.example.li.springboot_cache_redis_demo.entity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 用户实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: LJH</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2892248514883451461L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Long id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="服务层"><a href="#服务层" class="headerlink" title="服务层"></a>服务层</h4><p>spring提供了下面四种缓存注解：</p><p><strong>@CachePut</strong> 用于某个方法，每次被调用，此方法都执行，并把结果更新到PutCache配置的地方，一般用于缓存更新。</p><p><strong>@CacheEvict</strong> 调用有此注解的方法可以删除一个缓存</p><p><strong>@CachesEvict</strong> 调用有此注解的方法可以删除多个缓存，很多时候一个操作会涉及到多个缓存的更新或删除。</p><p><strong>@Cacheable</strong> 用于某个方法，希望这个方法添加缓存，此方法被调用的时候，如果有缓存，此方法不执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * UserService</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span>: com.example.li.springboot_cache_redis_demo.service.impl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: UserService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: LJH</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Long, User&gt; DATABASES = <span class="keyword">new</span> ConcurrentHashMap();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        DATABASES.put(<span class="number">1L</span>, <span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">"user1"</span>));</span><br><span class="line">        DATABASES.put(<span class="number">2L</span>, <span class="keyword">new</span> User(<span class="number">2L</span>, <span class="string">"user2"</span>));</span><br><span class="line">        DATABASES.put(<span class="number">3L</span>, <span class="keyword">new</span> User(<span class="number">3L</span>, <span class="string">"user3"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存或修改用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 操作结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@CachePut</span>(value = <span class="string">"user"</span>, key = <span class="string">"#user.id"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">saveOrUpdate</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        DATABASES.put(user.getId(), user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Cacheable</span>(value = <span class="string">"user"</span>, key = <span class="string">"#id"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 我们假设从数据库读取</span></span><br><span class="line">        System.out.println(<span class="string">"这是从数据库读取的，不是从缓存读取的"</span>);</span><br><span class="line">        <span class="keyword">return</span> DATABASES.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id key值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@CacheEvict</span>(value = <span class="string">"user"</span>, key = <span class="string">"#id"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        DATABASES.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/30-1:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"saveOrUpdate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">saveOrUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userService.saveOrUpdate(<span class="keyword">new</span> User(<span class="number">4L</span>, <span class="string">"user4"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"get"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"delete"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        userService.delete(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"d-ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>第一次访问<a href="http://localhost:8080/get?id=1后，5秒内再次访问的话，是访问的缓存，不是访问的模拟数据库" target="_blank" rel="noopener">http://localhost:8080/get?id=1后，5秒内再次访问的话，是访问的缓存，不是访问的模拟数据库</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1562184965-071835a7e37a?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="springboot" scheme="https://lijinhongpassion.github.io/tags/springboot/"/>
    
      <category term="caffeine" scheme="https://lijinhongpassion.github.io/tags/caffeine/"/>
    
      <category term="cache" scheme="https://lijinhongpassion.github.io/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>Java-springboot整合guava本地缓存</title>
    <link href="https://lijinhongpassion.github.io/codeant/ddcd.html"/>
    <id>https://lijinhongpassion.github.io/codeant/ddcd.html</id>
    <published>2019-08-30T04:14:38.000Z</published>
    <updated>2019-08-30T11:18:59.662Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1562102010-a7c462e96db7?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><hr><p>前面讲了springboot整合redis作为外部缓存，本文讲解springboot整合guava作为本地缓存，虽然guava已经被新版本的springboot弃用，但是guava还是值得学习的。后面有时间会搭建一个Caffeine缓存的demo</p><p>demo地址：<a href="https://github.com/LiJinHongPassion/springboot/tree/master/springboot_cache_guava_demo" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/springboot/tree/master/springboot_cache_guava_demo</a></p><hr><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><hr><h4 id="为什么要是用内部缓存"><a href="#为什么要是用内部缓存" class="headerlink" title="为什么要是用内部缓存"></a>为什么要是用内部缓存</h4><p>在系统中，有些数据量不大、不常变化，但是访问十分频繁，例如省、市、区数据。针对这种场景，可以将数据加载到应用的内存中，以提升系统的访问效率，减少无谓的数据库和网路的访问。</p><p>内部缓存的限制就是存放的数据总量不能超出内存容量，毕竟还是在 JVM 里的。</p><h4 id="最简单的内部缓存-Map"><a href="#最简单的内部缓存-Map" class="headerlink" title="最简单的内部缓存 - Map"></a>最简单的内部缓存 - Map</h4><p>如果只是需要将一些数据缓存起来，避免不必要的数据库查询，那么 Map 就可以满足。</p><p>对于字典型的数据，在项目启动的时候加载到 Map 中，程序就可以使用了，也很容易更新。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置存放的Map</span></span><br><span class="line">Map&lt;String, String&gt; configs = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line"><span class="comment">// 初始化或者刷新配置的</span></span><br><span class="line"><span class="function">Mappublic <span class="keyword">void</span> <span class="title">reloadConfigs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, String&gt; m = loadConfigFromDB();</span><br><span class="line">    configs = m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">configs.getOrDefault(<span class="string">"auth.id"</span>, <span class="string">"1"</span>);</span><br></pre></td></tr></table></figure><h4 id="功能强大的内部缓存-Guava-Cache-Caffeine"><a href="#功能强大的内部缓存-Guava-Cache-Caffeine" class="headerlink" title="功能强大的内部缓存 - Guava Cache / Caffeine"></a>功能强大的内部缓存 - Guava Cache / Caffeine</h4><p>如果你需要缓存有强大的性能，或者对缓存有更多的控制，可以使用 Guava 里的 Cache 组件。</p><p>它是 Guava 中的缓存工具包，是非常简单易用且功能强大的 JVM 内缓存，支持多种缓存过期策略。</p><p><strong>本地缓存的优点：</strong></p><ul><li>直接使用内存，速度快，通常存取的性能可以达到每秒千万级</li><li>可以直接使用 Java 对象存取</li></ul><p><strong>本地缓存的缺点：</strong></p><ul><li>数据保存在当前实例中，无法共享</li><li>重启应用会丢失</li></ul><h4 id="Guava-Cache-的替代者-Caffeine"><a href="#Guava-Cache-的替代者-Caffeine" class="headerlink" title="Guava Cache 的替代者 Caffeine"></a>Guava Cache 的替代者 Caffeine</h4><p>Spring 5 使用 Caffeine 来代替 Guava Cache，应该是从性能的角度考虑的。从很多性能测试来看 Caffeine 各方面的性能都要比 Guava 要好。</p><p>Caffeine 的 API 的操作功能和 Guava 是基本保持一致的，并且 Caffeine 为了兼容之前 Guava 的用户，做了一个 Guava 的 Adapter， 也是十分的贴心。</p><p>如果想了解更多请参考：<a href="https://blog.csdn.net/qq_38398479/article/details/70578876" target="_blank" rel="noopener">是什么让 Spring 5 放弃了使用 Guava Cache</a>？</p><hr><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><hr><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--guava-start--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.google.guava/guava --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>27.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--因为springboot新版本已经弃用guava作为本地缓存，所以需要切换到以前的spring版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--guava-end--&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p><strong>GuavaCacheConfig.java</strong></p><p>需要@EnableCaching开启缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuavaCacheConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        GuavaCacheManager cacheManager = <span class="keyword">new</span> GuavaCacheManager();</span><br><span class="line">        cacheManager.setCacheBuilder(</span><br><span class="line">                CacheBuilder.newBuilder().</span><br><span class="line">                        <span class="comment">//缓存过期时间</span></span><br><span class="line">                        expireAfterWrite(<span class="number">10</span>, TimeUnit.SECONDS).</span><br><span class="line">                        maximumSize(<span class="number">1000</span>));</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 用户实体</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span>: com.example.li.springboot_cache_redis_demo.entity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 用户实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: LJH</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2892248514883451461L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Long id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="服务层"><a href="#服务层" class="headerlink" title="服务层"></a>服务层</h4><p>spring提供了下面四种缓存注解：</p><p><strong>@CachePut</strong> 用于某个方法，每次被调用，此方法都执行，并把结果更新到PutCache配置的地方，一般用于缓存更新。</p><p><strong>@CacheEvict</strong> 调用有此注解的方法可以删除一个缓存</p><p><strong>@CachesEvict</strong> 调用有此注解的方法可以删除多个缓存，很多时候一个操作会涉及到多个缓存的更新或删除。</p><p><strong>@Cacheable</strong> 用于某个方法，希望这个方法添加缓存，此方法被调用的时候，如果有缓存，此方法不执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * UserService</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span>: com.example.li.springboot_cache_redis_demo.service.impl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: UserService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: LJH</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Long, User&gt; DATABASES = <span class="keyword">new</span> ConcurrentHashMap();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        DATABASES.put(<span class="number">1L</span>, <span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">"user1"</span>));</span><br><span class="line">        DATABASES.put(<span class="number">2L</span>, <span class="keyword">new</span> User(<span class="number">2L</span>, <span class="string">"user2"</span>));</span><br><span class="line">        DATABASES.put(<span class="number">3L</span>, <span class="keyword">new</span> User(<span class="number">3L</span>, <span class="string">"user3"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存或修改用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 操作结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@CachePut</span>(value = <span class="string">"user"</span>, key = <span class="string">"#user.id"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">saveOrUpdate</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        DATABASES.put(user.getId(), user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Cacheable</span>(value = <span class="string">"user"</span>, key = <span class="string">"#id"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 我们假设从数据库读取</span></span><br><span class="line">        System.out.println(<span class="string">"这是从数据库读取的，不是从缓存读取的"</span>);</span><br><span class="line">        <span class="keyword">return</span> DATABASES.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id key值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@CacheEvict</span>(value = <span class="string">"user"</span>, key = <span class="string">"#id"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        DATABASES.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/30-1:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"saveOrUpdate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">saveOrUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userService.saveOrUpdate(<span class="keyword">new</span> User(<span class="number">4L</span>, <span class="string">"user4"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"get"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"delete"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        userService.delete(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"d-ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>第一次访问<a href="http://localhost:8080/get?id=1后，10秒内再次访问的话，是访问的缓存，不是访问的模拟数据库" target="_blank" rel="noopener">http://localhost:8080/get?id=1后，10秒内再次访问的话，是访问的缓存，不是访问的模拟数据库</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1562102010-a7c462e96db7?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1074&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="springboot" scheme="https://lijinhongpassion.github.io/tags/springboot/"/>
    
      <category term="cache" scheme="https://lijinhongpassion.github.io/tags/cache/"/>
    
      <category term="guava" scheme="https://lijinhongpassion.github.io/tags/guava/"/>
    
  </entry>
  
  <entry>
    <title>Java-springboot2.x整合redis缓存</title>
    <link href="https://lijinhongpassion.github.io/codeant/df80.html"/>
    <id>https://lijinhongpassion.github.io/codeant/df80.html</id>
    <published>2019-08-30T02:46:37.000Z</published>
    <updated>2019-08-30T11:18:59.779Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1558981285-501cd9af9426?ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=750&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>在如今高并发的互联网应用中，缓存的地位举足轻重，对提升程序性能帮助不小。而 3.x开始的 Spring也引入了对 Cache的支持，那对于如今发展得如火如荼的 Spring Boot来说自然也是支持缓存特性的。缓存的方式有本地缓存和远程缓存。但本文将讲述如何将reids缓存（远程缓存）应用到 Spring Boot应用中。在以后会讲解本地缓存的搭建。</p><p>demo地址：<a href="https://github.com/LiJinHongPassion/springboot/tree/master/springboot_cache_redis_demo" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/springboot/tree/master/springboot_cache_redis_demo</a></p><hr><h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><p>springboot_cache_redis_demo<br>                │  SpringbootCacheRedisDemoApplication.java    启动类<br>                │<br>                ├─config<br>                │      RedisConfig.java    redis配置文件<br>                │<br>                ├─controller<br>                │      UserController.java<br>                │<br>                ├─entity<br>                │      User.java    实体类<br>                │<br>                └─service<br>                    │  UserService.java<br>                    │<br>                    └─impl<br>                            UserServiceImpl.java</p><hr><h2 id="入门搭建"><a href="#入门搭建" class="headerlink" title="入门搭建"></a>入门搭建</h2><hr><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis-start--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 对象池，使用redis时必须引入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--redis-end--&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p><strong>RedisConfig.java</strong></p><p>需要@EnableCaching开启缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * redis配置</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span>: com.example.li.springboot_cache_redis_demo.config</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: redis配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: LJH</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>(RedisAutoConfiguration.class)</span><br><span class="line"><span class="meta">@EnableCaching</span><span class="comment">//开启缓存</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认情况下的模板只能支持RedisTemplate&lt;String, String&gt;，也就是只能存入字符串，因此支持序列化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Serializable&gt; <span class="title">redisCacheTemplate</span><span class="params">(LettuceConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Serializable&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.setValueSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer());</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>application.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">47.103</span><span class="number">.20</span><span class="number">.12</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">    password:</span> </span><br><span class="line">    <span class="comment"># 连接超时时间（记得添加单位，Duration）</span></span><br><span class="line"><span class="attr">    timeout:</span> <span class="number">10000</span><span class="string">ms</span></span><br><span class="line">    <span class="comment"># Redis默认情况下有16个分片，这里配置具体使用的分片</span></span><br><span class="line"><span class="attr">    database:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">    lettuce:</span></span><br><span class="line"><span class="attr">      pool:</span></span><br><span class="line">        <span class="comment"># 连接池最大连接数（使用负值表示没有限制） 默认 8</span></span><br><span class="line"><span class="attr">        max-active:</span> <span class="number">8</span></span><br><span class="line">        <span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1</span></span><br><span class="line"><span class="attr">        max-wait:</span> <span class="bullet">-1</span><span class="string">ms</span></span><br><span class="line">        <span class="comment"># 连接池中的最大空闲连接 默认 8</span></span><br><span class="line"><span class="attr">        max-idle:</span> <span class="number">8</span></span><br><span class="line">        <span class="comment"># 连接池中的最小空闲连接 默认 0</span></span><br><span class="line"><span class="attr">        min-idle:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">  cache:</span></span><br><span class="line">    <span class="comment"># 一般来说是不用配置的，Spring Cache 会根据依赖的包自行装配</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line">    <span class="string">com.xkcoding:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><hr><h4 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 用户实体</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span>: com.example.li.springboot_cache_redis_demo.entity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 用户实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: LJH</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2892248514883451461L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Long id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="服务层"><a href="#服务层" class="headerlink" title="服务层"></a>服务层</h4><p>spring提供了下面四种缓存注解：</p><p><strong>@CachePut</strong> 用于某个方法，每次被调用，此方法都执行，并把结果更新到PutCache配置的地方，一般用于缓存更新。</p><p><strong>@CacheEvict</strong> 调用有此注解的方法可以删除一个缓存</p><p><strong>@CachesEvict</strong> 调用有此注解的方法可以删除多个缓存，很多时候一个操作会涉及到多个缓存的更新或删除。</p><p><strong>@Cacheable</strong> 用于某个方法，希望这个方法添加缓存，此方法被调用的时候，如果有缓存，此方法不执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * UserService</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span>: com.example.li.springboot_cache_redis_demo.service.impl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: UserService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: LJH</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Long, User&gt; DATABASES = <span class="keyword">new</span> ConcurrentHashMap();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        DATABASES.put(<span class="number">1L</span>, <span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">"user1"</span>));</span><br><span class="line">        DATABASES.put(<span class="number">2L</span>, <span class="keyword">new</span> User(<span class="number">2L</span>, <span class="string">"user2"</span>));</span><br><span class="line">        DATABASES.put(<span class="number">3L</span>, <span class="keyword">new</span> User(<span class="number">3L</span>, <span class="string">"user3"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存或修改用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 操作结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@CachePut</span>(value = <span class="string">"user"</span>, key = <span class="string">"#user.id"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">saveOrUpdate</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        DATABASES.put(user.getId(), user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Cacheable</span>(value = <span class="string">"user"</span>, key = <span class="string">"#id"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 我们假设从数据库读取</span></span><br><span class="line">        <span class="keyword">return</span> DATABASES.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id key值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@CacheEvict</span>(value = <span class="string">"user"</span>, key = <span class="string">"#id"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        DATABASES.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/30-1:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"saveOrUpdate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">saveOrUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userService.saveOrUpdate(<span class="keyword">new</span> User(<span class="number">4L</span>, <span class="string">"user4"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"get"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"delete"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        userService.delete(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"d-ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>每点击一个链接，观察redis对应库的数据变化</p><p><a href="http://localhost:8080/saveOrUpdate" target="_blank" rel="noopener">http://localhost:8080/saveOrUpdate</a><br><a href="http://localhost:8080/get?id=1" target="_blank" rel="noopener">http://localhost:8080/get?id=1</a><br><a href="http://localhost:8080/delete?id=1" target="_blank" rel="noopener">http://localhost:8080/delete?id=1</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1558981285-501cd9af9426?ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=750&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="springboot" scheme="https://lijinhongpassion.github.io/tags/springboot/"/>
    
      <category term="redis" scheme="https://lijinhongpassion.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Java-FastDFS+Nginx文件服务器搭建</title>
    <link href="https://lijinhongpassion.github.io/codeant/284d.html"/>
    <id>https://lijinhongpassion.github.io/codeant/284d.html</id>
    <published>2019-08-28T03:30:54.000Z</published>
    <updated>2019-08-28T11:04:41.522Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1556909211-36987daf7b4d?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>阿里云服务器不能使用公网ip，只能使用内网ip：<a href="https://blog.csdn.net/u010448530/article/details/83995347" target="_blank" rel="noopener">https://blog.csdn.net/u010448530/article/details/83995347</a> </p><p>storage配置、client测试、配置nginx访问中的ip设置为内网ip</p><p>通过nginx代理8888端口实现访问dfs</p><p>阿里云安全组需要开放相关8888端口</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><table><thead><tr><th>名称</th><th>说明</th><th>下载地址</th></tr></thead><tbody><tr><td>centos</td><td>7.6</td><td><a href="http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1810.iso" target="_blank" rel="noopener">centos链接</a></td></tr><tr><td>libfatscommon</td><td>FastDFS分离出的一些公用函数包</td><td>git clone <a href="https://github.com/happyfish100/libfastcommon.git" target="_blank" rel="noopener">https://github.com/happyfish100/libfastcommon.git</a> –depth 1</td></tr><tr><td>FastDFS</td><td>FastDFS本体</td><td>git clone <a href="https://github.com/happyfish100/fastdfs.git" target="_blank" rel="noopener">https://github.com/happyfish100/fastdfs.git</a> –depth 1</td></tr><tr><td>fastdfs-nginx-module</td><td>FastDFS和nginx的关联模块</td><td>git clone <a href="https://github.com/happyfish100/fastdfs-nginx-module.git" target="_blank" rel="noopener">https://github.com/happyfish100/fastdfs-nginx-module.git</a> –depth 1</td></tr><tr><td>nginx</td><td>nginx1.15.4</td><td>wget <a href="http://nginx.org/download/nginx-1.15.4.tar.gz" target="_blank" rel="noopener">http://nginx.org/download/nginx-1.15.4.tar.gz</a></td></tr></tbody></table><h2 id="磁盘目录"><a href="#磁盘目录" class="headerlink" title="磁盘目录"></a>磁盘目录</h2><table><thead><tr><th>说明</th><th>位置</th></tr></thead><tbody><tr><td>所有安装包</td><td>/opt/fastdfs</td></tr><tr><td>安装位置</td><td>/usr/local/fastdfs</td></tr><tr><td>数据存储位置</td><td>/home/dfs</td></tr><tr><td>#这里我为了方便把日志什么的都放到了dfs</td></tr></tbody></table><h2 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git gcc gcc-c++ make automake autoconf libtool pcre pcre-devel zlib zlib-devel openssl-devel wget vim -y</span><br></pre></td></tr></table></figure><p><a href="https://lijinhongpassion.github.io/codeant/b7d4.html">yum源更换为阿里云yum源的教程</a>，解决下载速度慢</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h4 id="安装libfatscommon"><a href="#安装libfatscommon" class="headerlink" title="安装libfatscommon"></a>安装libfatscommon</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.创建进入fastdfs文件夹</span><br><span class="line">mkdir /usr/local/fastdfs #安装目录</span><br><span class="line">mkdir /home/dfs #数据存储位置</span><br><span class="line">    mkdir /opt/fastdfs#安装包存放</span><br><span class="line">    cd /opt/fastdfs/</span><br><span class="line"><span class="meta">#</span> 2.下载</span><br><span class="line">    git clone https://github.com/happyfish100/libfastcommon.git --depth 1</span><br><span class="line"><span class="meta">#</span> 3.拷贝</span><br><span class="line">cp -r libfastcommon/ /usr/local/fastdfs/</span><br><span class="line"><span class="meta">#</span> 4.编译</span><br><span class="line">    cd /usr/local/fastdfs/libfastcommon/</span><br><span class="line">    ./make.sh &amp;&amp; ./make.sh install #编译安装</span><br></pre></td></tr></table></figure><h4 id="安装FastDFS"><a href="#安装FastDFS" class="headerlink" title="安装FastDFS"></a>安装FastDFS</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.进入安装包存放目录</span><br><span class="line">cd /opt/fastdfs</span><br><span class="line"><span class="meta">#</span> 2.下载</span><br><span class="line">git clone https://github.com/happyfish100/fastdfs.git --depth 1</span><br><span class="line"><span class="meta">#</span> 3.拷贝</span><br><span class="line">cp -r fastdfs/ /usr/local/fastdfs/</span><br><span class="line"><span class="meta">#</span> 4.编译</span><br><span class="line">    cd /usr/local/fastdfs/fastdfs/</span><br><span class="line">    ./make.sh &amp;&amp; ./make.sh install #编译安装</span><br><span class="line"><span class="meta">#</span> 5.配置文件准备</span><br><span class="line">    cp /etc/fdfs/tracker.conf.sample /etc/fdfs/tracker.conf</span><br><span class="line">    cp /etc/fdfs/storage.conf.sample /etc/fdfs/storage.conf</span><br><span class="line">    cp /etc/fdfs/client.conf.sample /etc/fdfs/client.conf #客户端文件，测试用</span><br><span class="line">    cp /usr/local/fastdfs/fastdfs/conf/http.conf /etc/fdfs/ #供nginx访问使用</span><br><span class="line">    cp /usr/local/fastdfs/fastdfs/conf/mime.types /etc/fdfs/ #供nginx访问使用</span><br></pre></td></tr></table></figure><h4 id="安装fastdfs-nginx-module"><a href="#安装fastdfs-nginx-module" class="headerlink" title="安装fastdfs-nginx-module"></a>安装fastdfs-nginx-module</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.进入安装包存放目录</span><br><span class="line">cd /opt/fastdfs </span><br><span class="line"><span class="meta">#</span> 2.下载</span><br><span class="line">git clone https://github.com/happyfish100/fastdfs-nginx-module.git --depth 1</span><br><span class="line"><span class="meta">#</span> 3.拷贝</span><br><span class="line">cp -r fastdfs-nginx-module/ /usr/local/fastdfs/</span><br><span class="line"><span class="meta">#</span> 4.复制配置文件</span><br><span class="line">cp /usr/local/fastdfs/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs</span><br></pre></td></tr></table></figure><h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.进入安装包存放目录</span><br><span class="line">cd /opt/fastdfs </span><br><span class="line"><span class="meta">#</span> 2.下载</span><br><span class="line">wget http://nginx.org/download/nginx-1.15.4.tar.gz #下载nginx压缩包</span><br><span class="line"><span class="meta">#</span> 3.解压</span><br><span class="line">tar -zxvf nginx-1.15.4.tar.gz -C /usr/local/fastdfs/ #解压</span><br><span class="line"><span class="meta">#</span> 4.进入解压目录</span><br><span class="line">cd /usr/local/fastdfs/nginx-1.15.4/</span><br><span class="line"><span class="meta">#</span> 5.添加fastdfs-nginx-module模块</span><br><span class="line">./configure --add-module=/usr/local/fastdfs/fastdfs-nginx-module/src/ </span><br><span class="line"><span class="meta">#</span> 6.编译</span><br><span class="line">make &amp;&amp; make install #编译安装</span><br></pre></td></tr></table></figure><h2 id="单机部署"><a href="#单机部署" class="headerlink" title="单机部署"></a>单机部署</h2><h4 id="tracker配置"><a href="#tracker配置" class="headerlink" title="tracker配置"></a>tracker配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 服务器ip为 192.168.26.101</span><br><span class="line"><span class="meta">#</span> 修改tracker.conf</span><br><span class="line">vim /etc/fdfs/tracker.conf</span><br><span class="line"><span class="meta">#</span> 需要修改的内容如下</span><br><span class="line">port=22122  # tracker服务器端口（默认22122,一般不修改）</span><br><span class="line">base_path=/home/dfs  # 存储日志和数据的根目录</span><br></pre></td></tr></table></figure><h4 id="storage配置"><a href="#storage配置" class="headerlink" title="storage配置"></a>storage配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fdfs/storage.conf</span><br><span class="line"><span class="meta">#</span> 需要修改的内容如下</span><br><span class="line">port=23000  # storage服务端口（默认23000,一般不修改）</span><br><span class="line">base_path=/home/dfs  # 数据和日志文件存储根目录</span><br><span class="line">store_path0=/home/dfs  # 第一个存储目录</span><br><span class="line">tracker_server=192.168.26.101:22122  # tracker服务器IP和端口</span><br><span class="line">http.server_port=8888  # http访问文件的端口(默认8888,看情况修改,和nginx中保持一致)</span><br></pre></td></tr></table></figure><h4 id="client测试"><a href="#client测试" class="headerlink" title="client测试"></a>client测试</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fdfs/client.conf</span><br><span class="line"><span class="meta">#</span> 需要修改的内容如下</span><br><span class="line">base_path=/home/dfs</span><br><span class="line">tracker_server=192.168.26.101:22122    # tracker服务器IP和端口</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 请先启动tracker、storage服务，参照启动标题</span><br><span class="line">systemctl stop firewalld.service &amp;&amp; /etc/init.d/fdfs_trackerd start &amp;&amp; /etc/init.d/fdfs_storaged start </span><br><span class="line"><span class="meta">#</span> 保存后测试,返回ID表示成功 如：group1/M00/00/00/xx.tar.gz</span><br><span class="line">fdfs_upload_file /etc/fdfs/client.conf /opt/fastdfs/nginx-1.15.4.tar.gz</span><br></pre></td></tr></table></figure><h4 id="配置nginx访问"><a href="#配置nginx访问" class="headerlink" title="配置nginx访问"></a>配置nginx访问</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fdfs/mod_fastdfs.conf</span><br><span class="line"><span class="meta">#</span>需要修改的内容如下</span><br><span class="line">tracker_server=192.168.26.101:22122  #tracker服务器IP和端口</span><br><span class="line">url_have_group_name=true</span><br><span class="line">store_path0=/home/dfs</span><br><span class="line"><span class="meta">#</span>配置nginx.config</span><br><span class="line">vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line"><span class="meta">#</span>添加如下配置</span><br><span class="line">server &#123;</span><br><span class="line">    listen       8888;    ## 该端口为storage.conf中的http.server_port相同</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    location ~/group[0-9]/ &#123;</span><br><span class="line">        ngx_fastdfs_module;</span><br><span class="line">    &#125;</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">    root   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 请先启动tracker、storage、nginx服务，关闭防火墙，参照启动标题</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>测试下载，用外部浏览器访问刚才已传过的nginx安装包,引用返回的ID</span><br><span class="line">http://192.168.26.101:8888/group1/M00/00/00/wKgAQ1pysxmAaqhAAA76tz-dVgg.tar.gz</span><br><span class="line"><span class="meta">#</span>弹出下载单机部署全部跑通</span><br></pre></td></tr></table></figure><h2 id="分布式部署"><a href="#分布式部署" class="headerlink" title="分布式部署"></a>分布式部署</h2><h4 id="tracker配置-1"><a href="#tracker配置-1" class="headerlink" title="tracker配置"></a>tracker配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 服务器ip为 192.168.26.101</span><br><span class="line"><span class="meta">#</span> 修改tracker.conf</span><br><span class="line">vim /etc/fdfs/tracker.conf</span><br><span class="line"><span class="meta">#</span> 需要修改的内容如下</span><br><span class="line">port=22122  # tracker服务器端口（默认22122,一般不修改）</span><br><span class="line">base_path=/home/dfs  # 存储日志和数据的根目录</span><br></pre></td></tr></table></figure><h4 id="storage配置-1"><a href="#storage配置-1" class="headerlink" title="storage配置"></a>storage配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fdfs/storage.conf</span><br><span class="line"><span class="meta">#</span> 需要修改的内容如下</span><br><span class="line">port=23000  # storage服务端口（默认23000,一般不修改）</span><br><span class="line">base_path=/home/dfs  # 数据和日志文件存储根目录</span><br><span class="line">store_path0=/home/dfs  # 第一个存储目录</span><br><span class="line">tracker_server=192.168.26.101:22122  # 服务器1(tracker服务器IP和端口)</span><br><span class="line">tracker_server=192.168.26.102:22122  # 服务器2</span><br><span class="line">tracker_server=192.168.26.103:22122  # 服务器3</span><br><span class="line">http.server_port=8888  # http访问文件的端口(默认8888,看情况修改,和nginx中保持一致)</span><br><span class="line">vim /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure><h4 id="client测试-1"><a href="#client测试-1" class="headerlink" title="client测试"></a>client测试</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fdfs/client.conf</span><br><span class="line"><span class="meta">#</span> 需要修改的内容如下</span><br><span class="line">base_path=/home/moe/dfs</span><br><span class="line">tracker_server=192.168.26.101:22122  # 服务器1(tracker服务器IP和端口)</span><br><span class="line">tracker_server=192.168.26.102:22122  # 服务器2</span><br><span class="line">tracker_server=192.168.26.103:22122  # 服务器3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 请先启动tracker、storage服务，参照启动标题</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 保存后测试,返回ID表示成功 如：group1/M00/00/00/xx.tar.gz</span><br><span class="line">fdfs_upload_file /etc/fdfs/client.conf /usr/local/src/nginx-1.15.4.tar.gz</span><br></pre></td></tr></table></figure><h4 id="配置nginx访问-1"><a href="#配置nginx访问-1" class="headerlink" title="配置nginx访问"></a>配置nginx访问</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fdfs/mod_fastdfs.conf</span><br><span class="line"><span class="meta">#</span> 需要修改的内容如下</span><br><span class="line">tracker_server=192.168.52.2:22122  # 服务器1</span><br><span class="line">tracker_server=192.168.52.3:22122  # 服务器2</span><br><span class="line">tracker_server=192.168.52.4:22122  # 服务器3</span><br><span class="line">url_have_group_name=true</span><br><span class="line">store_path0=/home/dfs</span><br><span class="line"><span class="meta">#</span> 配置nginx.config</span><br><span class="line">vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line"><span class="meta">#</span> 添加如下配置</span><br><span class="line">server &#123;</span><br><span class="line">    listen       8888;    ## 该端口为storage.conf中的http.server_port相同</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    location ~/group[0-9]/ &#123;</span><br><span class="line">        ngx_fastdfs_module;</span><br><span class="line">    &#125;</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">    root   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><h4 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 不关闭防火墙的话无法使用</span><br><span class="line">systemctl stop firewalld.service # 关闭</span><br><span class="line">systemctl restart firewalld.service # 重启</span><br></pre></td></tr></table></figure><h4 id="tracker"><a href="#tracker" class="headerlink" title="tracker"></a>tracker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/fdfs_trackerd start # 启动tracker服务</span><br><span class="line">/etc/init.d/fdfs_trackerd restart # 重启动tracker服务</span><br><span class="line">/etc/init.d/fdfs_trackerd stop # 停止tracker服务</span><br><span class="line">chkconfig fdfs_trackerd on # 自启动tracker服务</span><br></pre></td></tr></table></figure><h4 id="storage"><a href="#storage" class="headerlink" title="storage"></a>storage</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/fdfs_storaged start # 启动storage服务</span><br><span class="line">/etc/init.d/fdfs_storaged restart # 重动storage服务</span><br><span class="line">/etc/init.d/fdfs_storaged stop # 停止动storage服务</span><br><span class="line">chkconfig fdfs_storaged on # 自启动storage服务</span><br></pre></td></tr></table></figure><h4 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx # 启动nginx</span><br><span class="line">/usr/local/nginx/sbin/nginx -s reload # 重启nginx</span><br><span class="line">/usr/local/nginx/sbin/nginx -s stop # 停止nginx</span><br></pre></td></tr></table></figure><h4 id="检测集群"><a href="#检测集群" class="headerlink" title="检测集群"></a>检测集群</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/fdfs_monitor /etc/fdfs/storage.conf</span><br><span class="line"><span class="meta">#</span> 会显示会有几台服务器 有3台就会 显示 Storage 1-Storage 3的详细信息</span><br></pre></td></tr></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tracker_server # 有几台服务器写几个</span><br><span class="line">group_name # 地址的名称的命名</span><br><span class="line">bind_addr # 服务器ip绑定</span><br><span class="line">store_path_count # store_path(数字)有几个写几个</span><br><span class="line">store_path(数字) # 设置几个储存地址写几个 从0开始</span><br></pre></td></tr></table></figure><h4 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">如果不是root 用户 你必须在除了cd的命令之外 全部加sudo</span><br><span class="line">如果不是root 用户 编译和安装分开进行 先编译再安装</span><br><span class="line">如果上传成功 但是nginx报错404 先检查mod_fastdfs.conf文件中的store_path0是否一致</span><br><span class="line">如果nginx无法访问 先检查防火墙 和 mod_fastdfs.conf文件tracker_server是否一致</span><br><span class="line">如果不是在/usr/local/src文件夹下安装 可能会编译出错</span><br></pre></td></tr></table></figure><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p>参考：<a href="http://www.leftso.com/blog/244" target="_blank" rel="noopener">http://www.leftso.com/blog/244</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.停止服务</span><br><span class="line">service fdfs_trackerd stop</span><br><span class="line">service fdfs_storaged stop</span><br><span class="line"><span class="meta">#</span> 2.通过storage.conf找到base_path和store_path然后删除</span><br><span class="line">cat /etc/fdfs/storage.conf |grep base_path</span><br><span class="line">cat /etc/fdfs/storage.conf |grep store_path</span><br><span class="line"><span class="meta">#</span> 删除## 注意:如果有未备份的文件，请先备份再删除</span><br><span class="line">rm -rf 查询出来的base_path路径</span><br><span class="line">rm -rf 查询出来的store_path路径</span><br><span class="line"><span class="meta">#</span> 3.通过tracker.conf找到base_path然后删除</span><br><span class="line">cat /etc/fdfs/tracker.conf |grep base_path</span><br><span class="line"><span class="meta">#</span> 删除</span><br><span class="line">rm –rf 查询出来的base_path路径</span><br><span class="line"><span class="meta">#</span> 4.删除配置文件目录</span><br><span class="line">rm -rf /etc/fdfs/</span><br><span class="line"><span class="meta">#</span> 5.删除链接文件</span><br><span class="line"><span class="meta">#</span> 删除tracker的链接文件</span><br><span class="line">    rm –rf /usr/local/bin/fdfs_trackerd</span><br><span class="line">    rm –rf /usr/local/bin/stop.sh</span><br><span class="line">    rm –rf /usr/local/bin/restart.sh</span><br><span class="line">    # 删除storage的链接文件</span><br><span class="line">    rm –rf /usr/local/bin/fdfs_storaged</span><br><span class="line"><span class="meta">#</span> 6.删除/usr/bin目录下FastDFS的可执行文件</span><br><span class="line">rm -rf  /usr/bin/fdfs_*</span><br><span class="line"><span class="meta">#</span> 7.删除/usr/include/目录下FastDFS相关的shell脚本</span><br><span class="line">rm -rf /usr/include/fastdfs/</span><br><span class="line"><span class="meta">#</span> 8.删除/usr/lib64目录下的库文件</span><br><span class="line">rm -rf libfdfsclient*</span><br><span class="line"><span class="meta">#</span> 9.删除/usr/lib/目录下的库</span><br><span class="line">rm -rf libfdfsclient*</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1556909211-36987daf7b4d?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="nginx" scheme="https://lijinhongpassion.github.io/tags/nginx/"/>
    
      <category term="fastdfs" scheme="https://lijinhongpassion.github.io/tags/fastdfs/"/>
    
  </entry>
  
  <entry>
    <title>Java-springboot整合security+jwt权限系统设计</title>
    <link href="https://lijinhongpassion.github.io/codeant/dle4.html"/>
    <id>https://lijinhongpassion.github.io/codeant/dle4.html</id>
    <published>2019-08-28T01:35:09.000Z</published>
    <updated>2019-08-28T03:02:21.220Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1563394927360-08299fbdadb3?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><ul><li><p><strong>关于 Spring Security</strong><br>Web系统的认证和权限模块也算是一个系统的基础设施了，几乎任何的互联网服务都会涉及到这方面的要求。在Java EE领域，成熟的安全框架解决方案一般有 Apache Shiro、Spring Security等两种技术选型。Apache Shiro简单易用也算是一大优势，但其功能还是远不如 Spring Security强大。Spring Security可以为 Spring 应用提供声明式的安全访问控制，起通过提供一系列可以在 Spring应用上下文中可配置的Bean，并利用 Spring IoC和 AOP等功能特性来为应用系统提供声明式的安全访问控制功能，减少了诸多重复工作。</p></li><li><p><strong>关于JWT</strong><br>JSON Web Token (JWT)，是在网络应用间传递信息的一种基于 JSON的开放标准（(RFC 7519)，用于作为JSON对象在不同系统之间进行安全地信息传输。主要使用场景一般是用来在 身份提供者和服务提供者间传递被认证的用户身份信息。关于JWT的科普，可以看看阮一峰老师的《JSON Web Token 入门教程》。</p></li></ul><p>本文则结合 Spring Security和 JWT两大利器来打造一个简易的权限系统。</p><p>demo地址：<a href="https://github.com/LiJinHongPassion/springboot/tree/master/springbt_security_jwt" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/springboot/tree/master/springbt_security_jwt</a></p><hr><h2 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h2><p>springbt_security_jwt<br>    │  SpringbtSecurityJwtApplication.java    启动类<br>    │<br>    ├─comm<br>    │      Const.java    常量类<br>    │<br>    ├─config<br>    │      WebSecurityConfig.java    Spring Security配置类<br>    │<br>    ├─controller<br>    │      JwtAuthController.java<br>    │      TestController.java<br>    │<br>    ├─database<br>    │      UserRepository.java    模拟数据源<br>    │<br>    ├─filter<br>    │      JwtTokenFilter.java    jwt过滤器<br>    │<br>    ├─model<br>    │  └─entity<br>    │          Role.java    角色类<br>    │          User.java    用户类<br>    │<br>    ├─service<br>    │  │  AuthService.java    权限服务<br>    │  │  UserService.java<br>    │  │<br>    │  └─impl<br>    │          AuthServiceImpl.java    权限服务接口<br>    │<br>    └─util<br>            JwtTokenUtil.java    jwt工具类（生成jwt和验证jwt）</p><hr><h2 id="入门教程"><a href="#入门教程" class="headerlink" title="入门教程"></a>入门教程</h2><h4 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h4><p><strong>role.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/23-10:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Role</span><span class="params">(Long id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>user.java</strong></p><p>此处所创建的 User类继承了 Spring Security的 UserDetails接口，从而成为了一个符合 Security安全的用户，即通过继承 UserDetails，即可实现 Security中相关的安全功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/23-10:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getRoles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoles</span><span class="params">(List&lt;Role&gt; roles)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roles = roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Long id, String username, String password, List&lt;Role&gt; roles)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">        <span class="keyword">this</span>.roles = roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面为实现UserDetails而需要的重写方法！</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        List&lt;GrantedAuthority&gt; authorities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Role role : roles) &#123;</span><br><span class="line">            authorities.add( <span class="keyword">new</span> SimpleGrantedAuthority( role.getName() ) );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="jwt相关类"><a href="#jwt相关类" class="headerlink" title="jwt相关类"></a>jwt相关类</h4><p><strong>Const.java</strong></p><p>常量类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/23-10:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Const</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> EXPIRATION_TIME = <span class="number">432_000_000</span>;     <span class="comment">// 5天(以毫秒ms计)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SECRET = <span class="string">"CodeAntSecret"</span>;      <span class="comment">// JWT密码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOKEN_PREFIX = <span class="string">"Bearer"</span>;         <span class="comment">// Token前缀</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HEADER_STRING = <span class="string">"Authorization"</span>; <span class="comment">// 存放Token的Header Key</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JwtTokenUtil,java</strong></p><p>主要用于对 JWT Token进行各项操作，比如生成Token、验证Token、刷新Token等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH jwt工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/23-10:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtTokenUtil</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">5625635588908941275L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CLAIM_KEY_USERNAME = <span class="string">"sub"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CLAIM_KEY_CREATED = <span class="string">"created"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsernameFromToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        String username;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Claims claims = getClaimsFromToken(token);</span><br><span class="line">            username = claims.getSubject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            username = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreatedDateFromToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        Date created;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Claims claims = getClaimsFromToken(token);</span><br><span class="line">            created = <span class="keyword">new</span> Date((Long) claims.get(CLAIM_KEY_CREATED));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            created = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> created;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getExpirationDateFromToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        Date expiration;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Claims claims = getClaimsFromToken(token);</span><br><span class="line">            expiration = claims.getExpiration();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            expiration = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> expiration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Claims <span class="title">getClaimsFromToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        Claims claims;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            claims = Jwts.parser()</span><br><span class="line">                    .setSigningKey( Const.SECRET )</span><br><span class="line">                    .parseClaimsJws(token)</span><br><span class="line">                    .getBody();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            claims = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Date <span class="title">generateExpirationDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Date(System.currentTimeMillis() + Const.EXPIRATION_TIME * <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Boolean <span class="title">isTokenExpired</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Date expiration = getExpirationDateFromToken(token);</span><br><span class="line">        <span class="keyword">return</span> expiration.before(<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Boolean <span class="title">isCreatedBeforeLastPasswordReset</span><span class="params">(Date created, Date lastPasswordReset)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (lastPasswordReset != <span class="keyword">null</span> &amp;&amp; created.before(lastPasswordReset));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generateToken</span><span class="params">(UserDetails userDetails)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; claims = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        claims.put(CLAIM_KEY_USERNAME, userDetails.getUsername());</span><br><span class="line">        claims.put(CLAIM_KEY_CREATED, <span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">return</span> generateToken(claims);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">generateToken</span><span class="params">(Map&lt;String, Object&gt; claims)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .setClaims(claims)</span><br><span class="line">                .setExpiration(generateExpirationDate())</span><br><span class="line">                .signWith(SignatureAlgorithm.HS512, Const.SECRET )</span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">canTokenBeRefreshed</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !isTokenExpired(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">refreshToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        String refreshedToken;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Claims claims = getClaimsFromToken(token);</span><br><span class="line">            claims.put(CLAIM_KEY_CREATED, <span class="keyword">new</span> Date());</span><br><span class="line">            refreshedToken = generateToken(claims);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            refreshedToken = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> refreshedToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">validateToken</span><span class="params">(String token, UserDetails userDetails)</span> </span>&#123;</span><br><span class="line">        User user = (User) userDetails;</span><br><span class="line">        <span class="keyword">final</span> String username = getUsernameFromToken(token);</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">                username.equals(user.getUsername())</span><br><span class="line">                        &amp;&amp; !isTokenExpired(token)</span><br><span class="line">                        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JwtTokenFilter.java</strong></p><p>创建Token过滤器，用于每次外部对接口请求时的Token处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/23-10:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtTokenFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtTokenUtil jwtTokenUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span> <span class="params">( HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String authHeader = request.getHeader( Const.HEADER_STRING );</span><br><span class="line">        <span class="keyword">if</span> (authHeader != <span class="keyword">null</span> &amp;&amp; authHeader.startsWith( Const.TOKEN_PREFIX )) &#123;</span><br><span class="line">            <span class="keyword">final</span> String authToken = authHeader.substring( Const.TOKEN_PREFIX.length() );</span><br><span class="line">            String username = jwtTokenUtil.getUsernameFromToken(authToken);</span><br><span class="line">            <span class="keyword">if</span> (username != <span class="keyword">null</span> &amp;&amp; SecurityContextHolder.getContext().getAuthentication() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                UserDetails userDetails = <span class="keyword">this</span>.userDetailsService.loadUserByUsername(username);</span><br><span class="line">                <span class="keyword">if</span> (jwtTokenUtil.validateToken(authToken, userDetails)) &#123;</span><br><span class="line">                        UsernamePasswordAuthenticationToken authentication = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(</span><br><span class="line">                                userDetails, <span class="keyword">null</span>, userDetails.getAuthorities());</span><br><span class="line">                        authentication.setDetails(<span class="keyword">new</span> WebAuthenticationDetailsSource().buildDetails(</span><br><span class="line">                                request));</span><br><span class="line">                        SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="service业务编写"><a href="#service业务编写" class="headerlink" title="service业务编写"></a>service业务编写</h4><p><strong>AuthService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/23-10:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AuthService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">register</span><span class="params">( User userToAdd )</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">login</span><span class="params">( String username, String password )</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>AuthServiceImpl.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/23-10:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthServiceImpl</span> <span class="keyword">implements</span> <span class="title">AuthService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtTokenUtil jwtTokenUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 登录</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">( String username, String password )</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        UsernamePasswordAuthenticationToken upToken = <span class="keyword">new</span> UsernamePasswordAuthenticationToken( username, password );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Authentication authentication = authenticationManager.authenticate(upToken);</span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过用户名获取用户</span></span><br><span class="line">        <span class="keyword">final</span> UserDetails userDetails = userDetailsService.loadUserByUsername( username );</span><br><span class="line">        <span class="keyword">final</span> String token = jwtTokenUtil.generateToken(userDetails);</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">register</span><span class="params">( User userToAdd )</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> String username = userToAdd.getUsername();</span><br><span class="line">        <span class="keyword">if</span>( userRepository.findByUsername(username)!=<span class="keyword">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加密密码，与WebSecurityConfig加密方式对应</span></span><br><span class="line">        BCryptPasswordEncoder encoder = <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">        <span class="keyword">final</span> String rawPassword = userToAdd.getPassword();</span><br><span class="line">        userToAdd.setPassword( encoder.encode(rawPassword) );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userRepository.save(userToAdd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>UserService.java</strong></p><p>需要实现UserDetailsService接口，实现安全验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/23-10:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据用户名加载用户信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        User user = userRepository.findByUsername(s);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"用户不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h4><p><strong>WebSecurityConfig.java</strong></p><p>这是一个高度综合的配置类，主要是通过重写 <code>WebSecurityConfigurerAdapter</code> 的部分 <code>configure</code>配置，来实现用户自定义的部分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/23-10:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled=<span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//jwt过滤器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JwtTokenFilter <span class="title">authenticationTokenFilterBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JwtTokenFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationManager <span class="title">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证service的加密方式</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">( AuthenticationManagerBuilder auth )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.userDetailsService( userService ).passwordEncoder( <span class="keyword">new</span> BCryptPasswordEncoder() );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">( HttpSecurity httpSecurity )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//关闭打开的csrf（跨域）保护</span></span><br><span class="line">        httpSecurity.csrf().disable()</span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(HttpMethod.OPTIONS, <span class="string">"/**"</span>).permitAll()</span><br><span class="line">                .antMatchers(HttpMethod.POST, <span class="string">"/authentication/**"</span>).permitAll()</span><br><span class="line">                .antMatchers(HttpMethod.POST).authenticated()</span><br><span class="line">                .antMatchers(HttpMethod.PUT).authenticated()</span><br><span class="line">                .antMatchers(HttpMethod.DELETE).authenticated()</span><br><span class="line">                .antMatchers(HttpMethod.GET).authenticated();</span><br><span class="line"></span><br><span class="line">        httpSecurity</span><br><span class="line">                .addFilterBefore(authenticationTokenFilterBean(), UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">        httpSecurity.headers().cacheControl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><h6 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h6><p><strong>UserRepository.java</strong></p><p>用户名：codeAnt，密码：codeAnt123，权限：ROLE_NORMAL</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/23-10:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QQ</span> 1755497577</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Role&gt; roles = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> &#123;</span><br><span class="line">        roles.add(<span class="keyword">new</span> Role(Long.valueOf(<span class="string">"1"</span>), <span class="string">"ROLE_NORMAL"</span>));</span><br><span class="line">        <span class="comment">//roles.add(new Role(Long.valueOf("2"), "ROLE_ADMIN"));</span></span><br><span class="line">        users.add(<span class="keyword">new</span> User(Long.valueOf(<span class="string">"11621"</span>), <span class="string">"codeAnt"</span>, <span class="string">"$2a$10$Gw.Cf/uL3o21c6jpSHmdY..pi.K9P0KHummmVadYbnMcB1woMa5t."</span>, roles));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findByUsername</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(User user : users)&#123;</span><br><span class="line">            <span class="keyword">if</span>(user.getUsername().equals(s))&#123;</span><br><span class="line">                <span class="keyword">return</span> user;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">save</span><span class="params">(User userToAdd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(findByUsername(userToAdd.getUsername()) == <span class="keyword">null</span>)&#123;</span><br><span class="line">            users.add(userToAdd);</span><br><span class="line">            <span class="keyword">return</span> userToAdd;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h6><p>登录和注册的 Controller：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author LJH</span><br><span class="line"> * 20190312</span><br><span class="line"> */</span><br><span class="line">@RestController</span><br><span class="line">public class JwtAuthController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private AuthService authService;</span><br><span class="line"></span><br><span class="line">    // 登录</span><br><span class="line">    @RequestMapping(value = &quot;/authentication/login&quot;, method = RequestMethod.POST)</span><br><span class="line">    public String createToken( String username,String password ) throws AuthenticationException &#123;</span><br><span class="line">        return authService.login( username, password );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 注册</span><br><span class="line">    @RequestMapping(value = &quot;/authentication/register&quot;, method = RequestMethod.POST)</span><br><span class="line">    public User register( @RequestBody User addedUser ) throws AuthenticationException &#123;</span><br><span class="line">        return authService.register(addedUser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再编写一个测试权限的 Controller：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author LJH</span><br><span class="line"> * @date 2019/8/23-10:35</span><br><span class="line"> * @QQ 1755497577</span><br><span class="line"> */</span><br><span class="line">@RestController</span><br><span class="line">public class TestController &#123;</span><br><span class="line"></span><br><span class="line">    // 测试普通权限</span><br><span class="line">    @PreAuthorize(&quot;hasAuthority(&apos;ROLE_NORMAL&apos;)&quot;)</span><br><span class="line">    @RequestMapping( value=&quot;/normal/test&quot;, method = RequestMethod.GET )</span><br><span class="line">    public String test1() &#123;</span><br><span class="line">        return &quot;ROLE_NORMAL /normal/test接口调用成功！&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 测试管理员权限</span><br><span class="line">    @PreAuthorize(&quot;hasAuthority(&apos;ROLE_ADMIN&apos;)&quot;)</span><br><span class="line">    @RequestMapping( value = &quot;/admin/test&quot;, method = RequestMethod.GET )</span><br><span class="line">    public String test2() &#123;</span><br><span class="line">        return &quot;ROLE_ADMIN /admin/test接口调用成功！&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里给出两个测试接口用于测试权限相关问题，其中接口 <code>/normal/test</code>需要用户具备普通角色（<code>ROLE_NORMAL</code>）即可访问，而接口<code>/admin/test</code>则需要用户具备管理员角色（<code>ROLE_ADMIN</code>）才可以访问。</p><h2 id="启动验证"><a href="#启动验证" class="headerlink" title="启动验证"></a>启动验证</h2><p><strong>数据源用户信息：</strong></p><p>用户名：codeAnt，密码：codeAnt123，权限：ROLE_NORMAL</p><p><strong>验证流程：</strong></p><ul><li>登录：登录获取token</li><li>未携带token访问普通权限</li><li>携带token普通权限</li><li>携带token管理员权限</li></ul><hr><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p><strong>登录</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dle4/c1.png" alt></p><p><strong>未携带token访问普通权限</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dle4/c3.png" alt></p><p><strong>携带token普通权限</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dle4/c2.png" alt></p><p><strong>携带token管理员权限</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dle4/c4.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1563394927360-08299fbdadb3?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="springboot" scheme="https://lijinhongpassion.github.io/tags/springboot/"/>
    
      <category term="jwt" scheme="https://lijinhongpassion.github.io/tags/jwt/"/>
    
      <category term="security" scheme="https://lijinhongpassion.github.io/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>Java-JustAuth第三方授权项目入门使用教程</title>
    <link href="https://lijinhongpassion.github.io/codeant/dle5.html"/>
    <id>https://lijinhongpassion.github.io/codeant/dle5.html</id>
    <published>2019-08-23T12:59:04.000Z</published>
    <updated>2019-08-23T15:15:21.419Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1556742205-e10c9486e506?ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="1-简述"><a href="#1-简述" class="headerlink" title="1. 简述"></a>1. 简述</h2><p>应用场景：在搭建网站过程中，我们可能需要涉及到第三方登录，例如qq，微信，github，钉钉等；常规的办法是到相应的官网上去，集成第三方的sdk来实现授权登录。</p><p>解决方案：JustAuth集成了实际中应用的授权登录，能够快速的进行授权；</p><p>个人demo：<a href="https://github.com/LiJinHongPassion/springboot/tree/master/springboot_justauth_demo" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/springboot/tree/master/springboot_justauth_demo</a></p><hr><h2 id="2-知识理论"><a href="#2-知识理论" class="headerlink" title="2. 知识理论"></a>2. 知识理论</h2><p>在这之前，你需要了解：</p><p><strong><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener">OAuth2.0</a></strong>：OAuth是一个关于授权（authorization）的开放网络标准</p><hr><h2 id="3-授权流程"><a href="#3-授权流程" class="headerlink" title="3. 授权流程"></a>3. 授权流程</h2><p>这里以GitHub为例子，需求是A网站需要集成GitHub的登录授权，流程图如下：</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dle5/1.png" alt></p><p><strong>解释上图流程：</strong></p><ol><li>针对不同的第三方平台，我们需要拥有他的平台账号进入他的开发者中心；</li><li>进入他的开发者中心后，我们需要找到<strong>创建应用</strong>类似的栏目，然后将A网站添加进去，设置回调url，并记录下 id 和 secret；</li><li>最后我们就只需要使用工具实现授权</li></ol><hr><h2 id="4-实例：GitHub"><a href="#4-实例：GitHub" class="headerlink" title="4. 实例：GitHub"></a>4. 实例：GitHub</h2><h4 id="4-1-获取账号"><a href="#4-1-获取账号" class="headerlink" title="4.1. 获取账号"></a>4.1. 获取账号</h4><p>需要账号的自行去注册：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></p><h4 id="4-2-创建应用"><a href="#4-2-创建应用" class="headerlink" title="4.2. 创建应用"></a>4.2. 创建应用</h4><p>进入开发者设置：<a href="https://github.com/settings/developers" target="_blank" rel="noopener">https://github.com/settings/developers</a></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dle5/2.png" alt></p><p>OAuth Apps -&gt; New OAuth App</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dle5/3.png" alt></p><p>记住id和secret</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dle5/4.png" alt></p><h4 id="4-3-使用JustAuth实现授权登陆"><a href="#4-3-使用JustAuth实现授权登陆" class="headerlink" title="4.3 使用JustAuth实现授权登陆"></a>4.3 使用<code>JustAuth</code>实现授权登陆</h4><p>下载官方的demo：<a href="https://gitee.com/yadong.zhang/JustAuth-demo" target="_blank" rel="noopener">https://gitee.com/yadong.zhang/JustAuth-demo</a></p><p>流程：调用授权方法-&gt;确认授权-&gt;跳转回调url-&gt;返回授权信息</p><p><strong>RestAuthController.java</strong></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dle5/6.png" alt></p><p><strong>RestAuthController.java</strong>中的<code>getAuthRequest(String source)</code></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dle5/5.png" alt></p><p><strong>RestAuthController.java</strong>中的<code>login(@PathVariable(&quot;source&quot;) String source, AuthCallback callback)</code></p><p>授权成功后，调用回调地址，这里的回调地址设置的是login方法，authRequest.login(callback)会返回授权信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * oauth平台中配置的授权回调地址，以本项目为例，在创建github授权应用时的回调地址应为：http://127.0.0.1:8443/oauth/callback/github</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/callback/&#123;source&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">login</span><span class="params">(@PathVariable(<span class="string">"source"</span>)</span> String source, AuthCallback callback) </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进入callback："</span> + source + <span class="string">" callback params："</span> + JSONObject.toJSONString(callback));</span><br><span class="line">        AuthRequest authRequest = getAuthRequest(source);</span><br><span class="line">        AuthResponse response = authRequest.login(callback);</span><br><span class="line">        System.out.println(JSONObject.toJSONString(response));</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>AuthCallback</strong>：该对象用于接收回调地址栏返回的code，state等参数，</p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dle5/9.png" alt></p><p><img src="https://raw.githubusercontent.com/LiJinHongPassion/LiJinHongPassion.github.io/master/codeant/dle5/8.png" alt></p><hr><h2 id="5-已集成平台"><a href="#5-已集成平台" class="headerlink" title="5.已集成平台"></a>5.已集成平台</h2><p>具体文档还是需参考官网的文档(<a href="https://docs.justauth.whnb.wang/#/README?id=已集成的平台）：" target="_blank" rel="noopener">https://docs.justauth.whnb.wang/#/README?id=已集成的平台）：</a></p><table><thead><tr><th>平台</th><th>API类</th><th>SDK</th></tr></thead><tbody><tr><td>gitee</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthGiteeRequest.java" target="_blank" rel="noopener">AuthGiteeRequest</a></td><td><a href="https://gitee.com/api/v5/oauth_doc#list_1" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>github</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthGiteeRequest.java" target="_blank" rel="noopener">AuthGithubRequest</a></td><td><a href="https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>weibo</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthGiteeRequest.java" target="_blank" rel="noopener">AuthWeiboRequest</a></td><td><a href="https://open.weibo.com/wiki/授权机制说明" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>钉钉</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthDingTalkRequest.java" target="_blank" rel="noopener">AuthDingTalkRequest</a></td><td><a href="https://open-doc.dingtalk.com/microapp/serverapi2/kymkv6" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>百度</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthBaiduRequest.java" target="_blank" rel="noopener">AuthBaiduRequest</a></td><td><a href="http://developer.baidu.com/wiki/index.php?title=docs/oauth" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>coding</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthCodingRequest.java" target="_blank" rel="noopener">AuthCodingRequest</a></td><td><a href="https://open.coding.net/references/oauth/" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>微云</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthTencentCloudRequest.java" target="_blank" rel="noopener">AuthTencentCloudRequest</a></td><td><a href="https://dev.tencent.com/help/doc/faq/b4e5b7aee786/oauth" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>开源中国</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthOschinaRequest.java" target="_blank" rel="noopener">AuthOschinaRequest</a></td><td><a href="https://www.oschina.net/openapi/docs/oauth2_authorize" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>支付宝</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthAlipayRequest.java" target="_blank" rel="noopener">AuthAlipayRequest</a></td><td><a href="https://alipay.open.taobao.com/docs/doc.htm?spm=a219a.7629140.0.0.336d4b70GUKXOl&amp;treeId=193&amp;articleId=105809&amp;docType=1" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>qq</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthQqRequest.java" target="_blank" rel="noopener">AuthQqRequest</a></td><td><a href="https://wiki.connect.qq.com/使用authorization_code获取access_token" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>微信</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthWeChatRequest.java" target="_blank" rel="noopener">AuthWeChatRequest</a></td><td><a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419316505&amp;token=&amp;lang=zh_CN" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>淘宝</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthTaobaoRequest.java" target="_blank" rel="noopener">AuthTaobaoRequest</a></td><td><a href="https://open.taobao.com/doc.htm?spm=a219a.7386797.0.0.4e00669acnkQy6&amp;source=search&amp;docId=105590&amp;docType=1" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>google</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthGoogleRequest.java" target="_blank" rel="noopener">AuthGoogleRequest</a></td><td><a href="https://developers.google.com/identity/protocols/OpenIDConnect" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>facebook</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthFacebookRequest.java" target="_blank" rel="noopener">AuthFacebookRequest</a></td><td><a href="https://developers.facebook.com/docs/facebook-login/manually-build-a-login-flow" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>抖音</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthDouyinRequest.java" target="_blank" rel="noopener">AuthDouyinRequest</a></td><td><a href="https://www.douyin.com/platform/doc/m-2-1-1" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>linkedin</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthLinkedinRequest.java" target="_blank" rel="noopener">AuthLinkedinRequest</a></td><td><a href="https://docs.microsoft.com/zh-cn/linkedin/shared/authentication/authorization-code-flow?context=linkedin/context" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>微软</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthMicrosoftRequest.java" target="_blank" rel="noopener">AuthMicrosoftRequest</a></td><td><a href="https://docs.microsoft.com/zh-cn/graph/auth/" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>小米</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthMiRequest.java" target="_blank" rel="noopener">AuthMiRequest</a></td><td><a href="https://dev.mi.com/console/doc/detail?pId=711" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>头条</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthToutiaoRequest.java" target="_blank" rel="noopener">AuthToutiaoRequest</a></td><td><a href="https://open.mp.toutiao.com/#/resource?_k=y7mfgk" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>teambition</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthTeambitionRequest.java" target="_blank" rel="noopener">AuthTeambitionRequest</a></td><td><a href="https://docs.teambition.com/" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>人人</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthRenrenRequest.java" target="_blank" rel="noopener">AuthRenrenRequest</a></td><td><a href="http://open.renren.com/wiki/OAuth2.0" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>pinterest</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthPinterestRequest.java" target="_blank" rel="noopener">AuthPinterestRequest</a></td><td><a href="https://developers.pinterest.com/docs/api/overview/?" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>stackoverflow</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthStackOverflowRequest.java" target="_blank" rel="noopener">AuthStackOverflowRequest</a></td><td><a href="https://api.stackexchange.com/docs/authentication" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>华为</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthHuaweiRequest.java" target="_blank" rel="noopener">AuthHuaweiRequest</a></td><td><a href="https://developer.huawei.com/consumer/cn/devservice/doc/30101" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>企业微信</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthWeChatEnterpriseRequest.java" target="_blank" rel="noopener">AuthWeChatEnterpriseRequest</a></td><td><a href="https://open.work.weixin.qq.com/api/doc#90000/90135/90664" target="_blank" rel="noopener">参考文档</a></td></tr><tr><td>CSDN</td><td><a href="https://gitee.com/yadong.zhang/JustAuth/blob/master/src/main/java/me/zhyd/oauth/request/AuthCsdnRequest.java" target="_blank" rel="noopener">AuthCsdnRequest</a></td><td>无</td></tr></tbody></table><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://gitee.com/yadong.zhang/JustAuth-demo" target="_blank" rel="noopener">https://gitee.com/yadong.zhang/JustAuth-demo</a>    JustAuth的springboot-demo</p><p><a href="https://gitee.com/yadong.zhang/JustAuth" target="_blank" rel="noopener">https://gitee.com/yadong.zhang/JustAuth</a>    JustAuth的官方项目地址</p><p><a href="https://docs.justauth.whnb.wang/#/README" target="_blank" rel="noopener">https://docs.justauth.whnb.wang/#/README</a>    JustAuth的说明文档</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1556742205-e10c9486e506?ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="justauth" scheme="https://lijinhongpassion.github.io/tags/justauth/"/>
    
  </entry>
  
</feed>
