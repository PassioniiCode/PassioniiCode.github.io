<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code Ant&#39;s Blog</title>
  
  <subtitle>“每天进步一点点”</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lijinhongpassion.github.io/"/>
  <updated>2019-03-18T06:46:22.077Z</updated>
  <id>https://lijinhongpassion.github.io/</id>
  
  <author>
    <name>Code Ant</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2019年计划</title>
    <link href="https://lijinhongpassion.github.io/codeant/2511.html"/>
    <id>https://lijinhongpassion.github.io/codeant/2511.html</id>
    <published>2019-12-31T05:02:43.000Z</published>
    <updated>2019-03-18T06:46:22.077Z</updated>
    
    <content type="html"><![CDATA[<hr><p><blockquote><strong>2019上半年规划</strong></blockquote></p><img src="/codeant/2511/2019年度计划.png" title="2019上半年规划"><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;&lt;blockquote&gt;&lt;strong&gt;2019上半年规划&lt;/strong&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;img src=&quot;/codeant/2511/2019年度计划.png&quot; title=&quot;2019上半年规划&quot;&gt;
&lt;hr&gt;

      
    
    </summary>
    
    
      <category term="年度计划" scheme="https://lijinhongpassion.github.io/tags/%E5%B9%B4%E5%BA%A6%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-深入理解Java虚拟机之类文件结构</title>
    <link href="https://lijinhongpassion.github.io/codeant/32ac.html"/>
    <id>https://lijinhongpassion.github.io/codeant/32ac.html</id>
    <published>2019-06-16T09:18:32.000Z</published>
    <updated>2019-06-16T09:20:25.200Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1560568082-c15188aa6510?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>本文主要对类文件（<code>.class</code>文件）结构简单讲诉，一次对文件结构有个大致的了解。</p><h1 id="1-类文件结构"><a href="#1-类文件结构" class="headerlink" title="1. 类文件结构"></a>1. 类文件结构</h1><p>根据java虚拟机规范，<code>.class</code>文件结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ClassFile &#123;</span><br><span class="line">    u4             magic; <span class="comment">//Class 文件的标志</span></span><br><span class="line">    u2             minor_version;<span class="comment">//Class 的小版本号</span></span><br><span class="line">    u2             major_version;<span class="comment">//Class 的大版本号</span></span><br><span class="line">    u2             constant_pool_count;<span class="comment">//常量池的数量</span></span><br><span class="line">    cp_info        constant_pool[constant_pool_count-<span class="number">1</span>];<span class="comment">//常量池</span></span><br><span class="line">    u2             access_flags;<span class="comment">//Class 的访问标记</span></span><br><span class="line">    u2             this_class;<span class="comment">//当前类</span></span><br><span class="line">    u2             super_class;<span class="comment">//父类</span></span><br><span class="line">    u2             interfaces_count;<span class="comment">//接口</span></span><br><span class="line">    u2             interfaces[interfaces_count];<span class="comment">//一个类可以实现多个接口</span></span><br><span class="line">    u2             fields_count;<span class="comment">//Class 文件的字段属性</span></span><br><span class="line">    field_info     fields[fields_count];<span class="comment">//一个类会可以有个字段</span></span><br><span class="line">    u2             methods_count;<span class="comment">//Class 文件的方法数量</span></span><br><span class="line">    method_info    methods[methods_count];<span class="comment">//一个类可以有个多个方法</span></span><br><span class="line">    u2             attributes_count;<span class="comment">//此类的属性表中的属性数</span></span><br><span class="line">    attribute_info attributes[attributes_count];<span class="comment">//属性表集合</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Class文件字节码结构组织示意图 </strong><br><img src="/codeant/undefined/1.png" title="1.png"></p><hr><h1 id="2-结构详细"><a href="#2-结构详细" class="headerlink" title="2. 结构详细"></a>2. 结构详细</h1><h2 id="2-1-魔数（咖啡宝贝）"><a href="#2-1-魔数（咖啡宝贝）" class="headerlink" title="2.1 魔数（咖啡宝贝）"></a>2.1 魔数（咖啡宝贝）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">u4             magic; <span class="comment">//Class 文件的标志</span></span><br></pre></td></tr></table></figure><p>每个 Class 文件的头四个字节称为魔数（Magic Number）,它的唯一作用是确定这个文件是否为一个能被虚拟机接收的 Class 文件。<br><strong>魔数</strong>的值为0xCAFEBABE（咖啡宝贝）</p><hr><h2 id="2-2-版本号"><a href="#2-2-版本号" class="headerlink" title="2.2 版本号"></a>2.2 版本号</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">u2             minor_version;<span class="comment">//Class 的小版本号</span></span><br><span class="line">u2             major_version;<span class="comment">//Class 的大版本号</span></span><br></pre></td></tr></table></figure><p>紧接着魔数的四个字节存储的是 Class 文件的版本号：第五和第六是次版本号，第七和第八是主版本号。</p><p><strong>高版本的 Java 虚拟机可以执行低版本编译器生成的 Class 文件，但是低版本的 Java 虚拟机不能执行高版本编译器生成的 Class 文件</strong>。所以，我们在实际开发的时候要确保开发的的 JDK 版本和生产环境的 JDK 版本保持一致。</p><hr><h2 id="2-3-常量池"><a href="#2-3-常量池" class="headerlink" title="2.3 常量池"></a>2.3 常量池</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">u2             constant_pool_count;<span class="comment">//常量池的数量</span></span><br><span class="line">cp_info        constant_pool[constant_pool_count-<span class="number">1</span>];<span class="comment">//常量池</span></span><br></pre></td></tr></table></figure><p>紧接着主次版本号之后的是常量池，常量池的数量是 constant_pool_count-1（<strong>常量池计数器是从1开始计数的，将第0项常量空出来是有特殊考虑的，索引值为0代表“不引用任何一个常量池项”</strong>）。</p><p>常量池主要存放两大常量：字面量和符号引用。字面量比较接近于 Java 语言层面的的常量概念，如文本字符串、声明为 final 的常量值等。而符号引用则属于编译原理方面的概念。包括下面三类常量： </p><ul><li>类和接口的全限定名 </li><li>字段的名称和描述符 </li><li>方法的名称和描述符</li></ul><p>常量池中每一项常量都是一个表，这14种表有一个共同的特点：<strong>开始的第一位是一个 u1 类型的标志位 -tag 来标识常量的类型，代表当前这个常量属于哪种常量类型．</strong></p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">标志（tag）</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">CONSTANT_utf8_info</td><td style="text-align:center">1</td><td style="text-align:center">UTF-8编码的字符串</td></tr><tr><td style="text-align:center">CONSTANT_Integer_info</td><td style="text-align:center">3</td><td style="text-align:center">整形字面量</td></tr><tr><td style="text-align:center">CONSTANT_Float_info</td><td style="text-align:center">4</td><td style="text-align:center">浮点型字面量</td></tr><tr><td style="text-align:center">CONSTANT_Long_info</td><td style="text-align:center">５</td><td style="text-align:center">长整型字面量</td></tr><tr><td style="text-align:center">CONSTANT_Double_info</td><td style="text-align:center">６</td><td style="text-align:center">双精度浮点型字面量</td></tr><tr><td style="text-align:center">CONSTANT_Class_info</td><td style="text-align:center">７</td><td style="text-align:center">类或接口的符号引用</td></tr><tr><td style="text-align:center">CONSTANT_String_info</td><td style="text-align:center">８</td><td style="text-align:center">字符串类型字面量</td></tr><tr><td style="text-align:center">CONSTANT_Fieldref_info</td><td style="text-align:center">９</td><td style="text-align:center">字段的符号引用</td></tr><tr><td style="text-align:center">CONSTANT_Methodref_info</td><td style="text-align:center">10</td><td style="text-align:center">类中方法的符号引用</td></tr><tr><td style="text-align:center">CONSTANT_InterfaceMethodref_info</td><td style="text-align:center">11</td><td style="text-align:center">接口中方法的符号引用</td></tr><tr><td style="text-align:center">CONSTANT_NameAndType_info</td><td style="text-align:center">12</td><td style="text-align:center">字段或方法的符号引用</td></tr><tr><td style="text-align:center">CONSTANT_MothodType_info</td><td style="text-align:center">16</td><td style="text-align:center">标志方法类型</td></tr><tr><td style="text-align:center">CONSTANT_MethodHandle_info</td><td style="text-align:center">15</td><td style="text-align:center">表示方法句柄</td></tr><tr><td style="text-align:center">CONSTANT_InvokeDynamic_info</td><td style="text-align:center">18</td><td style="text-align:center">表示一个动态方法调用点</td></tr></tbody></table><p><code>.class</code> 文件可以通过<code>javap -v class类名</code> 指令来看一下其常量池中的信息(<code>javap -v  class类名-&gt; temp.txt</code> ：将结果输出到 temp.txt 文件)。</p><h2 id="2-4-访问标志"><a href="#2-4-访问标志" class="headerlink" title="2.4 访问标志"></a>2.4 访问标志</h2><p>在常量池结束之后，紧接着的两个字节代表访问标志，这个标志用于识别一些类或者接口层次的访问信息，包括：这个 Class 是类还是接口，是否为 public 或者 abstract 类型，如果是类的话是否声明为 final 等等。</p><p>类访问和属性修饰符:</p><img src="/codeant/undefined/2.png" title="2.png"><p>我们定义了一个 Employee 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.snailclimb.bean;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>javap -v class类名</code> 指令来看一下类的访问标志。</p><img src="/codeant/undefined/3.png" title="3.png"><h2 id="2-5-当前类索引-父类索引与接口索引集合"><a href="#2-5-当前类索引-父类索引与接口索引集合" class="headerlink" title="2.5 当前类索引,父类索引与接口索引集合"></a>2.5 当前类索引,父类索引与接口索引集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">u2             this_class;<span class="comment">//当前类</span></span><br><span class="line">u2             super_class;<span class="comment">//父类</span></span><br><span class="line">u2             interfaces_count;<span class="comment">//接口</span></span><br><span class="line">u2             interfaces[interfaces_count];<span class="comment">//一个雷可以实现多个接口</span></span><br></pre></td></tr></table></figure><p><strong>类索引用于确定这个类的全限定名，父类索引用于确定这个类的父类的全限定名，由于 Java 语言的单继承，所以父类索引只有一个，除了 <code>java.lang.Object</code> 之外，所有的 java 类都有父类，因此除了 <code>java.lang.Object</code> 外，所有 Java 类的父类索引都不为 0。</strong></p><p><strong>接口索引集合用来描述这个类实现了那些接口，这些被实现的接口将按<code>implents</code>(如果这个类本身是接口的话则是<code>extends</code>) 后的接口顺序从左到右排列在接口索引集合中。</strong></p><h2 id="2-6-字段表集合"><a href="#2-6-字段表集合" class="headerlink" title="2.6 字段表集合"></a>2.6 字段表集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">u2             fields_count;<span class="comment">//Class 文件的字段的个数</span></span><br><span class="line">field_info     fields[fields_count];<span class="comment">//一个类会可以有个字段</span></span><br></pre></td></tr></table></figure><p>字段表（field info）用于描述接口或类中声明的变量。字段包括类级变量以及实例变量，但不包括在方法内部声明的局部变量。</p><p><strong>field info(字段表) 的结构:</strong></p><img src="/codeant/undefined/4.png" title="4.png"><ul><li><strong>access_flags:</strong>  字段的作用域（<code>public</code> ,<code>private</code>,<code>protected</code>修饰符），是实例变量还是类变量（<code>static</code>修饰符）,可否被序列化（transient 修饰符）,可变性（final）,可见性（volatile 修饰符，是否强制从主内存读写）。</li><li><strong>name_index:</strong> 对常量池的引用，表示的字段的名称；</li><li><strong>descriptor_index:</strong> 对常量池的引用，表示字段和方法的描述符；</li><li><strong>attributes_count:</strong> 一个字段还会拥有一些额外的属性，attributes_count 存放属性的个数；</li><li><strong>attributes[attributes_count]:</strong> 存放具体属性具体内容。</li></ul><p>上述这些信息中，各个修饰符都是布尔值，要么有某个修饰符，要么没有，很适合使用标志位来表示。而字段叫什么名字、字段被定义为什么数据类型这些都是无法固定的，只能引用常量池中常量来描述。</p><p><strong>字段的 access_flags 的取值:</strong></p><img src="/codeant/undefined/4.png" title="4.png"><h2 id="2-7-方法表集合"><a href="#2-7-方法表集合" class="headerlink" title="2.7 方法表集合"></a>2.7 方法表集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">u2             methods_count;<span class="comment">//Class 文件的方法的数量</span></span><br><span class="line">method_info    methods[methods_count];<span class="comment">//一个类可以有个多个方法</span></span><br></pre></td></tr></table></figure><p>methods_count 表示方法的数量，而 method_info 表示的方法表。</p><p>Class 文件存储格式中对方法的描述与对字段的描述几乎采用了完全一致的方式。方法表的结构如同字段表一样，依次包括了访问标志、名称索引、描述符索引、属性表集合几项。 </p><p><strong>method_info(方法表的) 结构:</strong></p><p><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/方法表的结构.png" alt="方法表的结构"></p><p><strong>方法表的 access_flag 取值：</strong></p><p><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/方法表的access_flag的所有标志位.png" alt="方法表的 access_flag 取值"></p><p>注意：因为<code>volatile</code>修饰符和<code>transient</code>修饰符不可以修饰方法，所以方法表的访问标志中没有这两个对应的标志，但是增加了<code>synchronized</code>、<code>native</code>、<code>abstract</code>等关键字修饰方法，所以也就多了这些关键字对应的标志。</p><h2 id="2-8-属性表集合"><a href="#2-8-属性表集合" class="headerlink" title="2.8 属性表集合"></a>2.8 属性表集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">u2             attributes_count;<span class="comment">//此类的属性表中的属性数</span></span><br><span class="line">attribute_info attributes[attributes_count];<span class="comment">//属性表集合</span></span><br></pre></td></tr></table></figure><p>在 Class 文件，字段表，方法表中都可以携带自己的属性表集合，以用于描述某些场景专有的信息。与 Class 文件中其它的数据项目要求的顺序、长度和内容不同，属性表集合的限制稍微宽松一些，不再要求各个属性表具有严格的顺序，并且只要不与已有的属性名重复，任何人实现的编译器都可以向属性表中写 入自己定义的属性信息，Java 虚拟机运行时会忽略掉它不认识的属性。</p><h1 id="3-举例"><a href="#3-举例" class="headerlink" title="3. 举例"></a>3. 举例</h1><h2 id="3-1-Person-java"><a href="#3-1-Person-java" class="headerlink" title="3.1 Person.java"></a>3.1 Person.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/6/16-16:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer AGE = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-Person-class"><a href="#3-2-Person-class" class="headerlink" title="3.2 Person.class"></a>3.2 Person.class</h2><p>通过<code>javac .\Person.java</code>编译</p><p>通过<code>javap -verbose .\Person.class</code>阅读</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">Classfile /C:/Users/Li/Desktop/Person.class</span><br><span class="line">  Last modified <span class="number">2019</span>-<span class="number">6</span>-<span class="number">16</span>; size <span class="number">650</span> bytes</span><br><span class="line">  MD5 checksum bb07a4e94f2bd023ff5902e11ea78621</span><br><span class="line">  Compiled from <span class="string">"Person.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:<span class="comment">//常量池</span></span><br><span class="line">   #1 = Methodref          #7.#25         // java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">   #2 = Methodref          #26.#27   // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span><br><span class="line">   #3 = Fieldref           #6.#28         // Person.AGE:Ljava/lang/Integer;</span><br><span class="line">   #4 = Fieldref           #6.#29         // Person.name:Ljava/lang/String;</span><br><span class="line">   #5 = Fieldref           #6.#30         // Person.pwd:Ljava/lang/String;</span><br><span class="line">   #6 = Class              #31            // Person</span><br><span class="line">   #7 = Class              #32            // java/lang/Object</span><br><span class="line">   #8 = Utf8               AGE</span><br><span class="line">   #9 = Utf8               Ljava/lang/Integer;</span><br><span class="line">  #10 = Utf8               name</span><br><span class="line">  #11 = Utf8               Ljava/lang/String;</span><br><span class="line">  #12 = Utf8               pwd</span><br><span class="line">  #13 = Utf8               &lt;init&gt;</span><br><span class="line">  #14 = Utf8               ()V</span><br><span class="line">  #15 = Utf8               Code</span><br><span class="line">  #16 = Utf8               LineNumberTable</span><br><span class="line">  #17 = Utf8               getName</span><br><span class="line">  #18 = Utf8               ()Ljava/lang/String;</span><br><span class="line">  #19 = Utf8               setName</span><br><span class="line">  #20 = Utf8               (Ljava/lang/String;)V</span><br><span class="line">  #21 = Utf8               getPwd</span><br><span class="line">  #22 = Utf8               setPwd</span><br><span class="line">  #23 = Utf8               SourceFile</span><br><span class="line">  #24 = Utf8               Person.java</span><br><span class="line">  #25 = NameAndType        #13:#14        // "&lt;init&gt;":()V</span><br><span class="line">  #26 = Class              #33            // java/lang/Integer</span><br><span class="line">  #27 = NameAndType        #34:#35        // valueOf:(I)Ljava/lang/Integer;</span><br><span class="line">  #28 = NameAndType        #8:#9          // AGE:Ljava/lang/Integer;</span><br><span class="line">  #29 = NameAndType        #10:#11        // name:Ljava/lang/String;</span><br><span class="line">  #30 = NameAndType        #12:#11        // pwd:Ljava/lang/String;</span><br><span class="line">  #31 = Utf8               Person</span><br><span class="line">  #32 = Utf8               java/lang/Object</span><br><span class="line">  #33 = Utf8               java/lang/Integer</span><br><span class="line">  #34 = Utf8               valueOf</span><br><span class="line">  #35 = Utf8               (I)Ljava/lang/Integer;</span><br><span class="line">&#123;<span class="comment">//方法表</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">         <span class="number">4</span>: aload_0</span><br><span class="line">         <span class="number">5</span>: bipush        <span class="number">21</span></span><br><span class="line">         7: invokestatic  #2   // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span><br><span class="line">        10: putfield      #3                  // Field AGE:Ljava/lang/Integer;</span><br><span class="line">        <span class="number">13</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">5</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">7</span>: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()Ljava/lang/String;</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         1: getfield      #4                  // Field name:Ljava/lang/String;</span><br><span class="line">         <span class="number">4</span>: areturn</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">13</span>: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(java.lang.String)</span></span>;</span><br><span class="line">    descriptor: (Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">2</span>, args_size=<span class="number">2</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: aload_1</span><br><span class="line">         2: putfield      #4                  // Field name:Ljava/lang/String;</span><br><span class="line">         <span class="number">5</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">17</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">18</span>: <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">getPwd</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()Ljava/lang/String;</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         1: getfield      #5                  // Field pwd:Ljava/lang/String;</span><br><span class="line">         <span class="number">4</span>: areturn</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">21</span>: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(java.lang.String)</span></span>;</span><br><span class="line">    descriptor: (Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">2</span>, args_size=<span class="number">2</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: aload_1</span><br><span class="line">         2: putfield      #5                  // Field pwd:Ljava/lang/String;</span><br><span class="line">         <span class="number">5</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">25</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">26</span>: <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">"Person.java"</span></span><br></pre></td></tr></table></figure><p>16进制文件需要在liunx系统下编译</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1560568082-c15188aa6510?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="jvm" scheme="https://lijinhongpassion.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-深入理解Java虚拟机之垃圾收集算法&amp;JVM调优</title>
    <link href="https://lijinhongpassion.github.io/codeant/ad39.html"/>
    <id>https://lijinhongpassion.github.io/codeant/ad39.html</id>
    <published>2019-06-06T09:02:10.000Z</published>
    <updated>2019-06-06T09:08:15.819Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1556228578-626e9590b81f?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>上一节我们了解了Java虚拟机的内存模型，这节我们来学习一下Java虚拟机的内存管理，也就是垃圾收集器。这也是Java语言和c语言的区别，Java利用垃圾收集器收集不使用的对象，c语言则不行，需要手动回收对象。 </p><hr><h1 id="1-对象已死吗"><a href="#1-对象已死吗" class="headerlink" title="1 对象已死吗"></a>1 对象已死吗</h1><p>垃圾收集器在对堆进行回收前，需要判断哪些对象还存活着，哪些已经死去；从标题字面意思，我们如何来判断一个对象是否已死。</p><hr><h2 id="1-1-引用计数算法"><a href="#1-1-引用计数算法" class="headerlink" title="1.1 引用计数算法"></a>1.1 引用计数算法</h2><ol><li>思路<br>给对象中添加一个引用计数器，每一个地方引用它的时候，计数器就加1，引用失效时，计数器就减1；任何时刻计数器为0的对象就是不可能再被使用的。<br><strong>但是Java虚拟机并没有选用计数算法来进行内存管理</strong></li><li>存在问题<br><strong>对象之间相互循环引用难以解决</strong><br>用大白话描述就是：实例化出两个对象A、B，把B对象赋值给A，A对象赋值给B。互相引用着对方，导致他们的引用计数器都不为0。</li></ol><hr><h2 id="1-2-可达性分析算法（根搜索算法）"><a href="#1-2-可达性分析算法（根搜索算法）" class="headerlink" title="1.2 可达性分析算法（根搜索算法）"></a>1.2 可达性分析算法（根搜索算法）</h2><ol><li>思路<br>通过一系列名为<code>GC Roots</code>的对象做为<strong>起点</strong>，从这些节点开始向下搜索，搜索所走过的路径称为引用链，当一个对象到<code>GC Roots</code>没有任何引用链或者说从<code>GC Roots</code>到这个对象不可达的时候，证明这个对象是不可用的。<br><strong>Java虚拟机采用的是这个算法进行内存管理，具体回收流程在1.4 对象生存-&gt;死亡</strong><img src="/codeant/ad39/1.png" title="1.png"></li><li>GC Roots对象</li></ol><ul><li>虚拟机栈（栈帧中的本地变量）中引用的对象</li><li>方法区中类静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>本地方法栈中JNI（Native方法）引用的对象</li></ul><hr><h2 id="1-3-何为引用"><a href="#1-3-何为引用" class="headerlink" title="1.3 何为引用"></a>1.3 何为引用</h2><ol><li><p>JDK1.2之前<br>JDK1.2之前，如果<strong>reference类型的数据</strong>中<strong>存储的数值代表的是另外一块内存的起始地址</strong>，就称这块内存代表着一个引用。</p></li><li><p>JDK1.2之后<br>应用场景：当内存空间还足够时，则能保留在内存之中；如果内存在进行垃圾回收后还是非常紧张，则抛弃这些对象。<br>概念扩充：强引用、软引用、弱引用、虚引用</p></li></ol><ul><li>强引用：类似“Object obj = new Object()”，<strong>只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象</strong></li><li>软引用：<strong>在系统将要发生内存溢出异常之前</strong>，将会把这些对象列进回收范围之中并进行第二次回收，第二次回收还是没有足够内存则抛内存溢出异常</li><li>弱引用：<strong>被弱引用关联的对象智能生存到下一次垃圾收集发生之前</strong></li><li>虚引用：<strong>一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个实例对象</strong></li></ul><hr><h2 id="1-4-对象生存-gt-死亡"><a href="#1-4-对象生存-gt-死亡" class="headerlink" title="1.4 对象生存-&gt;死亡"></a>1.4 对象生存-&gt;死亡</h2><p>在根搜索算法中的不可达对象并非“非死不可”，要真正宣告一个对象死亡，至少要经历两次标记过程：</p><p>第一次标记：如果对象在进行根搜索后发现没有与<code>GC Roots</code>相连接的引用链，他将会被第一次标记并且进行筛选，筛选条件是<strong>此对象是否有必要执行finalize（）方法</strong>。对象没有覆盖finalize方法或者finalize方法已经被虚拟机调用过，这两种情况都是视为没必要执行</p><p>第二次标记：当判定为有必要执行finalize（）方法，这个对象将会放置在F-Queue队列中，并在稍后由一条由虚拟机自动创建的、低优先级的Finalizer线程去执行，但并不保证线程执行结束（因为有可能会发生死循环，则会引起系统崩溃）。finalize方法是对象逃脱死亡命运的最后一次机会，稍后GC将对F-Queue中的对象进行第二次小规模的标记。<strong>如果对象要在finalize（）方法中拯救自己，只要重新与引用链上的任何一个对象建立关联即可，那在第二次标记时他将会被移出“即将回收”的集合。如果没有逃脱，就会被回收</strong></p><p>注：任何一个对象的finalize（）方法只会<strong>被系统自动调用一次（如需要逃脱，只要重新与引用链上的任何一个对象建立关联即可）</strong>，如果<strong>面临下一次回收，他的finalize（）方法不会被再次执行</strong>。</p><p><strong>finalize（）能做的所有工作，使用try-finally或者其他方法都可以做，所以不要使用finalize（）方法，这里只是让大家了解对象生存到死亡的一个过程</strong></p><hr><h1 id="2-垃圾收集"><a href="#2-垃圾收集" class="headerlink" title="2 垃圾收集"></a>2 垃圾收集</h1><h2 id="2-1-如何回收"><a href="#2-1-如何回收" class="headerlink" title="2.1 如何回收"></a>2.1 如何回收</h2><h3 id="2-1-1-回收方法区"><a href="#2-1-1-回收方法区" class="headerlink" title="2.1.1 回收方法区"></a>2.1.1 回收方法区</h3><img src="/codeant/ad39/2.png" title="2.png"><hr><h3 id="2-1-2-回收堆空间"><a href="#2-1-2-回收堆空间" class="headerlink" title="2.1.2 回收堆空间"></a>2.1.2 回收堆空间</h3><p>在堆中，尤其是新生代，常规应用进行一次垃圾收集一般可以回收70%~95%的空间，而永久代的垃圾收集效率远低于此。<br>主要是收集堆中存储的信息（对象，数组）</p><hr><h2 id="2-2-垃圾回收算法"><a href="#2-2-垃圾回收算法" class="headerlink" title="2.2 垃圾回收算法"></a>2.2 垃圾回收算法</h2><p>在java虚拟机中，针对堆空间，采用了<strong>分代收集算法</strong>，分为新生代和老年代（永久代是非堆空间，不归纳进来），针对各代特性，新生代–复制算法，老年代–标记-整理算法。</p><h3 id="2-2-1-标记-清除算法"><a href="#2-2-1-标记-清除算法" class="headerlink" title="2.2.1 标记-清除算法"></a>2.2.1 标记-清除算法</h3><ol><li><p>意义<br>该算法是最基础的收集算法，算法分为两个阶段：标记 &amp; 清除</p></li><li><p>思路<br>首先标记出所有需要回收的对象，在标记完成后统一回收掉被标记的对象；标记过程就是<strong>1.4 对象生存-&gt;死亡</strong>讲诉的过程。</p></li><li><p>缺点<br><strong>a. 效率</strong>：标记和清除效率都不高<br><strong>b. 空间</strong>：回收后会产生很多空间碎片</p></li></ol><hr><h3 id="2-2-2-复制算法（小-GC）–用于新生代"><a href="#2-2-2-复制算法（小-GC）–用于新生代" class="headerlink" title="2.2.2 复制算法（小 GC）–用于新生代"></a>2.2.2 复制算法（小 GC）–用于新生代</h3><ol><li><p>意义<br><strong>为解决效率问题</strong></p></li><li><p>思路<br>将可用内存按容量分为大小相等的凉快，每次使用其中的一块。当这一块的内存用完了，就将会存活着的对象复制到另一块上面，然后把已使用过的内存空间一次清理掉。不用考虑内存碎片的问题。</p></li><li><p>缺点<br><strong>a. 空间代价</strong>：空间代价比较高，内存缩小到原来的一半</p></li><li><p>用途<br>回收<strong>新生代</strong></p></li></ol><p>流程：将内存分为一块较大的Eden空间和两块较小的Survivor空间。<strong>空间大小比例为 默认伊甸园：幸存0：幸存1 = 8：1：1</strong>，每次使用eden和其中一块survivor空间，当回收时候，将还存活着的对象一次性地拷贝到另一块survivor空间，随后清理掉eden和刚才用过的survivor空间。</p><p>注意：因为比例为8：1：1，所以新生代容量相当于有新生代总容量的90%，那剩下的10%用于存储回收过后还存活的对象。但是我们不能保证每次回收后存活的对象不大于10%，<strong>当survivor空间不够用时候，需要依赖 老年代 进行分配担保</strong></p><hr><h3 id="2-2-3-标记-整理算法（大-GC）–用于老年代"><a href="#2-2-3-标记-整理算法（大-GC）–用于老年代" class="headerlink" title="2.2.3 标记-整理算法（大 GC）–用于老年代"></a>2.2.3 标记-整理算法（大 GC）–用于老年代</h3><ol><li><p>意义<br>复制收集算法适用于对象存活率较低的场景，当用于存活率较高的场景时，效率会变低，并且复制收集算法的缺点是为浪费50%的空间代价，所以老年代一半不能直接选用这种算法。</p></li><li><p>思路<br>分为标记 &amp; 整理两个阶段：标记过程还是跟标记清除算法一样，但是后续不是直接清除掉可回收对象，<strong>是先让所有的对象都向一端移动，然后直接清理掉端边界以外的内存</strong></p></li><li><p>用途<br>回收<strong>老年代</strong></p></li></ol><hr><h3 id="2-2-4-分代收集算法"><a href="#2-2-4-分代收集算法" class="headerlink" title="2.2.4 分代收集算法"></a>2.2.4 分代收集算法</h3><ol><li><p>意义<br>当前商业虚拟机的垃圾收集都采用分代收集算法</p></li><li><p>思路<br>根据对象存活周期的不同将内存划分为几块。</p></li><li><p>示例<br>一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用“标记- -清理”或者“标记一整理”算法来进行回收。</p></li></ol><hr><h2 id="2-3-垃圾收集器"><a href="#2-3-垃圾收集器" class="headerlink" title="2.3 垃圾收集器"></a>2.3 垃圾收集器</h2><p>收集算法是内存回收的方法论，垃圾收集器就是内存回收的具体实现。<br><img src="/codeant/ad39/3.png" title="3.png"><br>两个收集器之间存在连线表示可以搭配使用，不同的收集器适用于不同的应用场景</p><p>在新生区的收集器一般选用的复制收集算法，老年区的收集器一般使用“标记- -清理”或者“标记一整理”算法来进行回收。</p><p>这里罗列一下：<br>复制收集算法：Serial 收集器、ParNem 收集器、Parallel Scavenge 收集器<br>标记-整理算法：Serial Old 收集器、Parallel Old 收集器、G1 收集器<br>标记-清除算法：CMS 收集器</p><p>提前了解：</p><ul><li>并发：用户线程和垃圾收集线程同时执行（不一定并行，可能会交替执行），用户程序继续运行，垃圾收集线程运行在另外一个cpu</li><li>并行：多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态</li></ul><h3 id="2-3-1-Serial-收集器"><a href="#2-3-1-Serial-收集器" class="headerlink" title="2.3.1 Serial 收集器"></a>2.3.1 Serial 收集器</h3><img src="/codeant/ad39/4.png" title="4.png"><p>特点：</p><ul><li>最早的收集器，单线程收集器</li><li>GC的时候会暂停所有用户线程</li></ul><hr><h3 id="2-3-2-ParNew-收集器"><a href="#2-3-2-ParNew-收集器" class="headerlink" title="2.3.2 ParNew 收集器"></a>2.3.2 ParNew 收集器</h3><img src="/codeant/ad39/5.png" title="5.png"><p>特点：</p><ul><li>是Serial 收集器的多线程版本（并行）</li></ul><p><strong>Server模式下首选新生代收集器，因为目前只有它能与CMS收集器配合工作</strong></p><hr><h3 id="2-3-3-Parallel-Scavenge-收集器"><a href="#2-3-3-Parallel-Scavenge-收集器" class="headerlink" title="2.3.3 Parallel Scavenge 收集器"></a>2.3.3 Parallel Scavenge 收集器</h3><p>特点：</p><ul><li>并行的多线程收集器</li><li>达到一个可控制的吞吐量（吞吐量=运行用户代码时间/（运行用户代码时间+垃圾收集时间））</li></ul><hr><h3 id="2-3-4-Serial-Old-收集器"><a href="#2-3-4-Serial-Old-收集器" class="headerlink" title="2.3.4 Serial Old 收集器"></a>2.3.4 Serial Old 收集器</h3><p>特点：</p><ul><li>Serial 收集器的老年代版本</li><li>单线程收集器</li><li>给Client模式下的虚拟机使用</li></ul><p>工作过程如Serial 收集器所示</p><hr><h3 id="2-3-5-Parallel-Old-收集器"><a href="#2-3-5-Parallel-Old-收集器" class="headerlink" title="2.3.5 Parallel Old 收集器"></a>2.3.5 Parallel Old 收集器</h3><img src="/codeant/ad39/6.png" title="6.png"><p>特点：</p><ul><li>是Parallel Scavenge 收集器的老年代版本</li><li>多线程</li><li>标记-整理算法</li></ul><hr><h3 id="2-3-6-CMS-收集器"><a href="#2-3-6-CMS-收集器" class="headerlink" title="2.3.6 CMS 收集器"></a>2.3.6 CMS 收集器</h3><p>特点：</p><ul><li>以获取最短回收停顿时间为目标</li><li>重视服务的响应速度</li><li><strong>标记-清除算法</strong>（会产生大量的空间碎片）</li><li>并发收集、低停顿</li></ul><p>运转过程：</p><ul><li>初始标记</li><li>并发标记</li><li>重新标记</li><li>并发清除<br>初始标记和重新标记需要“stop the word”，也就是停止其他所有线程，只有这个线程运行。初始标记仅仅只是标记一下GC Roots能直接关联到的对象，速度很快；并发标记阶段就是进行GC Roots Tracing 的过程；而重新标记阶段则是为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录；</li></ul><p>缺点：</p><ul><li>CMS 收集器对CPU资源非常敏感</li><li>CMS 收集器无法处理浮动垃圾</li><li>会产生大量的空间碎片（标记-清除算法）</li></ul><hr><h3 id="2-3-7-G1-收集器"><a href="#2-3-7-G1-收集器" class="headerlink" title="2.3.7 G1 收集器"></a>2.3.7 G1 收集器</h3><p>面向server端应用的垃圾收集器</p><p>特点：</p><ul><li>并行与并发：利用多CPU、多核的硬件条件，缩短“Stop the word”的时间</li><li>分代收集</li><li>空间整合：局部使用复制算法，整体是标记-整理算法。这种特效在分配大对象是不会因为内存不足提前GC</li><li>可预测的停顿</li></ul><p>运转过程：</p><ul><li>初始标记</li><li>并发标记</li><li>最终标记</li><li>筛选回收</li></ul><hr><h2 id="2-4-内存分配和回收策略"><a href="#2-4-内存分配和回收策略" class="headerlink" title="2.4 内存分配和回收策略"></a>2.4 内存分配和回收策略</h2><ul><li>对象优先在eden区分配</li><li>大对象直接进入老年代</li><li>长期存活的对象将进入老年代</li></ul><h1 id="3-JVM调优汇总"><a href="#3-JVM调优汇总" class="headerlink" title="3 JVM调优汇总"></a>3 JVM调优汇总</h1><h2 id="3-1-调优工具"><a href="#3-1-调优工具" class="headerlink" title="3.1 调优工具"></a>3.1 调优工具</h2><p>Jconsole，jProfile，VisualVM</p><ul><li>Jconsole : jdk自带，功能简单，但是可以在系统有一定负荷的情况下使用。对垃圾回收算法有很详细的跟踪。</li><li>JProfiler：商业软件，需要付费。功能强大。</li><li>VisualVM：JDK自带，功能强大，与JProfiler类似。推荐。</li></ul><hr><h2 id="3-2-常见配置"><a href="#3-2-常见配置" class="headerlink" title="3.2 常见配置"></a>3.2 常见配置</h2><p>堆设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-Xms:初始堆大小</span><br><span class="line">-Xmx:最大堆大小</span><br><span class="line">-XX:NewSize=n:设置年轻代大小</span><br><span class="line">-XX:NewRatio=n:设置年轻代和年老代的比值。如:为3，表示年轻代与年老代比值为1：3，年轻代占整个年轻代年老代和的1/4</span><br><span class="line">-XX:SurvivorRatio=n:年轻代中Eden区与两个Survivor区的比值。注意Survivor区有两个。如：3，表示Eden：Survivor=3：2，一个Survivor区占整个年轻代的1/5</span><br><span class="line">-XX:MaxPermSize=n:设置持久代大小</span><br></pre></td></tr></table></figure></p><p>收集器设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseSerialGC:设置串行收集器</span><br><span class="line">-XX:+UseParallelGC:设置并行收集器</span><br><span class="line">-XX:+UseParalledlOldGC:设置并行年老代收集器</span><br><span class="line">-XX:+UseConcMarkSweepGC:设置并发收集器</span><br></pre></td></tr></table></figure></p><p>垃圾回收统计信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-XX:+PrintGC</span><br><span class="line">-XX:+PrintGCDetails</span><br><span class="line">-XX:+PrintGCTimeStamps</span><br><span class="line">-Xloggc:filename</span><br></pre></td></tr></table></figure></p><p>并行收集器设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-XX:ParallelGCThreads=n:设置并行收集器收集时使用的CPU数。并行收集线程数。</span><br><span class="line">-XX:MaxGCPauseMillis=n:设置并行收集最大暂停时间</span><br><span class="line">-XX:GCTimeRatio=n:设置垃圾回收时间占程序运行时间的百分比。公式为1/(1+n)</span><br></pre></td></tr></table></figure></p><p>并发收集器设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:+CMSIncrementalMode:设置为增量模式。适用于单CPU情况。</span><br><span class="line">-XX:ParallelGCThreads=n:设置并发收集器年轻代收集方式为并行收集时，使用的CPU数。并行收集线程数。</span><br></pre></td></tr></table></figure></p><hr><h2 id="3-3-调优总结"><a href="#3-3-调优总结" class="headerlink" title="3.3 调优总结"></a>3.3 调优总结</h2><p><strong>年轻代大小选择</strong></p><p>响应时间优先的应用：尽可能设大，直到接近系统的最低响应时间限制（根据实际情况选择）。在此种情况下，年轻代收集发生的频率也是最小的。同时，减少到达年老代的对象。</p><p>吞吐量优先的应用：尽可能的设置大，可能到达Gbit的程度。因为对响应时间没有要求，垃圾收集可以并行进行，一般适合8CPU以上的应用。</p><p><strong>年老代大小选择</strong></p><p>响应时间优先的应用：年老代使用并发收集器，所以其大小需要小心设置，一般要考虑并发会话率和会话持续时间等一些参数。如果堆设置小了，可以会造成内存碎片、高回收频率以及应用暂停而使用传统的标记清除方式；如果堆大了，则需要较长的收集时间。最优化的方案，一般需要参考以下数据获得：</p><p>并发垃圾收集信息<br>持久代并发收集次数<br>传统GC信息<br>花在年轻代和年老代回收上的时间比例<br>减少年轻代和年老代花费的时间，一般会提高应用的效率<br>吞吐量优先的应用</p><p>一般吞吐量优先的应用都有一个很大的年轻代和一个较小的年老代。原因是，这样可以尽可能回收掉大部分短期对象，减少中期的对象，而年老代尽存放长期存活对象。</p><p><strong>较小堆引起的碎片问题</strong></p><p>因为年老代的并发收集器使用标记、清除算法，所以不会对堆进行压缩。当收集器回收时，他会把相邻的空间进行合并，这样可以分配给较大的对象。但是，当堆空间较小时，运行一段时间以后，就会出现“碎片”，如果并发收集器找不到足够的空间，那么并发收集器将会停止，然后使用传统的标记、清除方式进行回收。如果出现“碎片”，可能需要进行如下配置：</p><ol><li>-XX:+UseCMSCompactAtFullCollection：使用并发收集器时，开启对年老代的压缩。</li><li>-XX:CMSFullGCsBeforeCompaction=0：上面配置开启的情况下，这里设置多少次Full GC后，对年老代进行压缩</li></ol><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1556228578-626e9590b81f?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="jvm" scheme="https://lijinhongpassion.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>Java-常见springboot注解</title>
    <link href="https://lijinhongpassion.github.io/codeant/c608.html"/>
    <id>https://lijinhongpassion.github.io/codeant/c608.html</id>
    <published>2019-06-05T05:22:39.000Z</published>
    <updated>2019-06-05T05:36:22.300Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1559548290-d6b0cb6c9050?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h1 id="1-SpringBoot-spring"><a href="#1-SpringBoot-spring" class="headerlink" title="1. SpringBoot/spring"></a>1. SpringBoot/spring</h1><h4 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication:"></a><strong>@SpringBootApplication:</strong></h4><p>包含@Configuration、@EnableAutoConfiguration、@ComponentScan通常用在主类上；</p><hr><h4 id="Repository"><a href="#Repository" class="headerlink" title="@Repository:"></a><strong>@Repository:</strong></h4><p>用于标注数据访问组件，即DAO组件；</p><hr><h4 id="Service"><a href="#Service" class="headerlink" title="@Service:"></a><strong>@Service:</strong></h4><p>用于标注业务层组件；</p><hr><h4 id="RestController"><a href="#RestController" class="headerlink" title="@RestController:"></a><strong>@RestController:</strong></h4><p>用于标注控制层组件(如struts中的action)，包含@Controller和@ResponseBody；</p><hr><h4 id="Controller"><a href="#Controller" class="headerlink" title="@Controller:"></a><strong>@Controller:</strong></h4><p>用于标注是控制层组件，需要返回页面时请用@Controller而不是@RestController；</p><hr><h4 id="Component"><a href="#Component" class="headerlink" title="@Component:"></a><strong>@Component:</strong></h4><p>泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注；</p><hr><h4 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody:"></a><strong>@ResponseBody:</strong></h4><p>表示该方法的返回结果直接写入HTTP response body中，一般在异步获取数据时使用，在使用@RequestMapping后，返回值通常解析为跳转路径，</p><p>加上@responsebody后返回结果不会被解析为跳转路径，而是直接写入HTTP response body中；比如异步获取json数据，加上@responsebody后，会直接返回json数据；</p><hr><h4 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody:"></a><strong>@RequestBody:</strong></h4><p>参数前加上这个注解之后，认为该参数必填。表示接受json字符串转为对象 List等；</p><hr><h4 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan:"></a><strong>@ComponentScan:</strong></h4><p>组件扫描。个人理解相当于，如果扫描到有@Component @Controller @Service等这些注解的类，则把这些类注册为bean*；</p><hr><h4 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration:"></a><strong>@Configuration:</strong></h4><p>指出该类是 Bean 配置的信息源，相当于XML中的，一般加在主类上；</p><hr><h4 id="Bean"><a href="#Bean" class="headerlink" title="@Bean:"></a><strong>@Bean:</strong></h4><p>相当于XML中的,放在方法的上面，而不是类，意思是产生一个bean,并交给spring管理；</p><hr><h4 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration:"></a><strong>@EnableAutoConfiguration:</strong></h4><p>让 Spring Boot 根据应用所声明的依赖来对 Spring 框架进行自动配置，一般加在主类上；</p><hr><h4 id="AutoWired"><a href="#AutoWired" class="headerlink" title="@AutoWired:"></a><strong>@AutoWired:</strong></h4><p>byType方式。把配置好的Bean拿来用，完成属性、方法的组装，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作；</p><p>当加上（required=false）时，就算找不到bean也不报错；</p><hr><h4 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier:"></a><strong>@Qualifier:</strong></h4><p>当有多个同一类型的Bean时，可以用@Qualifier(“name”)来指定。与@Autowired配合使用；</p><hr><h4 id="Resource-name-”name”-type-”type”-："><a href="#Resource-name-”name”-type-”type”-：" class="headerlink" title="@Resource(name=”name”,type=”type”)："></a><strong>@Resource(name=”name”,type=”type”)：</strong></h4><p>没有括号内内容的话，默认byName。与@Autowired干类似的事；</p><hr><h4 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping:"></a><strong>@RequestMapping:</strong></h4><p> RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径；<br>该注解有六个属性:</p><ul><li><strong>params:</strong>指定request中必须包含某些参数值是，才让该方法处理。</li><li><strong>headers:</strong>指定request中必须包含某些指定的header值，才能让该方法处理请求。  </li><li><strong>value:</strong>指定请求的实际地址，指定的地址可以是URI Template 模式  </li><li><strong>method:</strong>指定请求的method类型， GET、POST、PUT、DELETE等  </li><li><strong>consumes:</strong>指定处理请求的提交内容类型（Content-Type），如application/json,text/html; </li><li><strong>produces:</strong>指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回。</li></ul><hr><h4 id="GetMapping、-PostMapping等"><a href="#GetMapping、-PostMapping等" class="headerlink" title="@GetMapping、@PostMapping等:"></a><strong>@GetMapping、@PostMapping等:</strong></h4><p>相当于@RequestMapping（value=”/”，method=RequestMethod.Get\Post\Put\Delete等） 。是个组合注解；</p><hr><h4 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam:"></a><strong>@RequestParam:</strong></h4><p>用在方法的参数前面。相当于 request.getParameter()；</p><hr><h4 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable:"></a><strong>@PathVariable:</strong></h4><p>路径变量。如 RequestMapping(“user/get/mac/{macAddress}”) ；<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getByMacAddress</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">@PathVariable(“macAddress”)</span> String macAddress)</span>&#123; </span><br><span class="line"><span class="comment">//do something; </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>参数与大括号里的名字相同的话，注解后括号里的内容可以不填。</p><hr><h1 id="2-Jpa"><a href="#2-Jpa" class="headerlink" title="2. Jpa"></a>2. Jpa</h1><h4 id="Entity、-Table-name-”“"><a href="#Entity、-Table-name-”“" class="headerlink" title="@Entity、@Table(name=”“):"></a><strong>@Entity、@Table(name=”“):</strong></h4><p>表明这是一个实体类。一般用于jpa ，这两个注解一般一块使用，但是如果表名和实体类名相同的话，@Table可以省略；</p><hr><h4 id="MappedSuperClass"><a href="#MappedSuperClass" class="headerlink" title="@MappedSuperClass:"></a><strong>@MappedSuperClass:</strong></h4><p>用在确定是父类的entity上。父类的属性子类可以继承；</p><hr><h4 id="NoRepositoryBean"><a href="#NoRepositoryBean" class="headerlink" title="@NoRepositoryBean:"></a><strong>@NoRepositoryBean:</strong></h4><p>一般用作父类的repository，有这个注解，spring不会去实例化该repository；</p><hr><h4 id="Column"><a href="#Column" class="headerlink" title="@Column:"></a><strong>@Column:</strong></h4><p>如果字段名与列名相同，则可以省略；</p><hr><h4 id="Id"><a href="#Id" class="headerlink" title="@Id:"></a><strong>@Id:</strong></h4><p>表示该属性为主键；</p><hr><h4 id="GeneratedValue-strategy-GenerationType-SEQUENCE-generator-“repair-seq”"><a href="#GeneratedValue-strategy-GenerationType-SEQUENCE-generator-“repair-seq”" class="headerlink" title="@GeneratedValue(strategy=GenerationType.SEQUENCE,generator = “repair_seq”):"></a><strong>@GeneratedValue(strategy=GenerationType.SEQUENCE,generator = “repair_seq”):</strong></h4><p>表示主键生成策略是sequence（可以为Auto、IDENTITY、native等，Auto表示可在多个数据库间切换），指定sequence的名字是repair_seq；</p><hr><h4 id="SequenceGeneretor-name-“repair-seq”-sequenceName-“seq-repair”-allocationSize-1"><a href="#SequenceGeneretor-name-“repair-seq”-sequenceName-“seq-repair”-allocationSize-1" class="headerlink" title="@SequenceGeneretor(name = “repair_seq”, sequenceName = “seq_repair”, allocationSize = 1):"></a><strong>@SequenceGeneretor(name = “repair_seq”, sequenceName = “seq_repair”, allocationSize = 1):</strong></h4><p>name为sequence的名称，以便使用，sequenceName为数据库的sequence名称，两个名称可以一致；</p><hr><h4 id="Transient"><a href="#Transient" class="headerlink" title="@Transient:"></a><strong>@Transient:</strong></h4><p>表示该属性并非一个到数据库表的字段的映射,ORM框架将忽略该属性. </p><p>如果一个属性并非数据库表的字段映射,就务必将其标示为@Transient,否则,ORM框架默认其注解为@Basic；</p><hr><h4 id="Basic-fetch-FetchType-LAZY"><a href="#Basic-fetch-FetchType-LAZY" class="headerlink" title="@Basic(fetch=FetchType.LAZY):"></a><strong>@Basic(fetch=FetchType.LAZY):</strong></h4><p>标记可以指定实体属性的加载方式；</p><hr><h4 id="JsonIgnore"><a href="#JsonIgnore" class="headerlink" title="@JsonIgnore:"></a><strong>@JsonIgnore:</strong></h4><p>作用是json序列化时将java bean中的一些属性忽略掉,序列化和反序列化都受影响；</p><hr><h4 id="JoinColumn-name-”loginId”"><a href="#JoinColumn-name-”loginId”" class="headerlink" title="@JoinColumn(name=”loginId”):"></a><strong>@JoinColumn(name=”loginId”):</strong></h4><p>一对一：本表中指向另一个表的外键。</p><p>一对多：另一个表指向本表的外键。</p><hr><h4 id="OneToOne、-OneToMany、-ManyToOne"><a href="#OneToOne、-OneToMany、-ManyToOne" class="headerlink" title="@OneToOne、@OneToMany、@ManyToOne:"></a><strong>@OneToOne、@OneToMany、@ManyToOne:</strong></h4><p>对应Hibernate配置文件中的一对一，一对多，多对一。</p><hr><h1 id="3-全局异常处理"><a href="#3-全局异常处理" class="headerlink" title="3. 全局异常处理"></a>3. 全局异常处理</h1><h4 id="ControllerAdvice"><a href="#ControllerAdvice" class="headerlink" title="@ControllerAdvice:"></a><strong>@ControllerAdvice:</strong></h4><p>包含@Component。可以被扫描到。统一处理异常；</p><hr><h4 id="ExceptionHandler-Exception-class"><a href="#ExceptionHandler-Exception-class" class="headerlink" title="@ExceptionHandler(Exception.class):"></a><strong>@ExceptionHandler(Exception.class):</strong></h4><p>用在方法上面表示遇到这个异常就执行以下方法。</p><hr><h1 id="4-springcloud"><a href="#4-springcloud" class="headerlink" title="4. springcloud"></a>4. springcloud</h1><h4 id="EnableEurekaServer"><a href="#EnableEurekaServer" class="headerlink" title="@EnableEurekaServer:"></a><strong>@EnableEurekaServer:</strong></h4><p>用在springboot启动类上，表示这是一个eureka服务注册中心；</p><hr><h4 id="EnableDiscoveryClient"><a href="#EnableDiscoveryClient" class="headerlink" title="@EnableDiscoveryClient:"></a><strong>@EnableDiscoveryClient:</strong></h4><p>用在springboot启动类上，表示这是一个服务，可以被注册中心找到；</p><hr><h4 id="LoadBalanced"><a href="#LoadBalanced" class="headerlink" title="@LoadBalanced:"></a><strong>@LoadBalanced:</strong></h4><p>开启负载均衡能力；</p><hr><h4 id="EnableCircuitBreaker"><a href="#EnableCircuitBreaker" class="headerlink" title="@EnableCircuitBreaker:"></a><strong>@EnableCircuitBreaker:</strong></h4><p>用在启动类上，开启断路器功能；</p><hr><h4 id="HystrixCommand-fallbackMethod-”backMethod”"><a href="#HystrixCommand-fallbackMethod-”backMethod”" class="headerlink" title="@HystrixCommand(fallbackMethod=”backMethod”):"></a><strong>@HystrixCommand(fallbackMethod=”backMethod”):</strong></h4><p>用在方法上，fallbackMethod指定断路回调方法；</p><hr><h4 id="EnableConfigServer"><a href="#EnableConfigServer" class="headerlink" title="@EnableConfigServer:"></a><strong>@EnableConfigServer:</strong></h4><p>用在启动类上，表示这是一个配置中心，开启Config Server；</p><hr><h4 id="EnableZuulProxy"><a href="#EnableZuulProxy" class="headerlink" title="@EnableZuulProxy:"></a><strong>@EnableZuulProxy:</strong></h4><p>开启zuul路由，用在启动类上；</p><hr><h4 id="SpringCloudApplication"><a href="#SpringCloudApplication" class="headerlink" title="@SpringCloudApplication:"></a><strong>@SpringCloudApplication:</strong></h4><p>包含</p><p>@SpringBootApplication  </p><p>@EnableDiscovertyClient</p><p>@EnableCircuitBreaker</p><p>分别是SpringBoot注解、注册服务中心Eureka注解、断路器注解。对于SpringCloud来说，这是每一微服务必须应有的三个注解，所以才推出了@SpringCloudApplication这一注解集合。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1559548290-d6b0cb6c9050?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="springboot" scheme="https://lijinhongpassion.github.io/tags/springboot/"/>
    
      <category term="注解" scheme="https://lijinhongpassion.github.io/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Java性能优化50个细节（转载）</title>
    <link href="https://lijinhongpassion.github.io/codeant/f9ec.html"/>
    <id>https://lijinhongpassion.github.io/codeant/f9ec.html</id>
    <published>2019-06-05T05:19:16.000Z</published>
    <updated>2019-06-05T05:21:21.101Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1559500785-15520313cfe2?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1103&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><p>转载地址：<a href="https://yq.aliyun.com/articles/662001" target="_blank" rel="noopener">https://yq.aliyun.com/articles/662001</a></p><img src="/codeant/f9ec/1.png" title="1.png">]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1559500785-15520313cfe2?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1103&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-深入理解Java虚拟机之内存模型</title>
    <link href="https://lijinhongpassion.github.io/codeant/d0e0.html"/>
    <id>https://lijinhongpassion.github.io/codeant/d0e0.html</id>
    <published>2019-06-04T07:39:25.000Z</published>
    <updated>2019-06-13T23:14:36.899Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1559526324-c1f275fbfa32?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>​        本次主要是对Java虚拟机（Hot Spot）进行学习，所有的知识都是从周志明的《深入理解Java虚拟机》这本书的基础上，根据自己理解消化，来编写这篇文章。让我对Java虚拟机有了更清晰的认识。</p><h1 id="1-简述"><a href="#1-简述" class="headerlink" title="1 简述"></a>1 简述</h1><p>​        首先我们得知道什么是Java虚拟机，在以前的认知中，我们所理解的Java虚拟机不过就是jdk8，9啥的，其实并不是。Java虚拟机是一种规范，根据这个规范研发出来的Java虚拟机有很多种，其中最常用的就是<code>Hot Spot</code>，我们常说的虚拟机就是指的它。</p><h1 id="2-内存模型"><a href="#2-内存模型" class="headerlink" title="2 内存模型"></a>2 内存模型</h1><img src="/codeant/d0e0/1.png" title="1.png"><p>内存模型主要分为两个板块：</p><ul><li>线程共享区<ul><li>方法区</li><li><strong>堆</strong></li></ul></li><li>线程私有区<ul><li><strong>虚拟机栈</strong></li><li>本地方法栈</li><li>程序计数器（PC Register）</li></ul></li></ul><p>总结：栈管运行，堆管内存</p><h2 id="2-1-线程共享区"><a href="#2-1-线程共享区" class="headerlink" title="2.1 线程共享区"></a>2.1 线程共享区</h2><h3 id="2-1-1-方法区"><a href="#2-1-1-方法区" class="headerlink" title="2.1.1 方法区"></a>2.1.1 方法区</h3><ol><li>概念<br> ​        Java虚拟机规范<strong>将方法区描述为堆的一个逻辑部分</strong>，但是方法区的别名叫做非堆，目的应该是与Java堆区分开来</li><li>存储信息<br> ​        类信息、常量、静态成员、即时编译后的代码、类的构造方法、接口、实例化的对象</li><li>运行时常量池<br> ​        运行时常量池是方法区的一部分，存放编译后的常量</li><li>误解“永久代”<br> ​        首先 永久代 ≠ 方法区。实质 是使用永久代来实现方法区（因为HotSpot虚拟机的设计团队选择把GC分代收集扩展至方法区，这样<strong>HotSpot的垃圾收集器可以像管理Java堆一样管理这部分内存</strong>）<br>但是根据JDK的迭代，永久区发生了相应的变化：<ul><li>jdk1.6及之前    有永久代，常量池1.6在方法区</li><li>jdk1.7                有永久代，但已逐步“去永久代”，常量池1.7在堆</li><li>jdk1.8及之后    无永久代，常量池1.8在<strong>元空间</strong></li></ul></li></ol><h3 id="2-1-2-堆空间"><a href="#2-1-2-堆空间" class="headerlink" title="2.1.2 堆空间"></a>2.1.2 堆空间</h3><ol><li><p>概念<br> ​        Java虚拟机规范：<strong>所有的对象实例以及数组</strong>都要在堆上分配，但随着JIT编译器的发展，所有对象在堆上也渐渐变得不是那么绝对了。<br> ​        <strong><em>Java堆是垃圾收集器管理的主要区域，所以别名GC堆（可以理解为垃圾堆，哈哈）</em></strong></p></li><li><p>存储信息</p><ul><li>所有对象实例</li><li>数组</li></ul></li><li><p>分代</p><img src="/codeant/d0e0/2.png" title="2.png"><ul><li>新生区（小GC作用范围）<ul><li>Eden空间（伊甸区）–  所有的类都是在伊甸园被new出来的</li><li>From Survivor空间（幸存0区）</li><li>To Survivor空间（幸存1区）</li></ul></li><li>养老区（大GC作用范围）</li><li>永久代（jdk1.7及之前存在）</li></ul></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**空间大小比例为 默认伊甸园：幸存0：幸存1 = 8：1：1**</span><br><span class="line">新生区是类的诞生、成长、消亡的区域，一个类在这里产生，应用，最后被垃圾回收器收集，结束生命。新生区又分为两部分： 伊甸区（Eden space）和幸存者区（Survivor pace） ，所有的类都是在伊甸区被new出来的。幸存区有两个： 0区（Survivor 0 space）和1区（Survivor 1 space）。当伊甸园的空间用完时，程序又需要创建对象，JVM的垃圾回收器将对伊甸园区进行垃圾回收(Minor GC)，将伊甸园区中的不再被其他对象所引用的对象进行销毁。然后将伊甸园中的剩余对象移动到幸存0区.若幸存0区也满了，再对该区进行垃圾回收，然后移动到1区。那如果1区也满了呢？再移动到养老区。若养老区也满了，那么这个时候将产生MajorGC（FullGC），进行养老区的内存清理。若养老区执行了Full GC之后发现依然无法进行对象的保存，就会产生OOM异常“OutOfMemoryError”。</span><br></pre></td></tr></table></figure><p>   如果出现java.lang.OutOfMemoryError: Java heap space异常，说明Java虚拟机的堆内存不够。原因有二：</p><p>   （1）Java虚拟机的堆内存设置不够，可以通过参数-Xms、-Xmx来调整。</p><p>   （2）代码中创建了大量大对象，并且长时间不能被垃圾收集器收集（存在被引用）。</p><h2 id="2-2-线程私有区"><a href="#2-2-线程私有区" class="headerlink" title="2.2 线程私有区"></a>2.2 线程私有区</h2><h3 id="2-2-1-本地方法栈"><a href="#2-2-1-本地方法栈" class="headerlink" title="2.2.1 本地方法栈"></a>2.2.1 本地方法栈</h3><ol><li>概念</li></ol><p>​        本地方法栈与虚拟机栈区分开来，他们服务的对象不一样。<br>​        虚拟机栈是为java方法服务的，编写方法的语言是java<br>​        本地方法栈是为带有Native方法服务的，编写该方法的是c/c++语言，调用本地方法库里面的方法</p><h3 id="2-2-2-虚拟机栈"><a href="#2-2-2-虚拟机栈" class="headerlink" title="2.2.2 虚拟机栈"></a>2.2.2 虚拟机栈</h3><ol><li>概念</li></ol><p>​        虚拟机栈描述的是Java方法执行的内存模型（生命周期和线程相同）：每个方法执行的时候都会创建一个栈帧用于存储<strong>局部变量表、操作数栈、动态链接、方法出口等</strong>信息</p><ol start="2"><li><p>栈帧主要存储信息</p><ul><li>本地变量：输入参数和输出参数以及方法内的变量；</li><li>操作数：记录出栈、入栈的操作；</li><li>栈帧数据：包括类文件、方法等；</li></ul></li><li><p>示例</p><img src="/codeant/d0e0/3.png" title="3.png"></li></ol><h3 id="2-2-3-程序计数器（PC-Register）"><a href="#2-2-3-程序计数器（PC-Register）" class="headerlink" title="2.2.3 程序计数器（PC Register）"></a>2.2.3 程序计数器（PC Register）</h3><ol><li>概念</li></ol><p>​        有学过操作系统这门课的都知道，程序计数器就是当前线程所执行的字节码的行号指示器。也就是说一个线程里有很多方法需要执行，程序计数器就是根据你的逻辑，将执行的方法顺序排列好。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1559526324-c1f275fbfa32?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="jvm" scheme="https://lijinhongpassion.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>personal_msg</title>
    <link href="https://lijinhongpassion.github.io/codeant/a4ca.html"/>
    <id>https://lijinhongpassion.github.io/codeant/a4ca.html</id>
    <published>2019-05-27T12:58:52.000Z</published>
    <updated>2019-05-27T13:11:41.773Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><hr><p>#个人资料</p><ul><li>头像：<img src="/codeant/a4ca/1.png" title="1.png"></li><li>姓名：李锦洪</li><li>性别：男</li><li>年龄：21</li><li>联系方式：<ul><li>电话：18315107186</li><li>邮箱：<a href="mailto:18315107186@189.cn" target="_blank" rel="noopener">18315107186@189.cn</a></li></ul></li><li>求职意向：java后台研发</li><li>教育背景：<ul><li>毕业院校：重庆理工大学</li><li>就读时间：2016.09-至今</li><li>所学专业：软件工程</li></ul></li><li>所持证书：<ul><li>英语四级证书</li><li>创业培训合格证书</li></ul></li><li>个人博客：<a href="https://lijinhongpassion.github.io/archives/">https://lijinhongpassion.github.io/archives/</a></li></ul><hr><p>#项目经验<br><strong>2018.09-2018.11        YOUNG校园服务平台     核心研发人员</strong><br><strong>项目网址：</strong><br><strong>开发工具：Idea + MySql </strong></p><ul><li>完成业务需求逻辑的梳理、数据库的设计、编写存储过程等接口供上层调用</li><li>完成系统的后台设计与代码实现，使用的框架为：Spring + SpringMvc + Mybatis，使用Maven作为项目构建工具，将项目部署于windows服务器</li><li>参与整体需求分析与确认、gitHub+git版本控制、项目管理、项目测试</li></ul><hr><p><strong>2019.03-2019.04    E玩吧    核心开发人员</strong><br><strong>项目网址：</strong><br><strong>开发工具：Idea+MySql+Redis</strong></p><ul><li>完成业务需求逻辑的梳理、数据库的设计、编写存储过程等接口供上层调用</li><li>完成系统的后台设计与代码实现，使用的框架为：Spring + SpringMvc + Mybatis+Shiro，使用Maven作为项目构建工具，以nginx服务器做负载均衡以及反向代理，将项目部署于liunx服务器</li><li>参与整体需求分析与确认、gitHub+git版本控制、项目管理、项目测试、文档撰写等工作</li></ul><hr><p>#荣获奖励</p><ul><li>三创校级二等奖（2019.04-2019.05）</li><li>国际iCAN创新创业大赛中国赛区三等奖、重庆赛区一等奖（2018.09-2018.11）</li><li>科研立项校级重点项目（2018.09-2019.06）</li><li>校级精神文明建设积极分子（2018.09-2019.06）</li><li>国际iCAN创新创业大赛中国赛区优胜奖、重庆赛区二等奖（2017.09-2017.11）</li><li>校级自立自强优秀学生（2017.09-2018.06）</li><li>校级第二十五届开拓杯三等奖（2017.09-2018.06） </li><li>校级优秀学生干部（2016.09-2017.06） </li><li>先后获得院级奖项以及荣誉共计十余项（2017.09-2018.06）</li><li>历任院学生会成才办主任职务（2016.09-2018.06）</li><li>担任所在班级心理委员（2016.09-至今）</li><li>多次获得校级乙等奖学金（2016.06-2018.06）</li></ul><hr><p>#自我评价</p><ul><li>具备扎实的java基础，熟悉多线程、集合、nio等</li><li>擅长java的web应用开发</li><li>熟练掌握MVC开发模式</li><li>熟练掌握SpringMVC、Spring、Mybatis、shiro等框架</li><li>熟练掌握MySQL </li><li>熟悉Gradle、Maven等项目构建和管理工具</li><li>了解redis缓存数据库</li><li>了解Linux常用命令</li><li>了解spring cloud、Eureka、Ribbon、Feign、Hystrix、Zuul和springcloud config微服务技术</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java-实现springbootdemo部署到docker</title>
    <link href="https://lijinhongpassion.github.io/codeant/daba.html"/>
    <id>https://lijinhongpassion.github.io/codeant/daba.html</id>
    <published>2019-05-21T05:22:07.000Z</published>
    <updated>2019-06-04T07:55:03.109Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1542558817211-17b8e8699cc9?ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>常见的单体应用部署是在liunx上配置好tomcat+java+mysql+redis，再将代码放在tomcat跑起来，导致花费的时间较多。现采用容器虚拟化技术docker进行部署，在liunx上安装docker，在开发时将代码和环境制作成docker镜像，在liunx只需拉取镜像，并实例化为容器，项目就跑起来了，不需要配置繁杂的环境。<br><strong>本文主要讲一下idea上怎样将springboot项目部署到docker。(本套操作没有实现将镜像上传至docker hub)</strong></p><p>开发环境：windows10+idea<br>部署环境：centos7.5+docker<br>项目github：<a href="https://github.com/LiJinHongPassion/springboot" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/springboot</a></p><h1 id="1、安装docker"><a href="#1、安装docker" class="headerlink" title="1、安装docker"></a>1、安装docker</h1><p>可根据官方的教程进行安装：<a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/centos/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">yum安装gcc相关</span><br><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++</span><br><span class="line"></span><br><span class="line">卸载旧版本</span><br><span class="line">yum -y remove docker docker-common docker-selinux docker-engine</span><br><span class="line"></span><br><span class="line">安装需要的软件包</span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line">设置stable镜像仓库(国内阿里云镜像仓库)</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">更新yum软件包索引</span><br><span class="line">yum makecache fast</span><br><span class="line"></span><br><span class="line">安装DOCKER CE</span><br><span class="line">yum -y install docker-ce</span><br><span class="line"></span><br><span class="line">启动docker</span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line">测试</span><br><span class="line">docker version</span><br><span class="line">docker run hello-world</span><br><span class="line"></span><br><span class="line">配置镜像加速</span><br><span class="line">mkdir -p /etc/docker</span><br><span class="line">vim  /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">#网易云</span><br><span class="line">&#123;&quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;] &#125;</span><br><span class="line"> </span><br><span class="line"> #阿里云</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://｛自已的编码｝.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h1 id="2、Docker开启远程API端口"><a href="#2、Docker开启远程API端口" class="headerlink" title="2、Docker开启远程API端口"></a>2、Docker开启远程API端口</h1><p><code>Docker</code>开启远程端口的目的是可以通过<code>Docker</code>提供的<code>remoteApi</code>文档 管理<code>Docker</code>并且可以操作<code>Docker</code>下容器，监控容器的各项指标，也可以通过<code>remoteApi</code>去实现自己监控<code>Docker</code>告警系统等。默认<code>Docker</code>并没有启动<code>remoteApi</code>，需要我们修改配置才能生效。</p><p>默认Centos7.X下配置文件地址在<code>/usr/lib/systemd/system/</code> 下面，修改 <code>/usr/lib/systemd/system/docker.service</code> 文件,命令：<code>sudo vim /usr/lib/systemd/system/docker.service</code></p><p>在 <code>ExecStart=/usr/bin/dockerd</code> 配置文件后面加上<code>-H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock</code> 保存并退出。</p><p>注 :  端口 2375 就是<code>docker remoteApi</code>的 端口，确保此端口linux没有被占用。<br><strong>防火墙开放端口，或者关闭防火墙<code>systemlctl firewalld stop</code></strong></p><p>执行 重启 docker 命令  docker重新读取配置文件，并重新启动docker服务 命令 :  <code>sudo systemctl daemon-reload &amp;&amp; systemctl restart docker</code></p><h1 id="3、配置idea上的docker"><a href="#3、配置idea上的docker" class="headerlink" title="3、配置idea上的docker"></a>3、配置idea上的docker</h1><p><strong>1. 安装docker插件</strong><br>file-&gt;settings-&gt;plugins<br><img src="/codeant/daba/1.png" title="1.png"><br><img src="/codeant/daba/4.png" title="4.png"></p><p><strong>2. 编写springboot_docker_demo例子</strong><br>创建一个简单的springboot项目<br><img src="/codeant/daba/2.png" title="2.png"><br>主要看一下pom.xml文件和DockerFile</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example.li<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot_docker_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot_docker_demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 打包方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">docker.image.prefix</span>&gt;</span>springboot<span class="tag">&lt;/<span class="name">docker.image.prefix</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- docker插件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dockerDirectory</span>&gt;</span><span class="tag">&lt;/<span class="name">dockerDirectory</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#指定基础镜像，在其上进行定制</span><br><span class="line">FROM java:8</span><br><span class="line"></span><br><span class="line">#维护者信息</span><br><span class="line">#MAINTAINER wuweixiang &lt;wuweixiang.alex@gmail.com&gt;</span><br><span class="line"></span><br><span class="line">#这里的 /tmp 目录就会在运行时自动挂载为匿名卷，任何向 /tmp 中写入的信息都不会记录进容器存储层</span><br><span class="line">VOLUME /tmp</span><br><span class="line"></span><br><span class="line">#复制上下文目录下的target/demo-0.0.1-SNAPSHOT.jar 到容器里</span><br><span class="line">COPY /target/springboot_docker_demo-0.0.1-SNAPSHOT.jar springboot_docker_demo-0.0.1-SNAPSHOT.jar</span><br><span class="line"></span><br><span class="line">#bash方式执行，使demo-0.0.1-SNAPSHOT.jar可访问</span><br><span class="line">#RUN新建立一层，在其上执行这些命令，执行结束后， commit 这一层的修改，构成新的镜像。</span><br><span class="line">RUN bash -c &quot;touch /springboot_docker_demo-0.0.1-SNAPSHOT.jar&quot;</span><br><span class="line"></span><br><span class="line">#ADD /target/springboot_docker_demo-0.0.1-SNAPSHOT.jar springboot_docker_demo-0.0.1-SNAPSHOT.jar</span><br><span class="line"></span><br><span class="line">#声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务</span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">#指定容器启动程序及参数   &lt;ENTRYPOINT&gt; &quot;&lt;CMD&gt;&quot;</span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;springboot_docker_demo-0.0.1-SNAPSHOT.jar&quot;]</span><br></pre></td></tr></table></figure><p><strong>3. 配置例子中的docker</strong></p><img src="/codeant/daba/3.png" title="3.png"><p><strong>4. 部署到docker</strong></p><p>在centos上启动docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker start</span><br></pre></td></tr></table></figure><p>查看centos的ip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure><p>打包项目，会在根目录下生成项目jar包<br><img src="/codeant/daba/5.png" title="5.png"></p><p>执行DockerFile脚本，生成镜像并根据该镜像生成相应的容器<br><img src="/codeant/daba/6.png" title="6.png"><br><img src="/codeant/daba/7.png" title="7.png"></p><p>访问ip:port/hello，这里是<code>http://192.168.26.130:8888/hello</code><br><img src="/codeant/daba/9.png" title="9.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1542558817211-17b8e8699cc9?ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="docker" scheme="https://lijinhongpassion.github.io/tags/docker/"/>
    
      <category term="springboot" scheme="https://lijinhongpassion.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Java-Springboot+websocket+stomp实现消息功能</title>
    <link href="https://lijinhongpassion.github.io/codeant/9210.html"/>
    <id>https://lijinhongpassion.github.io/codeant/9210.html</id>
    <published>2019-05-18T08:54:04.000Z</published>
    <updated>2019-06-04T07:55:22.678Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1556909172-89cf0b24ff02?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1051&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>在日常的web开发中，我们常用的就是http协议，这种协议是基于请求/响应的方式，由客户端发起请求，服务器端给出响应。现websocket协议是基于TCP协议开发的，在建立连接后，可以实现服务器端主动给客户端发送消息，以此来实现消息推送，聊天室等功能。</p><p><a href="https://github.com/LiJinHongPassion/springboot/tree/master/springboot_websocket_demo" target="_blank" rel="noopener">demo</a></p><h1 id="一、websocket协议概述"><a href="#一、websocket协议概述" class="headerlink" title="一、websocket协议概述"></a>一、websocket协议概述</h1><p>  <code>Websocket protocol</code>是<code>HTML5</code>一种新的协议。它实现了浏览器与服务器全双工通信<code>full-duplex</code>)。<strong>一开始的握手需要借助<code>HTTP</code>请求完成，后面的消息传输是基于长连接socket</strong>。</p><p>  <code>WebSocket</code>是真正实现了全双工通信的服务器向客户端推的互联网技术。它是<strong>一种在单个TCP连接上进行全双工通讯协议</strong>。<code>Websocket</code>通信协议与2011年倍JETF定为标准<code>RFC 6455</code>， <code>Websocket API</code>被<code>W3C</code>定为标准。</p><hr><p>全双工和单工的区别:    </p><ul><li>全双工(<code>FullDuplex</code>)是通讯传输的一个术语。通信允许数据在两个方向上同时传输，它在能力上相当于两个单工通信方式的结合。全双工指可以同时(瞬时)进行信号的双向传输(A→B且B→A)。指A→B的同时B→A，<strong>是瞬时同步的</strong>。</li><li>单工、半双工(<code>Half Duplex</code>),所谓半双工就是指一个时间段内只有一个动作发生，举个简单例子，一条窄窄的马路，同时只能有一辆车通过，当目前有两辆车对开，这种情况下就只能一辆先过，等到头儿后另一辆再开，这个例子就形象的说明了半双工的原理。早期的对讲机、以及早期集线器等设备都是基于半双工的产品。随着技术的不断进步，半双工会逐渐退出历史舞台。</li></ul><hr><p>推的技术和拉的技术:</p><ul><li>推送(<code>PUSH</code>)技术是一种建立在客户服务器上的机制，就是由服务器主动将信息发往客户端的技术。就像是广播电台播音。</li><li><p>同传统的拉(<code>PULL</code>)技术相比，最主要的区别在于推送(<code>PUSH</code>)技术是由<strong>服务器主动向客户机发送信息</strong>，而拉(<code>PULL</code>)技术则是<strong>由客户机主动请求信息</strong>。PUSH 技术的优势在于信息的主动性和及时性。</p><p>简单的说，相对于服务端:拉的技术是被动向客户端提供数据，推的技术是主动向客户端提供数据。</p></li></ul><hr><h1 id="二、websocket协议的优越性"><a href="#二、websocket协议的优越性" class="headerlink" title="二、websocket协议的优越性"></a>二、websocket协议的优越性</h1><ul><li><p>传统的<code>http</code>协议实现方式：<code>http</code>协议可以多次请求，因为每次请求之后，都会关闭链接，下次重新请求数据，需要再次打开链接。方式有轮询（频繁请求）。</p></li><li><p>传统<code>socke</code>t技术：长连接（资源浪费）</p></li><li><p><code>websocket</code>协议实现方式：它是一种长连接，只能通过依次请求来初始化链接，然后所有的请求和响应都是用过这个<strong>TCP链接</strong>进行通讯，这意味着他是一种基于事件驱动，异步的消息机制。</p></li></ul><p><strong> 问题：</strong></p><p><code>Html5 websocket</code>兼容性还不是很好，不是所有的浏览器都支持这些新的API，特别是在IE10以下。</p><p>但幸运的是现在绝大多数主流的浏览器都支持这些API,即使不支持的哪些旧的浏览器，也有解决方案。如:</p><ul><li>为了处理不同浏览器和浏览器版本的兼容性,<code>spring webscoket</code>基于<code>SockJs protecol</code>提供了一种解决兼容性的方法，在底层屏蔽兼容性的问题，提供统一的，透明的，可理解性的<code>webscoket</code>解决方案。。</li><li><a href="https://github.com/sockjs/sockjs-client" target="_blank" rel="noopener">SockJs</a>是一个浏览器上运行的<code>JavaScript</code>库,如果浏览器不支持<code>Websocket</code>, 该库可以模拟对<code>Websocket</code>的支持，实现浏览器和Web服务器之间低延迟、全双工、跨域的通讯通道。</li></ul><h1 id="三、springboot-websocket-stomp例子"><a href="#三、springboot-websocket-stomp例子" class="headerlink" title="三、springboot+websocket+stomp例子"></a>三、springboot+websocket+stomp例子</h1><p>先要明白WebSocket 是发送和接收消息的 底层API，而SockJS 是在 WebSocket 之上的 API；最后 STOMP（面向消息的简单文本协议）是基于 SockJS 的高级API</p><p>下面是我在CSDN上看到的一篇十分详细的blog，分别对websocket，sockjs，stomp进行了解释，分享出来大家一起学习。</p><p><strong>主要关注stomp部分的内容</strong></p><img src="/codeant/9210/1.png" title="1.png">]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1556909172-89cf0b24ff02?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1051&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://lijinhongpassion.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="Springboot" scheme="https://lijinhongpassion.github.io/tags/Springboot/"/>
    
      <category term="websocket" scheme="https://lijinhongpassion.github.io/tags/websocket/"/>
    
      <category term="stomp" scheme="https://lijinhongpassion.github.io/tags/stomp/"/>
    
  </entry>
  
  <entry>
    <title>Java-dubbo高可用</title>
    <link href="https://lijinhongpassion.github.io/codeant/eb26.html"/>
    <id>https://lijinhongpassion.github.io/codeant/eb26.html</id>
    <published>2019-04-22T12:12:15.000Z</published>
    <updated>2019-06-04T07:59:01.708Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1555626906-087b9f27e451?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>前面我们简单讲了一下dubbo的基本配置和简单使用，在这章我们了解一下dubbo的高可用的几种实现。</p><h1 id="1、zookeeper宕机与dubbo直连"><a href="#1、zookeeper宕机与dubbo直连" class="headerlink" title="1、zookeeper宕机与dubbo直连"></a>1、zookeeper宕机与dubbo直连</h1><ul><li><p>zookeeper宕机（现象：zookeeper注册中心宕机，还可以消费dubbo暴露的服务）</p><p>  健壮性</p><ul><li><p>监控中心宕掉不影响使用，只是丢失部分采样数据</p></li><li><p>数据库宕掉后，注册中心仍能通过缓存提供服务列表查询，但不能注册新服务</p></li><li><p>注册中心对等集群，任意一台宕掉后，将自动切换到另一台</p></li><li><p><strong>注册中心全部宕掉后，服务提供者和服务消费者仍能通过本地缓存通讯</strong></p></li><li><p>服务提供者无状态，任意一台宕掉后，不影响使用</p></li><li><p>服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复</p><p>高可用：通过设计，减少系统不能提供服务的时间；</p></li></ul></li><li><p>dubbo直连（现象：没有注册中心，也能调用服务）</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span>(url = <span class="string">"127.0.0.1:20882"</span>)<span class="comment">//dubbo直连</span></span><br><span class="line">    UserService userService;</span><br></pre></td></tr></table></figure></li></ul><h1 id="2、集群下dubbo的负载均衡"><a href="#2、集群下dubbo的负载均衡" class="headerlink" title="2、集群下dubbo的负载均衡"></a>2、集群下dubbo的负载均衡</h1><p>官方文档配置：<a href="http://dubbo.apache.org/zh-cn/docs/user/demos/loadbalance.html" target="_blank" rel="noopener">http://dubbo.apache.org/zh-cn/docs/user/demos/loadbalance.html</a></p><p>在集群负载均衡时，<code>Dubbo</code>提供了多种均衡策略，缺省为<code>random</code> 随机调用。</p><p>负载均衡策略</p><p><strong>Random LoadBalance</strong></p><p>随机，按权重设置随机概率。</p><p>在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。</p><p><strong>RoundRobin LoadBalance</strong></p><p>轮循，按公约后的权重设置轮循比率。</p><p>存在慢的提供者累积请求的问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。</p><p><strong>LeastActive LoadBalance</strong></p><p>最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差。</p><p>使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。</p><p><strong>ConsistentHash LoadBalance</strong></p><p>一致性 Hash，相同参数的请求总是发到同一提供者。</p><p>当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。算法参见：<a href="http://en.wikipedia.org/wiki/Consistent_hashing" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/Consistent_hashing</a></p><p>缺省只对第一个参数 Hash，如果要修改请配置 <code>&lt;dubbo:parameter key=&quot;hash.arguments&quot; value=&quot;0,1&quot; /&gt;</code></p><p>缺省用160 份虚拟节点，如果要修改，请配置<code>&lt;dubbo:parameter key=&quot;hash.nodes&quot; value=&quot;320&quot; /&gt;</code></p><hr><img src="/codeant/eb26/1.png" title="1.png"><img src="/codeant/eb26/2.png" title="2.png"><img src="/codeant/eb26/3.png" title="3.png"><img src="/codeant/eb26/4.png" title="4.png"><ul><li><p>配置</p></li><li><p>服务端服务级别</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"..."</span> <span class="attr">loadbalance</span>=<span class="string">"roundrobin"</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>客户端服务级别</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">"..."</span> <span class="attr">loadbalance</span>=<span class="string">"roundrobin"</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>服务端方法级别</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">"..."</span> <span class="attr">loadbalance</span>=<span class="string">"roundrobin"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:service</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>客户端方法级别</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">"..."</span> <span class="attr">loadbalance</span>=<span class="string">"roundrobin"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以通过dubbo-admin控制台动态调整，倍权、半权</p><img src="/codeant/eb26/5.png" title="5.png"><h1 id="3、服务降级"><a href="#3、服务降级" class="headerlink" title="3、服务降级"></a>3、服务降级</h1><p>官方文档：<a href="http://dubbo.apache.org/zh-cn/docs/user/demos/service-downgrade.html" target="_blank" rel="noopener">http://dubbo.apache.org/zh-cn/docs/user/demos/service-downgrade.html</a></p><p><strong>什么是服务降级？</strong></p><p><strong>当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面有策略的不处理或换种简单的方式处理，从而释放服务器资源以保证核心交易正常运作或高效运作。</strong></p><p>可以通过服务降级功能临时屏蔽某个出错的非关键服务，并定义降级后的返回策略。</p><p>向注册中心写入动态配置覆盖规则：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension();</span><br><span class="line"></span><br><span class="line">Registry registry = registryFactory.getRegistry(URL.valueOf(<span class="string">"zookeeper://10.20.153.10:2181"</span>));</span><br><span class="line"></span><br><span class="line">registry.register(URL.valueOf(<span class="string">"override://0.0.0.0/com.foo.BarService?category=configurators&amp;dynamic=false&amp;application=foo&amp;mock=force:return+null"</span>));</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><p><code>mock=force:return+null</code>表示消费方对该服务的方法调用都直接返回 null 值，不发起远程调用。用来屏蔽不重要服务不可用时对调用方的影响。</p><img src="/codeant/eb26/6.png" title="6.png"></li><li><p>还可以改为<code>mock=fail:return+null</code> 表示消费方对该服务的方法调用在失败后，再返回 null 值，不抛异常。用来容忍不重要服务不稳定时对调用方的影响。</p><img src="/codeant/eb26/7.png" title="7.png"></li></ul><h1 id="4、集群容错"><a href="#4、集群容错" class="headerlink" title="4、集群容错"></a>4、集群容错</h1><p>官方文档：<a href="http://dubbo.apache.org/zh-cn/docs/user/demos/fault-tolerent-strategy.html" target="_blank" rel="noopener">http://dubbo.apache.org/zh-cn/docs/user/demos/fault-tolerent-strategy.html</a></p><p><strong>集群容错模式</strong></p><p><strong>Failover Cluster</strong><br>失败自动切换，当出现失败，重试其它服务器。通常用于读操作，但重试会带来更长延迟。可通过 retries=”2” 来设置重试次数(不含第一次)。</p><p>重试次数配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">retries</span>=<span class="string">"2"</span> /&gt;</span></span><br><span class="line">或</span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">retries</span>=<span class="string">"2"</span> /&gt;</span></span><br><span class="line">或</span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">"findFoo"</span> <span class="attr">retries</span>=<span class="string">"2"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Failfast Cluster</span><br><span class="line">快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录。</span><br><span class="line"></span><br><span class="line">Failsafe Cluster</span><br><span class="line">失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作。</span><br><span class="line"></span><br><span class="line">Failback Cluster</span><br><span class="line">失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。</span><br><span class="line"></span><br><span class="line">Forking Cluster</span><br><span class="line">并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。可通过 forks=&quot;2&quot; 来设置最大并行数。</span><br><span class="line"></span><br><span class="line">Broadcast Cluster</span><br><span class="line">广播调用所有提供者，逐个调用，任意一台报错则报错 [2]。通常用于通知所有提供者更新缓存或日志等本地资源信息。</span><br></pre></td></tr></table></figure><p><strong>集群模式配置</strong><br>按照以下示例在服务提供方和消费方配置集群模式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">cluster</span>=<span class="string">"failsafe"</span> /&gt;</span>    等价于@service（cluster="failsafe"）</span><br><span class="line">或</span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">cluster</span>=<span class="string">"failsafe"</span> /&gt;</span>等价于@reference（cluster="failsafe"）</span><br></pre></td></tr></table></figure><h1 id="5、hystrix实现容错"><a href="#5、hystrix实现容错" class="headerlink" title="5、hystrix实现容错"></a>5、hystrix实现容错</h1><p><code>Hystrix</code> 旨在通过控制那些访问远程系统、服务和第三方库的节点，从而对延迟和故障提供更强大的容错能力。<code>Hystrix</code>具备拥有回退机制和断路器功能的线程和信号隔离，请求缓存和请求打包，以及监控和配置等功能</p><h2 id="1、配置spring-cloud-starter-netflix-hystrix"><a href="#1、配置spring-cloud-starter-netflix-hystrix" class="headerlink" title="1、配置spring-cloud-starter-netflix-hystrix"></a>1、配置spring-cloud-starter-netflix-hystrix</h2><p><code>spring boot</code>官方提供了对<code>hystrix</code>的集成，直接在pom.xml里加入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在<code>Application</code>类上增加<code>@EnableHystrix</code>来启用<code>hystrix starter</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderApplication</span> </span>&#123;</span><br></pre></td></tr></table></figure></p><h2 id="2、配置Provider端"><a href="#2、配置Provider端" class="headerlink" title="2、配置Provider端"></a>2、配置Provider端</h2><p>在<code>Dubbo</code>的<code>Provider</code>上增加<code>@HystrixCommand</code>配置，这样子调用就会经过<code>Hystrix</code>代理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(version = <span class="string">"1.0.0"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@HystrixCommand</span>(commandProperties = &#123;</span><br><span class="line">     <span class="meta">@HystrixProperty</span>(name = <span class="string">"circuitBreaker.requestVolumeThreshold"</span>, value = <span class="string">"10"</span>),</span><br><span class="line">     <span class="meta">@HystrixProperty</span>(name = <span class="string">"execution.isolation.thread.timeoutInMilliseconds"</span>, value = <span class="string">"2000"</span>) &#125;)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// System.out.println("async provider received: " + name);</span></span><br><span class="line">        <span class="comment">// return "annotation: hello, " + name;</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Exception to show hystrix enabled."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、配置Consumer端"><a href="#3、配置Consumer端" class="headerlink" title="3、配置Consumer端"></a>3、配置Consumer端</h2><p>对于<code>Consumer</code>端，则可以增加一层method调用，并在method上配置<code>@HystrixCommand</code>。当调用出错时，会走到<code>fallbackMethod = &quot;reliable&quot;</code>的调用里。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Reference</span>(version = <span class="string">"1.0.0"</span>)</span><br><span class="line">    <span class="keyword">private</span> HelloService demoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"reliable"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doSayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> demoService.sayHello(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reliable</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hystrix fallback value"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1555626906-087b9f27e451?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="dubbo" scheme="https://lijinhongpassion.github.io/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>Java-dubbo的简单使用</title>
    <link href="https://lijinhongpassion.github.io/codeant/be60.html"/>
    <id>https://lijinhongpassion.github.io/codeant/be60.html</id>
    <published>2019-04-22T10:30:07.000Z</published>
    <updated>2019-06-04T08:13:07.891Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1509716159367-0180b75063d0?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>本文需要对zookeeper能够简单使用</p><p>github的demo地址：<a href="https://github.com/LiJinHongPassion/springboot/tree/master/springboot_dubbo" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/springboot/tree/master/springboot_dubbo</a><br>注:  github上为三个独立的项目</p><ul><li>先启动zookeeper服务器端</li><li>打开springboot_dubbo_0_interface_demo项目,点击idea右边的maven-&gt;lifecycle-&gt;install,,注册到本地仓库</li><li>打开剩余两个项目,分别运行</li><li>打开游览器访问<code>localhost:8081/initOrder?uid=1</code></li></ul><h1 id="1、基础"><a href="#1、基础" class="headerlink" title="1、基础"></a>1、基础</h1><h2 id="1-1-系统架构发展演变"><a href="#1-1-系统架构发展演变" class="headerlink" title="1.1 系统架构发展演变"></a>1.1 系统架构发展演变</h2><h3 id="单一应用架构"><a href="#单一应用架构" class="headerlink" title="单一应用架构"></a>单一应用架构</h3><p>​        也称为单体应用。当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。<br><img src="/codeant/be60/1.png" title="1.png"><br>​        适用于小型网站，小型管理系统，将所有功能都部署到一个功能里，简单易用。<br>缺点：<br>​    1、性能扩展比较难<br>​    2、协同开发问题<br>​    3、不利于升级维护</p><h3 id="垂直应用架构"><a href="#垂直应用架构" class="headerlink" title="垂直应用架构"></a>垂直应用架构</h3><p>​        当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。<br><img src="/codeant/be60/2.png" title="2.png"><br>​        通过切分业务来实现各个模块独立部署，降低了维护和部署的难度，团队各司其职更易管理，性能扩展也更方便，更有针对性。<br>缺点： 公用模块无法重复利用，开发性的浪费</p><h3 id="分布式服务架构"><a href="#分布式服务架构" class="headerlink" title="分布式服务架构"></a>分布式服务架构</h3><p>​        当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的<strong>分布式服务框架**</strong>(RPC)**是关键。</p><img src="/codeant/be60/3.png" title="3.png"><h3 id="流动计算架构"><a href="#流动计算架构" class="headerlink" title="流动计算架构"></a>流动计算架构</h3><p>​        当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于<strong>提高机器利用率的资源调度和治理中心**</strong>(SOA)[<br>Service Oriented Architecture]<strong> </strong>是关键**。</p><img src="/codeant/be60/4.png" title="4.png"><h2 id="1-2-RPC"><a href="#1-2-RPC" class="headerlink" title="1.2 RPC"></a>1.2 RPC</h2><ul><li><p>什么叫RPC</p><p><code>RPC【Remote Procedure Call】</code>是指远程过程调用，是一种进程间通信方式，他是一种技术的思想，而不是规范。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即程序员无论是调用本地的还是远程的函数，本质上编写的调用代码基本相同。</p></li><li><p>RPC基本原理</p><p>RPC两个核心模块：通讯，序列化。</p><img src="/codeant/be60/6.png" title="6.png"><img src="/codeant/be60/7.png" title="7.png"></li></ul><h1 id="2、Dubbo"><a href="#2、Dubbo" class="headerlink" title="2、Dubbo"></a>2、Dubbo</h1><h2 id="2-1-简述"><a href="#2-1-简述" class="headerlink" title="2.1 简述"></a>2.1 简述</h2><p>​    <code>Apache Dubbo (incubating)</code> 是一款高性能、轻量级的开源<strong>Java RPC</strong>框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p><p>官网：<a href="http://dubbo.apache.org/" target="_blank" rel="noopener">http://dubbo.apache.org/</a></p><img src="/codeant/be60/5.png" title="5.png"><p>​    <strong>服务提供者（Provider</strong> <strong>）</strong>：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。</p><p>​         <strong>服务消费者（Consumer</strong> <strong>）</strong>: 调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p><p>​         <strong>注册中心（Registry</strong> <strong>）</strong>：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者（如：zookeeper）</p><p>​         <strong>监控中心（Monitor</strong> <strong>）</strong>：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心（dubbo-monitor-simple）</p><p>调用关系说明：</p><ul><li><p>服务容器负责启动，加载，运行服务提供者。</p></li><li><p>服务<strong>提供者</strong>在启动时，向<strong>注册中心注册</strong>自己提供的<strong>服务</strong>。</p></li><li><p>服务<strong>消费者</strong>在启动时，向<strong>注册中心订阅</strong>自己所需的<strong>服务</strong>。</p></li><li><p><strong>注册中心</strong>返回<strong>服务提供者地址列表</strong>给<strong>消费者</strong>，如果<strong>有变更</strong>，注册中心将基于长连接推送变更数据给消费者。</p></li><li><p>服务<strong>消费者</strong>，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p></li><li><p>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</p></li></ul><h2 id="2-2-helloword"><a href="#2-2-helloword" class="headerlink" title="2.2 helloword"></a>2.2 helloword</h2><h3 id="2-2-1-提出需求"><a href="#2-2-1-提出需求" class="headerlink" title="2.2.1 提出需求"></a>2.2.1 提出需求</h3><p>某个电商系统，订单服务需要调用用户服务获取某个用户的所有地址；</p><p>我们现在 需要创建两个服务模块进行测试 </p><table><thead><tr><th>模块</th><th>功能</th></tr></thead><tbody><tr><td>订单服务web模块</td><td>创建订单等</td></tr><tr><td>用户服务service模块</td><td>查询用户地址等</td></tr></tbody></table><p>测试预期结果：</p><p>​         <strong>订单服务</strong>web模块在<strong>A服务器</strong>，<strong>用户服务</strong>模块在<strong>B服务器</strong>，A可以<strong>远程调用</strong>B的功能。</p><h3 id="2-2-2-工程架构"><a href="#2-2-2-工程架构" class="headerlink" title="2.2.2 工程架构"></a>2.2.2 工程架构</h3><p>根据 dubbo《服务化最佳实践》 </p><h4 id="1、分包"><a href="#1、分包" class="headerlink" title="1、分包"></a>1、分包</h4><p>建议将服务接口，服务模型，服务异常等均放在 API 包中，因为服务模型及异常也是 API 的一部分，同时，这样做也符合分包原则：重用发布等价原则(REP)，共同重用原则(CRP)。</p><p>如果需要，也可以考虑在 API 包中放置一份 spring 的引用配置，这样使用方，只需在 spring 加载过程中引用此配置即可，配置建议放在模块的包目录下，以免冲突，如：com/alibaba/china/xxx/dubbo-reference.xml。</p><img src="/codeant/be60/8.png" title="8.png"><ul><li><p>api包（服务接口，服务模型，服务异常等均放在 API 包）</p><p>其中服务模型（entity）必须 <code>implements Serializable</code></p></li></ul><img src="/codeant/be60/9.png" title="9.png"><ul><li>服务提供者包（用户服务模块）</li></ul><img src="/codeant/be60/10.png" title="10.png"><ul><li>消费者包（订单web模块）</li></ul><img src="/codeant/be60/11.png" title="11.png"><h4 id="2、粒度"><a href="#2、粒度" class="headerlink" title="2、粒度"></a>2、粒度</h4><p>服务接口尽可能大粒度，每个服务方法应代表一个功能，而不是某功能的一个步骤，否则将面临分布式事务问题，Dubbo 暂未提供分布式事务支持。</p><p>服务接口建议以业务场景为单位划分，并对相近业务做抽象，防止接口数量爆炸。</p><p>不建议使用过于抽象的通用接口，如：Map query(Map)，这样的接口没有明确语义，会给后期维护带来不便。</p><h4 id="3、dubbo改造"><a href="#3、dubbo改造" class="headerlink" title="3、dubbo改造"></a>3、dubbo改造</h4><h5 id="3-1-spring"><a href="#3-1-spring" class="headerlink" title="3.1 spring"></a>3.1 spring</h5><p>官方文档配置消费者、提供者：<a href="http://dubbo.apache.org/zh-cn/docs/user/quick-start.html" target="_blank" rel="noopener">http://dubbo.apache.org/zh-cn/docs/user/quick-start.html</a></p><ul><li><p>提供者</p><ul><li><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入api ,该模块需要安装在maven仓库，使用install--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example.li<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot_dubbo_0_interface_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入dubbo --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 由于我们使用zookeeper作为注册中心，所以需要操作zookeeper</span></span><br><span class="line"><span class="comment">dubbo 2.6以前的版本引入zkclient操作zookeeper </span></span><br><span class="line"><span class="comment">dubbo 2.6及以后的版本引入curator操作zookeeper</span></span><br><span class="line"><span class="comment">下面两个zk客户端根据dubbo版本2选1即可</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- curator-framework --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>通过Spring 配置引用远程服务</p><p>provider.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:dubbo</span>=<span class="string">"http://dubbo.apache.org/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 提供方应用信息，用于计算依赖关系 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"springboot_dubbo_1_userservice_provider_demo"</span>  /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 使用multicast广播注册中心暴露服务地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 用dubbo协议在20880端口暴露服务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 声明需要暴露的服务接口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.example.li.springboot_dubbo_0_interface_demo.service.userService"</span> <span class="attr">ref</span>=<span class="string">"userServiceImpl"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>加载 Spring 配置</p><p>Provider.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Provider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span>  ClassPathXmlApplicationContext(<span class="string">"classpath:provider.xml"</span>);</span><br><span class="line">        context.start();</span><br><span class="line">        System.in.read(); <span class="comment">// 按任意键退出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>消费者</p><ul><li><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入api ,该模块需要安装在maven仓库，使用install--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example.li<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot_dubbo_0_interface_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入dubbo --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 由于我们使用zookeeper作为注册中心，所以需要引入zkclient和curator操作zookeeper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- curator-framework --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>通过Spring 配置引用远程服务</p><p>consumer.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:dubbo</span>=<span class="string">"http://dubbo.apache.org/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"springboot_dubbo_2_orderservice_consumer_demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:application</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定注册中心地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 生成远程服务代理，可以和本地bean一样使用demoService --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">interface</span>=<span class="string">"com.example.li.springboot_dubbo_0_interface_demo.service.userService"</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>加载Spring配置，并调用远程服务<br>访问<code>springboot_dubbo_2_orderservice_consumer_demo</code>的<code>initOrder</code>请求，会调用<code>UserService</code>获取用户地址；<br>调用成功。说明我们<code>order</code>已经可以调用远程的<code>UserService</code>了；</p></li></ul></li></ul><h5 id="3-2-注解版"><a href="#3-2-注解版" class="headerlink" title="3.2 注解版"></a>3.2 注解版</h5><ul><li><p>提供者</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"springboot_dubbo_1_userservice_provider_demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 扫描包下的dubbo注解 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">"com.example.li.springboot_dubbo_1_userservice_provider_demo.service.impl"</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;<span class="comment">//dubbo的service</span></span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Service</span> <span class="comment">//使用dubbo提供的service注解，注册暴露服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">       <span class="meta">@Autowired</span></span><br><span class="line">     UserAddressMapper userAddressMapper;</span><br></pre></td></tr></table></figure></li><li><p>消费者</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"springboot_dubbo_2_orderservice_consumer_demo"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定注册中心地址 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 扫描包下的dubbo注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">"com.example.li.springboot_dubbo_2_orderservice_consumer_demo.controller"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"><span class="meta">@Reference</span>  <span class="comment">//使用dubbo提供的reference注解引用远程服务</span></span><br><span class="line">UserService userService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="3-3-springboot"><a href="#3-3-springboot" class="headerlink" title="3.3 springboot"></a>3.3 springboot</h5><ul><li><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  &#123;% asset_img 12.png 12.png %&#125;</span><br><span class="line">  在前面配置提供者和消费者需要依赖</span><br><span class="line"></span><br><span class="line">  `com.alibaba.dubbo`, `com.101tec.zkclient`, `org.apache.curator.curator-framework`</span><br><span class="line"></span><br><span class="line">  `dubbo-spring-boot-starter`中包含了这三个jar包</span><br><span class="line"></span><br><span class="line">- 配置application.properties</span><br><span class="line"></span><br><span class="line">  具体配置代表的含义在官网上的解释：http://dubbo.apache.org/zh-cn/docs/user/references/xml/introduction.html</span><br><span class="line"></span><br><span class="line">​```xml</span><br><span class="line">application.name就是服务名，不能跟别的dubbo提供端重复</span><br><span class="line">registry.protocol 是指定注册中心协议</span><br><span class="line">registry.address 是注册中心的地址加端口号</span><br><span class="line">protocol.name 是分布式固定是dubbo,不要改。</span><br><span class="line">base-package  注解方式要扫描的包</span><br></pre></td></tr></table></figure><p>提供者配置：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">    <span class="string">application.name:</span> <span class="string">user-service-provider</span></span><br><span class="line">    <span class="string">registry.address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:2181</span></span><br><span class="line">    <span class="string">registry.protocol:</span> <span class="string">zookeeper</span></span><br><span class="line"></span><br><span class="line">    <span class="string">protocol.name:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="string">protocol.port:</span> <span class="number">20883</span></span><br><span class="line"></span><br><span class="line">    <span class="string">monitor.protocol:</span> <span class="string">registry</span></span><br><span class="line">    <span class="string">scan.base-packages:</span> <span class="string">com.example.li.springboot_dubbo_1_userservice_provider_demo</span></span><br></pre></td></tr></table></figure></p><p>消费者配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dubbo.application.name=order-service-consumer</span><br><span class="line">dubbo.registry.address=zookeeper://127.0.0.1:2181</span><br><span class="line">dubbo.monitor.protocol=registry</span><br><span class="line">dubbo.scan.base-package=com.example.li.springboot_dubbo_2_orderservice_consumer_demo</span><br></pre></td></tr></table></figure></p><ul><li>dubbo注解<br>@Service、@Reference<br><strong>【如果没有在配置中写</strong> <strong>dubbo.scan.base-package,</strong> <strong>还需要在@SpringBootApplication使用@EnableDubbo</strong> <strong>注解】</strong></li></ul><h4 id="4、dubbo配置"><a href="#4、dubbo配置" class="headerlink" title="4、dubbo配置"></a>4、dubbo配置</h4><p>配置文档：<a href="http://dubbo.apache.org/zh-cn/docs/user/references/xml/introduction.html" target="_blank" rel="noopener">http://dubbo.apache.org/zh-cn/docs/user/references/xml/introduction.html</a></p><h5 id="1、重试次数"><a href="#1、重试次数" class="headerlink" title="1、重试次数"></a>1、重试次数</h5><p>失败自动切换，当出现失败，重试其它服务器，但重试会带来更长延迟。可通过 retries=”2” 来设置重试次数(不含第一次)。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">重试次数配置如下：</span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">retries</span>=<span class="string">"2"</span> /&gt;</span></span><br><span class="line">或</span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">retries</span>=<span class="string">"2"</span> /&gt;</span></span><br><span class="line">或</span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">"findFoo"</span> <span class="attr">retries</span>=<span class="string">"2"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2、超时时间"><a href="#2、超时时间" class="headerlink" title="2、超时时间"></a>2、超时时间</h5><p>由于网络或服务端不可靠，会导致调用出现一种不确定的中间状态（超时）。为了避免超时导致客户端资源（线程）挂起耗尽，必须设置超时时间。</p><ul><li>消费端</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">全局超时配置</span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:consumer</span> <span class="attr">timeout</span>=<span class="string">"5000"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">指定接口以及特定方法超时配置</span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">timeout</span>=<span class="string">"2000"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">"sayHello"</span> <span class="attr">timeout</span>=<span class="string">"3000"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>服务端</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">全局超时配置</span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:provider</span> <span class="attr">timeout</span>=<span class="string">"5000"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">指定接口以及特定方法超时配置</span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:provider</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">timeout</span>=<span class="string">"2000"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">"sayHello"</span> <span class="attr">timeout</span>=<span class="string">"3000"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:provider</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3、配置原则"><a href="#3、配置原则" class="headerlink" title="3、配置原则"></a>3、配置原则</h5><p>dubbo推荐在Provider上尽量多配置Consumer端属性：</p><p>1、作服务的提供者，比服务使用方更清楚服务性能参数，如调用的超时时间，合理的重试次数，等等<br>2、在Provider配置后，Consumer不配置则会使用Provider的配置值，即Provider配置可以作为Consumer的缺省值。否则，Consumer会使用Consumer端的全局设置，这对于Provider不可控的，并且往往是不合理的</p><p>配置的覆盖规则：</p><p>1) 方法级配置别优于接口级别，即小Scope优先 </p><p>2) Consumer端配置 优于 Provider配置 优于 全局配置，</p><p>3) 最后是Dubbo Hard Code的配置值（见配置文档）</p><h4 id="4、版本号"><a href="#4、版本号" class="headerlink" title="4、版本号"></a>4、版本号</h4><p>当一个接口实现，出现不兼容升级时，可以用版本号过渡，版本号不同的服务相互间不引用。<br>可以按照以下的步骤进行版本迁移：</p><ol><li><p>在低压力时间段，先升级一半提供者为新版本</p></li><li><p>再将所有消费者升级为新版本</p></li><li><p>然后将剩下的一半提供者升级为新版本</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">老版本服务提供者配置：</span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">version</span>=<span class="string">"1.0.0"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">新版本服务提供者配置：</span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">version</span>=<span class="string">"2.0.0"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">老版本服务消费者配置：</span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"barService"</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">version</span>=<span class="string">"1.0.0"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">新版本服务消费者配置：</span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"barService"</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">version</span>=<span class="string">"2.0.0"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">如果不需要区分版本，可以按照以下的方式配置：</span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"barService"</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">version</span>=<span class="string">"*"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1509716159367-0180b75063d0?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="dubbo" scheme="https://lijinhongpassion.github.io/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>Java-springmvc异常处理</title>
    <link href="https://lijinhongpassion.github.io/codeant/ce37.html"/>
    <id>https://lijinhongpassion.github.io/codeant/ce37.html</id>
    <published>2019-04-15T11:51:30.000Z</published>
    <updated>2019-06-04T08:15:03.825Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1554658615-500836630c96?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1053&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p><a href="https://docs.spring.io/spring-framework/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html" target="_blank" rel="noopener">springmvc官方文档</a>上介绍了几种异常处理方法：</p><ol><li>HandlerExceptionResolver</li><li>@ExceptionHandler</li><li>Annotating Business Exceptions With @ResponseStatus</li><li>Customizing the Default Servlet Container Error Page<br>下面我会针对官方文档的介绍，举示例来讲解。</li></ol><h1 id="1、-HandlerExceptionResolver"><a href="#1、-HandlerExceptionResolver" class="headerlink" title="1、 HandlerExceptionResolver"></a>1、 HandlerExceptionResolver</h1><img src="/codeant/ce37/1.png" title="1.png"><p>关于这部分，对HandlerExceptionResolver方式实现异常处理不进行讲解，对这部分里提到的另外一种方式<code>SimpleMappingExceptionResolver</code>进行演示。</p><p><strong>SimpleMappingExceptionResolver</strong><br><code>SimpleMappingExceptionResolver</code> 允许你获取可能抛出的异常类的名字，并把它映射到一个视图名上去。与Servlet API提供的异常映射特性是功能等价的，可以基于此实现粒度更精细的异常映射。<br>在springmvc中配置<code>SimpleMappingExceptionResolver</code>异常解析器<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--基于SimpleMappingExceptionResolver处理异常--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"exceptionResolver"</span> <span class="class"><span class="keyword">class</span></span>= <span class="string">"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"exceptionMappings"</span>&gt;</span><br><span class="line">            &lt;props&gt;</span><br><span class="line">                &lt;prop key="java.lang.ArrayIndexOutOfBoundsException"&gt;error&lt;/prop&gt;</span><br><span class="line">            &lt;!-- 遇到ArrayIndexOutOfBoundsException异常时，error.jsp页面 --&gt;</span><br><span class="line">            &lt;/props&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><hr><h1 id="2、-ExceptionHandler"><a href="#2、-ExceptionHandler" class="headerlink" title="2、 @ExceptionHandler"></a>2、 @ExceptionHandler</h1><img src="/codeant/ce37/2.png" title="2.png"><p>在第一节（<code>HandlerExceptionResolver</code>）的文档中就提到了用<code>@ExceptionHandler</code>处理异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ExceptionHandler &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Exceptions handled by the annotated method. If empty, will default to any</span></span><br><span class="line"><span class="comment"> * exceptions listed in the method argument list.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Class&lt;? extends Throwable&gt;[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码上看<code>@ExceptionHandler</code> 注解是一个作用于方法的注解，其中注解里面的参数<code>value</code>是一个数组；<br>使用了 <code>@ExceptionHandler</code>方法则会在异常抛出时被调用以处理该异常。这样的方法可以定义在 <code>@Controller</code> 注解的控制器类里，也可以定义在 <code>@ControllerAdvice</code> 类中，后者可以使该异常处理方法被应用到更多的<code>@Controller</code> 控制器中。</p><ul><li><code>@Controller</code> 注解的控制器类里使用<code>@ExceptionHandler</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@ResponseBody</span></span><br><span class="line">   <span class="meta">@ExceptionHandler</span>(ArrayIndexOutOfBoundsException.class)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">handlerMaxUploadSizeExceededException</span><span class="params">(ArrayIndexOutOfBoundsException e)</span></span>&#123;</span><br><span class="line">       <span class="comment">//处理异常的方法</span></span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"处理异常....."</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在控制类中使用<code>@ExceptionHandler</code>，它的所用范围只在它所在控制类中，对于其他控制类所抛出的异常无法处理</p><ul><li><code>@ControllerAdvice</code> 类中使用<code>@ExceptionHandler</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 通过<span class="doctag">@ControllerAdvice</span>注解可以将对于控制器的全局配置放在同一个位置。</span></span><br><span class="line"><span class="comment"> * 2. 注解了<span class="doctag">@Controller</span>的类的方法可以使用<span class="doctag">@ExceptionHandler</span>、<span class="doctag">@InitBinder</span>、<span class="doctag">@ModelAttribute</span>注解到方法上。</span></span><br><span class="line"><span class="comment"> * 3. <span class="doctag">@ControllerAdvice</span>注解将作用在所有注解了<span class="doctag">@RequestMapping</span>的控制器的方法上</span></span><br><span class="line"><span class="comment"> * 4. <span class="doctag">@ExceptionHandler</span>：用于全局处理控制器里的异常。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Li</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/4/15-19:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionController</span> </span>&#123;</span><br><span class="line"><span class="comment">//@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(ArrayIndexOutOfBoundsException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handlerMaxUploadSizeExceededException</span><span class="params">(ArrayIndexOutOfBoundsException e)</span></span>&#123;</span><br><span class="line">        <span class="comment">//处理异常的方法</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"处理异常....."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@ControllerAdvice</code>是对所有控制器的配置，也就是说在这里配置了异常处理，对每个控制器注解了<code>@RequestMapping</code>的方法都会起作用，极大的减少了代码冗余，不需要为每个方法都做try catch操作，也可叫做全局异常处理器</p><hr><h1 id="3、-ResponseStatus"><a href="#3、-ResponseStatus" class="headerlink" title="3、 @ResponseStatus"></a>3、 @ResponseStatus</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ResponseStatus &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The status code to use for the response.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> javax.servlet.http.HttpServletResponse#setStatus(int)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">HttpStatus <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The reason to be used for the response. &lt;p&gt;If this element is not set, it will default to the standard status</span></span><br><span class="line"><span class="comment"> * message for the status code. Note that due to the use of &#123;<span class="doctag">@code</span> HttpServletResponse.sendError(int, String)&#125;,</span></span><br><span class="line"><span class="comment"> * the response will be considered complete and should not be written to any further.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> javax.servlet.http.HttpServletResponse#sendError(int, String)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">reason</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据代码了解到，该注解是在属性和类上使用，value是状态码，reason是原因</p><ul><li>类上使用@ResponseStatus</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义异常类</span></span><br><span class="line"><span class="meta">@ResponseStatus</span>(value = HttpStatus.FORBIDDEN,reason = <span class="string">"@ResponseStatus方式--标记在类上-----错误"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserNameNotMatchPasswordException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//人为抛出异常</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testResponseStatusExceptionResolver"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testResponseStatusExceptionResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UserNameNotMatchPasswordException();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><img src="/codeant/ce37/3.png" title="3.png"><ul><li>方法上使用@ResponseStatus<br>  这种方法还没使用过，具体怎么用还不清楚</li></ul><hr><h1 id="4、-Customizing-the-Default-Servlet-Container-Error-Page"><a href="#4、-Customizing-the-Default-Servlet-Container-Error-Page" class="headerlink" title="4、 Customizing the Default Servlet Container Error Page"></a>4、 Customizing the Default Servlet Container Error Page</h1><img src="/codeant/ce37/5.png" title="5.png"><p>Servlet默认容器错误页面的定制化，从Servlet 3开始，错误页不再需要映射到其他信息了，这意<br>味着，你指定的位置就是对Servlet容器默认错误页的自定制了，你可以在<code>web.xml</code> 中定义一个错误页面 <code>&lt;error-page&gt;</code>元素</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/error<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里错误页的位置所在可以是一个<strong>JSP页面（<location>/error.jsp</location>），或者其他的一些URL</strong>，只要它指定容器里任意一个 <code>@Controller</code>控制器下的处理器方法：<br>写回 <code>HttpServletResponse</code> 的错误信息和错误状态码可以在控制器中通过请求属性来获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorController</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/error"</span>, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">handle</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">map.put(<span class="string">"status"</span>, request.getAttribute(<span class="string">"javax.servlet.error.status_code"</span>));</span><br><span class="line">map.put(<span class="string">"reason"</span>, request.getAttribute(<span class="string">"javax.servlet.error.message"</span>));</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者在JSP中这么使用:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"application/json"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&#123;</span><br><span class="line">status:&lt;%=request.getAttribute(<span class="string">"javax.servlet.error.status_code"</span>) %&gt;,</span><br><span class="line">reason:&lt;%=request.getAttribute(<span class="string">"javax.servlet.error.message"</span>) %&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>github的demo：<a href="https://github.com/LiJinHongPassion/springmvc_fileupload_globalexception_demo" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/springmvc_fileupload_globalexception_demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1554658615-500836630c96?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1053&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="springmvc" scheme="https://lijinhongpassion.github.io/tags/springmvc/"/>
    
      <category term="异常" scheme="https://lijinhongpassion.github.io/tags/%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Java-日志框架类别&amp;配置&amp;使用</title>
    <link href="https://lijinhongpassion.github.io/codeant/573a.html"/>
    <id>https://lijinhongpassion.github.io/codeant/573a.html</id>
    <published>2019-04-12T04:41:22.000Z</published>
    <updated>2019-06-04T08:15:38.953Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1554618501-4aa45b49ecfb?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><ul><li><p>记录系统的一些运行时信息</p></li><li><p>将关键数据打印在控制台</p></li><li><p>自动归档</p></li></ul><h1 id="SLF4J"><a href="#SLF4J" class="headerlink" title="SLF4J"></a>SLF4J</h1><table><thead><tr><th>日志门面  （日志的抽象层）</th><th>日志实现</th></tr></thead><tbody><tr><td><del>JCL（Jakarta  Commons Logging）</del>    SLF4j（Simple  Logging Facade for Java）    <strong><del>jboss-logging</del></strong></td><td>Log4j  JUL（java.util.logging）  Log4j2  <strong>Logback</strong></td></tr></tbody></table><p>左边选一个门面（抽象层）、右边来选一个实现；</p><p>日志门面：  SLF4J；</p><p>日志实现：Logback；</p><p>SpringBoot：底层是Spring框架，Spring框架默认是用JCL；‘</p><p><strong>SpringBoot默认选用 SLF4j和logback; </strong></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="1、如何在系统中使用SLF4j-https-www-slf4j-org-manual-html"><a href="#1、如何在系统中使用SLF4j-https-www-slf4j-org-manual-html" class="headerlink" title="1、如何在系统中使用SLF4j   https://www.slf4j.org/manual.html"></a>1、如何在系统中使用SLF4j   <a href="https://www.slf4j.org/manual.html" target="_blank" rel="noopener">https://www.slf4j.org/manual.html</a></h3><p>以后开发的时候，日志记录方法的调用，<strong>不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法</strong>；</p><p>给系统里面导入slf4j的jar和  logback的实现jar</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(HelloWorld.class);</span><br><span class="line">    logger.info(<span class="string">"Hello World"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图示：<img src="/codeant/573a/1.png" title="1.png"></p><p>每一个日志的实现框架都有自己的配置文件。使用slf4j以后，<strong>配置文件还是做成日志实现框架自己本身的配置文件；</strong></p><h3 id="2、统一框架日志https-www-slf4j-org-legacy-html"><a href="#2、统一框架日志https-www-slf4j-org-legacy-html" class="headerlink" title="2、统一框架日志https://www.slf4j.org/legacy.html"></a>2、统一框架日志<a href="https://www.slf4j.org/legacy.html" target="_blank" rel="noopener">https://www.slf4j.org/legacy.html</a></h3><p>一个系统中可能会有spring,mybatis等框架，但是不同框架使用的日志框架不一样，如何统一日志框架？</p><p><strong>统一日志记录，即使是别的框架和我一起统一使用slf4j进行输出</strong></p><img src="/codeant/573a/2.png" title="2.png"><p><strong>如何让系统中所有的日志都统一到slf4j；</strong></p><p>1、将系统中其他日志框架先排除出去；</p><p>2、用中间包来替换原有的日志框架；</p><p>3、我们导入slf4j其他的实现</p><h3 id="3、SpringBoot日志关系"><a href="#3、SpringBoot日志关系" class="headerlink" title="3、SpringBoot日志关系"></a>3、SpringBoot日志关系</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SpringBoot使用它来做日志功能；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>底层依赖关系</p><img src="/codeant/573a/3.png" title="3.png"><p>总结：</p><p>​    1）、SpringBoot底层也是使用slf4j+logback的方式进行日志记录</p><p>​    2）、SpringBoot也把其他的日志都替换成了slf4j；</p><p>​    3）、中间替换包</p><img src="/codeant/573a/4.png" title="4.png"><p>​    4）、如果我们要引入其他框架？一定要把这个框架的默认日志依赖移除掉？</p><p>​            Spring框架用的是commons-logging；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>SpringBoot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉即可；</strong></p><h3 id="4、日志使用；"><a href="#4、日志使用；" class="headerlink" title="4、日志使用；"></a>4、日志使用；</h3><p><a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-logging" target="_blank" rel="noopener">springboot官方文档-配置日志</a></p><h4 id="1、默认配置"><a href="#1、默认配置" class="headerlink" title="1、默认配置"></a>1、默认配置</h4><p>SpringBoot默认帮我们配置好了日志；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//记录器</span></span><br><span class="line">Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//System.out.println();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//日志的级别；</span></span><br><span class="line"><span class="comment">//由低到高   trace&lt;debug&lt;info&lt;warn&lt;error</span></span><br><span class="line"><span class="comment">//可以调整输出的日志级别；日志就只会在这个级别以以后的高级别生效</span></span><br><span class="line">logger.trace(<span class="string">"这是trace日志..."</span>);</span><br><span class="line">logger.debug(<span class="string">"这是debug日志..."</span>);</span><br><span class="line"><span class="comment">//SpringBoot默认给我们使用的是info级别的，没有指定级别的就用SpringBoot默认规定的级别；root级别</span></span><br><span class="line">logger.info(<span class="string">"这是info日志..."</span>);</span><br><span class="line">logger.warn(<span class="string">"这是warn日志..."</span>);</span><br><span class="line">logger.error(<span class="string">"这是error日志..."</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  日志输出格式：</span><br><span class="line">%d表示日期时间，</span><br><span class="line">%thread表示线程名，</span><br><span class="line">%-5level：级别从左显示5个字符宽度</span><br><span class="line">%logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。 </span><br><span class="line">%msg：日志消息，</span><br><span class="line">%n是换行符</span><br><span class="line">  --&gt;</span><br><span class="line">  %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span><br></pre></td></tr></table></figure><p>SpringBoot修改日志的默认配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">logging.level.com.atguigu=trace</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#logging.path=</span><br><span class="line"># 不指定路径在当前项目下生成springboot.log日志</span><br><span class="line"># 可以指定完整的路径；</span><br><span class="line">#logging.file=G:/springboot.log</span><br><span class="line"></span><br><span class="line"># 在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用 spring.log 作为默认文件</span><br><span class="line">logging.path=/spring/log</span><br><span class="line"></span><br><span class="line">#  在控制台输出的日志的格式</span><br><span class="line">logging.pattern.console=%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span><br><span class="line"># 指定文件中日志输出的格式</span><br><span class="line">logging.pattern.file=%d&#123;yyyy-MM-dd&#125; === [%thread] === %-5level === %logger&#123;50&#125; ==== %msg%n</span><br></pre></td></tr></table></figure><table><thead><tr><th>logging.file</th><th>logging.path</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td>(none)</td><td>(none)</td><td></td><td>只在控制台输出</td></tr><tr><td>指定文件名</td><td>(none)</td><td>my.log</td><td>输出日志到my.log文件</td></tr><tr><td>(none)</td><td>指定目录</td><td>/var/log</td><td>输出到指定目录的 spring.log 文件中</td></tr></tbody></table><h4 id="2、指定配置"><a href="#2、指定配置" class="headerlink" title="2、指定配置"></a>2、指定配置</h4><p>给类路径下放上每个日志框架自己的配置文件即可；SpringBoot就不使用他默认配置的了</p><table><thead><tr><th>Logging System</th><th>Customization</th></tr></thead><tbody><tr><td>Logback</td><td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code> or <code>logback.groovy</code></td></tr><tr><td>Log4j2</td><td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td></tr><tr><td>JDK (Java Util Logging)</td><td><code>logging.properties</code></td></tr></tbody></table><p>logback.xml：直接就被日志框架识别了；</p><p><strong>logback-spring.xml</strong>：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"staging"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- configuration to be enabled when the "staging" profile is active --&gt;</span></span><br><span class="line">  可以指定某段配置只在某个环境下生效</span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"stdout"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        日志输出格式：</span></span><br><span class="line"><span class="comment">%d表示日期时间，</span></span><br><span class="line"><span class="comment">%thread表示线程名，</span></span><br><span class="line"><span class="comment">%-5level：级别从左显示5个字符宽度</span></span><br><span class="line"><span class="comment">%logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。 </span></span><br><span class="line"><span class="comment">%msg：日志消息，</span></span><br><span class="line"><span class="comment">%n是换行符</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ----&gt; [%thread] ---&gt; %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"!dev"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ==== [%thread] ==== %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下错误</p><p> <code>no applicable action for [springProfile]</code></p><h3 id="5、切换日志框架"><a href="#5、切换日志框架" class="headerlink" title="5、切换日志框架"></a>5、切换日志框架</h3><p>可以按照slf4j的日志适配图，进行相关的切换；</p><p>slf4j+log4j的方式；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>切换为log4j2</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p># </p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1554618501-4aa45b49ecfb?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="日志" scheme="https://lijinhongpassion.github.io/tags/%E6%97%A5%E5%BF%97/"/>
    
      <category term="logging" scheme="https://lijinhongpassion.github.io/tags/logging/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-图解HTTP</title>
    <link href="https://lijinhongpassion.github.io/codeant/c29a.html"/>
    <id>https://lijinhongpassion.github.io/codeant/c29a.html</id>
    <published>2019-04-10T13:34:51.000Z</published>
    <updated>2019-06-04T08:16:56.187Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1553531768-a0f91bcfbd3e?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h1 id="1-HTTP状态码"><a href="#1-HTTP状态码" class="headerlink" title="1 HTTP状态码"></a>1 HTTP状态码</h1><table><thead><tr><th>分类</th><th>分类描述</th></tr></thead><tbody><tr><td>1**</td><td>信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td>2**</td><td>成功，操作被成功接收并处理</td></tr><tr><td>3**</td><td>重定向，需要进一步的操作以完成请求</td></tr><tr><td>4**</td><td>客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td>5**</td><td>服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><table><thead><tr><th>状态码</th><th style="text-align:left">状态码英文名称</th><th>中文描述</th></tr></thead><tbody><tr><td>100</td><td style="text-align:left">Continue</td><td>继续。客户端应继续其请求</td></tr><tr><td>101</td><td style="text-align:left">Switching Protocols</td><td>切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td></tr><tr><td></td><td style="text-align:left"></td><td></td></tr><tr><td>200</td><td style="text-align:left">OK</td><td>请求成功。一般用于GET与POST请求</td></tr><tr><td>201</td><td style="text-align:left">Created</td><td>已创建。成功请求并创建了新的资源</td></tr><tr><td>202</td><td style="text-align:left">Accepted</td><td>已接受。已经接受请求，但未处理完成</td></tr><tr><td>203</td><td style="text-align:left">Non-Authoritative Information</td><td>非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td></tr><tr><td>204</td><td style="text-align:left">No Content</td><td>无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td></tr><tr><td>205</td><td style="text-align:left">Reset Content</td><td>重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td>206</td><td style="text-align:left">Partial Content</td><td>部分内容。服务器成功处理了部分GET请求</td></tr><tr><td></td><td style="text-align:left"></td><td></td></tr><tr><td>300</td><td style="text-align:left">Multiple Choices</td><td>多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td></tr><tr><td><strong>301</strong></td><td style="text-align:left">Moved Permanently</td><td>永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td><strong>302</strong></td><td style="text-align:left">Found</td><td>临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td>303</td><td style="text-align:left">See Other</td><td>查看其它地址。与301类似。使用GET和POST请求查看</td></tr><tr><td>304</td><td style="text-align:left">Not Modified</td><td>未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td>305</td><td style="text-align:left">Use Proxy</td><td>使用代理。所请求的资源必须通过代理访问</td></tr><tr><td>306</td><td style="text-align:left">Unused</td><td>已经被废弃的HTTP状态码</td></tr><tr><td>307</td><td style="text-align:left">Temporary Redirect</td><td>临时重定向。与302类似。使用GET请求重定向</td></tr><tr><td></td><td style="text-align:left"></td><td></td></tr><tr><td>400</td><td style="text-align:left">Bad Request</td><td>客户端请求的语法错误，服务器无法理解</td></tr><tr><td>401</td><td style="text-align:left">Unauthorized</td><td>请求要求用户的身份认证</td></tr><tr><td>402</td><td style="text-align:left">Payment Required</td><td>保留，将来使用</td></tr><tr><td>403</td><td style="text-align:left">Forbidden</td><td>服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td>404</td><td style="text-align:left">Not Found</td><td>服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td></tr><tr><td>405</td><td style="text-align:left">Method Not Allowed</td><td>客户端请求中的方法被禁止</td></tr><tr><td>406</td><td style="text-align:left">Not Acceptable</td><td>服务器无法根据客户端请求的内容特性完成请求</td></tr><tr><td>407</td><td style="text-align:left">Proxy Authentication Required</td><td>请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td></tr><tr><td>408</td><td style="text-align:left">Request Time-out</td><td>服务器等待客户端发送的请求时间过长，超时</td></tr><tr><td>409</td><td style="text-align:left">Conflict</td><td>服务器完成客户端的PUT请求是可能返回此代码，服务器处理请求时发生了冲突</td></tr><tr><td>410</td><td style="text-align:left">Gone</td><td>客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td></tr><tr><td>411</td><td style="text-align:left">Length Required</td><td>服务器无法处理客户端发送的不带Content-Length的请求信息</td></tr><tr><td>412</td><td style="text-align:left">Precondition Failed</td><td>客户端请求信息的先决条件错误</td></tr><tr><td>413</td><td style="text-align:left">Request Entity Too Large</td><td>由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td></tr><tr><td>414</td><td style="text-align:left">Request-URI Too Large</td><td>请求的URI过长（URI通常为网址），服务器无法处理</td></tr><tr><td>415</td><td style="text-align:left">Unsupported Media Type</td><td>服务器无法处理请求附带的媒体格式</td></tr><tr><td>416</td><td style="text-align:left">Requested range not satisfiable</td><td>客户端请求的范围无效</td></tr><tr><td>417</td><td style="text-align:left">Expectation Failed</td><td>服务器无法满足Expect的请求头信息</td></tr><tr><td></td><td style="text-align:left"></td><td></td></tr><tr><td>500</td><td style="text-align:left">Internal Server Error</td><td>服务器内部错误，无法完成请求</td></tr><tr><td>501</td><td style="text-align:left">Not Implemented</td><td>服务器不支持请求的功能，无法完成请求</td></tr><tr><td>502</td><td style="text-align:left">Bad Gateway</td><td>作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td></tr><tr><td>503</td><td style="text-align:left">Service Unavailable</td><td>由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr><tr><td>504</td><td style="text-align:left">Gateway Time-out</td><td>充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr><tr><td>505</td><td style="text-align:left">HTTP Version not supported</td><td>服务器不支持请求的HTTP协议的版本，无法完成处理</td></tr></tbody></table><p><strong>301与302</strong></p><ul><li>301：永久跳转，客户端发送请求访问‘/test’的资源，游览器接收到后，因为‘/test’资源路径改变，返回301并设置响应首部字段’Location’:’/newtest’，告诉客户端在下次访问‘/test’的时候，<strong>在客户端直接更改为’/newtest’</strong></li><li>302：临时跳转,客户端发送请求访问‘/test’的资源，游览器接收到后，因为‘/test’资源路径改变，返回302并设置响应首部字段’Location’:’/newtest’，告诉客户端临时跳转到’/newtest’；客户端在下次访问‘/test’资源还是会重复上面的操作，并不会在客户端直接更改访问资源的路径</li></ul><h1 id="2-HTTP结构"><a href="#2-HTTP结构" class="headerlink" title="2 HTTP结构"></a>2 HTTP结构</h1><img src="/codeant/c29a/1.png" title="1.png"><h1 id="3-HTTP首部"><a href="#3-HTTP首部" class="headerlink" title="3 HTTP首部"></a>3 HTTP首部</h1><p><strong>1. 通用首部字段</strong>–9</p><table><thead><tr><th>字段名</th><th>说明</th></tr></thead><tbody><tr><td><strong>Cache-Control</strong></td><td>控制缓存的行为</td></tr><tr><td>Connection</td><td>逐跳首部、连接的管理</td></tr><tr><td>Date</td><td>创建报文的日期时间</td></tr><tr><td>Program</td><td>报文指令</td></tr><tr><td>Trailer</td><td>报文末端的首部一览</td></tr><tr><td>Transfer-Encoding</td><td>指定报文主体的传输编码方式</td></tr><tr><td>Upgrade</td><td>升级为其他协议</td></tr><tr><td>Via</td><td>代理服务器的相关信息</td></tr><tr><td>Warning</td><td>错误通知</td></tr></tbody></table><p><strong>Cache-Control：</strong></p><p>粗体指令为常用指令</p><ul><li>可缓存性<ul><li><strong>public：</strong>表明其他用户也可以利用缓存</li><li><strong>private：</strong>缓存服务器会对该特定用户提供资源缓存服务，<strong>对于其他用户发来的请求，缓存服务器则不会返回缓存</strong></li><li><strong>no-Cache</strong>（不缓存过期的资源）：<ul><li>客户端：客户端发送的请求中包含no-cache指令，表示客户端不会接收缓存过的响应，则中间的缓存服务器（例如nginx服务器）必须将请求转发给源服务器</li><li>服务器端：若是服务器端返回的响应中包含no-cache指令（response.setHeader(……)），那么缓存服务器（例如nginx）就不能对资源进行缓存；<strong>并且在以后都不会再对缓存服务器请求中提出的资源有效性进行确认，且禁止其对响应的资源进行缓存</strong></li></ul></li></ul></li></ul><hr><ul><li>缓存期限和认证<ul><li>s-maxage：该指令和max-age相同，不同点是s-maxage只适用于供对为用户使用的公共缓存服务器（<strong>也就是说只有在代理服务器才会生效</strong>），max-age是在<strong>客户端生效</strong>；使用该指令过后，会忽略对Expires首部字段和max-age指令的处理；eg : Cache-Control:s-maxage=604800（单位秒）</li><li><strong>max-age：</strong>缓存在未过期的时间内是访问的客户端本地的缓存，当缓存过期后才会访问服务器；eg : Cache-Control:max-age=604800（单位秒）</li><li>max-stale：只能由客户端发起请求；客户端对过期的请求接收；eg:Cache-Control:max-stale=604800（<strong>资源过期时间在指定时间内，才会被客户端接收</strong>）； Cache-Control:max-stale（不设置参数表示不论资源过期多久，都接收）</li></ul></li></ul><hr><ul><li>重新验证<ul><li>must-revalidate：这是用在客户端的；在设置了max-age的缓存资源过期后，那我们必须去源服务端重新获取资源，来验证这个缓存资源是否真的过期，而不能直接使用本地缓存；</li><li>proxy-revalidate：要求<strong>所有的</strong>缓存服务器<strong>接收到客户端带有该指令请求</strong>，在返回响应之前，必须在此验证缓存的有效性。</li></ul></li></ul><hr><ul><li><p>其他</p><ul><li><p>no-store（不缓存）：暗示请求（和对应的响应）或者响应中包含机密信息，该指令表示在本地存储不能缓存请求或者响应的任一部分</p></li><li><p>no-transform：表示无论在请求还是响应中，缓存都不能改变实体主体的媒体类型；这样做可防止缓存或代理压缩图片等类似操作。</p></li></ul></li></ul><p><strong>Connection：</strong></p><p>作用</p><ul><li>控制不再转发给代理首部字段</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eg: Connection: Upgeade    //表示首部字段中upgrade字段会被从http中删除后在转发</span><br></pre></td></tr></table></figure><ul><li><p>管理持久化连接</p><ul><li><p>close：当服务器端想明确断开连接时，则指定Connection的值为close</p></li><li><p>Keep-Alive：客户端发送请求给服务器时，服务器会像下图那样加上Keep-Alive首部字段和Connection首部字段后返回响应</p><img src="/codeant/c29a/2.png" title="2.png"></li></ul></li></ul><p><strong>2. 请求首部字段  </strong>–19  </p><p>​                               </p><table><thead><tr><th>字段名</th><th>说明</th></tr></thead><tbody><tr><td><strong>Accept</strong></td><td>用户代理可处理的媒体类型</td></tr><tr><td>Accept-Charset</td><td>优先的字符集</td></tr><tr><td><strong>Accept-Encoding</strong></td><td>优先的内容编码</td></tr><tr><td><strong>Accept-Language</strong></td><td>优先的语言（自然语言）</td></tr><tr><td>Authorization</td><td>Web认证信息</td></tr><tr><td>Expect</td><td>期待服务器的特定行为</td></tr><tr><td>From</td><td>用户的电子邮箱地址</td></tr><tr><td>Host</td><td>请求资源所在的服务器</td></tr><tr><td>If-Match</td><td>比较实体标记（ETag）</td></tr><tr><td>If-Modified-Since</td><td>比较资源的更新时间</td></tr><tr><td>If-None-Match</td><td>比较实体标记（与If-Match相反）</td></tr><tr><td>If-Range</td><td>资源未更新时发送实体Byte的范围请求</td></tr><tr><td>If-Unmodified-Since</td><td>比较资源的更新时间（与If-Modified-Since相反）</td></tr><tr><td>Max-Forwards</td><td>最大传输逐跳数</td></tr><tr><td>Proxy-Authorization</td><td>代理服务器要求客户端的认证信息</td></tr><tr><td>Range</td><td>实体的字节范围请求</td></tr><tr><td>Referer</td><td>对请求中的URI的原始获取方</td></tr><tr><td>TE</td><td>传输编码的优先级</td></tr><tr><td><strong>User-Agent</strong></td><td>HTTP客户端程序的信息</td></tr></tbody></table><p><strong>Accept、Accept-Encoding、Accept-Language</strong>与实体类首部字段Content-Type、Content-Encoding、Content-Language相对应</p><p>客户端发送请求首部字段Accept、Accept-Encoding、Accept-Language，服务器接收后在实体报文里面设置Content-Type、Content-Encoding、Content-Language与之对应响应客户端的请求</p><p><strong>3.响应首部字段</strong>–9</p><table><thead><tr><th><strong>首部字段名</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Accept-Ranges</td><td>是否接受字节范围请求</td></tr><tr><td>Age</td><td>推算资源创建经过时间</td></tr><tr><td><strong>ETag</strong></td><td>资源的匹配信息</td></tr><tr><td>Location</td><td>令客户端重定向至指定URI</td></tr><tr><td>Proxy-Authenticate</td><td>代理服务器对客户端的认证信息</td></tr><tr><td>Retry-After</td><td>对再次发起请求的时机要求</td></tr><tr><td>Server</td><td>HTTP服务器的安装信息</td></tr><tr><td>Vary</td><td>代理服务器缓存的管理信息</td></tr><tr><td>WWW-Authenticate</td><td>服务器对客户端的认证信息</td></tr></tbody></table><p><strong>ETag：</strong></p><p>数据签名，它是一种可将资源以字符串形式做唯一性标识的方式。服务器端会为每份资源分配对应的ETag值。用ETag来标记唯一资源；</p><p>配合if-Match或者if-Non-Match使用（比较实体标记（ETag）），这两个字段都是请求首部字段</p><p>服务器获取到字段后对比ETag，判断是否返回一个新的资源</p><p><strong>4. 实体首部字段  </strong>–10</p><table><thead><tr><th>字段名</th><th>说明</th></tr></thead><tbody><tr><td>Allow</td><td>资源可支持的HTTP方法</td></tr><tr><td><strong>Content-Encoding</strong></td><td>实体主体试用的编码方式</td></tr><tr><td><strong>Content-Language</strong></td><td>实体主体的自然语言</td></tr><tr><td>Content-Length</td><td>实体主体的大小（单位：字节）</td></tr><tr><td>Content-Location</td><td>替换对应资源的URI</td></tr><tr><td>Content-MD5</td><td>实体主体的报文摘要</td></tr><tr><td>Content-Range</td><td>实体主体的位置范围</td></tr><tr><td><strong>Content-Type</strong></td><td>实体主体的媒体类型</td></tr><tr><td>Expires</td><td>实体主体过期的日期时间</td></tr><tr><td><strong>Last-Modified</strong></td><td>资源的最后修改日期时间</td></tr></tbody></table><p><strong>Last-Modified：</strong></p><p>配合If-Modified-Since或者If-Unmodified-Since使用，比较资源的更新时间，这俩个字段是请求首部字段 </p><p><strong>5、为Cookie服务的首部字段</strong></p><table><thead><tr><th>字段名</th><th>说明</th><th>首部类型</th></tr></thead><tbody><tr><td>Set-Cookie</td><td>开始状态管理所使用的Cookie信息</td><td>响应首部字段</td></tr><tr><td>Cookie</td><td>服务器接收到的Cookie信息</td><td>请求首部字段</td></tr></tbody></table><ul><li><p><strong>Set-Cookie字段</strong>的属性</p><p>| 属性         | 说明                                                         |<br>| ———— | ———————————————————— |<br>| NAME=VALUE   | 赋予Cookie名称和值（必须项）eg:id = ‘1312’                   |<br>| expires=Date | Cookie的有效期（若是不明确有效期或者没有设置，则Cookie的有效期为游览器关闭为止） |<br>| path=PATH    | 将服务器上的文件目录作为Cookie的适用对象（若不指定则默认为文档所在的文件目录） |<br>| domain=域名  | 作为Cookie适用对象的域名（若不明确则默认为创建Cookie的服务器的域名） |<br>| Secure       | 仅在HTTPS安全通信时才会发送Cookie                            |<br>| HttpOnly     | 加以限制，使Cookie不能被javascript脚本访问                   |</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eg: Set-Cookie: id=&apos;123&apos;; HttpOnly</span><br></pre></td></tr></table></figure></li><li><p>Cookie</p><p>当服务器通过set-cookie设置cookie信息返回响应给客户端，客户端接收到以后，就将响应首部字段中的set-cookie的cookie信息根据所设置的属性保存等；</p><p>在下一次发送请求的时候根据属性要求将cookie信息写入请求首部字段cookie，再发送；</p><p>客户端接收到多个cookie时，同样可以以多个cookie形式返回给服务器；</p></li></ul><p><strong>6、其他首部字段</strong></p><ul><li>X-Frame_Options</li><li>X-Xss_Protection</li><li>DNT</li><li>P3P</li></ul><h1 id="4-HTTPS"><a href="#4-HTTPS" class="headerlink" title="4 HTTPS"></a>4 HTTPS</h1><p>##<strong>1. HTTP缺点</strong></p><ul><li>明文通信（不加密），内容可能会被窃取</li><li>不验证通信方的身份，身份可能会被伪装；例如cookie泄露，攻击者可利用cookie模拟用户操作</li><li>无法证明报文完整性，内容可能被篡改</li></ul><p>所以HTTP是不安全的通信协议</p><hr><p>##<strong>2. HTTPS = HTTP + 加密 + 认证 + 完整性保护 = HTTP + SSL （或者TLS）</strong></p><p><strong>解释：</strong>HTTP将通信接口部分用SSL或TLS协议代替</p><p>HTTP通信过程：HTTP-&gt;TCP</p><p>HTTPS通信过程：HTTP-&gt;SSL-&gt;TCP</p><hr><h2 id="3-怎么实现HTTP-加密-认证-完整性保护？"><a href="#3-怎么实现HTTP-加密-认证-完整性保护？" class="headerlink" title="3. 怎么实现HTTP + 加密 + 认证 + 完整性保护？"></a><strong>3. 怎么实现HTTP + 加密 + 认证 + 完整性保护？</strong></h2><ol><li><p>加密方式</p><ul><li><p>对称密钥加密（也叫共享密钥加密）：加密和解密同用一个密钥</p><p>问题：如何保证密钥在传输过程中不被窃取</p><p>解决：利用 非对称密钥加密 传输 对称密钥加密中需要使用到的密钥</p></li><li><p>非对称密钥加密（也叫公开密钥加密）：私钥、公钥；发送方先用公钥对内容加密，接收方用自己的私钥进行解密；该方法解决了<strong>对称密钥加密方式</strong>存在的问题，因为即使发送方发送过来的信息在传输途中被窃取，因为攻击者没有私钥，所以无法解密</p><p>问题：无法证明公钥就是真正的公钥，有可能被攻击者替换掉</p><p>解决：使用 数字证书认证机构（CA） 和 相关机关 颁发的 公开密钥证书，在下面第三点会详细阐述</p></li></ul><p>非对称比对称处理速度更慢；</p></li><li><p>HTTPS加密方式<br>HTTPS采用混合加密制度，非对称密钥加密用于传输对称密钥加密使用的密钥，在之后就是使用对称密钥加密传输加密的报文，因为堆成密钥加密方式保证了密钥不会被窃取。</p></li><li><p>HTTPS使用证书</p><ul><li><p>证明公开密钥正确性的证书</p><img src="/codeant/c29a/3.png" title="3.png"><img src="/codeant/c29a/4.png" title="4.png"></li><li><p>证明组织真实性的EV SSL证书</p></li><li><p>用以确认客户端的客户端证书</p><p>证明正在与服务器通信的客户端一直是预料之中的客户端。与服务器证书是一样的原理。</p></li><li><p>自认证机构颁发的自签名证书（无效）</p></li></ul></li></ol><hr><h2 id="4-HTTPS安全通信流程"><a href="#4-HTTPS安全通信流程" class="headerlink" title="4. HTTPS安全通信流程"></a><strong>4. HTTPS安全通信流程</strong></h2><img src="/codeant/c29a/5.png" title="5.png"><h2 id="5-SSL速度"><a href="#5-SSL速度" class="headerlink" title="5. SSL速度"></a><strong>5. SSL速度</strong></h2><p>因为HTTPS与HTTP相比，增加了SSL，导致速度会慢2~100倍。</p><p>SSL的慢：</p><ul><li>通信慢（因为要协商准备加密组件等）</li><li>小号CPU及内存等资源（加密解密操作）</li></ul><p>改善方式：SSL加速器</p><h2 id="6-为什么不一直使用HTTPS"><a href="#6-为什么不一直使用HTTPS" class="headerlink" title="6. 为什么不一直使用HTTPS"></a><strong>6. 为什么不一直使用HTTPS</strong></h2><ul><li>消耗更多的服务器资源，导致单位时间内处理请求的数量减少</li><li>节约购买证书的开销</li></ul><p>使用方式：如果是非敏感信息则使用HTTP通信，反之，包含个人敏感数据时使用HTTPS；在进行HTTPS通信时，所传输的数据不一定全部是敏感数据，所以可选择部分加密，以节约资源。</p><h1 id="5-确认用户身份的认证"><a href="#5-确认用户身份的认证" class="headerlink" title="5 确认用户身份的认证"></a>5 确认用户身份的认证</h1><p>HTTP1.1使用的认证方式</p><ul><li><del>BASIC认证（基本认证）</del>  <strong>不常用</strong></li><li><del>DIGEST认证（摘要认证）</del>  <strong>不常用</strong></li><li><del>SSL客户端认证</del>  （需要客户端导入证书以及证书需要费用，并未普及使用）</li><li>FORMBASE认证（基于表单认证）</li></ul><p>所以现在常用的是表单认证+cookie，使用cookie来管理session会话，并且为了防止XSS攻击，应在cookie里设置httponly属性，这样在js脚本里面就不能使用document.cookie</p><img src="/codeant/c29a/6.png" title="6.png"><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><strong>[1]【日】上野 宣.图解HTTP[M].人民邮电出版社:北京,2014.05:1-165.</strong></p><p><strong>[2]维基百科.HTTP标头字段列表[EB/OL].<a href="https://en.wikipedia.org/wiki/List_of_HTTP_header_fields" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/List_of_HTTP_header_fields</a>.</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1553531768-a0f91bcfbd3e?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1050&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="http" scheme="https://lijinhongpassion.github.io/categories/http/"/>
    
    
      <category term="http" scheme="https://lijinhongpassion.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-大型网站技术架构之负载均衡</title>
    <link href="https://lijinhongpassion.github.io/codeant/c670.html"/>
    <id>https://lijinhongpassion.github.io/codeant/c670.html</id>
    <published>2019-04-09T05:58:05.000Z</published>
    <updated>2019-06-04T08:28:16.956Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="通行证" />    <label for="pass">通行证</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="架构" scheme="https://lijinhongpassion.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="读书笔记" scheme="https://lijinhongpassion.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="架构" scheme="https://lijinhongpassion.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="负载均衡" scheme="https://lijinhongpassion.github.io/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-大型网站技术架构（李智慧著）</title>
    <link href="https://lijinhongpassion.github.io/codeant/7bf5.html"/>
    <id>https://lijinhongpassion.github.io/codeant/7bf5.html</id>
    <published>2019-04-08T12:07:16.000Z</published>
    <updated>2019-06-04T08:28:55.726Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/flagged/photo-1554443883-83db889b4007?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1051&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>最近想学习分布式，但是一直苦于不知道怎么入门。所以就去网上淘了一本关于web架构入门的书。这本书中并没有什么代码，主要是web架构的发展。我认为对于javaweb的初学者很有必要看一下这本书，对后面学习java很有帮助。本文章是针对笔者的弱项进行的知识补充。<br><strong>pdf下载链接：<a href="https://pan.baidu.com/s/1i6LWNUt" target="_blank" rel="noopener">https://pan.baidu.com/s/1i6LWNUt</a> 密码：o7nc</strong></p><h1 id="第一章-大型架构演化"><a href="#第一章-大型架构演化" class="headerlink" title="第一章 大型架构演化"></a>第一章 大型架构演化</h1><img src="/codeant/7bf5/1.png" title="1.png"><p>上图是<strong>书籍上演示的</strong>最后网站架构，在这个架构上大多数问题都能够得到解决。但是在演变过程中的业务拆分不是特别理解，也就是对消息队列（服务器）概念不清楚，它是什么，怎么用。<br>**参考文章：<a href="http://www.codeceo.com/article/web-archte-message-queue.html?from=timeline&amp;isappinstalled=0#10006-weixin-1-52626-6b3bffd01fdde4900130bc5a2751b6d1" target="_blank" rel="noopener">http://www.codeceo.com/article/web-archte-message-queue.html?from=timeline&amp;isappinstalled=0#10006-weixin-1-52626-6b3bffd01fdde4900130bc5a2751b6d1</a></p><p>其实从字面意思理解也能够大致想到消息队列的作用。</p><p>在实际应用中常用的使用场景，异步处理，应用解耦，流量削锋和消息通讯四个场景。 </p><p>下面举个应用解耦例子：</p><p>场景说明：用户下单后，订单系统需要通知库存系统。传统的做法是，订单系统调用库存系统的接口。<br><img src="/codeant/7bf5/2.png" title="2.png"><br>传统模式的缺点：<br>1）  假如库存系统无法访问，则订单减库存将失败，从而导致订单失败；<br>2）  订单系统与库存系统耦合；<br>如何解决以上问题呢？引入应用消息队列后的方案，如下图：<br><img src="/codeant/7bf5/3.png" title="3.png"><br>订单系统：用户下单后，订单系统完成持久化处理，将消息写入消息队列，返回用户订单下单成功。<br>库存系统：订阅下单的消息，采用拉/推的方式，获取下单信息，库存系统根据下单信息，进行库存操作。<br><strong>假如：在下单时库存系统不能正常使用。也不影响正常下单，因为下单后，订单系统写入消息队列就不再关心其他的后续操作了。实现订单系统与库存系统的应用解耦。</strong></p><h1 id="第二章-大型网站架构模式"><a href="#第二章-大型网站架构模式" class="headerlink" title="第二章 大型网站架构模式"></a>第二章 大型网站架构模式</h1><ol><li><p>分层<br>横向维度进行分层</p><ul><li><strong>数据层</strong></li><li><strong>服务层</strong><ul><li>接口层（api）</li><li>逻辑处理层</li></ul></li><li><strong>应用层</strong><ul><li>视图层</li><li>业务逻辑层（controller）</li></ul></li></ul><ol start="2"><li><p>分割<br>纵向维度分割：业务分割为更小的粒度</p></li><li><p>分布式<br>常用分布式方案：</p><pre><code>- 分布式应用和服务- 分布式静态资源- 分布式数据和缓存- 分布式计算- 分布式配置- 分布式锁- 分布式文件系统</code></pre></li><li><p>集群<br>概念：即多台服务器部署相同用于构成一个集群，通过负载均衡设为共同对外提供服务</p></li><li><p>缓存<br>缓存数据特点：</p><pre><code>- 数据访问热点不均衡，频繁访问的数据应该放在缓存中- 数据在某个时段友校，不会很快过期，否则会因数据失效而产生脏读</code></pre><p>常见缓存设计：</p><pre><code>- [CDN](https://baike.baidu.com/item/CDN/420951?fr=aladdin#1)：用户的网络请求总是先到达他的网络服务商那里，可以在这里缓存一些静态资源。- 反向代理：因为反向代理是部署在网站的前端，用户发送请求最先访问到的就是反向代理服务器，所以可以在反向代理服务器上存放一些静态资源，例如门户网站等，这样当用户请求发送到反向代理服务器，反向代理服务器直接返回静态资源给用户，既提升了响应时间，也为后端的应用服务器减轻负载。- 本地缓存：缓存应用程序的热点数据，应用程序获取某些数据可以直接访问缓存，从而减少访问数据库。- 分布式缓存：将数据缓存在一个专门的分布式缓存集群中。</code></pre></li><li><p>异步<br>异步架构是典型的生产者消费者模式，例如消息队列，主要的特性：</p><pre><code>- 提高系统的可用性（异步处理）- 加快网站的响应速度（应用解耦）- 消除并发访问高峰（流量削锋）</code></pre></li><li><p>冗余</p></li></ol><p>因为服务器宕机事件的必然性，要保证其数据不丢失，就需要一定程度的服务器冗余运行，数据冗余备份，这也是为什么访问和负载很小的服务因为需要部署至少两台服务器构成的集群。</p><p>数据库备份方式：定期备份、存档保存、冷备份和热备份</p><ol start="8"><li><p>自动化</p></li><li><p>安全</p></li></ol></li></ol><h1 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h1><ul><li>网站伸缩性架构<ul><li>网站架构（纵向横向分离）    97-98 </li><li>应用服务器集群（负载均衡）    99-106</li><li>分布式缓存集群（如何集群）    106-112</li><li>数据存储服务器集群（关系型数据库的读写分离分库分表、nosql）112-120</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/flagged/photo-1554443883-83db889b4007?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1051&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="https://lijinhongpassion.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="读书笔记" scheme="https://lijinhongpassion.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="架构" scheme="https://lijinhongpassion.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Java-spring&amp;springboot配置文件转换</title>
    <link href="https://lijinhongpassion.github.io/codeant/20de.html"/>
    <id>https://lijinhongpassion.github.io/codeant/20de.html</id>
    <published>2019-04-05T01:37:40.000Z</published>
    <updated>2019-06-04T08:29:26.582Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="通行证" />    <label for="pass">通行证</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      spring的xml文件配置方式 转 springboot的Configuration注解配置方式
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="springboot" scheme="https://lijinhongpassion.github.io/tags/springboot/"/>
    
      <category term="spring" scheme="https://lijinhongpassion.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>springboot中文文档[译]</title>
    <link href="https://lijinhongpassion.github.io/codeant/29d7.html"/>
    <id>https://lijinhongpassion.github.io/codeant/29d7.html</id>
    <published>2019-04-03T01:47:48.000Z</published>
    <updated>2019-04-05T10:23:58.383Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h1 id="四、Spring-Boot-功能"><a href="#四、Spring-Boot-功能" class="headerlink" title="四、Spring Boot 功能"></a>四、Spring Boot 功能</h1><p>本部分将介绍 Spring Boot 相关的细节内容。在这里，您可以学习到可能需要使用和自定义的主要功能。您如果还没有做好充分准备，可能需要阅读<a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#getting-started" target="_blank" rel="noopener">第二部分：入门</a>和<a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#using-boot" target="_blank" rel="noopener">第三部分：使用 Spring Boot</a>，以便打下前期基础。</p><h2 id="23、SpringApplication"><a href="#23、SpringApplication" class="headerlink" title="23、SpringApplication"></a>23、SpringApplication</h2><p><code>SpringApplication</code> 类提供了一种可通过运行 <code>main()</code> 方法来启动 Spring 应用的简单方式。多数情况下，您只需要委托给静态的 <code>SpringApplication.run</code> 方法：</p><pre><code>public static void main(String[] args) {    SpringApplication.run(MySpringConfiguration.class, args);}</code></pre><p>当应用启动时，您应该会看到类似以下的内容输出：</p><pre><code>  .   ____          _            __ _ _ /\\ / ___&apos;_ __ _ _(_)_ __  __ _ \ \ \ \( ( )\___ | &apos;_ | &apos;_| | &apos;_ \/ _` | \ \ \ \ \\/  ___)| |_)| | | | | || (_| |  ) ) ) )  &apos;  |____| .__|_| |_|_| |_\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot ::   v2.1.1.RELEASE2013-07-31 00:08:16.117  INFO 56603 --- [           main] o.s.b.s.app.SampleApplication            : Starting SampleApplication v0.1.0 on mycomputer with PID 56603 (/apps/myapp.jar started by pwebb)2013-07-31 00:08:16.166  INFO 56603 --- [           main] ationConfigServletWebServerApplicationContext : Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6e5a8246: startup date [Wed Jul 31 00:08:16 PDT 2013]; root of context hierarchy2014-03-04 13:09:54.912  INFO 41370 --- [           main] .t.TomcatServletWebServerFactory : Server initialized with port: 80802014-03-04 13:09:56.501  INFO 41370 --- [           main] o.s.b.s.app.SampleApplication            : Started SampleApplication in 2.992 seconds (JVM running for 3.658)</code></pre><p>默认情况下，将显示 <code>INFO</code> 级别的日志信息，包括一些应用启动相关信息。如果您需要修改 <code>INFO</code> 日志级别，请参考 <a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-custom-log-levels" target="_blank" rel="noopener">26.4 部分：日志等级</a>。</p><h3 id="23-1、启动失败"><a href="#23-1、启动失败" class="headerlink" title="23.1、启动失败"></a>23.1、启动失败</h3><p>如果您的应用无法启动，注册的 <code>FailureAnalyzers</code> 可能会提供有相关的错误信息和解决问题的具体方法。例如，如果您在已经被占用的 <code>8080</code> 端口上启动了一个 web 应用，会看到类似以下的错误信息：</p><pre><code>***************************APPLICATION FAILED TO START***************************Description:Embedded servlet container failed to start. Port 8080 was already in use.Action:Identify and stop the process that&apos;s listening on port 8080 or configure this application to listen on another port.</code></pre><p><strong>注意</strong></p><blockquote><p>Spring Boot 提供了许多的 <code>FailureAnalyzer</code> 实现，您也可以<a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#howto-failure-analyzer" target="_blank" rel="noopener">添加自己的实现</a>。</p></blockquote><p>如果没有失败分析器能够处理的异常，您仍然可以显示完整的条件报告以便更好地了解出现的问题。为此，您需要针对 <code>org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener</code> <a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-external-config" target="_blank" rel="noopener">启用 <code>debug</code> 属性</a>或者<a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-custom-log-levels" target="_blank" rel="noopener">开启 <code>DEBUG</code> 日志</a>。</p><p>例如，如果您使用 <code>java -jar</code> 运行应用，可以按以下方式启用 <code>debug</code> 属性：</p><pre><code>$ java -jar myproject-0.0.1-SNAPSHOT.jar --debug</code></pre><h3 id="23-2、自定义-banner"><a href="#23-2、自定义-banner" class="headerlink" title="23.2、自定义 banner"></a>23.2、自定义 banner</h3><p>可以通过在 classpath 下添加一个 <code>banner.txt</code> 文件，或者将 <code>spring.banner.location</code> 属性指向该文件的位置来更改启动时打印的 banner。如果文件采用了非 UTF-8 编码，您可以设置 <code>spring.banner.charset</code> 来解决。除了文本文件，您还可以将 <code>banner.gif</code>、<code>banner.jpg</code> 或者 <code>banner.png</code> 图片文件添加到 classpath 下，或者设置 <code>spring.banner.image.location</code> 属性。指定的图片将会被转换成 ASCII 形式并打印在 banner 文本上方。</p><p>您可以在 <code>banner.txt</code> 文件中使用以下占位符：</p><p>变量</p><p>描述</p><p><code>${application.version}</code></p><p>您的应用版本号，声明在 <code>MANIFEST.MF</code> 中。例如，<code>Implementation-Version: 1.0</code> 将被打印为 <code>1.0</code>。</p><p><code>${application.formatted-version}</code></p><p>您的应用版本号，声明在 <code>MANIFEST.MF</code> 中，格式化之后打印（用括号括起来，以 <code>v</code> 为前缀），例如 (<code>v1.0</code>)。</p><p><code>${spring-boot.version}</code></p><p>您使用的 Spring Boot 版本。例如 <code>2.1.1.RELEASE.</code>。</p><p><code>${spring-boot.formatted-version}</code></p><p>您使用的 Spring Boot 版本格式化之后显示（用括号括起来，以 <code>v</code> 为前缀）。例如 (<code>v2.1.1.RELEASE</code>)。</p><p><code>${Ansi.NAME}</code>（或 <code>${AnsiColor.NAME}</code>、<br><code>${AnsiBackground.NAME}</code>、<br><code>${AnsiStyle.NAME}</code>）</p><p>其中 <code>NAME</code> 是 ANSI 转义码的名称。有关详细信息，请参阅 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ansi/AnsiPropertySource.java" target="_blank" rel="noopener">AnsiPropertySource</a>。</p><p><code>${application.title}</code></p><p>您的应用标题，声明在 <code>MANIFEST.MF</code> 中，例如 <code>Implementation-Title: MyApp</code> 打印为 <code>MyApp</code>。</p><p><strong>提示</strong></p><blockquote><p>如果您想以编程的方式生成 banner，可以使用 <code>SpringApplication.setBanner(​...)</code> 方法。使用 <code>org.springframework.boot.Banner</code> 接口并实现自己的 <code>printBanner()</code> 方法。</p></blockquote><p>您还可以使用 <code>spring.main.banner-mode</code> 属性来确定是否必须在 <code>System.out</code>（<code>console</code>）上打印 banner，还是使用日志记录器（<code>log</code>）或者都不打印（<code>off</code>）。</p><p>打印的 banner 被注册名为 <code>springBootBanner</code> 的单例 bean。</p><p><strong>注意</strong></p><blockquote><p>YAML 将 <code>off</code> 映射为 <code>false</code>，因此如果要禁用应用程序 banner，请确保属性添加引号。</p></blockquote><pre><code>spring:    main:        banner-mode: &quot;off&quot;</code></pre><h3 id="23-3、自定义-SpringApplication"><a href="#23-3、自定义-SpringApplication" class="headerlink" title="23.3、自定义 SpringApplication"></a>23.3、自定义 SpringApplication</h3><p>如果 <code>SpringApplication</code> 的默认设置不符合您的想法，您可以创建本地实例进行定制化。例如，要关闭 banner，您可以这样：</p><pre><code>public static void main(String[] args) {    SpringApplication app = new SpringApplication(MySpringConfiguration.class);    app.setBannerMode(Banner.Mode.OFF);    app.run(args);}</code></pre><p><strong>注意</strong></p><blockquote><p>传入 <code>SpringApplication</code> 的构造参数是 spring bean 的配置源。大多情况下是引用 <code>@Configuration</code> 类，但您也可以引用 XML 配置或者被扫描的包。</p></blockquote><p>也可以使用 <code>application.properties</code> 文件配置 <code>SpringApplication</code>。有关详细信息，请参见<a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-external-config" target="_blank" rel="noopener">第 24 章：外部化配置</a>。</p><p>关于配置选项的完整列表，请参阅 <a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/api/org/springframework/boot/SpringApplication.html" target="_blank" rel="noopener">SpringApplication Javadoc</a>。</p><h3 id="23-4、Fluent-Builder-API"><a href="#23-4、Fluent-Builder-API" class="headerlink" title="23.4、Fluent Builder API"></a>23.4、Fluent Builder API</h3><p>如果您需要构建一个有层级关系的 <code>ApplicationContext</code>（具有父/子关系的多上下文），或者偏向使用 <strong>fluent</strong>（流式）构建器 API，可以使用 <code>SpringApplicationBuilder</code>。</p><p><code>SpringApplicationBuilder</code> 允许您链式调用多个方法，包括能创建出具有层次结构的 <code>parent</code> 和 <code>child</code> 方法。</p><p>例如：</p><pre><code>new SpringApplicationBuilder()        .sources(Parent.class)        .child(Application.class)        .bannerMode(Banner.Mode.OFF)        .run(args);</code></pre><p><strong>注意</strong></p><blockquote><p>创建层级的 <code>ApplicationContext</code> 时有部分限制，比如 Web 组件<strong>必须</strong>包含在子上下文中，并且相同的 <code>Environment</code> 将作用于父子上下文。有关详细信息，请参阅 <a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/api/org/springframework/boot/builder/SpringApplicationBuilder.html" target="_blank" rel="noopener">SpringApplicationBuilder Javadoc</a>。</p></blockquote><h3 id="23-5、应用程序事件与监听器"><a href="#23-5、应用程序事件与监听器" class="headerlink" title="23.5、应用程序事件与监听器"></a>23.5、应用程序事件与监听器</h3><p>除了常见的 Spring Framework 事件，比如 <a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/javadoc-api/org/springframework/context/event/ContextRefreshedEvent.html" target="_blank" rel="noopener"><code>ContextRefreshedEvent</code></a>，<code>SpringApplication</code> 还会发送其他应用程序事件。</p><p><strong>注意</strong></p><blockquote><p>在 <code>ApplicationContext</code> 创建之前，实际上触发了一些事件，因此您不能像 <code>@Bean</code> 一样注册监听器。您可以通过 <code>SpringApplication.addListeners(​...)</code> 或者 <code>SpringApplicationBuilder.listeners(...​)</code> 方法注册它们。如果您希望无论应用使用何种创建方式都能自动注册这些监听器，您都可以将 <code>META-INF/spring.factories</code> 文件添加到项目中，并使用 <code>org.springframework.context.ApplicationListener</code> 属性键指向您的监听器。比如：<code>org.springframework.context.ApplicationListener=com.example.project.MyListener</code></p></blockquote><p>当您运行应用时，应用程序事件将按照以下顺序发送：</p><ol><li>在开始应用开始运行但还没有进行任何处理时（除了注册监听器和初始化器[initializer]），将发送 <code>ApplicationStartingEvent</code>。</li><li>当 <code>Environment</code> 被上下文使用，但是在上下文创建之前，将发送 <code>ApplicationEnvironmentPreparedEvent</code>。</li><li>在开始刷新之前，bean 定义被加载之后发送 <code>ApplicationPreparedEvent</code>。</li><li>在上下文刷新之后且所有的应用和命令行运行器（command-line runner）被调用之前发送 <code>ApplicationStartedEvent</code>。</li><li>在应用程序和命令行运行器（command-line runner）被调用之后，将发出 <code>ApplicationReadyEvent</code>，该事件用于通知应用已经准备处理请求。</li><li>如果启动时发生异常，将发送 <code>ApplicationFailedEvent</code>。</li></ol><p><strong>提示</strong></p><blockquote><p>您可能不会经常使用应用程序事件，但了解他们的存在还是很有必要的。在框架内部，Spring Boot 使用这些事件来处理各种任务。</p></blockquote><p>应用程序事件发送使用了 Spring Framework 的事件发布机制。该部分机制确保在子上下文中发布给监听器的事件也会发布给所有祖先上下文中的监听器。因此，如果您的应用程序使用有层级结构的 SpringApplication 实例，则监听器可能会收到同种类型应用程序事件的多个实例。</p><p>为了让监听器能够区分其上下文事件和后代上下文事件，您应该注入其应用程序上下文，然后将注入的上下文与事件的上下文进行比较。可以通过实现 <code>ApplicationContextAware</code> 来注入上下文，如果监听器是 bean，则使用 <code>@Autowired</code> 注入上下文。</p><h3 id="23-6、Web-环境"><a href="#23-6、Web-环境" class="headerlink" title="23.6、Web 环境"></a>23.6、Web 环境</h3><p><code>SpringApplication</code> 试图为您创建正确类型的 <code>ApplicationContext</code>。确定 <code>WebApplicationType</code> 的算法非常简单：</p><ul><li>如果存在 Spring MVC，则使用 <code>AnnotationConfigServletWebServerApplicationContext</code></li><li>如果 Spring MVC 不存在且存在 Spring WebFlux，则使用 <code>AnnotationConfigReactiveWebServerApplicationContext</code></li><li>否则，使用 <code>AnnotationConfigApplicationContext</code></li></ul><p>这意味着如果您在同一个应用程序中使用了 Spring MVC 和 Spring WebFlux 中的新 <code>WebClient</code>，默认情况下将使用 Spring MVC。您可以通过调用 <code>setWebApplicationType(WebApplicationType)</code> 修改默认行为。</p><p>也可以调用 <code>setApplicationContextClass(...)</code> 来完全控制 <code>ApplicationContext</code> 类型。</p><p><strong>提示</strong></p><blockquote><p>在 JUnit 测试中使用 <code>SpringApplication</code> 时，通常需要调用 <code>setWebApplicationType(WebApplicationType.NONE)</code>。</p></blockquote><h3 id="23-7、访问应用程序参数"><a href="#23-7、访问应用程序参数" class="headerlink" title="23.7、访问应用程序参数"></a>23.7、访问应用程序参数</h3><p>如果您需要访问从 <code>SpringApplication.run(​...)</code> 传入的应用程序参数，可以注入一个 <code>org.springframework.boot.ApplicationArguments</code> bean。<code>ApplicationArguments</code> 接口提供了访问原始 <code>String[]</code> 参数以及解析后的 <code>option</code> 和 <code>non-option</code> 参数的方法：</p><pre><code>import org.springframework.boot.*;import org.springframework.beans.factory.annotation.*;import org.springframework.stereotype.*;@Componentpublic class MyBean {    @Autowired    public MyBean(ApplicationArguments args) {        boolean debug = args.containsOption(&quot;debug&quot;);        List&lt;String&gt; files = args.getNonOptionArgs();        // if run with &quot;--debug logfile.txt&quot; debug=true, files=[&quot;logfile.txt&quot;]    }}</code></pre><p><strong>提示</strong></p><blockquote><p>Spring Boot 还向 Spring <code>Environment</code> 注册了一个 <code>CommandLinePropertySource</code>。这允许您可以使用 <code>@Value</code> 注解注入单个应用参数。</p></blockquote><h3 id="23-8、使用-ApplicationRunner-或-ApplicationRunner"><a href="#23-8、使用-ApplicationRunner-或-ApplicationRunner" class="headerlink" title="23.8、使用 ApplicationRunner 或 ApplicationRunner"></a>23.8、使用 ApplicationRunner 或 ApplicationRunner</h3><p>如果您需要在 SpringApplication 启动时运行一些代码，可以实现 <code>ApplicationRunner</code> 或者 <code>CommandLineRunner</code> 接口。这两个接口的工作方式是一样的，都提供了一个单独的 <code>run</code> 方法，它将在 <code>SpringApplication.run(​...)</code> 完成之前调用。</p><p><code>CommandLineRunner</code> 接口提供了访问应用程序字符串数组形式参数的方法，而 <code>ApplicationRunner</code> 则使用了上述的 <code>ApplicationArguments</code> 接口。以下示例展示 <code>CommandLineRunner</code> 和 <code>run</code> 方法的使用：</p><pre><code>import org.springframework.boot.*;import org.springframework.stereotype.*;@Componentpublic class MyBean implements CommandLineRunner {    public void run(String... args) {        // Do something...    }}</code></pre><p>如果您定义了多个 <code>CommandLineRunner</code> 或者 <code>ApplicationRunner</code> bean，则必须指定调用顺序，您可以实现 <code>org.springframework.core.Ordered</code> 接口，也可以使用 <code>org.springframework.core.annotation.Order</code> 注解解决顺序问题。</p><h3 id="23-9、应用程序退出"><a href="#23-9、应用程序退出" class="headerlink" title="23.9、应用程序退出"></a>23.9、应用程序退出</h3><p>每个 <code>SpringApplication</code> 注册了一个 JVM 关闭钩子，以确保 <code>ApplicationContext</code> 在退出时可以优雅关闭。所有标准的 Spring 生命周期回调（比如 <code>DisposableBean</code> 接口，或者 <code>@PreDestroy</code> 注解）都可以使用。</p><p>此外，如果希望在调用 <code>SpringApplication.exit()</code> 时返回特定的退出码，则 bean 可以实现 <code>org.springframework.boot.ExitCodeGenerator</code> 接口。之后退出码将传递给 <code>System.exit()</code> 以将其作为状态码返回，如示例所示：</p><pre><code>@SpringBootApplicationpublic class ExitCodeApplication {    @Bean    public ExitCodeGenerator exitCodeGenerator() {        return () -&gt; 42;    }    public static void main(String[] args) {        System.exit(SpringApplication                .exit(SpringApplication.run(ExitCodeApplication.class, args)));    }}</code></pre><p>此外，<code>ExitCodeGenerator</code> 接口可以通过异常实现。遇到这类异常时，Spring Boot 将返回实现的 <code>getExitCode()</code> 方法提供的退出码。</p><h3 id="23-10、管理功能"><a href="#23-10、管理功能" class="headerlink" title="23.10、管理功能"></a>23.10、管理功能</h3><p>可以通过指定 <code>spring.application.admin.enabled</code> 属性来为应用程序启用管理相关的功能。其将在 <code>MBeanServer</code> 平台上暴露 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/admin/SpringApplicationAdminMXBean.java" target="_blank" rel="noopener"><code>SpringApplicationAdminMXBean</code></a>。您可以使用此功能来远程管理 Spring Boot 应用。该功能对服务包装器的实现也是非常有用的。</p><p><strong>提示</strong></p><blockquote><p>如果您想知道应用程序在哪一个 HTTP 端口上运行，请使用 <code>local.server.port</code> 键获取该属性。</p></blockquote><p><strong>注意</strong></p><blockquote><p>启用此功能时请小心，因为 MBean 暴露了关闭应用程序的方法。</p></blockquote><h2 id="24、外部化配置"><a href="#24、外部化配置" class="headerlink" title="24、外部化配置"></a>24、外部化配置</h2><p>Spring Boot 可以让您的配置外部化，以便可以在不同环境中使用相同的应用程序代码。您可以使用 properties 文件、YAML 文件、环境变量或者命令行参数来外部化配置。可以使用 <code>@Value</code> 注解将属性值直接注入到 bean 中，可通过 Spring 的 <code>Environment</code> 访问，或者通过 <code>@ConfigurationProperties</code> 绑定到<a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-external-config-typesafe-configuration-properties" target="_blank" rel="noopener">结构化对象</a>。</p><p>Spring Boot 使用了一个非常特别的 <code>PropertySource</code> 指令，用于智能覆盖默认值。属性将按照以下顺序处理：</p><ol><li>在您的主目录（当 devtools 被激活，则为 <code>~/.spring-boot-devtools.properties</code> ）中的 <a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#using-boot-devtools-globalsettings" target="_blank" rel="noopener">Devtools 全局设置属性</a>。</li><li>在测试中使用到的 <code>@TestPropertySource</code> 注解。</li><li>在测试中使用到的 <code>properties</code> 属性，可以是 <a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/api/org/springframework/boot/test/context/SpringBootTest.html" target="_blank" rel="noopener"><code>@SpringBootTest</code></a> 和<a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-testing-spring-boot-applications-testing-autoconfigured-tests" target="_blank" rel="noopener">用于测试应用程序某部分的测试注解</a>。</li><li>命令行参数。</li><li>来自 <code>SPRING_APPLICATION_JSON</code> 的属性（嵌入在环境变量或者系统属性【system propert】中的内联 JSON）。</li><li><code>ServletConfig</code> 初始化参数。</li><li><code>ServletContext</code> 初始化参数。</li><li>来自 <code>java:comp/env</code> 的 JNDI 属性。</li><li>Java 系统属性（<code>System.getProperties()</code>）。</li><li>操作系统环境变量。</li><li>只有 <code>random.*</code> 属性的 <code>RandomValuePropertySource</code>。</li><li>在已打包的 jar 外部的<a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-external-config-profile-specific-properties" target="_blank" rel="noopener">指定 profile 的应用属性文件</a>（<code>application-{profile}.properties</code> 和 YAML 变量）。</li><li>在已打包的 jar 内部的<a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-external-config-profile-specific-properties" target="_blank" rel="noopener">指定 profile 的应用属性文件</a>（<code>application-{profile}.properties</code> 和 YAML 变量）。</li><li>在已打包的 jar 外部的应用属性文件（<code>application.properties</code> 和 YAML 变量）。</li><li>在已打包的 jar 内部的应用属性文件（<code>application.properties</code> 和 YAML 变量）。</li><li>在 <code>@Configuration</code> 类上的 <code>@PropertySource</code> 注解。</li><li>默认属性（使用 <code>SpringApplication.setDefaultProperties</code> 指定）。</li></ol><p>举个例子，假设开发的 <code>@Component</code> 使用了 <code>name</code> 属性，可以这样：</p><pre><code>import org.springframework.stereotype.*;import org.springframework.beans.factory.annotation.*;@Componentpublic class MyBean {    @Value(&quot;${name}&quot;)    private String name;    // ...}</code></pre><p>在您的应用程序的 classpath 中（比如在 jar 中），您可以有一个 <code>application.properties</code>，它为 <code>name</code> 提供了一个合适的默认属性值。当在新环境中运行时，您可以在 jar 外面提供一个 <code>application.properties</code> 来覆盖 <code>name</code>。对于一次性测试，您可以使用命令行指定形式启动（比如 <code>java -jar app.jar --name=&quot;Spring&quot;</code>）。</p><p><strong>提示</strong></p><blockquote><p>`SPRING_APPLICATION_JSON` 属性可以在命令行中提供一个环境变量。比如在 UN*X shell 中： <figure class="highlight plain"><figcaption><span>SPRING\_APPLICATION\_JSON</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 24.1、配置随机值</span><br><span class="line"></span><br><span class="line">`RandomValuePropertySource` 对于随机值注入非常有用（比如在保密场景或者测试用例中)。它可以产生 integer、long、uuid 和 string。如下示例：</span><br><span class="line"></span><br><span class="line">    my.secret=$&#123;random.value&#125;</span><br><span class="line">    my.number=$&#123;random.int&#125;</span><br><span class="line">    my.bignumber=$&#123;random.long&#125;</span><br><span class="line">    my.uuid=$&#123;random.uuid&#125;</span><br><span class="line">    my.number.less.than.ten=$&#123;random.int(10)&#125;</span><br><span class="line">    my.number.in.range=$&#123;random.int[1024,65536]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">`random.int*` 语法为 `OPEN value (,max) CLOSE`，`OPEN,CLOSE` 可为任意字符，`value,max` 为整数。如果使用了 `max`，`value` 则为最小值，`max` 为最大值。</span><br><span class="line"></span><br><span class="line">### 24.2、访问命令行属性</span><br><span class="line"></span><br><span class="line">默认情况下，`SpringApplication` 将所有命令行选项参数（即以 `--` 开头的参数，比如 `--server.port=9000`）转换为属性，并将它们添加到 Spring `Environment` 中。如之前所述，命令行属性始终优先于其他属性源。</span><br><span class="line"></span><br><span class="line">如果您不希望将命令行属性添加到 `Environment`，可以使用 `SpringApplication.setAddCommandLineProperties(false)` 来禁用它们。</span><br><span class="line"></span><br><span class="line">### 24.3、应用程序属性文件</span><br><span class="line"></span><br><span class="line">`SpringApplication` 从以下位置的 `application.properties` 文件中加载属性（properties），并将它们添加到 Spring `Environment` 中：</span><br><span class="line"></span><br><span class="line">1.  当前目录的 `/config` 子目录</span><br><span class="line">2.  当前目录</span><br><span class="line">3.  classpath 上的 `/config` 包</span><br><span class="line">4.  classpath 根路径</span><br><span class="line"></span><br><span class="line">列表按序号优先级排序，序号越小，优先级越高。</span><br><span class="line"></span><br><span class="line">**注意**</span><br><span class="line"></span><br><span class="line">&gt; 您还可以使用 [YAML（.yml）](https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-external-config-yaml)文件来替代 **.properties**。</span><br><span class="line"></span><br><span class="line">如果您不喜欢 `application.properties` 作为配置文件名，则可以通过指定 `spring.config.name` 环境属性来切换到另一个文件名。您还可以使用 `spring.config.location` 环境属性来引用一个显式位置（以逗号分隔的目录位置或文件路径列表）。以下示例展示了如何指定其他文件名：</span><br><span class="line"></span><br><span class="line">    $ java -jar myproject.jar --spring.config.name=myproject</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">以下示例展示了如何指定两个位置：</span><br><span class="line"></span><br><span class="line">    $ java -jar myproject.jar --spring.config.location=classpath:/default.properties,classpath:/override.properties</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**警告**</span><br><span class="line"></span><br><span class="line">&gt; `spring.config.name` 和 `spring.config.location` 在程序启动早期就用来确定哪些文件必须加载，因此必须将它们定义为环境属性（通常是 OS 环境变量、系统属性或命令行参数）。</span><br><span class="line"></span><br><span class="line">如果 `spring.config.location` 包含目录（而不是文件），则它们应该以 `/` 结尾（并且在运行期间，在加载之前追加从 `spring.config.name` 生成的名称，包括指定 profile 的文件名）。 `spring.config.location` 中指定的文件按原样使用，不支持指定 profile 形式，并且可被任何指定 profile 的文件的属性所覆盖。</span><br><span class="line"></span><br><span class="line">配置位置以相反的顺序搜索。默认情况下，配置的位置为 `classpath:/,classpath:/config/,file:./,file:./config/`。生成的搜索顺序如下：</span><br><span class="line"></span><br><span class="line">1.  `file:./config/`</span><br><span class="line">2.  `file:./`</span><br><span class="line">3.  `classpath:/config/`</span><br><span class="line">4.  `classpath:/`</span><br><span class="line"></span><br><span class="line">使用了 `spring.config.location` 配置自定义配置位置时，默认位置配置将被替代。例如，如果 `spring.config.location` 配置为 `classpath:/custom-config/,file:./custom-config/`，搜索顺序将变为以下：</span><br><span class="line"></span><br><span class="line">1.  `file:./custom-config/`</span><br><span class="line">2.  `classpath:custom-config/`</span><br><span class="line"></span><br><span class="line">或者，当使用 `spring.config.additional-location` 配置自定义配置位置时，除了使用默认位置外，还会使用它们。这些其他（additional）位置将在默认位置之前搜索。例如，如果将其他位置配置为 `classpath:/custom-config/,file:./custom-config/`，则搜索顺序将变为以下内容：</span><br><span class="line"></span><br><span class="line">1.  `file:./custom-config/`</span><br><span class="line">2.  `classpath:custom-config/`</span><br><span class="line">3.  `file:./config/`</span><br><span class="line">4.  `file:./`</span><br><span class="line">5.  `classpath:/config/`</span><br><span class="line">6.  `classpath:/`</span><br><span class="line"></span><br><span class="line">该搜索顺序允许您在一个配置文件中指定默认值，然后有选择地覆盖另一个配置文件中的值。您可以在 `application.properties`（或您使用 `spring.config.name` 指定的其他文件）中的某个默认位置为应用程序提供默认值。之后，在运行时，这些默认值将被自定义位置中的某个文件所覆盖。</span><br><span class="line"></span><br><span class="line">**注意**</span><br><span class="line"></span><br><span class="line">&gt; 如果您使用的是环境变量而不是系统属性，大部分操作系统都不允许使用 `.` 分隔的键名，但您可以使用下划线来代替（例如，使用 `SPRING_CONFIG_NAME` 而不是 `spring.config.name`）。</span><br><span class="line"></span><br><span class="line">**注意**</span><br><span class="line"></span><br><span class="line">&gt; 如果应用程序在容器中运行，则可以使用 JNDI 属性（`java:comp/env`）或 servlet 上下文初始化参数来代替环境变量或系统属性。</span><br><span class="line"></span><br><span class="line">### 24.4、特定 Profile 的属性文件</span><br><span class="line"></span><br><span class="line">除 `application.properties` 文件外，还可以使用以下命名约定定义特定 profile 的属性文件：`application-&#123;profile&#125;.properties`。`Environment` 有一组默认配置文件（默认情况下为 `default`），如果未设置激活的（active）profile，则使用这些配置文件。换句话说，如果没有显式激活 profile，则会加载 `application-default.properties` 中的属性。</span><br><span class="line"></span><br><span class="line">特定 profile 的属性文件从与标准 `application.properties` 相同的位置加载，特定 profile 的属性文件无论是否在打包的 jar 内部，都始终覆盖非特定文件。</span><br><span class="line"></span><br><span class="line">如果指定了多个配置文件，则应用 last-wins 策略（优先采取最后一个）。例如，`spring.profiles.active` 属性指定的配置文件是在使用 `SpringApplication` API 配置的配置文件之后添加的，因此优先应用。</span><br><span class="line"></span><br><span class="line">**注意**</span><br><span class="line"></span><br><span class="line">&gt; 如果在 `spring.config.location` 中指定了文件，则不考虑这些文件的特定 profile 形式。如果您还想使用特定 profile 的属性文件，请在 `spring.config.location` 中使用目录形式。</span><br><span class="line"></span><br><span class="line">### 24.5、属性中的占位符</span><br><span class="line"></span><br><span class="line">`application.properties` 中的值在使用时通过现有的 `Environment` 进行过滤，因此您可以返回之前定义的值（例如，从系统属性）。</span><br><span class="line"></span><br><span class="line">    app.name=MyApp</span><br><span class="line">    app.description=$&#123;app.name&#125; is a Spring Boot application</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**提示**</span><br><span class="line"></span><br><span class="line">&gt; 您还可以使用此技术创建现有 Spring Boot 属性的**简短**形式。有关详细信息，请参见[第 77.4 章节：使用**简短**命令行参数](https://docshome.gitbooks.io/springboot/content/pages/hwo-to.md#howto-use-short-command-line-arguments)。</span><br><span class="line"></span><br><span class="line">### 24.6、加密属性</span><br><span class="line"></span><br><span class="line">Spring Boot 没有为加密属性值提供任何内置支持，然而，它提供了修改 Spring `Environment` 包含的值所必需的钩子。`EnvironmentPostProcessor` 接口允许您在应用程序启动之前操作 `Environment`。有关详细信息，请参见[第 76.3 章节：在启动前自定义 Environment 或 ApplicationContext](https://docshome.gitbooks.io/springboot/content/pages/how-to.md#howto-customize-the-environment-or-application-context)。</span><br><span class="line"></span><br><span class="line">如果您正在寻找一种可用于存储凭据和密码的安全方法，[Spring Cloud Vault](https://cloud.spring.io/spring-cloud-vault/) 项目支持在 [HashiCorp Vault](https://www.vaultproject.io/) 中存储外部化配置。</span><br><span class="line"></span><br><span class="line">### 24.7、使用 YAML 代替属性文件</span><br><span class="line"></span><br><span class="line">[YAML](http://yaml.org/) 是 JSON 的超集，是一个可用于指定层级配置数据的便捷格式。只要在 classpath 上有 [SnakeYAML](http://www.snakeyaml.org/) 库，`SpringApplication` 类就会自动支持 YAML 作为属性文件（properties）的替代。</span><br><span class="line"></span><br><span class="line">**注意**</span><br><span class="line"></span><br><span class="line">&gt; 如果使用 **starter**，则 `spring-boot-starter` 会自动提供 SnakeYAML。</span><br><span class="line"></span><br><span class="line">#### 24.7.1、加载 YAML</span><br><span class="line"></span><br><span class="line">Spring Framework 提供了两个便捷类，可用于加载 YAML 文档。`YamlPropertiesFactoryBean` 将 YAML 加载为 `Properties`，`YamlMapFactoryBean` 将 YAML 加载为 `Map`。</span><br><span class="line"></span><br><span class="line">例如以下 YAML 文档：</span><br><span class="line"></span><br><span class="line">    environments:</span><br><span class="line">      dev:</span><br><span class="line">        url: http://dev.example.com</span><br><span class="line">        name: Developer Setup</span><br><span class="line">      prod:</span><br><span class="line">        url: http://another.example.com</span><br><span class="line">        name: My Cool App</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">前面的示例将转换为以下属性（properties）：</span><br><span class="line"></span><br><span class="line">    environments.dev.url=http://dev.example.com</span><br><span class="line">    environments.dev.name=Developer Setup</span><br><span class="line">    environments.prod.url=http://another.example.com</span><br><span class="line">    environments.prod.name=My Cool App</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">YAML 列表表示带有 `[index]` 下标引用的属性键。例如以下 YAML：</span><br><span class="line"></span><br><span class="line">    my:</span><br><span class="line">    servers:</span><br><span class="line">      - dev.example.com</span><br><span class="line">      - another.example.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">以上示例将转成以下属性：</span><br><span class="line"></span><br><span class="line">    my.servers[0]=dev.example.com</span><br><span class="line">    my.servers[1]=another.example.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">要使用 Spring Boot 的 `Binder` 工具来绑定这样配置到属性（这是 `@ConfigurationProperties` 所做的），你需要在目标 bean 中有一个 `java.util.List`（或 `Set`）类型的属性，你需要为其提供一个 setter 或者使用可变值初始化它。 例如，以下示例展示将上述的配置与属性绑定：</span><br><span class="line"></span><br><span class="line">    @ConfigurationProperties(prefix=&quot;my&quot;)</span><br><span class="line">    public class Config &#123;</span><br><span class="line">    </span><br><span class="line">        private List&lt;String&gt; servers = new ArrayList&lt;String&gt;();</span><br><span class="line">    </span><br><span class="line">        public List&lt;String&gt; getServers() &#123;</span><br><span class="line">            return this.servers;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 24.7.2、在 Spring Environment 中将 YAML 暴露为属性</span><br><span class="line"></span><br><span class="line">`YamlPropertySourceLoader` 类可用于在 Spring `Environment` 中将 YAML 暴露为 `PropertySource`。这样做可以让您使用带占位符语法的 `@Value` 注解来访问 YAML 属性。</span><br><span class="line"></span><br><span class="line">#### 24.7.3、多 profile YAML 文档</span><br><span class="line"></span><br><span class="line">您可以使用 `spring.profiles` key 在单个文件中指定多个特定 profile 的 YAML 文档，以指示文档何时应用，如下所示：</span><br><span class="line"></span><br><span class="line">    server:</span><br><span class="line">      address: 192.168.1.100</span><br><span class="line">    ---</span><br><span class="line">    spring:</span><br><span class="line">      profiles: development</span><br><span class="line">    server:</span><br><span class="line">      address: 127.0.0.1</span><br><span class="line">    ---</span><br><span class="line">    spring:</span><br><span class="line">      profiles: production &amp; eu-central</span><br><span class="line">    server:</span><br><span class="line">      address: 192.168.1.120</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在前面示例中，如果 `development` profile 处于激活状态，则 `server.address` 属性得值为 `127.0.0.1`。 同样，如果 `production` 和 `eu-central` profile 处于激活状态，则 `server.address` 属性的值为 `192.168.1.120`。如果未激活 `development`、`production` 或 `eu-central` profile，则该属性的值为 `192.168.1.100`。</span><br><span class="line"></span><br><span class="line">**注意**</span><br><span class="line"></span><br><span class="line">&gt; 因此，`spring.profiles` 可以包含一个简单的 profile 名称（例如 `production`）或一个 profile 表达式。profile 表达式允许表达更复杂的 profile 逻辑，例如 `production &amp; (eu-central | eu-west)`。有关详细信息，请查阅[参考指南](https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/core.html#beans-definition-profiles-java)。</span><br><span class="line"></span><br><span class="line">如果在应用程序上下文启动时没有显式激活，则激活默认 profile。因此，在以下 YAML 中，我们为 `spring.security.user.password` 设置了一个值，该值**仅**在 `default` profile 中可用：</span><br><span class="line"></span><br><span class="line">    server:</span><br><span class="line">      port: 8000</span><br><span class="line">    ---</span><br><span class="line">    spring:</span><br><span class="line">      profiles: default</span><br><span class="line">      security:</span><br><span class="line">        user:</span><br><span class="line">          password: weak</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">然而，在以下示例中，始终设置密码，因为它未附加到任何 profile，如果需要更改，必须在所有其他 profile 中显式重置：</span><br><span class="line"></span><br><span class="line">    server:</span><br><span class="line">      port: 8000</span><br><span class="line">    spring:</span><br><span class="line">      security:</span><br><span class="line">        user:</span><br><span class="line">          password: weak</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">使用 `spring.profiles` 元素来指定 Spring profile 可以选择通过使用 `!` 字符来取反（否定）。如果为单个文档指定了否定和非否定的 profile，则至少一个非否定的 profile 必须匹配，没有否定的 profile 可以匹配。</span><br><span class="line"></span><br><span class="line">#### 24.7.4、YAML 的缺点</span><br><span class="line"></span><br><span class="line">无法使用 `@PropertySource` 注解加载 YAML 文件。因此，如果您需要以这种方式加载值，请使用属性文件（properties）。</span><br><span class="line"></span><br><span class="line">### 24.8、类型安全的配置属性</span><br><span class="line"></span><br><span class="line">使用 `@Value(&quot;$&#123;property&#125;&quot;)` 注解来注入配置属性有时会很麻烦，特别是如果您使用了多个属性或者您的数据本质上是分层结构。Spring Boot 提供了另一种使用属性的方法，该方法使用强类型的 bean 来管理和验证应用程序的配置，如下所示：</span><br><span class="line"></span><br><span class="line">    package com.example;</span><br><span class="line">    </span><br><span class="line">    import java.net.InetAddress;</span><br><span class="line">    import java.util.ArrayList;</span><br><span class="line">    import java.util.Collections;</span><br><span class="line">    import java.util.List;</span><br><span class="line">    </span><br><span class="line">    import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">    </span><br><span class="line">    @ConfigurationProperties(&quot;acme&quot;)</span><br><span class="line">    public class AcmeProperties &#123;</span><br><span class="line">    </span><br><span class="line">        private boolean enabled;</span><br><span class="line">    </span><br><span class="line">        private InetAddress remoteAddress;</span><br><span class="line">    </span><br><span class="line">        private final Security security = new Security();</span><br><span class="line">    </span><br><span class="line">        public boolean isEnabled() &#123; ... &#125;</span><br><span class="line">    </span><br><span class="line">        public void setEnabled(boolean enabled) &#123; ... &#125;</span><br><span class="line">    </span><br><span class="line">        public InetAddress getRemoteAddress() &#123; ... &#125;</span><br><span class="line">    </span><br><span class="line">        public void setRemoteAddress(InetAddress remoteAddress) &#123; ... &#125;</span><br><span class="line">    </span><br><span class="line">        public Security getSecurity() &#123; ... &#125;</span><br><span class="line">    </span><br><span class="line">        public static class Security &#123;</span><br><span class="line">    </span><br><span class="line">            private String username;</span><br><span class="line">    </span><br><span class="line">            private String password;</span><br><span class="line">    </span><br><span class="line">            private List&lt;String&gt; roles = new ArrayList&lt;&gt;(Collections.singleton(&quot;USER&quot;));</span><br><span class="line">    </span><br><span class="line">            public String getUsername() &#123; ... &#125;</span><br><span class="line">    </span><br><span class="line">            public void setUsername(String username) &#123; ... &#125;</span><br><span class="line">    </span><br><span class="line">            public String getPassword() &#123; ... &#125;</span><br><span class="line">    </span><br><span class="line">            public void setPassword(String password) &#123; ... &#125;</span><br><span class="line">    </span><br><span class="line">            public List&lt;String&gt; getRoles() &#123; ... &#125;</span><br><span class="line">    </span><br><span class="line">            public void setRoles(List&lt;String&gt; roles) &#123; ... &#125;</span><br><span class="line">    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">前面的 POJO 定义了以下属性：</span><br><span class="line"></span><br><span class="line">*   `acme.enabled`，默认值为 `false`。</span><br><span class="line">*   `acme.remote-address`，可以从 String 强制转换的类型。</span><br><span class="line">*   `acme.security.username`，内嵌一个 **security** 对象，其名称由属性名称决定。特别是，返回类型根本没有使用，可能是 `SecurityProperties`。</span><br><span class="line">*   `acme.security.password`。</span><br><span class="line">*   `acme.security.roles`，String 集合。</span><br><span class="line"></span><br><span class="line">**注意**</span><br><span class="line"></span><br><span class="line">&gt; getter 和 setter 通常是必需的，因为绑定是通过标准的 Java Bean 属性描述符来完成，就像在 Spring MVC 中一样。以下情况可以省略 setter： - Map，只要它们要初始化，就需要一个 getter 但不一定需要setter，因为它们可以被 binder 修改。 - 集合和数组可以通过一个索引（通常使用 YAML）或使用单个逗号分隔值（属性）进行访问。最后一种情况必须使用 setter。我们建议始终为此类型添加 setter。如果初始化集合，请确保它是可变的（如上例所示）。 - 如果初始化嵌套的 POJO 属性（如前面示例中的 \`Security\` 字段），则不需要 setter。如果您希望 binder 使用其默认构造函数动态创建实例，则需要一个 setter。 有些人可能会使用 Project Lombok 来自动生成 getter 和 setter。请确保 Lombok 不为此类型生成任何特定构造函数，因为容器会自动使用它来实例化对象。 最后，考虑到标准 Java Bean 属性，不支持对静态属性的绑定。</span><br><span class="line"></span><br><span class="line">**提示**</span><br><span class="line"></span><br><span class="line">&gt; 另请参阅 [@Value 和 @ConfigurationProperties 之间的差异](https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-external-config-vs-value)。</span><br><span class="line"></span><br><span class="line">您还需要列出要在 `@EnableConfigurationProperties` 注解中注册的属性类，如下所示：</span><br><span class="line"></span><br><span class="line">    @Configuration</span><br><span class="line">    @EnableConfigurationProperties(AcmeProperties.class)</span><br><span class="line">    public class MyConfiguration &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**注意**</span><br><span class="line"></span><br><span class="line">&gt; 当以这种方式注册 `@ConfigurationProperties` bean 时，bean 具有一个固定格式的名称：`-`，其中 `` 是 `@ConfigurationProperties` 注解中指定的环境 key 前缀，`` 是 bean 的完全限定类名。如果注解未提供任何前缀，则仅使用 bean 的完全限定类名。 上面示例中的 bean 名称为 \`acme-com.example.AcmeProperties\`。</span><br><span class="line"></span><br><span class="line">即使前面的配置为 `AcmeProperties` 创建了一个 bean，我们也建议 `@ConfigurationProperties` 只处理环境（environment），特别是不要从上下文中注入其他 bean。话虽如此，`@EnableConfigurationProperties` 注解也会自动应用到您的项目，以便从 `Environment` 配置使用了 `@ConfigurationProperties` 注解的所有**现有**的 bean。您可以通过确保 `AcmeProperties` 已经是一个 bean 来快捷生成 `MyConfiguration`，如下所示：</span><br><span class="line"></span><br><span class="line">    @Component</span><br><span class="line">    @ConfigurationProperties(prefix=&quot;acme&quot;)</span><br><span class="line">    public class AcmeProperties &#123;</span><br><span class="line">    </span><br><span class="line">        // ... see the preceding example</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">这种配置风格特别适用于 `SpringApplication` 外部 YAML 配置，如下所示：</span><br><span class="line"></span><br><span class="line">    # application.yml</span><br><span class="line">    </span><br><span class="line">    acme:</span><br><span class="line">        remote-address: 192.168.1.1</span><br><span class="line">        security:</span><br><span class="line">            username: admin</span><br><span class="line">            roles:</span><br><span class="line">              - USER</span><br><span class="line">              - ADMIN</span><br><span class="line">    </span><br><span class="line">    # additional configuration as required</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">要使用 `@ConfigurationProperties` bean，您可以使用与其他 bean 相同的方式注入它们，如下所示：</span><br><span class="line"></span><br><span class="line">    @Service</span><br><span class="line">    public class MyService &#123;</span><br><span class="line">    </span><br><span class="line">        private final AcmeProperties properties;</span><br><span class="line">    </span><br><span class="line">        @Autowired</span><br><span class="line">        public MyService(AcmeProperties properties) &#123;</span><br><span class="line">            this.properties = properties;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">         //...</span><br><span class="line">    </span><br><span class="line">        @PostConstruct</span><br><span class="line">        public void openConnection() &#123;</span><br><span class="line">            Server server = new Server(this.properties.getRemoteAddress());</span><br><span class="line">            // ...</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**提示**</span><br><span class="line"></span><br><span class="line">&gt; 使用 `@ConfigurationProperties` 还可以生成元数据文件，IDE 可以通过这些文件来为您自己的 key 提供自动完成功能。有关详细信息，请参阅[附录 B：配置元数据](https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/reference/htmlsingle/#configuration-metadata)。</span><br><span class="line"></span><br><span class="line">#### 24.8.1、第三方配置</span><br><span class="line"></span><br><span class="line">`@ConfigurationProperties` 除了可以使用来注解类之外，您还可以在公共的 @Bean 方法上使用。当您想要将属性绑定到您掌控之外的第三方组件时，这样做特别有用。</span><br><span class="line"></span><br><span class="line">要使用 `Environment` 属性配置 bean，请将 `@ConfigurationProperties` 添加到 bean 注册上，如下所示：</span><br><span class="line"></span><br><span class="line">    @ConfigurationProperties(prefix = &quot;another&quot;)</span><br><span class="line">    @Bean</span><br><span class="line">    public AnotherComponent anotherComponent() &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">使用 `another` 前缀定义的所有属性都使用与前面的 `AcmeProperties` 示例类似的方式映射到 `AnotherComponent` bean。</span><br><span class="line"></span><br><span class="line">#### 24.8.2、宽松绑定</span><br><span class="line"></span><br><span class="line">Spring Boot 使用一些宽松的规则将 `Environment` 属性绑定到 `@ConfigurationProperties` bean，因此 `Environment` 属性名不需要和 bean 属性名精确匹配。常见的示例包括使用了 `-` 符号分割的环境属性（例如，`context-path` 绑定到 `contextPath`）和大写环境属性（例如，`PORT` 绑定到 `port`）。</span><br><span class="line"></span><br><span class="line">如下 `@ConfigurationProperties` 类：</span><br><span class="line"></span><br><span class="line">    @ConfigurationProperties(prefix=&quot;acme.my-project.person&quot;)</span><br><span class="line">    public class OwnerProperties &#123;</span><br><span class="line">    </span><br><span class="line">        private String firstName;</span><br><span class="line">    </span><br><span class="line">        public String getFirstName() &#123;</span><br><span class="line">            return this.firstName;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        public void setFirstName(String firstName) &#123;</span><br><span class="line">            this.firstName = firstName;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在上述示例中，同样可以使用以下属性名称：</span><br><span class="line"></span><br><span class="line">**表 24.1、宽松绑定**</span><br><span class="line"></span><br><span class="line">属性</span><br><span class="line"></span><br><span class="line">描述</span><br><span class="line"></span><br><span class="line">`acme.my-project.person.first-name`</span><br><span class="line"></span><br><span class="line">Kebab 风格（短横线命名），建议在 `.properties` 和 `.yml` 文件中使用。</span><br><span class="line"></span><br><span class="line">`acme.myProject.person.firstName`</span><br><span class="line"></span><br><span class="line">标准驼峰式风格。</span><br><span class="line"></span><br><span class="line">`acme.my_project.person.first_name`</span><br><span class="line"></span><br><span class="line">下划线表示法，`.properties` 和 `.yaml` 文件中的另外一种格式。</span><br><span class="line"></span><br><span class="line">`ACME_MYPROJECT_PERSON_FIRSTNAME`</span><br><span class="line"></span><br><span class="line">大写风格，当使用系统环境变量时推荐使用该风格。</span><br><span class="line"></span><br><span class="line">**注意**</span><br><span class="line"></span><br><span class="line">&gt; 注解的 `prefix` 值必须是 kebab (短横线命名)风格（小写并用 `-` 分隔，例如 `acme.my-project.person`）。</span><br><span class="line"></span><br><span class="line">**表 24.2、每种属性源（property source）的宽松绑定规则**</span><br><span class="line"></span><br><span class="line">属性源</span><br><span class="line"></span><br><span class="line">简单类型</span><br><span class="line"></span><br><span class="line">列表集合类型</span><br><span class="line"></span><br><span class="line">properties 文件</span><br><span class="line"></span><br><span class="line">驼峰式、短横线式或下划线式</span><br><span class="line"></span><br><span class="line">标准列表语法使用 `[]` 或逗号分隔值</span><br><span class="line"></span><br><span class="line">YAML 文件</span><br><span class="line"></span><br><span class="line">驼峰式、短横线式或者下划线式</span><br><span class="line"></span><br><span class="line">标准 YAML 列表语法或者逗号分隔值</span><br><span class="line"></span><br><span class="line">环境变量</span><br><span class="line"></span><br><span class="line">大写并且以下划线作为定界符，`_` 不能放在属性名之间使用</span><br><span class="line"></span><br><span class="line">数字值两边使用下划线连接，例如 `MY_ACME_1_OTHER = my.acme[1].other`</span><br><span class="line"></span><br><span class="line">系统属性</span><br><span class="line"></span><br><span class="line">驼峰式、短横线式或者下划线式</span><br><span class="line"></span><br><span class="line">标准列表语法使用 `[]` 或逗号分隔值</span><br><span class="line"></span><br><span class="line">**提示**</span><br><span class="line"></span><br><span class="line">&gt; 我们建议，属性尽可能以小写的短横线格式存储，比如 `my.property-name=acme`。</span><br><span class="line"></span><br><span class="line">当绑定到 `Map` 属性时，如果 key 包含除小写字母数字字符或 `-` 以外的任何内容，则需要使用括号表示法来保留原始值。如果 key 没有使用 `[]` 包裹，则里面的任何非字母数字字符或 `-` 的字符都将被删除。例如，将以下属性绑定到一个 `Map`：</span><br><span class="line"></span><br><span class="line">    acme:</span><br><span class="line">      map:</span><br><span class="line">        &quot;[/key1]&quot;: value1</span><br><span class="line">        &quot;[/key2]&quot;: value2</span><br><span class="line">        /key3: value3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">上面的属性将绑定到一个 `Map` 上，其中 `/key1`，`/key2` 和 `key3` 作为 map 的 key。</span><br><span class="line"></span><br><span class="line">#### 24.8.3、合并复杂类型</span><br><span class="line"></span><br><span class="line">当列表集合（list）在多个地方配置时，整个列表集合将被替换。</span><br><span class="line"></span><br><span class="line">例如，假设带有 `name` 和 `description` 属性的 `MyPojo` 对象默认为 `null`。以下示例中，`AcmeProperties` 暴露了一个 `MyPojo` 对象列表集合：</span><br><span class="line"></span><br><span class="line">    @ConfigurationProperties(&quot;acme&quot;)</span><br><span class="line">    public class AcmeProperties &#123;</span><br><span class="line">    </span><br><span class="line">        private final List&lt;MyPojo&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">        public List&lt;MyPojo&gt; getList() &#123;</span><br><span class="line">            return this.list;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">配置可以如下：</span><br><span class="line"></span><br><span class="line">    acme:</span><br><span class="line">      list:</span><br><span class="line">        - name: my name</span><br><span class="line">          description: my description</span><br><span class="line">    ---</span><br><span class="line">    spring:</span><br><span class="line">      profiles: dev</span><br><span class="line">    acme:</span><br><span class="line">      list:</span><br><span class="line">        - name: my another name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果 `dev` 配置文件未激活，则 `AcmeProperties.list` 只包含一条 `MyPojo` 条目，如之前所述。但是，如果激活了 `dev` 配置文件，列表集合仍然只包含一个条目（`name` 属性值为 `my another name`，`description` 为 `null`）。此配置不会向列表集合中添加第二个 `MyPojo` 实例，也不会合并条目。</span><br><span class="line"></span><br><span class="line">在多个配置文件中指定一个 `List` 时，最高优先级（并且只有一个）的列表集合将被使用。可做如下配置：</span><br><span class="line"></span><br><span class="line">    acme:</span><br><span class="line">      list:</span><br><span class="line">        - name: my name</span><br><span class="line">          description: my description</span><br><span class="line">        - name: another name</span><br><span class="line">          description: another description</span><br><span class="line">    ---</span><br><span class="line">    spring:</span><br><span class="line">      profiles: dev</span><br><span class="line">    acme:</span><br><span class="line">      list:</span><br><span class="line">        - name: my another name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在前面示例中，如果 `dev` 配置文件处于活动状态，则 `AcmeProperties.list` 包含一个 `MyPojo` 条目（`name` 为 `my another name`，`description` 为 `null`）。对于 YAML 而言，逗号分隔的列表和YAML 列表同样会完全覆盖列表集合的内容。</span><br><span class="line"></span><br><span class="line">对于 `Map` 属性，您可以绑定来自多个源中提取的属性值。但是，对于多个源中的相同属性，则使用高优先级最高的属性。以下示例从 `AcmeProperties` 暴露了一个 `Map&lt;String, MyPojo&gt;`：</span><br><span class="line"></span><br><span class="line">    @ConfigurationProperties(&quot;acme&quot;)</span><br><span class="line">    public class AcmeProperties &#123;</span><br><span class="line">    </span><br><span class="line">        private final Map&lt;String, MyPojo&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">        public Map&lt;String, MyPojo&gt; getMap() &#123;</span><br><span class="line">            return this.map;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">可以考虑以下配置：</span><br><span class="line"></span><br><span class="line">    acme:</span><br><span class="line">      map:</span><br><span class="line">        key1:</span><br><span class="line">          name: my name 1</span><br><span class="line">          description: my description 1</span><br><span class="line">    ---</span><br><span class="line">    spring:</span><br><span class="line">      profiles: dev</span><br><span class="line">    acme:</span><br><span class="line">      map:</span><br><span class="line">        key1:</span><br><span class="line">          name: dev name 1</span><br><span class="line">        key2:</span><br><span class="line">          name: dev name 2</span><br><span class="line">          description: dev description 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果 `dev` 配置文件未激活，则 `AcmeProperties.map` 只包含一个带 `key1` key 的条目（`name` 为 `my name 1`，`description` 为 `my description 1`）。但是，如果激活了 dev 配置文件，则 `map` 将包含两个条目， key 分别为 `key1`（`name` 为 `dev name 1` 和 `description` 为 `my description 1`）和 `key2`（`name` 为 `dev name 2` 和 `description` 为 `dev description 2`）。</span><br><span class="line"></span><br><span class="line">**注意**</span><br><span class="line"></span><br><span class="line">&gt; 前面的合并规则适用于所有不同属性源的属性，而不仅仅是 YAML 文件。</span><br><span class="line"></span><br><span class="line">#### 24.8.4、属性转换</span><br><span class="line"></span><br><span class="line">当外部应用程序属性（application properties） 绑定到 `@ConfigurationProperties` bean 时，Spring Boot 会尝试将其属性强制转换为正确的类型。如果需要自定义类型转换，可以提供 `ConversionService` bean（名为 `conversionService` 的 bean）或自定义属性编辑器（通过 `CustomEditorConfigurer` bean）或自定义转换器（带有注解为 `@ConfigurationPropertiesBinding` 的 bean 定义）。</span><br><span class="line"></span><br><span class="line">**注意**</span><br><span class="line"></span><br><span class="line">由于该 bean 在应用程序生命周期早期就被请求 ，因此请限制 `ConversionService` 使用的依赖。您在创建时可能无法完全初始化所需的依赖。如果配置 key 为非强制需要，您可能希望重命名自定义的 `ConversionService`，并仅依赖于使用 `@ConfigurationPropertiesBinding` 限定的自定义转换器。</span><br><span class="line"></span><br><span class="line">##### 转换 duration</span><br><span class="line"></span><br><span class="line">Spring Boot 支持持续时间（duration）表达。如果您暴露一个 `java.time.Duration` 属性，则可以在应用程序属性中使用以下格式：</span><br><span class="line"></span><br><span class="line">*   常规 `long` 表示（除非指定 `@DurationUnit`，否则使用毫秒作为默认单位）</span><br><span class="line">*   [`java.util.Duration`](https://docs.oracle.com/javase/8/docs/api//java/time/Duration.html#parse-java.lang.CharSequence-) 使用的标准 ISO-8601 格式</span><br><span class="line">*   一种更易读的格式，值和单位在一起（例如 `10s` 表示 10 秒）</span><br><span class="line"></span><br><span class="line">思考以下示例：</span><br><span class="line"></span><br><span class="line">    @ConfigurationProperties(&quot;app.system&quot;)</span><br><span class="line">    public class AppSystemProperties &#123;</span><br><span class="line">    </span><br><span class="line">        @DurationUnit(ChronoUnit.SECONDS)</span><br><span class="line">        private Duration sessionTimeout = Duration.ofSeconds(30);</span><br><span class="line">    </span><br><span class="line">        private Duration readTimeout = Duration.ofMillis(1000);</span><br><span class="line">    </span><br><span class="line">        public Duration getSessionTimeout() &#123;</span><br><span class="line">            return this.sessionTimeout;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        public void setSessionTimeout(Duration sessionTimeout) &#123;</span><br><span class="line">            this.sessionTimeout = sessionTimeout;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        public Duration getReadTimeout() &#123;</span><br><span class="line">            return this.readTimeout;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        public void setReadTimeout(Duration readTimeout) &#123;</span><br><span class="line">            this.readTimeout = readTimeout;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">指定一个会话超时时间为 30 秒，使用 `30`、`PT30S` 和 `30s` 等形式都是可以的。读取超时时间设置为 500ms，可以采用以下任何一种形式：`500`、`PT0.5S` 和 `500ms`。</span><br><span class="line"></span><br><span class="line">您也可以使用任何支持的单位来标识：</span><br><span class="line"></span><br><span class="line">*   `ns` 为纳秒</span><br><span class="line">*   `us` 为微秒</span><br><span class="line">*   `ms` 为毫秒</span><br><span class="line">*   `s` 为秒</span><br><span class="line">*   `m` 为分钟</span><br><span class="line">*   `h` 为小时</span><br><span class="line">*   `d` 为天</span><br><span class="line"></span><br><span class="line">默认单位是毫秒，可以使用 `@DurationUnit` 配合上面的单位示例重写。</span><br><span class="line"></span><br><span class="line">**提示**</span><br><span class="line"></span><br><span class="line">&gt; 要从先前仅使用 `Long` 来表示持续时间的版本进行升级，如果切换到 `Duration` 时不是毫秒，请定义单位（使用 `@DurationUnit`）。这样做可以提供透明的升级路径，同时支持更丰富的格式。</span><br><span class="line"></span><br><span class="line">##### 转换 Data Size</span><br><span class="line"></span><br><span class="line">Spring Framework 有一个 `DataSize` 值类型，允许以字节表示大小。如果暴露一个 `DataSize` 属性，则可以在应用程序属性中使用以下格式：</span><br><span class="line"></span><br><span class="line">*   常规的 `Long` 表示（使用字节作为默认单位，除非指定了 `@DataSizeUnit`）</span><br><span class="line">*   更具有可读性的格式，值和单位在一起（例如 `10MB` 表示 `10` 兆字节）</span><br><span class="line"></span><br><span class="line">请思考以下示例：</span><br><span class="line"></span><br><span class="line">    @ConfigurationProperties(&quot;app.io&quot;)</span><br><span class="line">    public class AppIoProperties &#123;</span><br><span class="line">    </span><br><span class="line">        @DataSizeUnit(DataUnit.MEGABYTES)</span><br><span class="line">        private DataSize bufferSize = DataSize.ofMegabytes(2);</span><br><span class="line">    </span><br><span class="line">        private DataSize sizeThreshold = DataSize.ofBytes(512);</span><br><span class="line">    </span><br><span class="line">        public DataSize getBufferSize() &#123;</span><br><span class="line">            return this.bufferSize;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        public void setBufferSize(DataSize bufferSize) &#123;</span><br><span class="line">            this.bufferSize = bufferSize;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        public DataSize getSizeThreshold() &#123;</span><br><span class="line">            return this.sizeThreshold;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        public void setSizeThreshold(DataSize sizeThreshold) &#123;</span><br><span class="line">            this.sizeThreshold = sizeThreshold;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">要指定 10 兆字节的缓冲大小，使用 `10` 和 `10MB` 是等效的。256 字节的大小可以指定为 `256` 或 `256B`。</span><br><span class="line"></span><br><span class="line">您也可以使用任何支持的单位：</span><br><span class="line"></span><br><span class="line">*   `B` 表示字节</span><br><span class="line">*   `KB` 为千字节</span><br><span class="line">*   `MB` 为兆字节</span><br><span class="line">*   `GB` 为千兆字节</span><br><span class="line">*   `TB` 为兆兆字节</span><br><span class="line"></span><br><span class="line">默认单位是字节，可以使用 `@DataSizeUnit` 配合上面的示例单位重写。</span><br><span class="line"></span><br><span class="line">**提示**</span><br><span class="line"></span><br><span class="line">&gt; 要从先前仅使用 `Long` 来表示大小的版本进行升级，请确保在切换到 `DataSize` 不是字节的情况下定义单位（使用 `@DataSizeUnit`）。这样做可以提供透明的升级路径，同时支持更丰富的格式。</span><br><span class="line"></span><br><span class="line">#### 24.8.5、@ConfigurationProperties 验证</span><br><span class="line"></span><br><span class="line">只要使用了 Spring 的 `@Validated` 注解，Spring Boot 就会尝试验证 `@ConfigurationProperties` 类。您可以直接在配置类上使用 JSR-303 `javax.validation` 约束注解。为此，请确保 JSR-303 实现在 classpath 上，然后将约束注解添加到字段上，如下所示：</span><br><span class="line"></span><br><span class="line">    @ConfigurationProperties(prefix=&quot;acme&quot;)</span><br><span class="line">    @Validated</span><br><span class="line">    public class AcmeProperties &#123;</span><br><span class="line">    </span><br><span class="line">        @NotNull</span><br><span class="line">        private InetAddress remoteAddress;</span><br><span class="line">    </span><br><span class="line">        // ... getters and setters</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**提示**</span><br><span class="line"></span><br><span class="line">&gt; 您还可以通过使用 `@Validated` 注解创建配置属性的 `@Bean` 方法来触发验证。</span><br><span class="line"></span><br><span class="line">虽然绑定时也会验证嵌套属性，但最好的做法还是将关联字段注解上 `@Valid`。这可确保即使未找到嵌套属性也会触发验证。以下示例基于前面的 `AcmeProperties` 示例：</span><br><span class="line"></span><br><span class="line">    @ConfigurationProperties(prefix=&quot;acme&quot;)</span><br><span class="line">    @Validated</span><br><span class="line">    public class AcmeProperties &#123;</span><br><span class="line">    </span><br><span class="line">        @NotNull</span><br><span class="line">        private InetAddress remoteAddress;</span><br><span class="line">    </span><br><span class="line">        @Valid</span><br><span class="line">        private final Security security = new Security();</span><br><span class="line">    </span><br><span class="line">        // ... getters and setters</span><br><span class="line">    </span><br><span class="line">        public static class Security &#123;</span><br><span class="line">    </span><br><span class="line">            @NotEmpty</span><br><span class="line">            public String username;</span><br><span class="line">    </span><br><span class="line">            // ... getters and setters</span><br><span class="line">    </span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">您还可以通过创建一个名为 `configurationPropertiesValidator` 的 bean 定义来添加自定义 Spring `Validator`。应该将 `@Bean` 方法声明为 `static`。配置属性验证器在应用程序生命周期的早期创建，将 `@Bean` 方法声明为 `static` 可以无需实例化 `@Configuration` 类来创建 bean。这样做可以避免早期实例化可能导致的意外问题。这里有一个[属性验证示例](https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-samples/spring-boot-sample-property-validation)，讲解了如何设置。</span><br><span class="line"></span><br><span class="line">**提示**</span><br><span class="line"></span><br><span class="line">&gt; `spring-boot-actuator` 模块包括一个暴露所有 `@ConfigurationProperties` bean 的端点。可将 Web 浏览器指向 `/actuator/configprops` 或使用等效的 JMX 端点。有关详细信息，请参阅[生产就绪功能](https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#production-ready-endpoints)部分。</span><br><span class="line"></span><br><span class="line">#### 24.8.6、@ConfigurationProperties 与 @Value 对比</span><br><span class="line"></span><br><span class="line">`@Value` 注解是核心容器功能，它不提供与类型安全配置属性相同的功能。下表总结了 `@ConfigurationProperties` 和 `@Value` 支持的功能：</span><br><span class="line"></span><br><span class="line">功能</span><br><span class="line"></span><br><span class="line">`@ConfigurationProperties`</span><br><span class="line"></span><br><span class="line">`@Value`</span><br><span class="line"></span><br><span class="line">[宽松绑定](https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-external-config-relaxed-binding)</span><br><span class="line"></span><br><span class="line">是</span><br><span class="line"></span><br><span class="line">否</span><br><span class="line"></span><br><span class="line">[元数据支持](https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#configuration-metadata)</span><br><span class="line"></span><br><span class="line">是</span><br><span class="line"></span><br><span class="line">否</span><br><span class="line"></span><br><span class="line">`SpEL` 表达式</span><br><span class="line"></span><br><span class="line">否</span><br><span class="line"></span><br><span class="line">是</span><br><span class="line"></span><br><span class="line">如果您要为自己的组件定义一组配置 key，我们建议您将它们分组到使用 `@ConfigurationProperties` 注解的 POJO 中。您应该知道，由于 `@Value` 不支持宽松绑定，因此如果您需要通过环境变量来提供值，它并不是一个好的选择。</span><br><span class="line"></span><br><span class="line">最后，虽然您可以在 `@Value` 中编写 `SpEL` 表达式，但来自应用程序属性文件的此类表达式并不会被处理。</span><br><span class="line"></span><br><span class="line">25、Profile</span><br><span class="line">----------</span><br><span class="line"></span><br><span class="line">Spring Profile 提供了一种应用程序配置部分隔离并使其仅在特定环境中可用的方法。可以使用 `@Profile` 来注解任何 `@Component` 或 `@Configuration` 以指定何时加载它，如下所示：</span><br><span class="line"></span><br><span class="line">    @Configuration</span><br><span class="line">    @Profile(&quot;production&quot;)</span><br><span class="line">    public class ProductionConfiguration &#123;</span><br><span class="line">    </span><br><span class="line">        // ...</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">您可以使用 `spring.profiles.active` `Environment` 属性指定哪些配置文件处于激活状态。您可以使用本章前面介绍的任何方法指定属性。例如，您可以将其包含在 `application.properties` 中，如下所示：</span><br><span class="line"></span><br><span class="line">    spring.profiles.active=dev,hsqldb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">您还可以在命令行上使用以下开关指定它：`--spring.profiles.active=dev,hsqldb`。</span><br><span class="line"></span><br><span class="line">### 25.1、添加激活 Profile</span><br><span class="line"></span><br><span class="line">`spring.profiles.active` 属性遵循与其他属性相同的排序规则：应用优先级最高的 `PropertySource`。这意味着您可以在 `application.properties` 中指定激活配置文件，然后使用命令行开关**替换**它们。</span><br><span class="line"></span><br><span class="line">有时，将特定 profile 的属性**添加**到激活配置文件而不是替换它们，这种方式也是很有用的。`spring.profiles.include` 属性可无条件地添加激活配置文件。`SpringApplication` 入口还有一个 Java API，用于设置其他 profile（即，在 `spring.profiles.active` 属性激活的 profile 之上）。请参阅SpringApplication 中的 `setAdditionalProfiles()` 方法。</span><br><span class="line"></span><br><span class="line">例如，当使用开关 `--spring.profiles.active=prod` 运行有以下属性的应用程序时，`proddb` 和 `prodmq` 配置文件也会被激活：</span><br><span class="line"></span><br><span class="line">    ---</span><br><span class="line">    my.property: fromyamlfile</span><br><span class="line">    ---</span><br><span class="line">    spring.profiles: prod</span><br><span class="line">    spring.profiles.include:</span><br><span class="line">      - proddb</span><br><span class="line">      - prodmq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**注意**</span><br><span class="line"></span><br><span class="line">&gt; 请记住，可以在 YAML 文档中定义 `spring.profiles` 属性，以确定此特定文档何时包含在配置中。有关更多详细信息，请参见第 77.7 章节：[根据环境更改配置](https://docshome.gitbooks.io/springboot/content/pages/howto.md#howto-change-configuration-depending-on-the-environment)。</span><br><span class="line"></span><br><span class="line">### 25.2、以编程方式设置 Profile</span><br><span class="line"></span><br><span class="line">您可以在应用程序运行之前以编程方式通过调用 `SpringApplication.setAdditionalProfiles(...)` 设置激活 profile。也可以使用 Spring 的 `ConfigurableEnvironment` 接口激活 profile。</span><br><span class="line"></span><br><span class="line">### 25.3、特定 Profile 的配置文件</span><br><span class="line"></span><br><span class="line">特定 profile 的 `application.properties`（或 `application.yml`）和通过 `@ConfigurationProperties` 引用的文件被当做文件并加载。有关详细信息，请参见[第 24.4 章节：特定 Profile 的属性文件](https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-external-config-profile-specific-properties)。</span><br><span class="line"></span><br><span class="line">26、日志记录</span><br><span class="line">-------</span><br><span class="line"></span><br><span class="line">Spring Boot 使用 [Commons Logging](https://commons.apache.org/logging) 记录所有内部日志，但开放日志的底层实现。其为 [Java Util Logging](https://docs.oracle.com/javase/8/docs/api//java/util/logging/package-summary.html) 、[Log4J2](https://logging.apache.org/log4j/2.x/) 和 [Logback](http://logback.qos.ch/) 提供了默认配置。在每种情况下，日志记录器都预先配置为使用控制台输出，并且还提供可选的文件输出。</span><br><span class="line"></span><br><span class="line">默认情况下，如果您使用了 **Starter**，则使用 Logback 进行日志记录。还包括合适的 Logback 路由，以确保在使用 Java Util Logging、Commons Logging、Log4J 或 SLF4J 的依赖库都能正常工作。</span><br><span class="line"></span><br><span class="line">**提示**</span><br><span class="line"></span><br><span class="line">&gt; Java 有很多日志框架可供使用。如果以上列表让您感到困惑，请不要担心。通常，您不需要更改日志依赖，并且 Spring Boot 提供的默认配置可以保证日志正常工作。</span><br><span class="line"></span><br><span class="line">### 26.1、日志格式</span><br><span class="line"></span><br><span class="line">Spring Boot 默认日志输出类似于以下示例：</span><br><span class="line"></span><br><span class="line">    2014-03-05 10:57:51.112  INFO 45469 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/7.0.52</span><br><span class="line">    2014-03-05 10:57:51.253  INFO 45469 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext</span><br><span class="line">    2014-03-05 10:57:51.253  INFO 45469 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1358 ms</span><br><span class="line">    2014-03-05 10:57:51.698  INFO 45469 --- [ost-startStop-1] o.s.b.c.e.ServletRegistrationBean        : Mapping servlet: &apos;dispatcherServlet&apos; to [/]</span><br><span class="line">    2014-03-05 10:57:51.702  INFO 45469 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: &apos;hiddenHttpMethodFilter&apos; to: [/*]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出以下项：</span><br><span class="line"></span><br><span class="line">*   日期和时间：毫秒精度，易于排序。</span><br><span class="line">*   日志级别：`ERROR`、`WARN`、`INFO`、`DEBUG` 或 `TRACE`。</span><br><span class="line">*   进程 ID。</span><br><span class="line">*   一个 `---` 分隔符，用于区分实际日志内容的开始。</span><br><span class="line">*   线程名称：在方括号中（可能会截断控制台输出）。</span><br><span class="line">*   日志记录器名称：这通常是源类名称（通常为缩写）。</span><br><span class="line">*   日志内容。</span><br><span class="line"></span><br><span class="line">**注意**</span><br><span class="line"></span><br><span class="line">&gt; Logback 没有 `FATAL` 级别。该级别映射到 `ERROR`。</span><br><span class="line"></span><br><span class="line">### 26.2、控制台输出</span><br><span class="line"></span><br><span class="line">默认日志配置会在写入时将消息回显到控制台。默认情况下，会记录 `ERROR`、`WARN` 和 `INFO` 级别的日志。您还可以通过使用 `--debug` 标志启动应用程序来启用**调试**模式。</span><br><span class="line"></span><br><span class="line">    $ java -jar myapp.jar --debug</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**注意**</span><br><span class="line"></span><br><span class="line">&gt; 您还可以在 `application.properties` 中指定 `debug=true`。</span><br><span class="line"></span><br><span class="line">启用调试模式后，核心日志记录器（内嵌容器、Hibernate 和 Spring Boot）将被配置为输出更多日志信息。启用调试模式不会将应用程序配置为使用 `DEBUG` 级别记录所有日志内容。</span><br><span class="line"></span><br><span class="line">或者，您可以通过使用 `--trace` 标志（或在 `application.properties` 中的设置 `trace=true`）启动应用程序来启用**跟踪**模式。这样做可以为选择的核心日志记录器（内嵌容器、Hibernate 模式生成和整个 Spring 组合）启用日志追踪。</span><br><span class="line"></span><br><span class="line">### 26.2.1、着色输出</span><br><span class="line"></span><br><span class="line">如果您的终端支持 ANSI，则可以使用颜色输出来提高可读性。您可以将 `spring.output.ansi.enabled` 设置为[受支持的值](https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/api/org/springframework/boot/ansi/AnsiOutput.Enabled.html)以覆盖自动检测。</span><br><span class="line"></span><br><span class="line">可使用 `％clr` 转换字配置颜色编码。最简单形式是，转换器根据日志级别对输出进行着色，如下所示：</span><br><span class="line"></span><br><span class="line">    %clr(%5p)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">下表描述日志级别与颜色的映射关系：</span><br><span class="line"></span><br><span class="line">级别</span><br><span class="line"></span><br><span class="line">颜色</span><br><span class="line"></span><br><span class="line">`FATAL`</span><br><span class="line"></span><br><span class="line">红（Red）</span><br><span class="line"></span><br><span class="line">`ERROR`</span><br><span class="line"></span><br><span class="line">红（Red）</span><br><span class="line"></span><br><span class="line">`WARN`</span><br><span class="line"></span><br><span class="line">黄（Yellow）</span><br><span class="line"></span><br><span class="line">`INFO`</span><br><span class="line"></span><br><span class="line">绿（Green）</span><br><span class="line"></span><br><span class="line">`DEBUG`</span><br><span class="line"></span><br><span class="line">绿（Green）</span><br><span class="line"></span><br><span class="line">`TRACE`</span><br><span class="line"></span><br><span class="line">绿（Green）</span><br><span class="line"></span><br><span class="line">或者，您可以通过将其作为转换选项指定应使用的颜色或样式。例如，要将文本变为黄色，请使用以下设置：</span><br><span class="line"></span><br><span class="line">    %clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;yellow&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">支持以下颜色和样式：</span><br><span class="line"></span><br><span class="line">*   `blue`</span><br><span class="line">*   `cyan`</span><br><span class="line">*   `faint`</span><br><span class="line">*   `green`</span><br><span class="line">*   `magenta`</span><br><span class="line">*   `red`</span><br><span class="line">*   `yellow`</span><br><span class="line"></span><br><span class="line">### 26.3、文件输出</span><br><span class="line"></span><br><span class="line">默认情况下，Spring Boot 仅记录到控制台，不会写入日志文件。想除了控制台输出之外还要写入日志文件，则需要设置 `logging.file` 或 `logging.path` 属性（例如，在 `application.properties` 中）。</span><br><span class="line"></span><br><span class="line">下表展示了如何与 `logging.*` 属性一起使用：</span><br><span class="line"></span><br><span class="line">**表 26.1、Logging 属性**</span><br><span class="line"></span><br><span class="line">`logging.file`</span><br><span class="line"></span><br><span class="line">`logging.path`</span><br><span class="line"></span><br><span class="line">示例</span><br><span class="line"></span><br><span class="line">描述</span><br><span class="line"></span><br><span class="line">（无）</span><br><span class="line"></span><br><span class="line">（无）</span><br><span class="line"></span><br><span class="line">仅在控制台输出</span><br><span class="line"></span><br><span class="line">指定文件</span><br><span class="line"></span><br><span class="line">(无)</span><br><span class="line"></span><br><span class="line">`my.log`</span><br><span class="line"></span><br><span class="line">写入指定的日志文件。名称可以是绝对位置或相对于当前目录。</span><br><span class="line"></span><br><span class="line">（无）</span><br><span class="line"></span><br><span class="line">指定目录</span><br><span class="line"></span><br><span class="line">`/var/log`</span><br><span class="line"></span><br><span class="line">将 `spring.log` 写入指定的目录。名称可以是绝对位置或相对于当前目录。</span><br><span class="line"></span><br><span class="line">日志文件在达到 10MB 时会轮转，并且与控制台输出一样，默认情况下会记录 `ERROR`、`WARN` 和 `INFO` 级别的内容。可以使用 `logging.file.max-size` 属性更改大小限制。除非已设置 `logging.file.max-history` 属性，否则以前轮转的文件将无限期归档。</span><br><span class="line"></span><br><span class="line">**注意**</span><br><span class="line"></span><br><span class="line">&gt; 日志记录系统在应用程序生命周期的早期开始初始化。因此，通过 `@PropertySource` 注解加载的属性文件中是找不到日志属性的。</span><br><span class="line"></span><br><span class="line">**提示**</span><br><span class="line"></span><br><span class="line">&gt; 日志属性独立于实际的日志底层。因此，spring Boot 不管理特定的配置 key（例如 Logback 的 `logback.configurationFile`）。</span><br><span class="line"></span><br><span class="line">### 26.4、日志等级</span><br><span class="line"></span><br><span class="line">所有受支持的日志记录系统都可以使用 `logging.level.&lt;logger-name&gt;=&lt;level&gt;` 来设置 Spring `Environment` 中的记录器等级（例如，在 `application.properties` 中）。其中 `level` 是 TRACE、DEBUG、INFO、WARN、ERROR、FATAL 和 OFF 其中之一。可以使用 `logging.level.root` 配置 `root` 记录器。</span><br><span class="line"></span><br><span class="line">以下示例展示了 `application.properties` 中默认的日志记录设置：</span><br><span class="line"></span><br><span class="line">    logging.level.root=WARN</span><br><span class="line">    logging.level.org.springframework.web=DEBUG</span><br><span class="line">    logging.level.org.hibernate=ERROR</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 26.5、日志组</span><br><span class="line"></span><br><span class="line">将相关记录器组合在一起以便可以同时配置，这通常很有用。例如，您可以更改**所有** Tomcat 相关记录器的日志记录级别，但您无法轻松记住顶层的包名。</span><br><span class="line"></span><br><span class="line">为了解决这个问题，Spring Boot 允许您在 Spring `Environment` 中定义日志记录组。例如，以下通过将 **tomcat** 组添加到 `application.properties` 来定义 **tomcat** 组：</span><br><span class="line"></span><br><span class="line">    logging.group.tomcat=org.apache.catalina, org.apache.coyote, org.apache.tomcat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">定义后，您可以使用一行配置来更改组中所有记录器的级别：</span><br><span class="line"></span><br><span class="line">    logging.level.tomcat=TRACE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Spring Boot 包含以下预定义的日志记录组，可以直接使用：</span><br><span class="line"></span><br><span class="line">名称</span><br><span class="line"></span><br><span class="line">日志记录器</span><br><span class="line"></span><br><span class="line">web</span><br><span class="line"></span><br><span class="line">`org.springframework.core.codec`、`org.springframework.http`、`org.springframework.web`</span><br><span class="line"></span><br><span class="line">sql</span><br><span class="line"></span><br><span class="line">`org.springframework.jdbc.core`、`org.hibernate.SQL`</span><br><span class="line"></span><br><span class="line">### 26.6、自定义日志配置</span><br><span class="line"></span><br><span class="line">可以通过在 classpath 中引入适合的库来激活各种日志记录系统，并且可以通过在 classpath 的根目录中或在以下 Spring `Environment` 属性指定的位置提供合适的配置文件来进一步自定义：`logging.config`。</span><br><span class="line"></span><br><span class="line">您可以使用 `org.springframework.boot.logging.LoggingSystem` 系统属性强制 Spring Boot 使用特定的日志记录系统。该值应该是一个实现了 `LoggingSystem` 的类的完全限定类名。您还可以使用 `none` 值完全禁用 Spring Boot 的日志记录配置。</span><br><span class="line"></span><br><span class="line">**注意**</span><br><span class="line"></span><br><span class="line">&gt; 由于日志记录在创建 `ApplicationContext` 之前初始化，因此无法在 Spring `@Configuration` 文件中控制来自 `@PropertySources` 的日志记录。更改日志记录系统或完全禁用它的唯一方法是通过系统属性设置。</span><br><span class="line"></span><br><span class="line">根据您的日志记录系统，将加载以下文件：</span><br><span class="line"></span><br><span class="line">日志记录系统</span><br><span class="line"></span><br><span class="line">文件</span><br><span class="line"></span><br><span class="line">Logback</span><br><span class="line"></span><br><span class="line">`logback-spring.xml`、`logback-spring.groovy`、`logback.xml` 或者 `logback.groovy`</span><br><span class="line"></span><br><span class="line">Log4j2</span><br><span class="line"></span><br><span class="line">`log4j2-spring.xml` 或者 `log4j2.xml`</span><br><span class="line"></span><br><span class="line">JDK（Java Util Logging）</span><br><span class="line"></span><br><span class="line">`logging.properties`</span><br><span class="line"></span><br><span class="line">**注意**</span><br><span class="line"></span><br><span class="line">&gt; 如果可能，我们建议您使用 `-spring` 的形式来配置日志记录（比如 `logback-spring.xml` 而不是 `logback.xml`）。如果使用标准的配置位置，Spring 无法完全控制日志初始化。</span><br><span class="line"></span><br><span class="line">**警告**</span><br><span class="line"></span><br><span class="line">&gt; Java Util Logging 存在已知的类加载问题，这些问题在以**可执行 jar** 运行时会触发。如果可能的话，我们建议您在使用**可执行 jar** 方式运行时避免使用它。</span><br><span class="line"></span><br><span class="line">为了进行自定义，部分其他属性会从 Spring `Environment` 传输到 System 属性，如下表所述：</span><br><span class="line"></span><br><span class="line">Spring Environment</span><br><span class="line"></span><br><span class="line">系统属性</span><br><span class="line"></span><br><span class="line">说明</span><br><span class="line"></span><br><span class="line">`logging.exception-conversion-word`</span><br><span class="line"></span><br><span class="line">`LOG_EXCEPTION_CONVERSION_WORD`</span><br><span class="line"></span><br><span class="line">记录异常时使用的转换字。</span><br><span class="line"></span><br><span class="line">`logging.file`</span><br><span class="line"></span><br><span class="line">`LOG_FILE`</span><br><span class="line"></span><br><span class="line">如果已定义，则在默认日志配置中使用它。</span><br><span class="line"></span><br><span class="line">`logging.file.max-size`</span><br><span class="line"></span><br><span class="line">`LOG_FILE_MAX_SIZE`</span><br><span class="line"></span><br><span class="line">最大日志文件大小（如果启用了 LOG_FILE）。（仅支持默认的 Logback 设置。）</span><br><span class="line"></span><br><span class="line">`logging.file.max-history`</span><br><span class="line"></span><br><span class="line">`LOG_FILE_MAX_HISTORY`</span><br><span class="line"></span><br><span class="line">要保留的归档日志文件最大数量（如果启用了 LOG_FILE）。（仅支持默认的 Logback 设置。）</span><br><span class="line"></span><br><span class="line">`logging.path`</span><br><span class="line"></span><br><span class="line">`LOG_PATH`</span><br><span class="line"></span><br><span class="line">如果已定义，则在默认日志配置中使用它。</span><br><span class="line"></span><br><span class="line">`logging.pattern.console`</span><br><span class="line"></span><br><span class="line">`CONSOLE_LOG_PATTERN`</span><br><span class="line"></span><br><span class="line">要在控制台上使用的日志模式（stdout）。（仅支持默认的 Logback 设置。）</span><br><span class="line"></span><br><span class="line">`logging.pattern.dateformat`</span><br><span class="line"></span><br><span class="line">`LOG_DATEFORMAT_PATTERN`</span><br><span class="line"></span><br><span class="line">日志日期格式的 Appender 模式。（仅支持默认的 Logback 设置。）</span><br><span class="line"></span><br><span class="line">`logging.pattern.file`</span><br><span class="line"></span><br><span class="line">`FILE_LOG_PATTERN`</span><br><span class="line"></span><br><span class="line">要在文件中使用的日志模式（如果启用了 `LOG_FILE`）。（仅支持默认的 Logback 设置。）</span><br><span class="line"></span><br><span class="line">`logging.pattern.level`</span><br><span class="line"></span><br><span class="line">`LOG_LEVEL_PATTERN`</span><br><span class="line"></span><br><span class="line">渲染日志级别时使用的格式（默认值为 `％5p`）。（仅支持默认的 Logback 设置。）</span><br><span class="line"></span><br><span class="line">`PID`</span><br><span class="line"></span><br><span class="line">`PID`</span><br><span class="line"></span><br><span class="line">当前进程 ID（如果可能，则在未定义为 OS 环境变量时发现）。</span><br><span class="line"></span><br><span class="line">所有受支持的日志记录系统在解析其配置文件时都可以参考系统属性。有关示例，请参阅 `spring-boot.jar` 中的默认配置：</span><br><span class="line"></span><br><span class="line">*   [Logback](https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot/src/main/resources/org/springframework/boot/logging/logback/defaults.xml)</span><br><span class="line">*   [Log4j 2](https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot/src/main/resources/org/springframework/boot/logging/log4j2/log4j2.xml)</span><br><span class="line">*   [Java Util logging](https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot/src/main/resources/org/springframework/boot/logging/java/logging-file.properties)</span><br><span class="line"></span><br><span class="line">**提示**</span><br><span class="line"></span><br><span class="line">&gt; 如果要在日志记录属性中使用占位符，则应使用 [Spring Boot 的语法](https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-external-config-placeholders-in-properties)，而不是使用底层框架的语法。值得注意的是，如果使用 Logback，则应使用 `:` 作为属性名称与其默认值之间的分隔符，而不是使用 `:-`。</span><br><span class="line"></span><br><span class="line">**提示**</span><br><span class="line"></span><br><span class="line">&gt; 您可以通过仅覆盖 \`LOG\_LEVEL\_PATTERN\`（或带 Logback 的 \`logging.pattern.level\`）将 MDC 和其他特别的内容添加到日志行。例如，如果使用 \`logging.pattern.level=user:%X&#123;user&#125; %5p\`，则默认日志格式包含 \*\*user\*\* MDC 项（如果存在），如下所示: ``` 2015-09-30 12:30:04.031 user:someone INFO 22174 --- \[ nio-8080-exec-0\] demo.Controller Handling authenticated request</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="26-7、Logback-扩展"><a href="#26-7、Logback-扩展" class="headerlink" title="26.7、Logback 扩展"></a>26.7、Logback 扩展</h3><p>Spring Boot 包含许多 Logback 扩展，可用于进行高级配置。您可以在 <code>logback-spring.xml</code> 配置文件中使用这些扩展。</p><p><strong>注意</strong></p><blockquote><p>由于标准的 logback.xml 配置文件加载过早，因此无法在其中使用扩展。您需要使用 <code>logback-spring.xml</code> 或定义 <code>logging.config</code> 属性。</p></blockquote><p><strong>警告</strong></p><blockquote><p>扩展不能与 Logback 的<a href="http://logback.qos.ch/manual/configuration.html#autoScan" target="_blank" rel="noopener">配置扫描</a>一起使用。如果尝试这样做，更改配置文件会导致发生类似以下错误日志：</p></blockquote><pre><code>ERROR in ch.qos.logback.core.joran.spi.Interpreter@4:71 - no applicable action for [springProperty], current ElementPath is [[configuration][springProperty]]ERROR in ch.qos.logback.core.joran.spi.Interpreter@4:71 - no applicable action for [springProfile], current ElementPath is [[configuration][springProfile]]</code></pre><h3 id="26-7-1、特定-Profile-配置"><a href="#26-7-1、特定-Profile-配置" class="headerlink" title="26.7.1、特定 Profile 配置"></a>26.7.1、特定 Profile 配置</h3><p><code>&lt;springProfile&gt;</code> 标签允许您根据激活的 Spring profile 选择性地包含或排除配置部分。在 <code>&lt;configuration&gt;</code> 元素中的任何位置都支持配置 profile。使用 <code>name</code> 属性指定哪个 proifle 接受配置。<code>&lt;springProfile&gt;</code> 标记可以包含简单的 proifle 名称（例如 <code>staging</code>）或 profile 表达式。profile 表达式允许表达更复杂的 profile 逻辑，例如 <code>production &amp; (eu-central | eu-west)</code>。有关详细信息，请查阅<a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/core.html#beans-definition-profiles-java" target="_blank" rel="noopener">参考指南</a>。以下清单展示了三个示例 profile：</p><pre><code>&lt;springProfile name=&quot;staging&quot;&gt;    &lt;!-- configuration to be enabled when the &quot;staging&quot; profile is active --&gt;&lt;/springProfile&gt;&lt;springProfile name=&quot;dev | staging&quot;&gt;    &lt;!-- configuration to be enabled when the &quot;dev&quot; or &quot;staging&quot; profiles are active --&gt;&lt;/springProfile&gt;&lt;springProfile name=&quot;!production&quot;&gt;    &lt;!-- configuration to be enabled when the &quot;production&quot; profile is not active --&gt;&lt;/springProfile&gt;</code></pre><h3 id="26-7-2、环境属性"><a href="#26-7-2、环境属性" class="headerlink" title="26.7.2、环境属性"></a>26.7.2、环境属性</h3><p>使用 <code>&lt;springProperty&gt;</code> 标记可以让您暴露 Spring 环境（<code>Environment</code>）中的属性，以便在 Logback 中使用。如果在 Logback 配置中访问来自 <code>application.properties</code> 文件的值，这样做很有用。标签的工作方式与 Logback 的标准 <code>&lt;property&gt;</code> 标签类似。但是，您可以指定属性（来自 <code>Environment</code>）的 <code>source</code>，而不是指定直接的 <code>value</code>。如果需要将属性存储在 <code>local</code> 范围以外的其他位置，则可以使用 <code>scope</code> 属性。如果需要回退值（如果未在 <code>Environment</code> 中设置该属性），则可以使用 <code>defaultValue</code> 属性。以下示例展示了如何暴露属性以便在 Logback 中使用：</p><pre><code>&lt;springProperty scope=&quot;context&quot; name=&quot;fluentHost&quot; source=&quot;myapp.fluentd.host&quot;        defaultValue=&quot;localhost&quot;/&gt;&lt;appender name=&quot;FLUENT&quot; class=&quot;ch.qos.logback.more.appenders.DataFluentAppender&quot;&gt;    &lt;remoteHost&gt;${fluentHost}&lt;/remoteHost&gt;    ...&lt;/appender&gt;</code></pre><p><strong>注意</strong></p><blockquote><p>必须以 kebab 风格（短横线小写风格）指定 <code>source</code>（例如 <code>my.property-name</code>）。但可以使用宽松规则将属性添加到 <code>Environment</code> 中。</p></blockquote><h2 id="27、JSON"><a href="#27、JSON" class="headerlink" title="27、JSON"></a>27、JSON</h2><p>Spring Boot 为三个 JSON 映射库提供了内置集成：</p><ul><li>GSON</li><li>Jackson</li><li>JSON-B</li></ul><p>Jackson 是首选和默认的库。</p><h2 id="27-1、Jackson"><a href="#27-1、Jackson" class="headerlink" title="27.1、Jackson"></a>27.1、Jackson</h2><p>Spring Boot 提供了 Jackson 的自动配置，Jackson 是 <code>spring-boot-starter-json</code> 的一部分。当 Jackson 在 classpath 上时，会自动配置 <code>ObjectMapper</code> bean。Spring Boot 提供了几个配置属性来<a href="https://docshome.gitbooks.io/springboot/content/pages/howto.md#howto-customize-the-jackson-objectmapper" target="_blank" rel="noopener">自定义 <code>ObjectMapper</code> 的配置</a>。</p><h2 id="27-2、Gson"><a href="#27-2、Gson" class="headerlink" title="27.2、Gson"></a>27.2、Gson</h2><p>Spring Boot 提供 Gson 的自动配置。当 Gson 在 classpath 上时，会自动配置 <code>Gson</code> bean。Spring Boot 提供了几个 <code>spring.gson.*</code> 配置属性来自定义配置。为了获得更多控制，可以使用一个或多个 <code>GsonBuilderCustomizer</code> bean。</p><h2 id="27-3、JSON-B"><a href="#27-3、JSON-B" class="headerlink" title="27.3、JSON-B"></a>27.3、JSON-B</h2><p>Spring Boot 提供了 JSON-B 的自动配置。当 JSON-B API 和实现在 classpath 上时，将自动配置 <code>Jsonb</code> bean。首选的 JSON-B 实现是 Apache Johnzon，它提供了依赖管理。</p><h2 id="28、开发-Web-应用程序"><a href="#28、开发-Web-应用程序" class="headerlink" title="28、开发 Web 应用程序"></a>28、开发 Web 应用程序</h2><p>Spring Boot 非常适合用于开发 web 应用程序。您可以使用嵌入式 Tomcat、Jetty 或者 Undertow 来创建一个独立（self-contained）的 HTTP 服务器。大多数 web 应用程序使用 <code>spring-boot-starter-web</code> 模块来快速搭建和运行，您也可以选择使用 <code>spring-boot-starter-webflux</code> 模块来构建响应式（reactive） web 应用程序。</p><p>如果您尚未开发过 Spring Boot web 应用程序，则可以按照<a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#getting-started-first-application" target="_blank" rel="noopener">入门</a>章节中的“Hello World!”示例进行操作。</p><h3 id="28-1、Spring-Web-MVC-框架"><a href="#28-1、Spring-Web-MVC-框架" class="headerlink" title="28.1、Spring Web MVC 框架"></a>28.1、Spring Web MVC 框架</h3><p><a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">Spring Web MVC 框架</a>（通常简称“Spring MVC”）是一个富<strong>模型-视图-控制器</strong>的 web 框架。Spring MVC 允许您创建 <code>@Controller</code> 或者 <code>@RestController</code> bean 来处理传入的 HTTP 请求。控制器中的方法通过 <code>@RequestMapping</code> 注解映射到 HTTP。</p><p>以下是一个使用了 <code>@RestController</code> 来响应 JSON 数据的典型示例：</p><pre><code>@RestController@RequestMapping(value=&quot;/users&quot;)public class MyRestController {    @RequestMapping(value=&quot;/{user}&quot;, method=RequestMethod.GET)    public User getUser(@PathVariable Long user) {        // ...    }    @RequestMapping(value=&quot;/{user}/customers&quot;, method=RequestMethod.GET)    List&lt;Customer&gt; getUserCustomers(@PathVariable Long user) {        // ...    }    @RequestMapping(value=&quot;/{user}&quot;, method=RequestMethod.DELETE)    public User deleteUser(@PathVariable Long user) {        // ...    }}</code></pre><p>Spring MVC 是 Spring Framework 核心的一部分，详细介绍可参考其<a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">参考文档</a>。<a href="https://spring.io/guides" target="_blank" rel="noopener">spring.io/guides</a> 还提供了几个 Spring MVC 相关的指南。</p><h4 id="28-1-1、Spring-MVC-自动配置"><a href="#28-1-1、Spring-MVC-自动配置" class="headerlink" title="28.1.1、Spring MVC 自动配置"></a>28.1.1、Spring MVC 自动配置</h4><p>Spring Boot 提供了适用于大多数 Spring MVC 应用的自动配置（auto-configuration）。</p><p>自动配置在 Spring 默认功能上添加了以下功能：</p><ul><li>引入 <code>ContentNegotiatingViewResolver</code> 和 <code>BeanNameViewResolver</code> bean。</li><li>支持服务静态资源，包括对 WebJar 的支持（<a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-spring-mvc-static-content" target="_blank" rel="noopener">见下文</a>）。</li><li>自动注册 <code>Converter</code>、<code>GenericConverter</code> 和 <code>Formatter</code> bean。</li><li>支持 <code>HttpMessageConverter</code>（见<a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-spring-mvc-message-converters" target="_blank" rel="noopener">下文</a>）。</li><li>自动注册 <code>MessageCodesResolver</code>（见<a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-spring-message-codes" target="_blank" rel="noopener">下文</a>）。</li><li>支持静态 index.html。</li><li>支持自定义 Favicon （见<a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-spring-mvc-favicon" target="_blank" rel="noopener">下文</a>）。</li><li>自动使用 <code>ConfigurableWebBindingInitializer</code> bean（见<a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-spring-mvc-web-binding-initializer" target="_blank" rel="noopener">下文</a>）。</li></ul><p>如果您想保留 Spring Boot MVC 的功能，并且需要添加其他 <a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">MVC 配置</a>（interceptor、formatter 和视图控制器等），可以添加自己的 <code>WebMvcConfigurerAdapter</code> 类型的 <code>@Configuration</code> 类，但<strong>不能</strong>带 <code>@EnableWebMvc</code> 注解。如果您想自定义 <code>RequestMappingHandlerMapping</code>、<code>RequestMappingHandlerAdapter</code> 或者 <code>ExceptionHandlerExceptionResolver</code> 实例，可以声明一个 <code>WebMvcRegistrationsAdapter</code> 实例来提供这些组件。</p><p>如果您想完全掌控 Spring MVC，可以添加自定义注解了 <code>@EnableWebMvc</code> 的 @Configuration 配置类。</p><h4 id="28-1-2、HttpMessageConverters"><a href="#28-1-2、HttpMessageConverters" class="headerlink" title="28.1.2、HttpMessageConverters"></a>28.1.2、HttpMessageConverters</h4><p>Spring MVC 使用 <code>HttpMessageConverter</code> 接口来转换 HTTP 的请求和响应。开箱即用功能包含了合适的默认值，比如对象可以自动转换为 JSON（使用 Jackson 库）或者 XML（优先使用 Jackson XML 扩展，其次为 JAXB）。字符串默认使用 <code>UTF-8</code> 编码。</p><p>如果您需要添加或者自定义转换器（converter），可以使用 Spring Boot 的 <code>HttpMessageConverters</code> 类：</p><pre><code>import org.springframework.boot.autoconfigure.web.HttpMessageConverters;import org.springframework.context.annotation.*;import org.springframework.http.converter.*;@Configurationpublic class MyConfiguration {    @Bean    public HttpMessageConverters customConverters() {        HttpMessageConverter&lt;?&gt; additional = ...        HttpMessageConverter&lt;?&gt; another = ...        return new HttpMessageConverters(additional, another);    }}</code></pre><p>上下文中的所有 <code>HttpMessageConverter</code> bean 都将被添加到转换器列表中。您也可以用这种方式来覆盖默认转换器。</p><h4 id="28-1-3、自定义-JSON-Serializer-和-Deserializer"><a href="#28-1-3、自定义-JSON-Serializer-和-Deserializer" class="headerlink" title="28.1.3、自定义 JSON Serializer 和 Deserializer"></a>28.1.3、自定义 JSON Serializer 和 Deserializer</h4><p>如果您使用 Jackson 序列化和反序列化 JSON 数据，可能需要自己编写 <code>JsonSerializer</code> 和 <code>JsonDeserializer</code> 类。自定义序列化器（serializer）的做法通常是通过<a href="https://github.com/FasterXML/jackson-docs/wiki/JacksonHowToCustomSerializers" target="_blank" rel="noopener">一个模块来注册 Jackson</a>， 然而 Spring Boot 提供了一个备选的 <code>@JsonComponent</code> 注解，它可以更加容易地直接注册 Spring Bean。</p><p>您可以直接在 <code>JsonSerializer</code> 或者 <code>JsonDeserializer</code> 实现上使用 <code>@JsonComponent</code> 注解。您也可以在将序列化器/反序列化器（deserializer）作为内部类的类上使用。例如：</p><pre><code>import java.io.*;import com.fasterxml.jackson.core.*;import com.fasterxml.jackson.databind.*;import org.springframework.boot.jackson.*;@JsonComponentpublic class Example {    public static class Serializer extends JsonSerializer&lt;SomeObject&gt; {        // ...    }    public static class Deserializer extends JsonDeserializer&lt;SomeObject&gt; {        // ...    }}</code></pre><p><code>ApplicationContext</code> 中所有的 <code>@JsonComponent</code> bean 将被自动注册到 Jackson 中，由于 <code>@JsonComponent</code> 使用 <code>@Component</code> 注解标记，因此组件扫描（component-scanning）规则将对其生效。</p><p>Spring Boot 还提供了 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jackson/JsonObjectSerializer.java" target="_blank" rel="noopener">JsonObjectSerializer</a> 和 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jackson/JsonObjectDeserializer.java" target="_blank" rel="noopener">JsonObjectDeserializer</a> 基类，它们在序列化对象时为标准的 Jackson 版本提供了有用的替代方案。有关详细信息，请参阅 Javadoc 中的 <a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/api/org/springframework/boot/jackson/JsonObjectSerializer.html" target="_blank" rel="noopener">JsonObjectSerializer</a> 和 <a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/api/org/springframework/boot/jackson/JsonObjectDeserializer.html" target="_blank" rel="noopener">JsonObjectDeserializer</a>。</p><h4 id="28-1-4、MessageCodesResolver"><a href="#28-1-4、MessageCodesResolver" class="headerlink" title="28.1.4、MessageCodesResolver"></a>28.1.4、MessageCodesResolver</h4><p>Spring MVC 有一个从绑定错误中生成错误码的策略，用于渲染错误信息：<code>MessageCodesResolver</code>。如果您设置了 <code>spring.mvc.message-codes-resolver.format</code> 属性值为 <code>PREFIX_ERROR_CODE</code> 或 <code>POSTFIX_ERROR_CODE</code>，Spring Boot 将为你创建该策略（请参阅 <a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/javadoc-api/org/springframework/validation/DefaultMessageCodesResolver.Format.html" target="_blank" rel="noopener">DefaultMessageCodesResolver.Format</a> 中的枚举）。</p><h4 id="28-1-5、静态内容"><a href="#28-1-5、静态内容" class="headerlink" title="28.1.5、静态内容"></a>28.1.5、静态内容</h4><p>默认情况下，Spring Boot 将在 classpath 或者 <code>ServletContext</code> 根目录下从名为 <code>/static</code> （<code>/public</code>、<code>/resources</code> 或 <code>/META-INF/resources</code>）目录中服务静态内容。它使用了 Spring MVC 的 <code>ResourceHttpRequestHandler</code>，因此您可以通过添加自己的 <code>WebMvcConfigurerAdapter</code> 并重写 <code>addResourceHandlers</code> 方法来修改此行为。</p><p>在一个独立的（stand-alone） web 应用程序中，来自容器的默认 servlet 也是被启用的，并充当一个回退支援，Spring 决定不处理 <code>ServletContext</code> 根目录下的静态资源，容器的默认 servlet 也将会处理。大多情况下，这是不会发生的（除非您修改了默认的 MVC 配置），因为 Spring 始终能通过 <code>DispatcherServlet</code> 来处理请求。</p><p>默认情况下，资源被映射到 <code>/**</code>，但可以通过 <code>spring.mvc.static-path-pattern</code> 属性调整。比如，将所有资源重定位到 <code>/resources/**</code>：</p><pre><code>spring.mvc.static-path-pattern=/resources/**</code></pre><p>您还可以使用 <code>spring.resources.static-locations</code> 属性来自定义静态资源的位置（使用一个目录位置列表替换默认值）。根 Servlet context path <code>/</code> 自动作为一个 location 添加进来。</p><p>除了上述提到的<strong>标准</strong>静态资源位置之外，还有一种特殊情况是用于 <a href="https://www.webjars.org/" target="_blank" rel="noopener">Webjar 内容</a>。如果以 Webjar 格式打包，则所有符合 <code>/webjars/**</code> 的资源都将从 jar 文件中服务。</p><p><strong>提示</strong></p><blockquote><p>如果您的应用程序要包成 jar，请不要使用 <code>src/main/webapp</code> 目录。虽然此目录是一个通用标准，但它<strong>只</strong>适用于 war 打包，如果生成的是一个 jar，它将被绝大多数的构建工具所忽略。</p></blockquote><p>Spring Boot 还支持 Spring MVC 提供的高级资源处理功能，允许使用例如静态资源缓存清除（cache busting）或者 Webjar 版本无关 URL。</p><p>要使用 Webjar 版本无关 URL 功能，只需要添加 <code>webjars-locator-core</code> 依赖。然后声明您的 Webjar，以 jQuery 为例，添加的 <code>&quot;/webjars/jquery/dist/jquery.min.js&quot;</code> 将变成 <code>&quot;/webjars/jquery/x.y.z/dist/jquery.min.js&quot;</code>，其中 <code>x.y.z</code> 是 Webjar 的版本。</p><p><strong>注意</strong></p><blockquote><p>如果您使用 JBoss，则需要声明 <code>webjars-locator-jboss-vfs</code> 依赖，而不是 <code>webjars-locator-core</code>，否则所有 Webjar 将被解析成 <code>404</code>。</p></blockquote><p>要使用缓存清除功能，以下配置为所有静态资源配置了一个缓存清除方案，实际上是在 URL 上添加了一个内容哈希，例如 <code>&lt;link href=&quot;/css/spring-2a2d595e6ed9a0b24f027f2b63b134d6.css&quot;/&gt;</code>：</p><pre><code>pring.resources.chain.strategy.content.enabled=truespring.resources.chain.strategy.content.paths=/**</code></pre><p><strong>注意</strong></p><blockquote><p>模板中的资源链接在运行时被重写，这得益于 <code>ResourceUrlEncodingFilter</code> 为 Thymeleaf 和 FreeMarker 自动配置。在使用 JSP 时，您应该手动声明此过滤器。其他模板引擎现在还不会自动支持，但可以与自定义模板宏（macro）/helper 和 <a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/javadoc-api/org/springframework/web/servlet/resource/ResourceUrlProvider.html" target="_blank" rel="noopener"><code>ResourceUrlProvider</code></a> 结合使用。</p></blockquote><p>当使用例如 Javascript 模块加载器动态加载资源时，重命名文件是不可选的。这也是为什么支持其他策略并且可以组合使用的原因。<strong>fixed</strong>策略将在 URL 中添加一个静态版本字符串，而不是更改文件名：</p><pre><code>spring.resources.chain.strategy.content.enabled=truespring.resources.chain.strategy.content.paths=/**spring.resources.chain.strategy.fixed.enabled=truespring.resources.chain.strategy.fixed.paths=/js/lib/spring.resources.chain.strategy.fixed.version=v12</code></pre><p>使用此配置，JavaScript 模块定位在 <code>&quot;/js/lib/&quot;</code> 下使用固定版本策略（<code>&quot;/v12/js/lib/mymodule.js&quot;</code>），而其他资源仍使用内容策略（<code>&lt;link href=&quot;/css/spring-2a2d595e6ed9a0b24f027f2b63b134d6.css&quot;/&gt;</code>）。</p><p>有关更多支持选项，请参阅 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java" target="_blank" rel="noopener">ResourceProperties</a>。</p><p><strong>提示</strong></p><blockquote><p>该功能已经在一个专门的<a href="https://spring.io/blog/2014/07/24/spring-framework-4-1-handling-static-web-resources" target="_blank" rel="noopener">博客文章</a>和 Spring 框架的<a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/web.html#mvc-config-static-resources" target="_blank" rel="noopener">参考文档</a>中进行了详细描述。</p></blockquote><h4 id="28-1-6、欢迎页面"><a href="#28-1-6、欢迎页面" class="headerlink" title="28.1.6、欢迎页面"></a>28.1.6、欢迎页面</h4><p>Spring Boot 支持静态和模板化的欢迎页面。它首先在配置的静态内容位置中查找 <code>index.html</code> 文件。如果找不到，则查找 <code>index</code> 模板。如果找到其中任何一个，它将自动用作应用程序的欢迎页面。</p><h4 id="28-1-7、自定义-Favicon"><a href="#28-1-7、自定义-Favicon" class="headerlink" title="28.1.7、自定义 Favicon"></a>28.1.7、自定义 Favicon</h4><p>Spring Boot 在配置的静态内容位置和根 classpath 中查找 <code>favicon.ico</code>（按顺序）。如果该文件存在，则将被自动用作应用程序的 favicon。</p><h4 id="28-1-8、路径匹配与内容协商"><a href="#28-1-8、路径匹配与内容协商" class="headerlink" title="28.1.8、路径匹配与内容协商"></a>28.1.8、路径匹配与内容协商</h4><p>Spring MVC 可以通过查看请求路径并将其与应用程序中定义的映射相匹配，将传入的 HTTP 请求映射到处理程序（例如 Controller 方法上的 <code>@GetMapping</code> 注解）。</p><p>Spring Boot 默认选择禁用后缀模式匹配，这意味着像 <code>&quot;GET /projects/spring-boot.json&quot;</code> 这样的请求将不会与 <code>@GetMapping(&quot;/projects/spring-boot&quot;)</code> 映射匹配。这被视为是 <a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/web.html#mvc-ann-requestmapping-suffix-pattern-match" target="_blank" rel="noopener">Spring MVC 应用程序的最佳实践</a>。此功能在过去对于 HTTP 客户端没有发送正确的 <strong>Accept</strong> 请求头的情况还是很有用的，我们需要确保将正确的内容类型发送给客户端。如今，内容协商（Content Negotiation）更加可靠。</p><p>还有其他方法可以处理 HTTP 客户端发送不一致 <strong>Accept</strong> 请求头问题。我们可以使用查询参数来确保像 <code>&quot;GET /projects/spring-boot?format=json&quot;</code> 这样的请求映射到 <code>@GetMapping(&quot;/projects/spring-boot&quot;)</code>，而不是使用后缀匹配：</p><pre><code>spring.mvc.contentnegotiation.favor-parameter=true# We can change the parameter name, which is &quot;format&quot; by default:# spring.mvc.contentnegotiation.parameter-name=myparam# We can also register additional file extensions/media types with:spring.mvc.contentnegotiation.media-types.markdown=text/markdown</code></pre><p>如果您了解相关注意事项并仍希望应用程序使用后缀模式匹配，则需要以下配置：</p><pre><code>spring.mvc.contentnegotiation.favor-path-extension=truespring.mvc.pathmatch.use-suffix-pattern=true</code></pre><p>或者，不打开所有后缀模式，仅打开支持已注册的后缀模式更加安全：</p><pre><code>spring.mvc.contentnegotiation.favor-path-extension=truespring.mvc.pathmatch.use-registered-suffix-pattern=true# You can also register additional file extensions/media types with:# spring.mvc.contentnegotiation.media-types.adoc=text/asciidoc</code></pre><h4 id="28-1-9、ConfigurableWebBindingInitializer"><a href="#28-1-9、ConfigurableWebBindingInitializer" class="headerlink" title="28.1.9、ConfigurableWebBindingInitializer"></a>28.1.9、ConfigurableWebBindingInitializer</h4><p>Spring MVC 使用一个 <code>WebBindingInitializer</code> 为特定的请求初始化 <code>WebDataBinder</code>。如果您创建了自己的 <code>ConfigurableWebBindingInitializer</code> <code>@Bean</code>，Spring Boot 将自动配置 Spring MVC 使用它。</p><h4 id="28-1-10、模板引擎"><a href="#28-1-10、模板引擎" class="headerlink" title="28.1.10、模板引擎"></a>28.1.10、模板引擎</h4><p>除了 REST web 服务之外，您还可以使用 Spring MVC 来服务动态 HTML 内容。Spring MVC 支持多种模板技术，包括 Thymeleaf、FreeMarker 和 JSP。当然，许多其他模板引擎也有自己的 Spring MVC 集成。</p><p>Spring Boot 包含了以下的模板引擎的自动配置支持：</p><ul><li><a href="https://freemarker.apache.org/docs/" target="_blank" rel="noopener">FreeMarker</a></li><li><a href="http://docs.groovy-lang.org/docs/next/html/documentation/template-engines.html#_the_markuptemplateengine" target="_blank" rel="noopener">Groovy</a></li><li><a href="http://www.thymeleaf.org/" target="_blank" rel="noopener">Thymeleaf</a></li><li><a href="https://mustache.github.io/" target="_blank" rel="noopener">Mustache</a></li></ul><p><strong>提示</strong></p><blockquote><p>如果可以，请尽量避免使用 JSP，当使用了内嵌 servlet 容器，会有几个<a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-jsp-limitations" target="_blank" rel="noopener">已知限制</a>。</p></blockquote><p>当您使用这些模板引擎的其中一个并附带了默认配置时，您的模板将从 <code>src/main/resources/templates</code> 自动获取。</p><p><strong>提示</strong></p><blockquote><p>IntelliJ IDEA 根据您运行应用程序的方式来对 classpath 进行不同的排序。在 IDE 中通过 main 方法来运行应用程序将导致与使用 Maven 或 Gradle 或来以 jar 包方式引用程序的排序有所不同，可能会导致 Spring Boot 找不到 classpath 中的模板。如果您碰到到此问题，可以重新排序 IDE 的 classpath 来放置模块的 classes 和 resources 到首位。或者，您可以配置模板前缀来搜索 classpath 中的每一个 <code>templates</code> 目录，比如：<code>classpath*:/templates/</code>。</p></blockquote><h4 id="28-1-11、错误处理"><a href="#28-1-11、错误处理" class="headerlink" title="28.1.11、错误处理"></a>28.1.11、错误处理</h4><p>默认情况下，Spring Boot 提供了一个使用了比较合理的方式来处理所有错误的 <code>/error</code> 映射，其在 servlet 容器中注册了一个<strong>全局</strong>错误页面。对于机器客户端而言，它将产生一个包含错误、HTTP 状态和异常消息的 JSON 响应。对于浏览器客户端而言，将以 HTML 格式呈现相同数据的 <strong>whitelabel</strong> 错误视图（可添加一个解析到 <code>error</code> 的 <code>View</code> 进行自定义）。要完全替换默认行为，您可以实现 <code>ErrorController</code> 并注册该类型的 bean，或者简单地添加一个类型为 <code>ErrorAttributes</code> 的 bean 来替换内容，但继续使用现用机制。</p><p><strong>提示</strong></p><blockquote><p><code>BasicErrorController</code> 可以作为自定义 <code>ErrorController</code> 的基类，这非常有用，尤其是在您想添加一个新的内容类型（默认专门处理 <code>text/html</code>，并为其他内容提供后备）处理器的情况下。要做到这点，您只需要继承 <code>BasicErrorController</code> 并添加一个带有 <code>produces</code> 属性的 <code>@RequestMapping</code> 注解的公共方法，之后创建一个新类型的 bean。</p></blockquote><p>您还可以定义一个带有 <code>@ControllerAdvice</code> 注解的类来自定义为特定控制器或异常类型返回的 JSON 文档：</p><pre><code>@ControllerAdvice(basePackageClasses = AcmeController.class)public class AcmeControllerAdvice extends ResponseEntityExceptionHandler {    @ExceptionHandler(YourException.class)    @ResponseBody    ResponseEntity&lt;?&gt; handleControllerException(HttpServletRequest request, Throwable ex) {        HttpStatus status = getStatus(request);        return new ResponseEntity&lt;&gt;(new CustomErrorType(status.value(), ex.getMessage()), status);    }    private HttpStatus getStatus(HttpServletRequest request) {        Integer statusCode = (Integer) request.getAttribute(&quot;javax.servlet.error.status_code&quot;);        if (statusCode == null) {            return HttpStatus.INTERNAL_SERVER_ERROR;        }        return HttpStatus.valueOf(statusCode);    }}</code></pre><p>以上示例中，如果同包下定义的控制器 <code>AcmeController</code> 抛出了 <code>YourException</code>，则将使用 <code>CustomerErrorType</code> 类型的 POJO 来代替 <code>ErrorAttributes</code> 做 JSON 呈现。</p><h5 id="28-1-11-1、自定义错误页面"><a href="#28-1-11-1、自定义错误页面" class="headerlink" title="28.1.11.1、自定义错误页面"></a>28.1.11.1、自定义错误页面</h5><p>如果您想在自定义的 HTML 错误页面上显示给定的状态码，请将文件添加到 <code>/error</code> 文件夹中。错误页面可以是静态 HTML（添加在任意静态资源文件夹下) 或者使用模板构建。文件的名称应该是确切的状态码或者一个序列掩码。</p><p>例如，要将 <code>404</code> 映射到一个静态 HTML 文件，文件夹结构可以如下：</p><pre><code>src/ +- main/     +- java/     |   + &lt;source code&gt;     +- resources/         +- public/             +- error/             |   +- 404.html             +- &lt;other public assets&gt;</code></pre><p>使用 FreeMarker 模板来映射所有 <code>5xx</code> 错误，文件夹的结构如下：</p><pre><code>src/ +- main/     +- java/     |   + &lt;source code&gt;     +- resources/         +- templates/             +- error/             |   +- 5xx.ftl             +- &lt;other templates&gt;</code></pre><p>对于更复杂的映射，您还通过可以添加实现了 <code>ErrorViewResolver</code> 接口的 bean 来处理：</p><pre><code>public class MyErrorViewResolver implements ErrorViewResolver {    @Override    public ModelAndView resolveErrorView(HttpServletRequest request,            HttpStatus status, Map&lt;String, Object&gt; model) {        // Use the request or status to optionally return a ModelAndView        return ...    }}</code></pre><p>您还可以使用常规的 Spring MVC 功能，比如 <a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/web.html#mvc-exceptionhandlers" target="_blank" rel="noopener"><code>@ExceptionHandler</code> 方法</a>和 <a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/web.html#mvc-ann-controller-advice" target="_blank" rel="noopener">@ControllerAdvice</a><code>。之后，ErrorController</code> 将能接收任何未处理的异常。</p><h5 id="28-1-11-2、映射到-Spring-MVC-之外的错误页面"><a href="#28-1-11-2、映射到-Spring-MVC-之外的错误页面" class="headerlink" title="28.1.11.2、映射到 Spring MVC 之外的错误页面"></a>28.1.11.2、映射到 Spring MVC 之外的错误页面</h5><p>对于不使用 Spring MVC 的应用程序，您可以使用 <code>ErrorPageRegistrar</code> 接口来直接注册 <code>ErrorPages</code>。抽象部分直接与底层的内嵌 servlet 容器一起工作，即使您没有 Spring MVC <code>DispatcherServlet</code> 也能使用。</p><pre><code>@Beanpublic ErrorPageRegistrar errorPageRegistrar(){    return new MyErrorPageRegistrar();}// ...private static class MyErrorPageRegistrar implements ErrorPageRegistrar {    @Override    public void registerErrorPages(ErrorPageRegistry registry) {        registry.addErrorPages(new ErrorPage(HttpStatus.BAD_REQUEST, &quot;/400&quot;));    }}</code></pre><p><strong>注意</strong></p><blockquote><p>如果您注册了一个 <code>ErrorPage</code>，它的路径最终由一个 <code>Filter</code>（例如，像一些非 Spring web 框架一样，比如 Jersey 和 Wicket）处理，则必须将 Filter 显式注册为一个 <code>ERROR</code> dispatcher，如下示例：</p></blockquote><pre><code>@Beanpublic FilterRegistrationBean myFilter() {    FilterRegistrationBean registration = new FilterRegistrationBean();    registration.setFilter(new MyFilter());    ...    registration.setDispatcherTypes(EnumSet.allOf(DispatcherType.class));    return registration;}</code></pre><p>请注意，默认的 <code>FilterRegistrationBean</code> 不包含 <code>ERROR</code> 调度器（dispatcher）类型。</p><p><strong>当心</strong>：当部署到 servlet 容器时，Spring Boot 使用其错误页面过滤器会将有错误状态的请求转发到相应的错误页面。如果尚未提交响应，则只能将请求转发到正确的错误页面。默认情况下，WebSphere Application Server 8.0 及更高版本在成功完成 servlet 的 service 方法后提交响应。您应该将 <code>com.ibm.ws.webcontainer.invokeFlushAfterService</code> 设置为 <code>false</code> 来禁用此行为。</p><h4 id="28-1-12、Spring-HATEOAS"><a href="#28-1-12、Spring-HATEOAS" class="headerlink" title="28.1.12、Spring HATEOAS"></a>28.1.12、Spring HATEOAS</h4><p>如果您想开发一个使用超媒体（hypermedia）的 RESTful API，Spring Boot 提供的 Spring HATEOAS 自动配置在大多数应用程序都工作得非常好。自动配置取代了 <code>@EnableHypermediaSupport</code> 的需要，并注册了一些 bean，以便能轻松构建基于超媒体的应用程序，其包括了一个 <code>LinkDiscoverers</code> （用于客户端支持）和一个用于配置将响应正确呈现的 <code>ObjectMapper</code>。<code>ObjectMapper</code> 可以通过设置 <code>spring.jackson.*</code> 属性或者 <code>Jackson2ObjectMapperBuilder</code> bean （如果存在）自定义。</p><p>您可以使用 <code>@EnableHypermediaSupport</code> 来控制 Spring HATEOAS 的配置。请注意，这使得上述的自定义 ObjectMapper 被禁用。</p><h4 id="28-1-13、CORS-支持"><a href="#28-1-13、CORS-支持" class="headerlink" title="28.1.13、CORS 支持"></a>28.1.13、CORS 支持</h4><p><a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing" target="_blank" rel="noopener">跨域资源共享</a>（Cross-origin resource sharing，CORS）是<a href="https://caniuse.com/#feat=cors" target="_blank" rel="noopener">大多数浏览器</a>实现的一个 <a href="https://www.w3.org/TR/cors/" target="_blank" rel="noopener">W3C 规范</a>，其可允许您以灵活的方式指定何种跨域请求可以被授权，而不是使用一些不太安全和不太强大的方式（比如 IFRAME 或者 JSONP）。</p><p>Spring MVC 从 4.2 版本起开始<a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/web.html#cors" target="_blank" rel="noopener">支持 CORS</a>。您可在 Spring Boot 应用程序中使用 <a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/web.html#controller-method-cors-configuration" target="_blank" rel="noopener"><code>@CrossOrigin</code></a> 注解配置<a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/web.html#controller-method-cors-configuration" target="_blank" rel="noopener">控制器方法启用 CORS</a>。还可以通过注册一个 WebMvcConfigurer bean 并自定义 <code>addCorsMappings(CorsRegistry)</code> 方法来定义<a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/web.html#global-cors-configuration" target="_blank" rel="noopener">全局 CORS 配置</a>：</p><pre><code>@Configurationpublic class MyConfiguration {    @Bean    public WebMvcConfigurer corsConfigurer() {        return new WebMvcConfigurer() {            @Override            public void addCorsMappings(CorsRegistry registry) {                registry.addMapping(&quot;/api/**&quot;);            }        };    }}</code></pre><h3 id="28-2、Spring-WebFlux-框架"><a href="#28-2、Spring-WebFlux-框架" class="headerlink" title="28.2、Spring WebFlux 框架"></a>28.2、Spring WebFlux 框架</h3><p>Spring WebFlux 是 Spring Framework 5.0 中新引入的一个响应式 Web 框架。与 Spring MVC 不同，它不需要 Servlet API，完全异步且无阻塞，并通过 <a href="http://www.reactive-streams.org/" target="_blank" rel="noopener">Reactor 项目</a>实现<a href="http://www.reactive-streams.org/" target="_blank" rel="noopener">响应式流（Reactive Streams）</a>规范。</p><p>Spring WebFlux 有两个版本：函数式和基于注解。基于注解的方式非常接近 Spring MVC 模型，如下所示：</p><pre><code>@RestController@RequestMapping(&quot;/users&quot;)public class MyRestController {    @GetMapping(&quot;/{user}&quot;)    public Mono&lt;User&gt; getUser(@PathVariable Long user) {        // ...    }    @GetMapping(&quot;/{user}/customers&quot;)    public Flux&lt;Customer&gt; getUserCustomers(@PathVariable Long user) {        // ...    }    @DeleteMapping(&quot;/{user}&quot;)    public Mono&lt;User&gt; deleteUser(@PathVariable Long user) {        // ...    }}</code></pre><p><strong>WebFlux.fn</strong> 为函数式调用方式，它将路由配置与请求处理分开，如下所示：</p><pre><code>@Configurationpublic class RoutingConfiguration {    @Bean    public RouterFunction&lt;ServerResponse&gt; monoRouterFunction(UserHandler userHandler) {        return route(GET(&quot;/{user}&quot;).and(accept(APPLICATION_JSON)), userHandler::getUser)                .andRoute(GET(&quot;/{user}/customers&quot;).and(accept(APPLICATION_JSON)), userHandler::getUserCustomers)                .andRoute(DELETE(&quot;/{user}&quot;).and(accept(APPLICATION_JSON)), userHandler::deleteUser);    }}@Componentpublic class UserHandler {    public Mono&lt;ServerResponse&gt; getUser(ServerRequest request) {        // ...    }    public Mono&lt;ServerResponse&gt; getUserCustomers(ServerRequest request) {        // ...    }    public Mono&lt;ServerResponse&gt; deleteUser(ServerRequest request) {        // ...    }}</code></pre><p>WebFlux 是 Spring Framework 的一部分，详细信息可查看其<a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/web-reactive.html#webflux-fn" target="_blank" rel="noopener">参考文档</a>。</p><p><strong>提示</strong></p><blockquote><p>您可以根据需要定义尽可能多的 <code>RouterFunction</code> bean 来模块化路由定义。如果需要设定优先级，Bean 可以指定顺序。</p></blockquote><p>首先，将 <code>spring-boot-starter-webflux</code> 模块添加到您的应用程序中。</p><p><strong>注意</strong></p><blockquote><p>在应用程序中同时添加 <code>spring-boot-starter-web</code> 和 <code>spring-boot-starter-webflux</code> 模块会导致Spring Boot 自动配置 Spring MVC，而不是使用 WebFlux。这样做的原因是因为许多 Spring 开发人员将 <code>spring-boot-starter-webflux</code> 添加到他们的 Spring MVC 应用程序中只是为了使用响应式 <code>WebClient</code>。 您仍然可以通过设置 <code>SpringApplication.setWebApplicationType(WebApplicationType.REACTIVE)</code> 来强制执行您选择的应用程序类型。</p></blockquote><h4 id="28-2-1、Spring-WebFlux-自动配置"><a href="#28-2-1、Spring-WebFlux-自动配置" class="headerlink" title="28.2.1、Spring WebFlux 自动配置"></a>28.2.1、Spring WebFlux 自动配置</h4><p>Spring Boot 为 Spring WebFlux 提供自动配置，适用于大多数应用程序。</p><p>自动配置在 Spring 的默认基础上添加了以下功能：</p><ul><li>为 <code>HttpMessageReader</code> 和 <code>HttpMessageWriter</code> 实例配置编解码器（<a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-webflux-httpcodecs" target="_blank" rel="noopener">稍后将介绍</a>）。</li><li>支持提供静态资源，包括对 WebJars 的支持（<a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-static-content" target="_blank" rel="noopener">后面将介绍</a>）。</li></ul><p>如果你要保留 Spring Boot WebFlux 功能并且想要添加其他 <a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/web.html#web-reactive" target="_blank" rel="noopener">WebFlux 配置</a>，可以添加自己的 <code>@Configuration</code> 类，类型为 <code>WebFluxConfigurer</code>，但不包含 <code>@EnableWebFlux</code>。</p><p>如果您想完全控制 Spring WebFlux，可以将 <code>@EnableWebFlux</code> 注解到自己的 @Configuration。</p><h4 id="28-2-2、使用-HttpMessageReader-和-HttpMessageWriter-作为-HTTP-编解码器"><a href="#28-2-2、使用-HttpMessageReader-和-HttpMessageWriter-作为-HTTP-编解码器" class="headerlink" title="28.2.2、使用 HttpMessageReader 和 HttpMessageWriter 作为 HTTP 编解码器"></a>28.2.2、使用 HttpMessageReader 和 HttpMessageWriter 作为 HTTP 编解码器</h4><p>Spring WebFlux 使用 <code>HttpMessageReader</code> 和 <code>HttpMessageWriter</code> 接口来转换 HTTP 的请求和响应。它们通过检测 classpath 中可用的类库，配置了 <code>CodecConfigurer</code> 生成合适的默认值。</p><p>Spring Boot 通过使用 <code>CodecCustomizer</code> 实例加强定制。例如，<code>spring.jackson.*</code> 配置 key 应用于 Jackson 编解码器。</p><p>如果需要添加或自定义编解码器，您可以创建一个自定义的 <code>CodecCustomizer</code> 组件，如下所示：</p><pre><code>import org.springframework.boot.web.codec.CodecCustomizer;@Configurationpublic class MyConfiguration {    @Bean    public CodecCustomizer myCodecCustomizer() {        return codecConfigurer -&gt; {            // ...        }    }}</code></pre><p>您还可以利用 <a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-json-components" target="_blank" rel="noopener">Boot 的自定义 JSON 序列化器和反序列化器</a>。</p><h4 id="28-2-3、静态内容"><a href="#28-2-3、静态内容" class="headerlink" title="28.2.3、静态内容"></a>28.2.3、静态内容</h4><p>默认情况下，Spring Boot 将在 classpath 或者 <code>ServletContext</code> 根目录下从名为 <code>/static</code> （<code>/public</code>、<code>/resources</code> 或 <code>/META-INF/resources</code>）目录中服务静态内容。它使用了 Spring WebFlux 的 <code>ResourceWebHandler</code>，因此您可以通过添加自己的 <code>WebFluxConfigurer</code> 并重写 <code>addResourceHandlers</code> 方法来修改此行为。</p><p>默认情况下，资源被映射到 <code>/**</code>，但可以通过 <code>spring.webflux.static-path-pattern</code> 属性调整。比如，将所有资源重定位到 <code>/resources/**</code>：</p><pre><code>spring.webflux.static-path-pattern=/resources/**</code></pre><p>您还可以使用 <code>spring.resources.static-locations</code> 属性来自定义静态资源的位置（使用一个目录位置列表替换默认值），如果这样做，默认的欢迎页面检测会切换到您自定义的位置。因此，如果启动时有任何其中一个位置存在 <code>index.html</code>，那么它将是应用程序的主页。</p><p>除了上述提到的<strong>标准</strong>静态资源位置之外，还有一种特殊情况是用于 <a href="https://www.webjars.org/" target="_blank" rel="noopener">Webjar 内容</a>。如果以 Webjar 格式打包，则所有符合 <code>/webjars/**</code> 的资源都将从 jar 文件中服务。</p><p><strong>提示</strong></p><blockquote><p>Spring WebFlux 应用程序并不严格依赖于 Servlet API，因此它们不能作为 war 文件部署，也不能使用 <code>src/main/webapp</code> 目录。</p></blockquote><h4 id="28-2-4、模板引擎"><a href="#28-2-4、模板引擎" class="headerlink" title="28.2.4、模板引擎"></a>28.2.4、模板引擎</h4><p>除了 REST web 服务之外，您还可以使用 Spring WebFlux 来服务动态 HTML 内容。Spring WebFlux 支持多种模板技术，包括 Thymeleaf、FreeMarker 和 Mustache。</p><p>Spring Boot 包含了以下的模板引擎的自动配置支持：</p><ul><li><a href="https://freemarker.apache.org/docs/" target="_blank" rel="noopener">FreeMarker</a></li><li><a href="http://www.thymeleaf.org/" target="_blank" rel="noopener">Thymeleaf</a></li><li><a href="https://mustache.github.io/" target="_blank" rel="noopener">Mustache</a></li></ul><p>当您使用这些模板引擎的其中一个并附带了默认配置时，您的模板将从 <code>src/main/resources/templates</code> 自动获取。</p><h4 id="28-2-5、错误处理"><a href="#28-2-5、错误处理" class="headerlink" title="28.2.5、错误处理"></a>28.2.5、错误处理</h4><p>Spring Boot 提供了一个 <code>WebExceptionHandler</code>，它以合理的方式处理所有错误。它在处理顺序中的位置紧接在 WebFlux 提供的处理程序之前，这些处理器排序是最后的。对于机器客户端，它会生成一个 JSON 响应，其中包含错误详情、HTTP 状态和异常消息。对于浏览器客户端，有一个 <strong>whitelabel</strong> 错误处理程序，它以 HTML 格式呈现同样的数据。您还可以提供自己的 HTML 模板来显示错误（<a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-webflux-error-handling-custom-error-pages" target="_blank" rel="noopener">请参阅下一节</a>）。</p><p>自定义此功能的第一步通常会沿用现有机制，但替换或扩充了错误内容。为此，您可以添加 <code>ErrorAttributes</code> 类型的 bean。</p><p>想要更改错误处理行为，可以实现 <code>ErrorWebExceptionHandler</code> 并注册该类型的 bean。因为 <code>WebExceptionHandler</code> 是一个非常底层的异常处理器，所以 Spring Boot 还提供了一个方便的 <code>AbstractErrorWebExceptionHandler</code> 来让你以 WebFlux 的方式处理错误，如下所示：</p><pre><code>public class CustomErrorWebExceptionHandler extends AbstractErrorWebExceptionHandler {    // Define constructor here    @Override    protected RouterFunction&lt;ServerResponse&gt; getRoutingFunction(ErrorAttributes errorAttributes) {        return RouterFunctions                .route(aPredicate, aHandler)                .andRoute(anotherPredicate, anotherHandler);    }}</code></pre><p>要获得更完整的功能，您还可以直接继承 <code>DefaultErrorWebExceptionHandler</code> 并覆盖相关方法。</p><h5 id="28-2-5-1、自定义错误页面"><a href="#28-2-5-1、自定义错误页面" class="headerlink" title="28.2.5.1、自定义错误页面"></a>28.2.5.1、自定义错误页面</h5><p>如果您想在自定义的 HTML 错误页面上显示给定的状态码，请将文件添加到 <code>/error</code> 文件夹中。错误页面可以是静态 HTML（添加在任意静态资源文件夹下) 或者使用模板构建。文件的名称应该是确切的状态码或者一个序列掩码。</p><p>例如，要将 <code>404</code> 映射到一个静态 HTML 文件，文件夹结构可以如下：</p><pre><code>src/ +- main/     +- java/     |   + &lt;source code&gt;     +- resources/         +- public/             +- error/             |   +- 404.html             +- &lt;other public assets&gt;</code></pre><p>使用 Mustache 模板来映射所有 <code>5xx</code> 错误，文件夹的结构如下：</p><pre><code>src/ +- main/     +- java/     |   + &lt;source code&gt;     +- resources/         +- templates/             +- error/             |   +- 5xx.mustache             +- &lt;other templates&gt;</code></pre><h4 id="28-2-6、Web-过滤器"><a href="#28-2-6、Web-过滤器" class="headerlink" title="28.2.6、Web 过滤器"></a>28.2.6、Web 过滤器</h4><p>Spring WebFlux 提供了一个 <code>WebFilter</code> 接口，可以通过实现该接口来过滤 HTTP 请求/响应消息交换。在应用程序上下文中找到的 WebFilter bean 将自动用于过滤每个消息交换。</p><p>如果过滤器的执行顺序很重要，则可以实现 <code>Ordered</code> 接口或使用 <code>@Order</code> 注解来指定顺序。Spring Boot 自动配置可能为您配置了几个 Web 过滤器。执行此操作时，将使用下表中的顺序：</p><p>Web 过滤器</p><p>顺序</p><p><code>MetricsWebFilter</code></p><p><code>Ordered.HIGHEST_PRECEDENCE + 1</code></p><p><code>WebFilterChainProxy</code>（Spring Security）</p><p><code>-100</code></p><p><code>HttpTraceWebFilter</code></p><p><code>Ordered.LOWEST_PRECEDENCE - 10</code></p><h3 id="28-3、JAX-RS-与-Jersey"><a href="#28-3、JAX-RS-与-Jersey" class="headerlink" title="28.3、JAX-RS 与 Jersey"></a>28.3、JAX-RS 与 Jersey</h3><p>如果您喜欢 JAX-RS 编程模型的 REST 端点，则可以使用一个实现来替代 Spring MVC。<a href="https://jersey.github.io/" target="_blank" rel="noopener">Jersey</a> 和 <a href="https://cxf.apache.org/" target="_blank" rel="noopener">Apache CXF</a> 都能开箱即用。CXF 要求在应用程序上下文中以 <code>@Bean</code> 的方式将它注册为一个 <code>Servlet</code> 或者 <code>Filter</code>。Jersey 有部分原生 Spring 支持，所以我们也在 starter 中提供了与 Spring Boot 整合的自动配置支持。</p><p>要使用 Jersey，只需要将 <code>spring-boot-starter-jersey</code> 作为依赖引入，然后您需要一个 <code>ResourceConfig</code> 类型的 <code>@Bean</code>，您可以在其中注册所有端点：</p><pre><code>@Componentpublic class JerseyConfig extends ResourceConfig {    public JerseyConfig() {        register(Endpoint.class);    }}</code></pre><p><strong>警告</strong></p><blockquote><p>Jersey 对于扫描可执行归档文件的支持是相当有限的。例如，它无法扫描一个<a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#deployment-install" target="_blank" rel="noopener">完整的可执行 jar 文件</a>中的端点，同样，当运行一个可执行的 war 文件时，它也无法扫描包中 <code>WEB-INF/classes</code> 下的端点。为了避免该限制，您不应该使用 <code>packages</code> 方法，应该使用上述的 <code>register</code> 方法来单独注册每一个端点。</p></blockquote><p>您可以注册任意数量实现了 <code>ResourceConfigCustomizer</code> 的 bean，以实现更高级的定制化。</p><p>所有注册的端点都应注解了 <code>@Components</code> 并具有 HTTP 资源注解（ <code>@GET</code> 等），例如：</p><pre><code>@Component@Path(&quot;/hello&quot;)public class Endpoint {    @GET    public String message() {        return &quot;Hello&quot;;    }}</code></pre><p>由于 <code>Endpoint</code> 是一个 Spring <code>@Component</code>，它的生命周期由 Spring 管理，您可以使用 <code>@Autowired</code> 注入依赖并使用 <code>@Value</code> 注入外部配置。默认情况下，Jersey servlet 将被注册并映射到 <code>/*</code>。您可以通过将 <code>@ApplicationPath</code> 添加到 <code>ResourceConfig</code> 来改变此行为。</p><p>默认情况下，Jersey 在 <code>ServletRegistrationBean</code> 类型的 <code>@Bean</code> 中被设置为一个名为 <code>jerseyServletRegistration</code> 的 Servlet。默认情况下，该 servlet 将被延迟初始化，您可以使用 <code>spring.jersey.servlet.load-on-startup</code> 自定义。您可以禁用或通过创建一个自己的同名 bean 来覆盖该 bean。您还可以通过设置 <code>spring.jersey.type=filter</code> 使用过滤器替代 servlet（该情况下， 替代或覆盖 <code>@Bean</code> 的为<code>jerseyFilterRegistration</code>）。该过滤器有一个 <code>@Order</code>，您可以使用 <code>spring.jersey.filter.order</code> 设置。可以使用 <code>spring.jersey.init.*</code> 指定一个 map 类型的 property 以给定 servlet 和过滤器的初始化参数。</p><p>这里有一个 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-samples/spring-boot-sample-jersey" target="_blank" rel="noopener">Jersey 示例</a>，您可以解如何设置。</p><h3 id="28-4、内嵌-Servlet-容器支持"><a href="#28-4、内嵌-Servlet-容器支持" class="headerlink" title="28.4、内嵌 Servlet 容器支持"></a>28.4、内嵌 Servlet 容器支持</h3><p>Spring Boot 包含了对内嵌 <a href="https://tomcat.apache.org/" target="_blank" rel="noopener">Tomcat</a>、<a href="https://www.eclipse.org/jetty/" target="_blank" rel="noopener">Jetty</a> 和 <a href="http://undertow.io/" target="_blank" rel="noopener">Undertow</a> 服务器的支持。大部分开发人员只需简单地使用对应的 Starter 来获取完整的配置实例。默认情况下，内嵌服务器将监听 <code>8080</code> 上的 HTTP 请求。</p><p><strong>警告</strong></p><blockquote><p>如果您选择在 <a href="https://www.centos.org/" target="_blank" rel="noopener">CentOS</a> 使用 Tomcat，请注意，默认情况下，临时目录用于储存编译后的 JSP、上传的文件等。当您的应用程序运行时发生了故障，该目录可能会被 <code>tmpwatch</code> 删除。为了避免出现该情况，您可能需要自定义 <code>tmpwatch</code> 配置，使 <code>tomcat.*</code>目录不被删除，或者配置 <code>server.tomcat.basedir</code> 让 Tomcat 使用其他位置。</p></blockquote><h4 id="28-4-1、Servlet、Filter-与-Listener"><a href="#28-4-1、Servlet、Filter-与-Listener" class="headerlink" title="28.4.1、Servlet、Filter 与 Listener"></a>28.4.1、Servlet、Filter 与 Listener</h4><p>使用内嵌 servlet 容器时，您可以使用 Spring bean 或者扫描方式来注册 Servlet 规范中的 Servlet、Filter 和所有监听器（比如 <code>HttpSessionListener</code>）。</p><h5 id="28-4-1-1、将-Servlet、Filter-和-Listener-注册为-Spring-Bean"><a href="#28-4-1-1、将-Servlet、Filter-和-Listener-注册为-Spring-Bean" class="headerlink" title="28.4.1.1、将 Servlet、Filter 和 Listener 注册为 Spring Bean"></a>28.4.1.1、将 Servlet、Filter 和 Listener 注册为 Spring Bean</h5><p>任何 <code>Servlet</code>、<code>Filter</code> 或 <code>*Listener</code> 的 Spring bean 实例都将被注册到内嵌容器中。如果您想引用 <code>application.properties</code> 中的某个值，这可能会特别方便。</p><p>默认情况下，如果上下文只包含单个 Servlet，它将映射到 <code>/</code>。在多个 Servlet bean 的情况下，bean 的名称将用作路径的前缀。Filter 将映射到 <code>/*</code>。</p><p>如果基于约定配置的映射不够灵活，您可以使用 <code>ServletRegistrationBean</code>、<code>FilterRegistrationBean</code> 和 <code>ServletListenerRegistrationBean</code> 类来完全控制。</p><p>Spring Boot 附带了许多可以定义 Filter bean 的自动配置。以下是部分过滤器及其执行顺序的（顺序值越低，优先级越高）：</p><p>Servlet Filter</p><p>顺序</p><p><code>OrderedCharacterEncodingFilter</code></p><p><code>Ordered.HIGHEST_PRECEDENCE</code></p><p><code>WebMvcMetricsFilter</code></p><p><code>Ordered.HIGHEST_PRECEDENCE + 1</code></p><p><code>ErrorPageFilter</code></p><p><code>Ordered.HIGHEST_PRECEDENCE + 1</code></p><p><code>HttpTraceFilter</code></p><p><code>Ordered.LOWEST_PRECEDENCE - 10</code></p><p>通常 Filter bean 无序放置也是安全的。</p><p>如果需要指定顺序，则应避免在 <code>Ordered.HIGHEST_PRECEDENCE</code> 顺序点配置读取请求体的过滤器，因为它的字符编码可能与应用程序的字符编码配置不一致。如果一个 Servlet 过滤器包装了请求，则应使用小于或等于 <code>OrderedFilter.REQUEST_WRAPPER_FILTER_MAX_ORDER</code>的顺序点对其进行配置。</p><h4 id="28-4-2、Servlet-上下文初始化"><a href="#28-4-2、Servlet-上下文初始化" class="headerlink" title="28.4.2、Servlet 上下文初始化"></a>28.4.2、Servlet 上下文初始化</h4><p>内嵌 servlet 容器不会直接执行 Servlet 3.0+ 的 <code>javax.servlet.ServletContainerInitializer</code> 接口或 Spring 的 <code>org.springframework.web.WebApplicationInitializer</code> 接口。这是一个有意的设计决策，旨在降低在 war 内运行时第三方类库产生的风险，防止破坏 Sring Boot 应用程序。</p><p>如果您需要在 Spring Boot 应用程序中执行 servlet 上下文初始化，则应注册一个实现了 <code>org.springframework.boot.context.embedded.ServletContextInitializer</code> 接口的 bean。<code>onStartup</code> 方法提供了针对 <code>ServletContext</code> 的访问入口，如果需要，它可以容易作为现有 <code>WebApplicationInitializer</code> 的适配器。</p><h5 id="28-4-2-1、扫描-Servlet、Filter-和-Listener"><a href="#28-4-2-1、扫描-Servlet、Filter-和-Listener" class="headerlink" title="28.4.2.1、扫描 Servlet、Filter 和 Listener"></a>28.4.2.1、扫描 Servlet、Filter 和 Listener</h5><p>使用内嵌容器时，可以使用 <code>@ServletComponentScan</code> 启用带 <code>@WebServlet</code>、<code>@WebFilter</code> 和 <code>@WebListener</code> 注解的类自动注册。</p><p><strong>提示</strong></p><p><code>@ServletComponentScan</code> 在独立（standalone）容器中不起作用，因容器将使用内置发现机制来代替。</p><h4 id="28-4-3、ServletWebServerApplicationContext"><a href="#28-4-3、ServletWebServerApplicationContext" class="headerlink" title="28.4.3、ServletWebServerApplicationContext"></a>28.4.3、ServletWebServerApplicationContext</h4><p>Spring Boot 底层使用了一个不同的 <code>ApplicationContext</code> 类型来支持内嵌 servlet。<code>ServletWebServerApplicationContext</code> 是一个特殊 <code>WebApplicationContext</code> 类型，它通过搜索单个 <code>ServletWebServerFactory</code> bean 来引导自身。通常，<code>TomcatServletWebServerFactory</code>、 <code>JettyServletWebServerFactory</code> 或者 <code>UndertowServletWebServerFactory</code> 中的一个将被自动配置。</p><p><strong>注意</strong></p><blockquote><p>通常，你不需要知道这些实现类。大部分应用程序会自动配置，并为您创建合适的 <code>ApplicationContext</code> 和 <code>ServletWebServerFactory</code>。</p></blockquote><h5 id="28-4-4、自定义内嵌-Servlet-容器"><a href="#28-4-4、自定义内嵌-Servlet-容器" class="headerlink" title="28.4.4、自定义内嵌 Servlet 容器"></a>28.4.4、自定义内嵌 Servlet 容器</h5><p>可以使用 Spring <code>Environment</code> 属性来配置通用的 servlet 容器设置。通常，您可以在 <code>application.properties</code> 文件中定义这些属性。</p><p>通用的服务器设置包括：</p><ul><li>网络设置：监听 HTTP 请求的端口（<code>server.port</code>），绑定接口地址到 <code>server.address</code> 等。</li><li>会话设置：是否持久会话（<code>server.session.persistence</code>）、session 超时（<code>server.session.timeout</code>）、会话数据存放位置（<code>server.session.store-dir</code>）和 session-cookie 配置（<code>server.session.cookie.*</code>）。</li><li>错误管理：错误页面位置（<code>server.error.path</code>）等。</li><li><a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#howto-configure-ssl" target="_blank" rel="noopener">SSL</a></li><li><a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#how-to-enable-http-response-compression" target="_blank" rel="noopener">HTTP 压缩</a></li></ul><p>Spring Boot 尽可能暴露通用的设置，但并不总是都可以。针对这些情况，专用的命名空间为特定的服务器提供了自定义功能（请参阅 <code>server.tomcat</code> 和 <code>server.undertow</code>）。例如，您可以使用内嵌 servlet 容器的特定功能来配置<a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#howto-configure-accesslogs" target="_blank" rel="noopener">访问日志</a>。</p><p><strong>提示</strong></p><blockquote><p>有关完整的内容列表，请参阅 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java" target="_blank" rel="noopener">ServerProperties</a> 类。</p></blockquote><h6 id="28-4-4-1、以编程方式自定义"><a href="#28-4-4-1、以编程方式自定义" class="headerlink" title="28.4.4.1、以编程方式自定义"></a>28.4.4.1、以编程方式自定义</h6><p>如果您需要以编程的方式配置内嵌 servlet 容器，可以注册一个是实现了 <code>WebServerFactoryCustomizer</code> 接口的 Spring bean。<code>WebServerFactoryCustomizer</code> 提供了对 <code>ConfigurableServletWebServerFactory</code> 的访问入口，其中包含了许多自定义 setter 方法。以下示例使用了编程方式来设置端口：</p><pre><code>import org.springframework.boot.web.server.WebServerFactoryCustomizer;import org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;import org.springframework.stereotype.Component;@Componentpublic class CustomizationBean implements WebServerFactoryCustomizer&lt;ConfigurableServletWebServerFactory&gt; {    @Override    public void customize(ConfigurableServletWebServerFactory server) {        server.setPort(9000);    }}</code></pre><p><strong>注意</strong></p><blockquote><p><code>TomcatServletWebServerFactory</code>、<code>JettyServletWebServerFactory</code> 和 <code>UndertowServletWebServerFactory</code> 是 ConfigurableServletWebServerFactory 的具体子类，它们分别为 Tomcat、Jetty 和 Undertow 提供了额外的自定义 setter 方法。</p></blockquote><h6 id="28-4-4-2、直接自定义-ConfigurableServletWebServerFactory"><a href="#28-4-4-2、直接自定义-ConfigurableServletWebServerFactory" class="headerlink" title="28.4.4.2、直接自定义 ConfigurableServletWebServerFactory"></a>28.4.4.2、直接自定义 ConfigurableServletWebServerFactory</h6><p>如果上述的自定义方式太局限，您可以自己注册 <code>TomcatServletWebServerFactory</code>、<code>JettyServletWebServerFactory</code> 或 <code>UndertowServletWebServerFactory</code> bean。</p><pre><code>@Beanpublic ConfigurableServletWebServerFactory webServerFactory() {    TomcatServletWebServerFactory factory = new TomcatServletWebServerFactory();    factory.setPort(9000);    factory.setSessionTimeout(10, TimeUnit.MINUTES);    factory.addErrorPages(new ErrorPage(HttpStatus.NOT_FOUND, &quot;/notfound.html&quot;));    return factory;}</code></pre><p>Setter 方法提供了许多配置选项。还有几个 <strong>hook</strong> 保护方法供您深入定制。有关详细信息，请参阅<a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/api/org/springframework/boot/web/servlet/server/ConfigurableServletWebServerFactory.html" target="_blank" rel="noopener">源码文档</a>。</p><h4 id="28-4-5、JSP-局限"><a href="#28-4-5、JSP-局限" class="headerlink" title="28.4.5、JSP 局限"></a>28.4.5、JSP 局限</h4><p>当运行使用了内嵌 servlet 容器的 Spring Boot 应用程序时（打包为可执行归档文件），JSP 支持将存在一些限制。</p><ul><li>如果您使用 war 打包，在 Jetty 和 Tomcat 中可以正常工作，使用 <code>java -jar</code> 启动时，可执行的 war 可正常使用，并且还可以部署到任何标准容器。使用可执行 jar 时不支持 JSP。</li><li>Undertow 不支持 JSP。</li><li>创建自定义的 error.jsp 页面不会覆盖默认<a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-error-handling" target="_blank" rel="noopener">错误处理</a>视图，应该使用<a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-error-handling-custom-error-pages" target="_blank" rel="noopener">自定义错误页面</a>来代替。</li></ul><p>这里有一个 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-samples/spring-boot-sample-web-jsp" target="_blank" rel="noopener">JSP 示例</a>，您可以了解到如何配置。</p><h3 id="28-5、内嵌响应式服务器支持"><a href="#28-5、内嵌响应式服务器支持" class="headerlink" title="28.5、内嵌响应式服务器支持"></a>28.5、内嵌响应式服务器支持</h3><p>Spring Boot 包括对以下内嵌响应式 Web 服务器的支持：Reactor Netty、Tomcat、Jetty 和 Undertow。大多数开发人员使用对应的 <strong>Starter</strong> 来获取一个完全配置的实例。默认情况下，内嵌服务器在 8080 端口上监听 HTTP 请求。</p><h3 id="28-6、响应式服务器资源配置"><a href="#28-6、响应式服务器资源配置" class="headerlink" title="28.6、响应式服务器资源配置"></a>28.6、响应式服务器资源配置</h3><p>在自动配置 Reactor Netty 或 Jetty 服务器时，Spring Boot 将创建特定的 bean 为服务器实例提供 HTTP 资源：<code>ReactorResourceFactory</code> 或 <code>JettyResourceFactory</code>。</p><p>默认情况下，这些资源也将与 Reactor Netty 和 Jetty 客户端共享以获得最佳性能，具体如下：</p><ul><li>用于服务器和客户端的的相同技术</li><li>客户端实例使用了 Spring Boot 自动配置的 <code>WebClient.Builder</code> bean 构建。</li></ul><p>开发人员可以通过提供自定义的 <code>ReactorResourceFactory</code> 或 <code>JettyResourceFactory</code> bean 来重写 Jetty 和 Reactor Netty 的资源配置 —— 将应用于客户端和服务器。</p><p>您可以在 <a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-webclient-runtime" target="_blank" rel="noopener">WebClient Runtime</a> 章节中了解有关客户端资源配置的更多内容。</p><h2 id="29、安全"><a href="#29、安全" class="headerlink" title="29、安全"></a>29、安全</h2><p>默认情况下，如果 <a href="https://projects.spring.io/spring-security/" target="_blank" rel="noopener">Spring Security</a> 在 classpath 上，则 Web 应用程序是受保护的。Spring Boot 依赖 Spring Security 的内容协商策略来确定是使用 <code>httpBasic</code> 还是 <code>formLogin</code>。要给 Web 应用程序添加方法级别的安全保护，可以使用 <code>@EnableGlobalMethodSecurity</code> 注解设置。有关更多其他信息，您可以在 <a href="https://docs.spring.io/spring-security/site/docs/5.1.2.RELEASE/reference/htmlsingle#jc-method" target="_blank" rel="noopener">Spring Security 参考指南</a>中找到。</p><p>默认的 <code>UserDetailsS​​ervice</code> 只有一个用户。用户名为 <code>user</code>，密码是随机的，在应用程序启动时会以 INFO 级别打印出来，如下所示：</p><pre><code>Using generated security password: 78fa095d-3f4c-48b1-ad50-e24c31d5cf35</code></pre><p><strong>注意</strong></p><blockquote><p>如果您对日志配置进行微调，请确保将 <code>org.springframework.boot.autoconfigure.security</code> 的级别设置为 <code>INFO</code>。否则，默认密码不会打印出来。</p></blockquote><p>您可以通过提供 <code>spring.security.user.name</code> 和 <code>spring.security.user.password</code> 来更改用户名和密码。</p><p>您在 Web 应用程序中默认会获得以下基本功能：</p><ul><li>一个 <code>UserDetailsS​​ervice</code>（或 WebFlux 应用程序中的 <code>ReactiveUserDetailsS​​ervice</code>）bean，采用内存存储形式，有一个自动生成密码的用户（有关用户属性，请参阅 <a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/api/org/springframework/boot/autoconfigure/security/SecurityProperties.User.html" target="_blank" rel="noopener"><code>SecurityProperties.User</code></a>）。</li><li>用于整个应用程序（如果 actuator 在 classpath 上，则包括 actuator 端点）基于表单登录或 HTTP Basic 认证（取决于 Content-Type）。</li><li>一个用于发布身份验证事件的 <code>DefaultAuthenticationEventPublisher</code>。</li></ul><p>您可以通过为其添加一个 bean 来提供不同的 <code>AuthenticationEventPublisher</code>。</p><h3 id="29-1、MVC-安全"><a href="#29-1、MVC-安全" class="headerlink" title="29.1、MVC 安全"></a>29.1、MVC 安全</h3><p>默认的安全配置在 <code>SecurityAutoConfiguration</code> 和 <code>UserDetailsS​​erviceAutoConfiguration</code> 中实现。 <code>SecurityAutoConfiguration</code> 导入用于 Web 安全的 <code>SpringBootWebSecurityConfiguration</code>，<code>UserDetailsS​​erviceAutoConfiguration</code> 配置身份验证，这同样适用于非 Web 应用程序。要完全关闭默认的 Web 应用程序安全配置，可以添加 <code>WebSecurityConfigurerAdapter</code> 类型的 bean（这样做不会禁用 <code>UserDetailsS​​ervice</code> 配置或 Actuator 的安全保护）。</p><p>要同时关闭 <code>UserDetailsS​​ervice</code> 配置，您可以添加 <code>UserDetailsS​​ervice</code>、<code>AuthenticationProvider</code> 或 <code>AuthenticationManager</code> 类型的 bean。<a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-samples/" target="_blank" rel="noopener">Spring Boot 示例</a>中有几个使用了安全保护的应用程序，他们或许可以帮助到您。</p><p>可以通过添加自定义 <code>WebSecurityConfigurerAdapter</code> 来重写访问规则。Spring Boot 提供了便捷方法，可用于重写 actuator 端点和静态资源的访问规则。<code>EndpointRequest</code> 可用于创建一个基于 <code>management.endpoints.web.base-path</code> 属性的 <code>RequestMatcher</code>。<code>PathRequest</code> 可用于为常用位置中的资源创建一个 <code>RequestMatcher</code>。</p><h3 id="29-2、WebFlux-安全"><a href="#29-2、WebFlux-安全" class="headerlink" title="29.2、WebFlux 安全"></a>29.2、WebFlux 安全</h3><p>与 Spring MVC 应用程序类似，您可以通过添加 <code>spring-boot-starter-security</code> 依赖来保护 WebFlux 应用程序。默认的安全配置在 <code>ReactiveSecurityAutoConfiguration</code> 和 <code>UserDetailsServiceAutoConfiguration</code> 中实现。<code>ReactiveSecurityAutoConfiguration</code> 导入用于 Web 安全的 <code>WebFluxSecurityConfiguration</code>，<code>UserDetailsServiceAutoConfiguration</code> 配置身份验证，这同样适用于非 Web 应用程序。要完全关闭默认的 Web 应用程序安全配置，可以添加 <code>WebFilterChainProxy</code> 类型的 bean（这样做不会禁用 <code>UserDetailsS​​ervice</code> 配置或 Actuator 的安全保护）。</p><p>要同时关闭 <code>UserDetailsS​​ervice</code> 配置，您可以添加 <code>ReactiveUserDetailsService</code> 或 <code>ReactiveAuthenticationManager</code> 类型的 bean。</p><p>可以通过添加自定义 <code>SecurityWebFilterChain</code> 来重写访问规则。Spring Boot 提供了便捷方法，可用于重写 actuator 端点和静态资源的访问规则。<code>EndpointRequest</code> 可用于创建一个基于 <code>management.endpoints.web.base-path</code> 属性的 <code>ServerWebExchangeMatcher</code>。</p><p><code>PathRequest</code> 可用于为常用位置中的资源创建一个 <code>ServerWebExchangeMatcher</code>。</p><p>例如，您可以通过添加以下内容来自定义安全配置：</p><pre><code>@Beanpublic SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) {    return http        .authorizeExchange()            .matchers(PathRequest.toStaticResources().atCommonLocations()).permitAll()            .pathMatchers(&quot;/foo&quot;, &quot;/bar&quot;)                .authenticated().and()            .formLogin().and()        .build();}</code></pre><h3 id="29-3、OAuth2"><a href="#29-3、OAuth2" class="headerlink" title="29.3、OAuth2"></a>29.3、OAuth2</h3><p><a href="https://oauth.net/2/" target="_blank" rel="noopener">OAuth2</a> 是 Spring 支持的一种广泛使用的授权框架。</p><h4 id="29-3-1、客户端"><a href="#29-3-1、客户端" class="headerlink" title="29.3.1、客户端"></a>29.3.1、客户端</h4><p>如果您的 classpath 上有 <code>spring-security-oauth2-client</code>，则可以利用一些自动配置来轻松设置 <code>OAuth2/Open ID Connect 客户端。该配置使用</code>OAuth2ClientProperties` 的属性。相同的属性适用于 servlet 和响应式应用程序。</p><p>您可以在 <code>spring.security.oauth2.client</code> 前缀下注册多个 OAuth2 客户端和提供者（provider），如下所示：</p><pre><code>spring.security.oauth2.client.registration.my-client-1.client-id=abcdspring.security.oauth2.client.registration.my-client-1.client-secret=passwordspring.security.oauth2.client.registration.my-client-1.client-name=Client for user scopespring.security.oauth2.client.registration.my-client-1.provider=my-oauth-providerspring.security.oauth2.client.registration.my-client-1.scope=userspring.security.oauth2.client.registration.my-client-1.redirect-uri-template=http://my-redirect-uri.comspring.security.oauth2.client.registration.my-client-1.client-authentication-method=basicspring.security.oauth2.client.registration.my-client-1.authorization-grant-type=authorization_codespring.security.oauth2.client.registration.my-client-2.client-id=abcdspring.security.oauth2.client.registration.my-client-2.client-secret=passwordspring.security.oauth2.client.registration.my-client-2.client-name=Client for email scopespring.security.oauth2.client.registration.my-client-2.provider=my-oauth-providerspring.security.oauth2.client.registration.my-client-2.scope=emailspring.security.oauth2.client.registration.my-client-2.redirect-uri-template=http://my-redirect-uri.comspring.security.oauth2.client.registration.my-client-2.client-authentication-method=basicspring.security.oauth2.client.registration.my-client-2.authorization-grant-type=authorization_codespring.security.oauth2.client.provider.my-oauth-provider.authorization-uri=http://my-auth-server/oauth/authorizespring.security.oauth2.client.provider.my-oauth-provider.token-uri=http://my-auth-server/oauth/tokenspring.security.oauth2.client.provider.my-oauth-provider.user-info-uri=http://my-auth-server/userinfospring.security.oauth2.client.provider.my-oauth-provider.user-info-authentication-method=headerspring.security.oauth2.client.provider.my-oauth-provider.jwk-set-uri=http://my-auth-server/token_keysspring.security.oauth2.client.provider.my-oauth-provider.user-name-attribute=name</code></pre><p>对于支持 <a href="https://openid.net/specs/openid-connect-discovery-1_0.html" target="_blank" rel="noopener">OpenID Connect 发现</a>的 OpenID Connect 提供者，可以进一步简化配置。需要使用 <code>issuer-uri</code> 配置提供者，<code>issuer-uri</code> 是其 Issuer Identifier 的 URI。例如，如果提供的 <code>issuer-uri</code> 是 “<a href="https://example.xn--com%2C-ib7a0154avpo7c/" target="_blank" rel="noopener">https://example.com”，则将对</a> “<a href="https://example.com/.well-known/openid-configuration%E2%80%9D" target="_blank" rel="noopener">https://example.com/.well-known/openid-configuration”</a> 发起一个 <code>OpenID Provider Configuration Request</code>。期望结果是一个 <code>OpenID Provider Configuration Response</code>。以下示例展示了如何使用 <code>issuer-uri</code> 配置一个 OpenID Connect Provider：</p><pre><code>spring.security.oauth2.client.provider.oidc-provider.issuer-uri=https://dev-123456.oktapreview.com/oauth2/default/</code></pre><p>默认情况下，Spring Security 的 <code>OAuth2LoginAuthenticationFilter</code> 仅处理与 <code>/login/oauth2/code/*</code> 相匹配的 URL。如果要自定义 <code>redirect-uri</code> 以使用其他匹配模式，则需要提供配置以处理该自定义模式。例如，对于 servlet 应用程序，您可以添加类似于以下 <code>WebSecurityConfigurerAdapter</code>：</p><pre><code>public class OAuth2LoginSecurityConfig extends WebSecurityConfigurerAdapter {    @Override    protected void configure(HttpSecurity http) throws Exception {        http            .authorizeRequests()                .anyRequest().authenticated()                .and()            .oauth2Login()                .redirectionEndpoint()                    .baseUri(&quot;/custom-callback&quot;);    }}</code></pre><p><strong>OAuth2 客户端注册常见的提供者</strong></p><p>对于常见的 OAuth2 和 OpenID 提供者（provider），包括 Google、Github、Facebook 和 Okta，我们提供了一组提供者默认设置（分别是 <code>google</code>、<code>github</code>、<code>facebook</code> 和 <code>okta</code>）。</p><p>如果您不需要自定义这些提供者，则可以将 <code>provider</code> 属性设置为您需要推断默认值的属性。此外，如果客户端注册的 key 与默认支持的提供者匹配，则 Spring Boot 也会推断出来。</p><p>换而言之，以下示例中的两个配置使用了 Google 提供者：</p><pre><code>spring.security.oauth2.client.registration.my-client.client-id=abcdspring.security.oauth2.client.registration.my-client.client-secret=passwordspring.security.oauth2.client.registration.my-client.provider=googlespring.security.oauth2.client.registration.google.client-id=abcdspring.security.oauth2.client.registration.google.client-secret=password</code></pre><h4 id="29-3-2、资源服务器"><a href="#29-3-2、资源服务器" class="headerlink" title="29.3.2、资源服务器"></a>29.3.2、资源服务器</h4><p>如果在 classpath 上有 <code>spring-security-oauth2-resource-server</code>，只要指定了 JWK Set URI 或 OIDC Issuer URI，Spring Boot 就可以设置 OAuth2 资源服务器，如下所示：</p><pre><code>spring.security.oauth2.resourceserver.jwt.jwk-set-uri=https://example.com/oauth2/default/v1/keysspring.security.oauth2.resourceserver.jwt.issuer-uri=https://dev-123456.oktapreview.com/oauth2/default/</code></pre><p>相同的属性适用于 servlet 和响应式应用程序。</p><p>或者，您可以为 servlet 应用程序定义自己的 <code>JwtDecoder</code> bean，或为响应式应用程序定义 <code>ReactiveJwtDecoder</code>。</p><h4 id="29-3-3、授权服务器"><a href="#29-3-3、授权服务器" class="headerlink" title="29.3.3、授权服务器"></a>29.3.3、授权服务器</h4><p>目前，Spring Security 没有提供 OAuth 2.0 授权服务器实现。但此功能可从 <a href="https://projects.spring.io/spring-security-oauth/" target="_blank" rel="noopener">Spring Security OAuth</a> 项目获得，该项目最终会被 Spring Security 所取代。在此之前，您可以使用 <code>spring-security-oauth2-autoconfigure</code> 模块轻松设置 OAuth 2.0 授权服务器，请参阅其<a href="https://docs.spring.io/spring-security-oauth2-boot" target="_blank" rel="noopener">文档</a>以获取详细信息。</p><h3 id="29-4、Actuator-安全"><a href="#29-4、Actuator-安全" class="headerlink" title="29.4、Actuator 安全"></a>29.4、Actuator 安全</h3><p>出于安全考虑，默认情况下禁用除 <code>/health</code> 和 <code>/info</code> 之外的所有 actuator。可用 <code>management.endpoints.web.exposure.include</code> 属性启用 actuator。</p><p>如果 Spring Security 位于 classpath 上且没有其他 <code>WebSecurityConfigurerAdapter</code>，则除了 <code>/health</code> 和 <code>/info</code> 之外的所有 actuator 都由 Spring Boot 自动配置保护。如果您定义了自定义 <code>WebSecurityConfigurerAdapter</code>，则 Spring Boot 自动配置将不再生效，您可以完全控制 actuator 的访问规则。</p><p><strong>注意</strong></p><blockquote><p>在设置 <code>management.endpoints.web.exposure.include</code> 之前，请确保暴露的 actuator 没有包含敏感信息和 <code>/</code> 或被防火墙保护亦或受 Spring Security 之类的保护。</p></blockquote><h4 id="29-4-1、跨站请求伪造保护"><a href="#29-4-1、跨站请求伪造保护" class="headerlink" title="29.4.1、跨站请求伪造保护"></a>29.4.1、跨站请求伪造保护</h4><p>由于 Spring Boot 依赖 Spring Security 的默认值配置，因此默认情况下会启用 CSRF 保护。这意味着当使用默认安全配置时，需要 <code>POST</code>（shutdown 和 loggers 端点）、<code>PUT</code> 或 <code>DELETE</code> 的 actuator 端点将返回 403 禁止访问错误。</p><p><strong>注意</strong></p><blockquote><p>我们建议仅在创建非浏览器客户端使用的服务时才完全禁用 CSRF 保护。</p></blockquote><p>有关 CSRF 保护的其他信息，请参阅 <a href="https://docs.spring.io/spring-security/site/docs/5.1.2.RELEASE/reference/htmlsingle#csrf" target="_blank" rel="noopener">Spring Security 参考指南</a>。</p><h2 id="30、使用-SQL-数据库"><a href="#30、使用-SQL-数据库" class="headerlink" title="30、使用 SQL 数据库"></a>30、使用 SQL 数据库</h2><p><a href="https://projects.spring.io/spring-framework/" target="_blank" rel="noopener">Spring Framework</a> 为 SQL 数据库提供了广泛的支持。从直接使用 <code>JdbcTemplate</code> 进行 JDBC 访问到完全的<strong>对象关系映射</strong>（object relational mapping）技术，比如 Hibernate。<a href="https://projects.spring.io/spring-data/" target="_blank" rel="noopener">Spring Data</a> 提供了更多级别的功能，直接从接口创建的 <code>Repository</code> 实现，并使用了约定从方法名生成查询。</p><h3 id="30-1、配置数据源"><a href="#30-1、配置数据源" class="headerlink" title="30.1、配置数据源"></a>30.1、配置数据源</h3><p>Java 的 <code>javax.sql.DataSource</code> 接口提供了一个使用数据库连接的标准方法。通常，数据源使用 <code>URL</code> 和一些凭据信息来建立数据库连接。</p><p><strong>提示</strong></p><blockquote><p>查看 <a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#howto-configure-a-datasource" target="_blank" rel="noopener">How-to</a> 部分获取更多高级示例，通常您可以完全控制数据库的配置。</p></blockquote><h4 id="30-1-1、内嵌数据库支持"><a href="#30-1-1、内嵌数据库支持" class="headerlink" title="30.1.1、内嵌数据库支持"></a>30.1.1、内嵌数据库支持</h4><p>使用内嵌内存数据库来开发应用程序非常方便的。显然，内存数据库不提供持久存储。在应用启动时，您需要填充数据库，并在应用程序结束时丢弃数据。</p><p><strong>提示</strong></p><blockquote><p><strong>How-to</strong> 部分包含了<a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#howto-database-initialization" target="_blank" rel="noopener">如何初始化数据库</a>方面的内容。</p></blockquote><p>Spring Boot 可以自动配置内嵌 <a href="http://www.h2database.com/" target="_blank" rel="noopener">H2</a>、<a href="http://hsqldb.org/" target="_blank" rel="noopener">HSQL</a> 和 <a href="https://db.apache.org/derby/" target="_blank" rel="noopener">Derby</a> 数据库。您不需要提供任何连接 URL，只需为您想要使用的内嵌数据库引入特定的构建依赖。</p><p><strong>注意</strong></p><blockquote><p>如果您在测试中使用此功能，您可能会注意到，无论使用了多少应用程序上下文，整个测试套件都会重复使用相同的数据库。如果您想确保每个上下文都有一个单独的内嵌数据库，则应该将 <code>spring.datasource.generate-unique-name</code> 设置为 <code>true</code>。</p></blockquote><p>以下是 POM 依赖示例：</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.hsqldb&lt;/groupId&gt;    &lt;artifactId&gt;hsqldb&lt;/artifactId&gt;    &lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt;</code></pre><p><strong>注意</strong></p><blockquote><p>要自动配置内嵌数据库，您需要一个 <code>spring-jdbc</code> 依赖。在这个例子中，它是通过 <code>spring-boot-starter-data-jpa</code> 引入。</p></blockquote><p><strong>提示</strong></p><blockquote><p>如果出于某些原因，您需要配置内嵌数据库的连接 URL，则应注意确保禁用数据库的自动关闭功能。如果您使用 H2，则应该使用 <code>DB_CLOSE_ON_EXIT=FALSE</code> 来设置。如果您使用 <code>HSQLDB</code>，则确保不使用 <code>shutdown=true</code>。禁用数据库的自动关闭功能允许 Spring Boot 控制数据库何时关闭，从而确保一旦不再需要访问数据库时就触发。</p></blockquote><h4 id="30-1-2、连接生产数据库"><a href="#30-1-2、连接生产数据库" class="headerlink" title="30.1.2、连接生产数据库"></a>30.1.2、连接生产数据库</h4><p>生产数据库连接也可以使用使用 <code>DataSource</code> 自动配置。Spring Boot 使用以下算法来选择一个特定的实现：</p><ul><li>出于性能和并发性的考虑，我们更喜欢 <a href="https://github.com/brettwooldridge/HikariCP" target="_blank" rel="noopener">HikariCP</a> 连接池。如果 HikariCP 可用，我们总是选择它。</li><li>否则，如果 Tomcat 池 <code>DataSource</code> 可用，我们将使用它。</li><li>如果 HikariCP 和 Tomcat 池数据源不可用，但 <a href="https://commons.apache.org/proper/commons-dbcp/" target="_blank" rel="noopener">Commons DBCP</a> 可用，我们将使用它。</li></ul><p>如果您使用了 <code>spring-boot-starter-jdbc</code> 或者 <code>spring-boot-starter-data-jpa</code> starter，您将自动得到 <code>HikariCP</code> 依赖。</p><p><strong>注意</strong></p><blockquote><p>您完全可以绕过该算法，并通过 <code>spring.datasource.type</code> 属性指定要使用的连接池。如果您在 Tomcat 容器中运行应用程序，默认提供 <code>tomcat-jdbc</code>，这点尤其重要。</p></blockquote><p><strong>提示</strong></p><blockquote><p>可以手动配置其他连接池。如果您定义了自己的 <code>DataSource</code> bean，则自动配置将不会触发。</p></blockquote><p>数据源配置由 <code>spring.datasource.*</code> 中的外部属性所控制。例如，您可以在 <code>application.properties</code> 中声明以下部分：</p><pre><code>spring.datasource.url=jdbc:mysql://localhost/testspring.datasource.username=dbuserspring.datasource.password=dbpassspring.datasource.driver-class-name=com.mysql.jdbc.Driver</code></pre><p><strong>注意</strong></p><blockquote><p>您至少应该使用 <code>spring.datasource.url</code> 属性来指定 URL，否则 Spring Boot 将尝试自动配置内嵌数据库。</p></blockquote><p><strong>提示</strong></p><blockquote><p>通常您不需要指定 <code>driver-class-name</code>，因为 Spring boot 可以从 <code>url</code> 推导出大多数数据库。</p></blockquote><p><strong>注意</strong></p><blockquote><p>对于要创建的池 <code>DataSource</code>，我们需要能够验证有效的 <code>Driver</code> 类是否可用，因此我们在使用之前进行检查。例如，如果您设置了 <code>spring.datasource.driver-class-name=com.mysql.jdbc.Driver</code>，那么该类必须可加载。</p></blockquote><p>有关更多支持选项，请参阅 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java" target="_blank" rel="noopener">DataSourceProperties</a>。这些都是标准选项，与实际的实现无关。还可以使用各自的前缀（<code>spring.datasource.hikari.*</code>、<code>spring.datasource.tomcat.*</code> 和 <code>spring.datasource.dbcp2.*</code>）微调实现特定的设置。请参考您现在使用的连接池实现的文档来获取更多信息。</p><p>例如，如果你使用 <a href="https://tomcat.apache.org/tomcat-8.0-doc/jdbc-pool.html#Common_Attributes" target="_blank" rel="noopener">Tomcat 连接池</a>，则可以自定义许多其他设置，如下：</p><pre><code># Number of ms to wait before throwing an exception if no connection is available.spring.datasource.tomcat.max-wait=10000# Maximum number of active connections that can be allocated from this pool at the same time.spring.datasource.tomcat.max-active=50# Validate the connection before borrowing it from the pool.spring.datasource.tomcat.test-on-borrow=true</code></pre><h4 id="30-1-3、连接-JNDI-数据源"><a href="#30-1-3、连接-JNDI-数据源" class="headerlink" title="30.1.3、连接 JNDI 数据源"></a>30.1.3、连接 JNDI 数据源</h4><p>如果要将 Spring Boot 应用程序部署到应用服务器（Application Server）上，您可能想使用应用服务器的内置功能和 JNDI 访问方式来配置和管理数据源。</p><p><code>spring.datasource.jndi-name</code> 属性可作为 <code>spring.datasource.url</code>、<code>spring.datasource.username</code> 和 <code>spring.datasource.password</code> 属性的替代方法，用于从特定的 JNDI 位置访问 <code>DataSource</code>。例如，<code>application.properties</code> 中的以下部分展示了如何访问 JBoss AS 定义的 <code>DataSource</code>：</p><pre><code>spring.datasource.jndi-name=java:jboss/datasources/customers</code></pre><h3 id="30-2、使用-JdbcTemplate"><a href="#30-2、使用-JdbcTemplate" class="headerlink" title="30.2、使用 JdbcTemplate"></a>30.2、使用 JdbcTemplate</h3><p>Spring 的 <code>JdbcTemplate</code> 和 <code>NamedParameterJdbcTemplate</code> 类是自动配置的，您可以使用 <code>@Autowire</code> 将它们直接注入您的 bean 中：</p><pre><code>import org.springframework.beans.factory.annotation.Autowired;import org.springframework.jdbc.core.JdbcTemplate;import org.springframework.stereotype.Component;@Componentpublic class MyBean {    private final JdbcTemplate jdbcTemplate;    @Autowired    public MyBean(JdbcTemplate jdbcTemplate) {        this.jdbcTemplate = jdbcTemplate;    }    // ...}</code></pre><p>您可以使用 <code>spring.jdbc.template.*</code> 属性来自定义一些 template 的属性，如下：</p><pre><code>spring.jdbc.template.max-rows=500</code></pre><p><strong>注意</strong></p><blockquote><p><code>NamedParameterJdbcTemplate</code> 在底层重用了相同的 <code>JdbcTemplate</code> 实例。如果定义了多个 <code>JdbcTemplate</code> 且没有声明 primary 主候选，则不会自动配置 <code>NamedParameterJdbcTemplate</code>。</p></blockquote><h3 id="30-3、JPA-与-Spring-Data-JPA"><a href="#30-3、JPA-与-Spring-Data-JPA" class="headerlink" title="30.3、JPA 与 Spring Data JPA"></a>30.3、JPA 与 Spring Data JPA</h3><p>Java Persistence API（Java 持久化 API）是一项标准技术，可让您将对象<strong>映射</strong>到关系数据库。<code>spring-boot-starter-data-jpa</code> POM 提供了一个快速起步的方法。它提供了以下关键依赖：</p><ul><li><strong>Hibernate</strong>  ——  最受欢迎的 JPA 实现之一。</li><li><strong>Spring Data JPA</strong> ——  可以轻松地实现基于 JPA 的资源库。</li><li><strong>Spring ORM</strong>  ——  Spring Framework 的核心 ORM 支持</li></ul><p><strong>提示</strong></p><blockquote><p>我们不会在这里介绍太多关于 JPA 或者 <a href="https://projects.spring.io/spring-data/" target="_blank" rel="noopener">Spring Data</a> 的相关内容。您可以在 <a href="https://spring.io/" target="_blank" rel="noopener">spring.io</a> 上查看<a href="https://spring.io/guides/gs/accessing-data-jpa/" target="_blank" rel="noopener">使用 JPA 访问数据</a>，获取阅读 <a href="https://projects.spring.io/spring-data-jpa/" target="_blank" rel="noopener">Spring Data JPA</a> 和 <a href="https://hibernate.org/orm/documentation/" target="_blank" rel="noopener">Hibernate</a> 的参考文档。</p></blockquote><h4 id="30-3-1、实体类"><a href="#30-3-1、实体类" class="headerlink" title="30.3.1、实体类"></a>30.3.1、实体类</h4><p>通常，JPA <strong>Entity</strong>（实体）类是在 <code>persistence.xml</code> 文件中指定的。使用了 Spring Boot，该文件将不是必需的，可以使用 <strong>Entity Scanning</strong>（实体扫描）来代替。默认情况下，将搜索主配置类（使用了 <code>@EnableAutoConfiguration</code> 或 <code>@SpringBootApplication</code> 注解）下面的所有包。</p><p>任何用了 <code>@Entity</code>、<code>@Embeddable</code> 或者 <code>@MappedSuperclass</code> 注解的类将被考虑。一个典型的实体类如下：</p><pre><code>package com.example.myapp.domain;import java.io.Serializable;import javax.persistence.*;@Entitypublic class City implements Serializable {    @Id    @GeneratedValue    private Long id;    @Column(nullable = false)    private String name;    @Column(nullable = false)    private String state;    // ... additional members, often include @OneToMany mappings    protected City() {        // no-args constructor required by JPA spec        // this one is protected since it shouldn&apos;t be used directly    }    public City(String name, String state) {        this.name = name;        this.state = state;    }    public String getName() {        return this.name;    }    public String getState() {        return this.state;    }    // ... etc}</code></pre><p><strong>提示</strong></p><blockquote><p>您可以使用 <code>@EntityScan</code> 注解自定义实体类的扫描位置。请参见<a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/reference/htmlsingle/#howto-separate-entity-definitions-from-spring-configuration" target="_blank" rel="noopener">84.4、从 Spring configuration 配置中分离 @Entity 定义</a>章节。</p></blockquote><h4 id="30-3-2、Spring-Data-JPA-资源库"><a href="#30-3-2、Spring-Data-JPA-资源库" class="headerlink" title="30.3.2、Spring Data JPA 资源库"></a>30.3.2、Spring Data JPA 资源库</h4><p><a href="https://projects.spring.io/spring-data-jpa/" target="_blank" rel="noopener">Spring Data JPA</a> 资源库（repository）是接口，您可以定义用于访问数据。JAP 查询是根据您的方法名自动创建。例如，<code>CityRepository</code> 接口可以声明 <code>findAllByState(String state)</code> 方法来查找指定状态下的所有城市。</p><p>对于更加复杂的查询，您可以使用 Spring Data 的 <a href="https://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/Query.html" target="_blank" rel="noopener"><code>Query</code></a> 注解</p><p>Spring Data 资源库通常继承自 <a href="https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/Repository.html" target="_blank" rel="noopener">Repository</a> 或者 <a href="https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/CrudRepository.html" target="_blank" rel="noopener">CrudRepository</a> 接口。如果您使用了自动配置，则将从包含主配置类（使用了 <code>@EnableAutoConfiguration</code> 或 <code>@SpringBootApplication</code> 注解）的包中搜索资源库：</p><p>以下是一个典型的 Spring Data 资源库接口定义：</p><pre><code>package com.example.myapp.domain;import org.springframework.data.domain.*;import org.springframework.data.repository.*;public interface CityRepository extends Repository&lt;City, Long&gt; {    Page&lt;City&gt; findAll(Pageable pageable);    City findByNameAndStateAllIgnoringCase(String name, String state);}</code></pre><p>Spring Data JPA 资源库支持三种不同的引导模式：default、deferred 和 lazy。要启用延迟或懒惰引导，请将 <code>spring.data.jpa.repositories.bootstrap-mode</code> 分别设置为 <code>deferred</code> 或 <code>lazy</code>。使用延迟或延迟引导时，自动配置的 <code>EntityManagerFactoryBuilder</code> 将使用上下文的异步任务执行器（如果有）作为引导程序执行器。</p><p><strong>提示</strong></p><blockquote><p>我们几乎没有接触到 Spring Data JPA 的表面内容。有关详细信息，请查阅 <a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/" target="_blank" rel="noopener">Spring Data JPA 参考文档</a>。</p></blockquote><h4 id="30-3-3、创建和删除-JPA-数据库"><a href="#30-3-3、创建和删除-JPA-数据库" class="headerlink" title="30.3.3、创建和删除 JPA 数据库"></a>30.3.3、创建和删除 JPA 数据库</h4><p>默认情况下，<strong>仅</strong>当您使用了内嵌数据库（H2、HSQL 或 Derby）时才会自动创建 JPA 数据库。您可以使用 <code>spring.jpa.*</code> 属性显式配置 JPA 设置。例如，要创建和删除表，您可以将以下内容添加到 <code>application.properties</code> 中：</p><pre><code>spring.jpa.hibernate.ddl-auto=create-drop</code></pre><p><strong>注意</strong></p><blockquote><p>关于上述功能，Hibernate 自己的内部属性名称（如果您记住更好）为 <code>hibernate.hbm2ddl.auto</code>。您可以使用 <code>spring.jpa.properties.*</code>（在添加到实体管理器之前，该前缀将被删除）来将 Hibernate 原生属性一同设置：</p></blockquote><pre><code>spring.jpa.properties.hibernate.globally_quoted_identifiers=true</code></pre><p>上面示例中将 <code>true</code> 值设置给 <code>hibernate.globally_quoted_identifiers</code> 属性，该属性将传给 Hibernate 实体管理器。</p><p>默认情况下，DDL 执行（或验证）将延迟到 <code>ApplicationContext</code> 启动后。还有一个 <code>spring.jpa.generate-ddl</code> 标志，如果 Hibernate 自动配置是激活的，那么它将不会被使用，因为 <code>ddl-auto</code> 设置更细粒度。</p><h4 id="30-3-4、在视图中打开-EntityManager"><a href="#30-3-4、在视图中打开-EntityManager" class="headerlink" title="30.3.4、在视图中打开 EntityManager"></a>30.3.4、在视图中打开 EntityManager</h4><p>如果您正在运行 web 应用程序，Spring Boot 将默认注册 <a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/javadoc-api/org/springframework/orm/jpa/support/OpenEntityManagerInViewInterceptor.html" target="_blank" rel="noopener"><code>OpenEntityManagerInViewInterceptor</code></a> 用于<strong>在视图中打开 EntityManager</strong> 模式，即运允许在 web 视图中延迟加载。如果您不想开启这个行为，则应在 <code>application.properties</code> 中将 <code>spring.jpa.open-in-view</code> 设置为 <code>false</code>。</p><h3 id="30-4、Spring-Data-JDBC"><a href="#30-4、Spring-Data-JDBC" class="headerlink" title="30.4、Spring Data JDBC"></a>30.4、Spring Data JDBC</h3><p>Spring Data 包含了对 JDBC 资源库的支持，并将自动为 <code>CrudRepository</code> 上的方法生成 SQL。对于更高级的查询，它提供了 <code>@Query</code> 注解。</p><p>当 classpath 下存在必要的依赖时，Spring Boot 将自动配置 Spring Data 的 JDBC 资源库。可以通过添加单个 <code>spring-boot-starter-data-jdbc</code> 依赖引入到项目中。如有必要，可通过在应用程序中添加 <code>@EnableJdbcRepositories</code> 注解或 <code>JdbcConfiguration</code> 子类来控制 Spring Data JDBC 的配置。</p><p><strong>提示</strong></p><blockquote><p>有关 Spring Data JDBC 的完整详细信息，请参阅<a href="https://projects.spring.io/spring-data-jdbc/" target="_blank" rel="noopener">参考文档</a>。</p></blockquote><h3 id="30-5、使用-H2-的-Web-控制台"><a href="#30-5、使用-H2-的-Web-控制台" class="headerlink" title="30.5、使用 H2 的 Web 控制台"></a>30.5、使用 H2 的 Web 控制台</h3><p><a href="http://www.h2database.com/" target="_blank" rel="noopener">H2 数据库</a>提供了一个<a href="http://www.h2database.com/html/quickstart.html#h2_console" target="_blank" rel="noopener">基于浏览器的控制台</a>，Spring Boot 可以为您自动配置。当满足以下条件时，控制台将自动配置：</p><ul><li>您开发的是一个基于 servlet 的 web 应用程序</li><li><code>com.h2database:h2</code> 在 classpath 上</li><li>您使用了 <a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#using-boot-devtools" target="_blank" rel="noopener">Spring Boot 的开发者工具</a></li></ul><p><strong>提示</strong></p><blockquote><p>如果您不使用 Spring Boot 的开发者工具，但仍希望使用 H2 的控制台，则可以通过将 <code>spring.h2.console.enabled</code> 属性设置为 <code>true</code> 来实现。</p></blockquote><p><strong>注意</strong></p><blockquote><p>H2 控制台仅用于开发期间，因此应注意确保 <code>spring.h2.console.enabled</code> 在生产环境中<strong>没有</strong>设置为 <code>true</code>。</p></blockquote><h4 id="30-5-1、更改-H2-控制台的路径"><a href="#30-5-1、更改-H2-控制台的路径" class="headerlink" title="30.5.1、更改 H2 控制台的路径"></a>30.5.1、更改 H2 控制台的路径</h4><p>默认情况下，控制台的路径为 <code>/h2-console</code>。你可以使用 <code>spring.h2.console.path</code> 属性来自定义控制台的路径。</p><h3 id="30-6、使用-jOOQ"><a href="#30-6、使用-jOOQ" class="headerlink" title="30.6、使用 jOOQ"></a>30.6、使用 jOOQ</h3><p>Java 面向对象查询（<a href="http://www.jooq.org/" target="_blank" rel="noopener">Java Object Oriented Querying，jOOQ</a>）是一款广受欢迎的产品，出自 <a href="http://www.datageekery.com/" target="_blank" rel="noopener">Data Geekery</a>，它可以通过数据库生成 Java 代码，并允许您使用流式 API 来构建类型安全的 SQL 查询。商业版和开源版都可以与 Spring Boot 一起使用。</p><h4 id="30-6-1、代码生成"><a href="#30-6-1、代码生成" class="headerlink" title="30.6.1、代码生成"></a>30.6.1、代码生成</h4><p>要使用 jOOQ 的类型安全查询，您需要从数据库模式生成 Java 类。您可以按照 <a href="https://www.jooq.org/doc/3.11.7/manual-single-page/#jooq-in-7-steps-step3" target="_blank" rel="noopener">jOOQ 用户手册</a>中的说明进行操作。如果您使用了 <code>jooq-codegen-maven</code> 插件，并且还使用了 <code>spring-boot-starter-parent</code> 父 POM，则可以安全地省略掉插件的 <code>&lt;version&gt;</code> 标签。您还可以使用 Spring Boot 定义的版本变量（例如 <code>h2.version</code>）来声明插件的数据库依赖。以下是一个示例：</p><pre><code>&lt;plugin&gt;    &lt;groupId&gt;org.jooq&lt;/groupId&gt;    &lt;artifactId&gt;jooq-codegen-maven&lt;/artifactId&gt;    &lt;executions&gt;        ...    &lt;/executions&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.h2database&lt;/groupId&gt;            &lt;artifactId&gt;h2&lt;/artifactId&gt;            &lt;version&gt;${h2.version}&lt;/version&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;    &lt;configuration&gt;        &lt;jdbc&gt;            &lt;driver&gt;org.h2.Driver&lt;/driver&gt;            &lt;url&gt;jdbc:h2:~/yourdatabase&lt;/url&gt;        &lt;/jdbc&gt;        &lt;generator&gt;            ...        &lt;/generator&gt;    &lt;/configuration&gt;&lt;/plugin&gt;</code></pre><h4 id="30-6-2、使用-DSLContext"><a href="#30-6-2、使用-DSLContext" class="headerlink" title="30.6.2、使用 DSLContext"></a>30.6.2、使用 DSLContext</h4><p>jOOQ 提供的流式 API 是通过 <code>org.jooq.DSLContext</code> 接口初始化的。Spring Boot 将自动配置一个 <code>DSLContext</code> 作为 Spring Bean，并且将其连接到应用程序的 <code>DataSource</code>。<code>要使用 DSLContext</code>，您只需要 <code>@Autowire</code> 它：</p><pre><code>@Componentpublic class JooqExample implements CommandLineRunner {    private final DSLContext create;    @Autowired    public JooqExample(DSLContext dslContext) {        this.create = dslContext;    }}</code></pre><p><strong>提示</strong></p><blockquote><p>jOOQ 手册建议使用名为 <code>create</code> 的变量来保存 <code>DSLContext</code>。</p></blockquote><p>您可以使用 <code>DSLContext</code> 构建查询：</p><pre><code>public List&lt;GregorianCalendar&gt; authorsBornAfter1980() {    return this.create.selectFrom(AUTHOR)        .where(AUTHOR.DATE_OF_BIRTH.greaterThan(new GregorianCalendar(1980, 0, 1)))        .fetch(AUTHOR.DATE_OF_BIRTH);}</code></pre><h4 id="30-6-3、jOOQ-SQL-方言"><a href="#30-6-3、jOOQ-SQL-方言" class="headerlink" title="30.6.3、jOOQ SQL 方言"></a>30.6.3、jOOQ SQL 方言</h4><p>除非配置了 <code>spring.jooq.sql-dialect</code> 属性，否则 Spring Boot 会自动判定用于数据源的 SQL 方言。如果 Spring Boot 无法检测到方言，则使用 <code>DEFAULT</code>。</p><p><strong>注意</strong></p><blockquote><p>Spring Boot 只能自动配置 jOOQ 开源版本支持的方言。</p></blockquote><h4 id="30-6-4、自定义-jOOQ"><a href="#30-6-4、自定义-jOOQ" class="headerlink" title="30.6.4、自定义 jOOQ"></a>30.6.4、自定义 jOOQ</h4><p>可通过定义自己的 <code>@Bean</code> 来实现更高级的功能，这些自定义将在创建 jOOQ <code>Configuration</code> 时使用。您可以为以下 jOOQ 类型定义 bean：</p><ul><li><code>ConnectionProvider</code></li><li><code>ExecutorProvider</code></li><li><code>TransactionProvider</code></li><li><code>RecordMapperProvider</code></li><li><code>RecordUnmapperProvider</code></li><li><code>RecordListenerProvider</code></li><li><code>ExecuteListenerProvider</code></li><li><code>VisitListenerProvider</code></li><li><code>TransactionListenerProvider</code></li></ul><p>如果要完全控制 jOOQ 配置，您可以创建自己的 <code>org.jooq.Configuration</code> <code>@Bean</code>。</p><h2 id="31、使用-NoSQL-技术"><a href="#31、使用-NoSQL-技术" class="headerlink" title="31、使用 NoSQL 技术"></a>31、使用 NoSQL 技术</h2><p>Spring Data 提供了其他项目，可以帮助您访问各种 NoSQL 技术，包括 <a href="https://projects.spring.io/spring-data-mongodb/" target="_blank" rel="noopener">MongoDB</a>、<a href="https://projects.spring.io/spring-data-neo4j/" target="_blank" rel="noopener">Neo4J</a>、<a href="https://github.com/spring-projects/spring-data-elasticsearch/" target="_blank" rel="noopener">Elasticsearch</a>、<a href="https://projects.spring.io/spring-data-solr/" target="_blank" rel="noopener">Solr</a>、<a href="https://projects.spring.io/spring-data-redis/" target="_blank" rel="noopener">Redis</a>、<a href="https://projects.spring.io/spring-data-gemfire/" target="_blank" rel="noopener">Gemfire</a>、<a href="https://projects.spring.io/spring-data-cassandra/" target="_blank" rel="noopener">Cassandra</a>、<a href="https://projects.spring.io/spring-data-couchbase/" target="_blank" rel="noopener">Couchbase</a> 和 <a href="https://projects.spring.io/spring-data-ldap/" target="_blank" rel="noopener">LDAP</a>。Spring Boot 为 Redis、MongoDB、Neo4j、Elasticsearch、Solr、Cassandra、Couchbase 和 LDAP 提供了自动配置。您也可以使用其他项目，但您需要自行配置他们。请参阅 <a href="https://projects.spring.io/spring-data" target="_blank" rel="noopener">projects.spring.io/spring-data</a> 中相应的参考文档。</p><h3 id="31-1、Redis"><a href="#31-1、Redis" class="headerlink" title="31.1、Redis"></a>31.1、Redis</h3><p><a href="http://redis.io/" target="_blank" rel="noopener">Redis</a> 是一个集缓存、消息代理和键值存储等丰富功能的数据库。Spring Boot 为 <a href="https://github.com/lettuce-io/lettuce-core/" target="_blank" rel="noopener">Lettuce</a> 和 <a href="https://github.com/xetorthio/jedis/" target="_blank" rel="noopener">Jedis 客户端类库</a>提供了基本自动配置，<a href="https://github.com/spring-projects/spring-data-redis" target="_blank" rel="noopener">Spring Data Redis</a> 为他们提供了上层抽象。</p><p>使用 <code>spring-boot-starter-data-redis</code> starter 可方便地引入相关依赖。默认情况下，它使用 <a href="https://github.com/lettuce-io/lettuce-core/" target="_blank" rel="noopener">Lettuce</a>。该 starter 可处理传统应用程序和响应式应用程序。</p><p><strong>提示</strong></p><blockquote><p>我们还提供了一个 <code>spring-boot-starter-data-redis-reactive</code> starter，以便与其他带有响应式支持的存储保持一致。</p></blockquote><h4 id="31-1-1、连接-Redis"><a href="#31-1-1、连接-Redis" class="headerlink" title="31.1.1、连接 Redis"></a>31.1.1、连接 Redis</h4><p>您可以像所有 Spring Bean 一样注入自动配置的 <code>RedisConnectionFactory</code>、<code>StringRedisTemplate</code> 或普通的 <code>RedisTemplate</code> 实例。默认情况下，实例将尝试在 <code>localhost:6379</code> 上连接 Redis 服务器，以下是 bean 示例：</p><pre><code>@Componentpublic class MyBean {    private StringRedisTemplate template;    @Autowired    public MyBean(StringRedisTemplate template) {        this.template = template;    }    // ...}</code></pre><p><strong>提示</strong></p><blockquote><p>您还可以注册任意数量个实现了 <code>LettuceClientConfigurationBuilderCustomizer</code> 的 bean，以进行更高级的自定义。如果你使用 Jedis，则可以使用 <code>JedisClientConfigurationBuilderCustomizer</code>。</p></blockquote><p>如果您添加了自己的任何一个自动配置类型的 <code>@Bean</code>，它将替换默认设置（除了 <code>RedisTemplate</code>，由于排除是基于 bean 名称，而 <code>redisTemplate</code> 不是它的类型）。默认情况下，如果 <code>commons-pool2</code> 在 classpath 上，您将获得一个连接池工厂。</p><h3 id="31-2、MongoDB"><a href="#31-2、MongoDB" class="headerlink" title="31.2、MongoDB"></a>31.2、MongoDB</h3><p><a href="https://www.mongodb.com/" target="_blank" rel="noopener">MongoDB</a> 是一个开源的 NoSQL 文档数据库，其使用了类似 JSON 的模式（schema）来替代传统基于表的关系数据。Spring Boot 为 MongoDB 提供了几种便利的使用方式，包括 <code>spring-boot-starter-data-mongodb</code> 和 <code>spring-boot-starter-data-mongodb-reactive</code> starter。</p><h4 id="31-2-1、连接-MongoDB-数据库"><a href="#31-2-1、连接-MongoDB-数据库" class="headerlink" title="31.2.1、连接 MongoDB 数据库"></a>31.2.1、连接 MongoDB 数据库</h4><p>您可以注入一个自动配置的 <code>org.springframework.data.mongodb.MongoDbFactory</code> 来访问 Mongo 数据库。默认情况下，该实例将尝试在 <code>mongodb://localhost/test</code> 上连接 MongoDB 服务器，以下示例展示了如何连接到 MongoDB 数据库：</p><pre><code>import org.springframework.data.mongodb.MongoDbFactory;import com.mongodb.DB;@Componentpublic class MyBean {    private final MongoDbFactory mongo;    @Autowired    public MyBean(MongoDbFactory mongo) {        this.mongo = mongo;    }    // ...    public void example() {        DB db = mongo.getDb();        // ...    }}</code></pre><p>您可以通过设置 <code>spring.data.mongodb.uri</code> 属性来更改 URL 和配置其他设置，如<strong>副本集</strong>（replica set）：</p><pre><code>spring.data.mongodb.uri=mongodb://user:secret@mongo1.example.com:12345,mongo2.example.com:23456/test</code></pre><p>另外，只要您使用了 Mongo 2.x，请指定 <code>host</code>/<code>port</code>。比如，您可能要在 <code>application.properties</code> 中声明以下内容：</p><pre><code>spring.data.mongodb.host=mongoserverspring.data.mongodb.port=27017</code></pre><p>如果您已经定义了自己的 <code>MongoClient</code>，它将被用于自动配置合适的 <code>MongoDbFactory</code>。支持 <code>com.mongodb.MongoClient</code> 和 <code>com.mongodb.client.MongoClient</code>。</p><p><strong>注意</strong></p><blockquote><p>如果您使用 Mongo 3.0 Java 驱动，则不支持 <code>spring.data.mongodb.host</code> 和 <code>spring.data.mongodb.port</code>。这种情况下，应该使用 <code>spring.data.mongodb.uri</code> 来提供所有配置。</p></blockquote><p><strong>提示</strong></p><blockquote><p>如果未指定 <code>spring.data.mongodb.port</code>，则使用默认值 <code>27017</code>。您可以将上述示例中的改行配置删除掉。</p></blockquote><p><strong>提示</strong></p><blockquote><p>如果您不使用 Spring Data Mongo，则可以注入 <code>com.mongodb.MongoClient</code> bean 来代替 <code>MongoDbFactory</code>。如果要完全控制建立 MongoDB 连接，您还可以声明自己的 <code>MongoDbFactory</code> 或者 <code>MongoClient</code> bean。</p></blockquote><p><strong>注意</strong></p><blockquote><p>如果您使用的是响应式驱动，则 SSL 需要 Netty。 如果 Netty 可用且 factory 尚未自定义，则自动配置会自动配置此 factory。</p></blockquote><h4 id="31-2-2、MongoTemplate"><a href="#31-2-2、MongoTemplate" class="headerlink" title="31.2.2、MongoTemplate"></a>31.2.2、MongoTemplate</h4><p><a href="https://projects.spring.io/spring-data-mongodb/" target="_blank" rel="noopener">Spring Data Mongo</a> 提供了一个 <a href="https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/MongoTemplate.html" target="_blank" rel="noopener"><code>MongoTemplate</code></a> 类，它的设计与 Spring 的 <code>JdbcTemplate</code> 非常相似。与 <code>JdbcTemplate</code> 一样，Spring Boot 会自动配置一个 bean，以便您能注入模板：</p><pre><code>import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.mongodb.core.MongoTemplate;import org.springframework.stereotype.Component;@Componentpublic class MyBean {    private final MongoTemplate mongoTemplate;    @Autowired    public MyBean(MongoTemplate mongoTemplate) {        this.mongoTemplate = mongoTemplate;    }    // ...}</code></pre><p>更多详细信息，参照 <a href="https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/MongoOperations.html" target="_blank" rel="noopener"><code>MongoOperations</code></a> Javadoc。</p><h4 id="31-2-3、Spring-Data-MongoDB-资源库"><a href="#31-2-3、Spring-Data-MongoDB-资源库" class="headerlink" title="31.2.3、Spring Data MongoDB 资源库"></a>31.2.3、Spring Data MongoDB 资源库</h4><p>Spring Data 包含了对 MongoDB 资源库（repository）的支持。与之前讨论的 JPA 资源库一样，基本原理是根据方法名称自动构建查询。</p><p>事实上，Spring Data JPA 和 Spring Data MongoDB 共享通用的底层代码，因此你可以拿之前提到的 JPA 示例作为基础，假设 <code>City</code> 现在是一个 Mongo 数据类，而不是一个 JPA <code>@Entity</code>，他们方式工作相同：</p><pre><code>package com.example.myapp.domain;import org.springframework.data.domain.*;import org.springframework.data.repository.*;public interface CityRepository extends Repository&lt;City, Long&gt; {    Page&lt;City&gt; findAll(Pageable pageable);    City findByNameAndStateAllIgnoringCase(String name, String state);}</code></pre><p><strong>提示</strong></p><blockquote><p>您可以使用 <code>@EntityScan</code> 注解来自定义文档扫描位置。</p></blockquote><p><strong>提示</strong></p><blockquote><p>有关 Spring Data MongoDB 的完整详细内容，包括其丰富的对象关系映射技术，请参考其<a href="https://projects.spring.io/spring-data-mongodb/" target="_blank" rel="noopener">参考文档</a>。</p></blockquote><h4 id="31-2-4、内嵌-Mongo"><a href="#31-2-4、内嵌-Mongo" class="headerlink" title="31.2.4、内嵌 Mongo"></a>31.2.4、内嵌 Mongo</h4><p>Spring Boot 提供了<a href="https://github.com/flapdoodle-oss/de.flapdoodle.embed.mongo" target="_blank" rel="noopener">内嵌 Mongo</a> 的自动配置。要在 Spring Boot 应用程序中使用它，请添加依赖 <code>de.flapdoodle.embed:de.flapdoodle.embed.mongo</code>。</p><p>可以使用 <code>spring.data.mongodb.port</code> 属性来配置 Mongo 的监听端口。如果想随机分配空闲端口，请把值设置为 0。<code>MongoAutoConfiguration</code> 创建的 <code>MongoClient</code> 将自动配置随机分配的端口。</p><p><strong>注意</strong></p><blockquote><p>如果您不配置一个自定义端口，内嵌支持将默认使用一个随机端口（而不是 27017）。</p></blockquote><p>如果您的 classpath 上有 SLF4J，Mongo 产生的输出将自动路由到名为 <code>org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongo</code> 的 logger。</p><p>您可以声明自己的 <code>IMongodConfig</code> 和 <code>IRuntimeConfig</code> bean 来控制 Mongo 实例的配置和日志路由。</p><h3 id="31-3、Neo4j"><a href="#31-3、Neo4j" class="headerlink" title="31.3、Neo4j"></a>31.3、Neo4j</h3><p><a href="http://neo4j.com/" target="_blank" rel="noopener">Neo4j</a> 是一个开源的 NoSQL 图形数据库，它使用了一个节点由关系连接的富数据模型，比传统 RDBMS 的方式更适合连接大数据。Spring Boot 为 Neo4j 提供了便捷引入方式，包括 <code>spring-boot-starter-data-neo4j</code> starter。</p><h4 id="31-3-1、连接-Neo4j-数据库"><a href="#31-3-1、连接-Neo4j-数据库" class="headerlink" title="31.3.1、连接 Neo4j 数据库"></a>31.3.1、连接 Neo4j 数据库</h4><p>您可以像任何 Spring Bean 一样注入一个自动配置的 <code>org.neo4j.ogm.session.Session</code>。默认情况下， 该实例将尝试使用在 <code>localhost:7687</code> 上使用 Bolt 协议连接到 Neo4j 服务器，以下示例展示了如何注入 一个 Neo4j <code>Session</code>：</p><pre><code>@Componentpublic class MyBean {    private final Session session;    @Autowired    public MyBean(Session session) {        this.session = session;    }    // ...}</code></pre><p>您可以通过配置 <code>spring.data.neo4j.*</code> 属性来设置 uri 和凭据：</p><pre><code>spring.data.neo4j.uri=bolt://my-server:7687spring.data.neo4j.username=neo4jspring.data.neo4j.password=secret</code></pre><p>您可以通过添加自己的 <code>org.neo4j.ogm.config.Configuration</code> @Bean 来完全控制 session 创建。此外，添加 <code>SessionFactory</code> 类型的 @Bean 会禁用自动配置，因此您可以掌控所有。</p><h4 id="31-3-2、使用内嵌模式"><a href="#31-3-2、使用内嵌模式" class="headerlink" title="31.3.2、使用内嵌模式"></a>31.3.2、使用内嵌模式</h4><p>如果您将 <code>org.neo4j:neo4j-ogm-embedded-driver</code> 添加到应用程序的依赖中，Spring Boot 将自动配置一个进程内内嵌的 Neo4j 实例，当您的应用程序关闭时，该实例将不会保留任何数据。</p><p><strong>注意</strong></p><blockquote><p>内嵌 Neo4j OGM 驱动本身不提供 Neo4j 您必须自己声明 <code>org.neo4j:neo4j</code> 依赖，请参考 <a href="https://neo4j.com/docs/ogm-manual/current/reference/#reference:getting-started" target="_blank" rel="noopener">Neo4j OGM 文档</a> 获取兼容版本列表。</p></blockquote><p>当 classpath 上有多个驱动时，内嵌驱动优先于其他驱动。您可以通过设置 <code>spring.data.neo4j.embedded.enabled=false</code> 来显式禁用内嵌模式。</p><p>如果内嵌驱动和 Neo4j 内核如上所述位于 classpath 上，则 <a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-testing-spring-boot-applications-testing-autoconfigured-neo4j-test" target="_blank" rel="noopener">Data Neo4j 测试</a> 会自动使用内嵌 Neo4j 实例。</p><p><strong>注意</strong></p><blockquote><p>您可以通过在配置中提供数据库文件路径来为内嵌模式启用持久化，例如：<code>spring.data.neo4j.uri=file://var/tmp/graph.db</code>。</p></blockquote><h4 id="31-3-3、Neo4jSession"><a href="#31-3-3、Neo4jSession" class="headerlink" title="31.3.3、Neo4jSession"></a>31.3.3、Neo4jSession</h4><p>默认情况下，如果您正在运行 Web 应用程序，会话（session）将被绑定到当前请求的整个处理线程（即 <strong>Open Session in View</strong> 模式）。如果不希望此行为，您可以在 <code>application.properties</code> 中添加以下内容：</p><pre><code>spring.data.neo4j.open-in-view=false</code></pre><h4 id="31-3-4、Spring-Data-Neo4j-资源库"><a href="#31-3-4、Spring-Data-Neo4j-资源库" class="headerlink" title="31.3.4、Spring Data Neo4j 资源库"></a>31.3.4、Spring Data Neo4j 资源库</h4><p>Spring Data 包括了对 Neo4j 资源库的支持。</p><p>Spring Data Neo4j 与 Spring Data JPA 共享相同的通用底层代码，因此您可以直接把之前的 JPA 示例作为基础，假设 <code>City</code> 现在是一个 Neo4j OGM <code>@NodeEntity</code>，而不是一个 JPA <code>@Entity</code>，并且资源库抽象以相同的方式工作：</p><pre><code>package com.example.myapp.domain;import java.util.Optional;import org.springframework.data.neo4j.repository.*;public interface CityRepository extends Neo4jRepository&lt;City, Long&gt; {    Optional&lt;City&gt; findOneByNameAndState(String name, String state);}</code></pre><p><code>spring-boot-starter-data-neo4j</code> starter 支持资源库和事务管理。您可以在 <code>@Configuration</code> bean 上分别使用 <code>@EnableNeo4jRepositories</code> 和 <code>@EntityScan</code> 来自定义位置以查找资源库和实体。</p><p><strong>提示</strong></p><p>有关 Spring Data Neo4j 的完整详细信息，包括其对象映射技术，请参阅<a href="https://projects.spring.io/spring-data-neo4j/" target="_blank" rel="noopener">参考文档</a>。</p><h3 id="31-4、Gemfire"><a href="#31-4、Gemfire" class="headerlink" title="31.4、Gemfire"></a>31.4、Gemfire</h3><p><a href="https://github.com/spring-projects/spring-data-gemfire" target="_blank" rel="noopener">Spring Data Gemfire</a> 提供了便捷的 Spring 整合工具，用于访问 <a href="https://pivotal.io/big-data/pivotal-gemfire#details" target="_blank" rel="noopener">Pivotal Gemfire</a> 数据管理平台。 <code>spring-boot-starter-data-gemfire</code> starter 包含了相关依赖。目前没有针对 Gemfire 的自动配置支持，但您可以使用一个<a href="https://github.com/spring-projects/spring-data-gemfire/blob/master/src/main/java/org/springframework/data/gemfire/repository/config/EnableGemfireRepositories.java" target="_blank" rel="noopener">单独的注解（@EnableGemfireRepositories）</a>来启用 Spring Data 资源库。</p><h3 id="31-5、Solr"><a href="#31-5、Solr" class="headerlink" title="31.5、Solr"></a>31.5、Solr</h3><p><a href="https://lucene.apache.org/solr/" target="_blank" rel="noopener">Apache Solr</a> 是一个搜素引擎。Spring Boot 为 Solr 5 客户端类库提供了基本的自动配置，并且 <a href="https://github.com/spring-projects/spring-data-solr" target="_blank" rel="noopener">Spring Data Solr</a> 为其提供给了顶层抽象。相关的依赖包含在了 <code>spring-boot-starter-data-solr</code> starter 中。</p><h4 id="31-5-1、连接-Solr"><a href="#31-5-1、连接-Solr" class="headerlink" title="31.5.1、连接 Solr"></a>31.5.1、连接 Solr</h4><p>您可以像其他 Spring Bean 一样注入一个自动配置的 <code>SolrClient</code> 实例。默认情况下，该实例将尝试通过 <a href="http://localhost:8983/solr" target="_blank" rel="noopener"><code>localhost:8983/solr</code></a> 连接到服务器，以下示例展示了如何注入一个 Solr bean：</p><pre><code>@Componentpublic class MyBean {    private SolrClient solr;    @Autowired    public MyBean(SolrClient solr) {        this.solr = solr;    }    // ...}</code></pre><p>如果您添加了自己的 <code>SolrClient</code> 类型的 <code>@Bean</code>，它将替换掉默认配置。</p><h4 id="31-5-2、Spring-Data-Solr-资源库"><a href="#31-5-2、Spring-Data-Solr-资源库" class="headerlink" title="31.5.2、Spring Data Solr 资源库"></a>31.5.2、Spring Data Solr 资源库</h4><p>Spring Data 包含了对 Apache Solr 资源库的支持。与之前讨论的 JPA 资源库一样，基本原理是根据方法名称自动构造查询。</p><p>事实上，Spring Data JPA 和 Spring Data Solr 共享了相同的通用底层代码，因此您可以使用之前的 JPA 示例作为基础，假设 <code>City</code> 现在是一个 <code>@SolrDocument</code> 类，而不是一个 JPA <code>@Entity</code>，它的工作方式相同。</p><p><strong>提示</strong></p><blockquote><p>有关 Spring Data Solr 的完整详细内容，请参考其<a href="https://projects.spring.io/spring-data-solr/" target="_blank" rel="noopener">参考文档</a>。</p></blockquote><h3 id="31-6、Elasticsearch"><a href="#31-6、Elasticsearch" class="headerlink" title="31.6、Elasticsearch"></a>31.6、Elasticsearch</h3><p><a href="https://www.elastic.co/products/elasticsearch" target="_blank" rel="noopener">Elasticsearch</a> 是一个开源、分布式、RESTful 的实时搜索分析引擎。Spring Boot 为 Elasticsearch 提供了基本的自动配置。</p><p>Spring Boot 支持以下 HTTP 客户端：</p><ul><li>官方 Java <strong>Low Level（低级）</strong> 和 <strong>High Level（高级）</strong> REST 客户端</li><li><a href="https://github.com/searchbox-io/Jest" target="_blank" rel="noopener">Jest</a></li></ul><p><a href="https://github.com/spring-projects/spring-data-elasticsearch" target="_blank" rel="noopener">Spring Data Elasticsearch</a> 依旧使用传输客户端，您可以使用 <code>spring-boot-starter-data-elasticsearch</code> starter 引入使用它。</p><h4 id="31-6-1、使用-REST-客户端连接-Elasticsearch"><a href="#31-6-1、使用-REST-客户端连接-Elasticsearch" class="headerlink" title="31.6.1、使用 REST 客户端连接 Elasticsearch"></a>31.6.1、使用 REST 客户端连接 Elasticsearch</h4><p>Elasticsearch 提供了两个可用于查询集群的 <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/index.html" target="_blank" rel="noopener">REST 客户端</a>：<strong>Low Level（低级）</strong> 和 <strong>High Level（高级）</strong>。</p><p>如果您的 classpath 上存在 <code>org.elasticsearch.client:elasticsearch-rest-client</code> 依赖，则 Spring Boot 将自动配置并注册默认目标为 <a href="http://localhost:9200/" target="_blank" rel="noopener"><code>localhost:9200</code></a> 的 <code>RestClient</code> bean。您可以进一步调整 <code>RestClient</code> 的配置，如下所示：</p><pre><code>spring.elasticsearch.rest.uris=http://search.example.com:9200spring.elasticsearch.rest.username=userspring.elasticsearch.rest.password=secret</code></pre><p>您还可以注册实现任意数量的 <code>RestClientBuilderCustomizer</code> bean，以进行更高级的自定义。要完全控制注册流程，请定义 <code>RestClient</code> bean。</p><p>如果你 classpath 上有 <code>org.elasticsearch.client:elasticsearch-rest-high-level-client</code> 依赖，Spring Boot 将自动配置一个 <code>RestHighLevelClient</code>，它包装了所有现有的 <code>RestClient</code> bean，重用其 HTTP 配置。</p><h4 id="31-6-2、使用-Jest-连接-Elasticsearch"><a href="#31-6-2、使用-Jest-连接-Elasticsearch" class="headerlink" title="31.6.2、使用 Jest 连接 Elasticsearch"></a>31.6.2、使用 Jest 连接 Elasticsearch</h4><p>如果您的 classpath 上存在 <code>Jest</code>，则可以注入一个默认目标为 <a href="http://localhost:9200/" target="_blank" rel="noopener"><code>localhost:9200</code></a> 的自动配置 <code>JestClient</code>。您还可以进一步调整客户端配置：</p><pre><code>spring.elasticsearch.jest.uris=http://search.example.com:9200spring.elasticsearch.jest.read-timeout=10000spring.elasticsearch.jest.username=userspring.elasticsearch.jest.password=secret</code></pre><p>您还可以注册任何数量实现了 <code>HttpClientConfigBuilderCustomizer</code> 的 bean，以进行更加高级的自定义。以下示例调整了其他 HTTP 设置：</p><pre><code>static class HttpSettingsCustomizer implements HttpClientConfigBuilderCustomizer {    @Override    public void customize(HttpClientConfig.Builder builder) {        builder.maxTotalConnection(100).defaultMaxTotalConnectionPerRoute(5);    }}</code></pre><p>要完全控制注册流程，请定义一个 <code>JestClient</code> bean。</p><h4 id="31-6-3、使用-Spring-Data-连接-Elasticsearch"><a href="#31-6-3、使用-Spring-Data-连接-Elasticsearch" class="headerlink" title="31.6.3、使用 Spring Data 连接 Elasticsearch"></a>31.6.3、使用 Spring Data 连接 Elasticsearch</h4><p>要连接 Elasticsearch，您必须提供一个或多个群集节点的地址。可以通过将 <code>spring.data.elasticsearch.cluster-nodes</code> 属性设置为以逗号分隔的 <code>host:port</code> 列表来指定地址。使用此配置，可以像其他 Spring bean 一样注入 <code>ElasticsearchTemplate</code> 或 <code>TransportClient</code>，如下所示：</p><pre><code>@Componentpublic class MyBean {    private final ElasticsearchTemplate template;    public MyBean(ElasticsearchTemplate template) {        this.template = template;    }    // ...}</code></pre><p>如果您添加了自己的 <code>ElasticsearchTemplate</code> 或者 <code>TransportClient</code> <code>@Bean</code>，则其将替代默认配置。</p><h4 id="31-6-4、Spring-Data-Elasticsearch-资源库"><a href="#31-6-4、Spring-Data-Elasticsearch-资源库" class="headerlink" title="31.6.4、Spring Data Elasticsearch 资源库"></a>31.6.4、Spring Data Elasticsearch 资源库</h4><p>Spring Data 包含了对 Elasticsearch 资源库的支持，与之前讨论的 JPA 资源库一样，其原理是根据方法名称自动构造查询。</p><p>事实上，Spring Data JPA 与 Spring Data Elasticsearch 共享了相同的通用底层代码，因此您可以使用之前的 JPA 示例作为基础，假设 <code>City</code> 此时是一个 Elasticsearch <code>@Document</code> 类，而不是一个 JPA <code>@Entity</code>，它以相同的方式工作。</p><p><strong>提示</strong></p><blockquote><p>有关 Spring Data Elasticsearch 的完整详细内容，请参阅其<a href="https://docs.spring.io/spring-data/elasticsearch/docs/" target="_blank" rel="noopener">参考文档</a>。</p></blockquote><h3 id="31-7、Cassandra"><a href="#31-7、Cassandra" class="headerlink" title="31.7、Cassandra"></a>31.7、Cassandra</h3><p><a href="https://cassandra.apache.org/" target="_blank" rel="noopener">Cassandra</a> 是一个开源的分布式数据库管理系统，旨在处理商用服务器上的大量数据。Spring Boot 为 Cassandra 提供了自动配置，且 <a href="https://github.com/spring-projects/spring-data-cassandra" target="_blank" rel="noopener">Spring Data Cassandra</a> 为其提供了顶层抽象。相关依赖包含在 <code>spring-boot-starter-data-cassandra</code> starter 中。</p><h4 id="31-7-1、连接-Cassandra"><a href="#31-7-1、连接-Cassandra" class="headerlink" title="31.7.1、连接 Cassandra"></a>31.7.1、连接 Cassandra</h4><p>您可以像其他 Spring Bean 一样注入一个自动配置的 <code>CassandraTemplate</code> 或 Cassandra <code>Session</code> 实例。<code>spring.data.cassandra.*</code> 属性可用于自定义连接。通常，您会提供 <code>keyspace-name</code> 和 <code>contact-points</code>属性：</p><pre><code>spring.data.cassandra.keyspace-name=mykeyspacespring.data.cassandra.contact-points=cassandrahost1,cassandrahost2</code></pre><p>您还可以注册任意数量实现了 ClusterBuilderCustomizer 的 bean，以进行更高级的自定义。</p><p>以下代码展示了如何注入一个 Cassandra bean：</p><pre><code>@Componentpublic class MyBean {    private CassandraTemplate template;    @Autowired    public MyBean(CassandraTemplate template) {        this.template = template;    }    // ...}</code></pre><p>如果您添加了自己的类的为 <code>@CassandraTemplate</code> 的 <code>@Bean</code>，则其将替代默认值。</p><h4 id="31-7-2、Spring-Data-Cassandra-资源库"><a href="#31-7-2、Spring-Data-Cassandra-资源库" class="headerlink" title="31.7.2、Spring Data Cassandra 资源库"></a>31.7.2、Spring Data Cassandra 资源库</h4><p>Spring Data 包含了基本的 Cassandra 资源库支持。目前，其限制要比之前讨论的 JPA 资源库要多，并且需要在 finder 方法上使用 <code>@Query</code> 注解。</p><p><strong>提示</strong></p><blockquote><p>有关 Spring Data Cassandra 的完整详细内容，请参阅其<a href="https://docs.spring.io/spring-data/cassandra/docs/" target="_blank" rel="noopener">参考文档</a>。</p></blockquote><h3 id="31-8、Couchbase"><a href="#31-8、Couchbase" class="headerlink" title="31.8、Couchbase"></a>31.8、Couchbase</h3><p><a href="https://www.couchbase.com/" target="_blank" rel="noopener">Couchbase</a> 是一个开源、分布式多模型的 NoSQL 面向文档数据库，其针对交互式应用程序做了优化。Spring Boot 为 Couchbase 提供了自动配置，且 <a href="https://github.com/spring-projects/spring-data-couchbase" target="_blank" rel="noopener">Spring Data Couchbase</a> 为其提供了顶层抽象。相关的依赖包含在了 <code>spring-boot-starter-data-couchbase</code> starter 中。</p><h4 id="31-8-1、连接-Couchbase"><a href="#31-8-1、连接-Couchbase" class="headerlink" title="31.8.1、连接 Couchbase"></a>31.8.1、连接 Couchbase</h4><p>您可以通过添加 Couchbase SDK 和一些配置来轻松获取 <code>Bucket</code> 和 <code>Cluster</code>。<code>spring.couchbase.*</code> 属性可用于自定义连接。通常您会配置 bootstrap host、bucket name 和 password：</p><pre><code>spring.couchbase.bootstrap-hosts=my-host-1,192.168.1.123spring.couchbase.bucket.name=my-bucketspring.couchbase.bucket.password=secret</code></pre><blockquote><p>您<strong>至少</strong>需要提供 bootstrap host，这种情况下，bucket name 为 <code>default</code> 且 password 为空字符串。或者，您可以定义自己的 <code>org.springframework.data.couchbase.config.CouchbaseConfigurer</code> @Bean 来控制整个配置。</p></blockquote><p>也可以自定义一些 <code>CouchbaseEnvironment</code> 设置。例如，以下配置修改了打开一个新 <code>Bucket</code> 的超时时间和开启了 SSL 支持：</p><pre><code>spring.couchbase.env.timeouts.connect=3000spring.couchbase.env.ssl.key-store=/location/of/keystore.jksspring.couchbase.env.ssl.key-store-password=secret</code></pre><p>查看 <code>spring.couchbase.env.*</code> 获取更多详细内容。</p><h4 id="31-8-2、Spring-Data-Couchbase-资源库"><a href="#31-8-2、Spring-Data-Couchbase-资源库" class="headerlink" title="31.8.2、Spring Data Couchbase 资源库"></a>31.8.2、Spring Data Couchbase 资源库</h4><p>Spring Data 包含了 Couchbase 资源库支持。有关 Spring Data Couchbase 的完整详细信息，请参阅其<a href="https://docs.spring.io/spring-data/couchbase/docs/current/reference/html/" target="_blank" rel="noopener">参考文档</a>。</p><p>您可以像使用其他 Spring Bean 一样注入自动配置的 <code>CouchbaseTemplate</code> 实例，前提是有一个默认的<code>CouchbaseConfigurer</code>（当您启用 Couchbase 支持时会发生这种情况，如之前所述）。</p><p>以下示例展示了如何注入一个 Couchbase bean：</p><pre><code>@Componentpublic class MyBean {    private final CouchbaseTemplate template;    @Autowired    public MyBean(CouchbaseTemplate template) {        this.template = template;    }    // ...}</code></pre><p>您可以在自己的配置中定义以下几个 bean，以覆盖自动配置提供的配置：</p><ul><li>一个名为 <code>couchbaseTemplate</code> 的 <code>CouchbaseTemplate</code> @Bean</li><li>一个名为 <code>couchbaseIndexManager</code> 的 <code>IndexManager</code> @Bean</li><li>一个名为 <code>couchbaseCustomConversions</code> 的 <code>CustomConversions</code> @Bean</li></ul><p>为了避免在自己的配置中硬编码这些名称，您可以重用 Spring Data Couchbase 提供的 <code>BeanNames</code>，例如，您可以自定义转换器，如下：</p><pre><code>@Configurationpublic class SomeConfiguration {    @Bean(BeanNames.COUCHBASE_CUSTOM_CONVERSIONS)    public CustomConversions myCustomConversions() {        return new CustomConversions(...);    }    // ...}</code></pre><p><strong>提示</strong></p><p>如果您想要安全绕开 Spring Data Couchbase 的自动配置，请提供自己的 <code>org.springframework.data.couchbase.config.AbstractCouchbaseDataConfiguration</code> 实现。</p><h3 id="31-9、LDAP"><a href="#31-9、LDAP" class="headerlink" title="31.9、LDAP"></a>31.9、LDAP</h3><p><a href="https://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol" target="_blank" rel="noopener">LDAP</a>（Lightweight Directory Access Protocol，轻量级目录访问协议）是一个开放、厂商中立的行业标准应用协议，其通过 IP 网络访问和维护分布式目录信息服务。Spring Boot 为兼容 LDAP 服务器提供了自动配置，以及支持从 <a href="https://www.ldap.com/unboundid-ldap-sdk-for-java" target="_blank" rel="noopener">UnboundID</a> 内嵌内存式 LDAP 服务器。</p><p><a href="https://github.com/spring-projects/spring-data-ldap" target="_blank" rel="noopener">Spring Data LDAP</a> 提供了 LDAP 抽象。相关依赖包含在了 <code>spring-boot-starter-data-ldap</code> starter 中。</p><h4 id="31-9-1、连接-LDAP-服务器"><a href="#31-9-1、连接-LDAP-服务器" class="headerlink" title="31.9.1、连接 LDAP 服务器"></a>31.9.1、连接 LDAP 服务器</h4><p>要连接 LDAP 服务器，请确保您已经声明了 <code>spring-boot-starter-data-ldap</code> starter 或者 <code>spring-ldap-core</code> 依赖，然后在 <code>application.properties</code> 声明服务器的 URL：</p><pre><code>spring.ldap.urls=ldap://myserver:1235spring.ldap.username=adminspring.ldap.password=secret</code></pre><p>如果需要自定义连接设置，您可以使用 <code>spring.ldap.base</code> 和 <code>spring.ldap.base-environment</code> 属性。</p><p><code>LdapContextSource</code> 将根据这些设置自动配置。如果您需要自定义它，例如使用一个 <code>PooledContextSource</code>，则仍然可以注入自动配置的 <code>LdapContextSource</code>。确保将自定义的 <code>ContextSource</code> 标记为 <code>@Primary</code>，以便自动配置的 <code>LdapTemplate</code> 能使用它。</p><h4 id="31-9-2、Spring-Data-LDAP-资源库"><a href="#31-9-2、Spring-Data-LDAP-资源库" class="headerlink" title="31.9.2、Spring Data LDAP 资源库"></a>31.9.2、Spring Data LDAP 资源库</h4><p>Spring Data 包含了 LDAP 资源库支持。有关 Spring Data LDAP 的完整详细信息，请参阅其<a href="https://docs.spring.io/spring-data/ldap/docs/1.0.x/reference/html/" target="_blank" rel="noopener">参考文档</a>。</p><p>您还可以像其他 Spring Bean 一样注入一个自动配置的 <code>LdapTemplate</code> 实例：</p><pre><code>@Componentpublic class MyBean {    private final LdapTemplate template;    @Autowired    public MyBean(LdapTemplate template) {        this.template = template;    }    // ...}</code></pre><h4 id="31-9-3、内嵌内存式-LDAP-服务器"><a href="#31-9-3、内嵌内存式-LDAP-服务器" class="headerlink" title="31.9.3、内嵌内存式 LDAP 服务器"></a>31.9.3、内嵌内存式 LDAP 服务器</h4><p>为了测试目的，Spring Boot 支持从 <a href="https://www.ldap.com/unboundid-ldap-sdk-for-java" target="_blank" rel="noopener">UnboundID</a> 自动配置一个内存式 LDAP 服务器。要配置服务器，请添加 <code>com.unboundid:unboundid-ldapsdk</code> 依赖并声明一个 <code>base-dn</code> 属性：</p><pre><code>spring.ldap.embedded.base-dn=dc=spring,dc=io</code></pre><p><strong>注意</strong></p><blockquote><p>可以定义多个 `base-dn` 值，但是，由于名称包含逗号，存在歧义，因此必须使用正确的符号来定义它们。 在 yaml 文件中，您可以使用 yaml 列表表示法： ```yaml spring.ldap.embedded.base-dn: - dc=spring,dc=io - dc=pivotal,dc=io ``` 在属性文件中，必须使用索引方式： ```ini spring.ldap.embedded.base-dn[0]=dc=spring,dc=io spring.ldap.embedded.base-dn[1]=dc=pivotal,dc=io ```</p></blockquote><p>默认情况下，服务器将在一个随机端口上启动，并触发常规的 LDAP 支持（不需要指定 <code>spring.ldap.urls</code> 属性）。</p><p>如果您的 classpath 上存在一个 <code>schema.ldif</code> 文件，其将用于初始化服务器。如果您想从不同的资源中加载脚本，可以使用 <code>spring.ldap.embedded.ldif</code> 属性。</p><p>默认情况下，将使用一个标准模式（schema）来校验 <code>LDIF</code> 文件。您可以使用 <code>spring.ldap.embedded.validation.enabled</code> 属性来关闭所有校验。如果您有自定义的属性，则可以使用 <code>spring.ldap.embedded.validation.schema</code> 来定义自定义属性类型或者对象类。</p><h3 id="31-10、InfluxDB"><a href="#31-10、InfluxDB" class="headerlink" title="31.10、InfluxDB"></a>31.10、InfluxDB</h3><p><a href="https://www.influxdata.com/" target="_blank" rel="noopener">InfluxDB</a> 是一个开源时列数据库，其针对运营监控、应用程序指标、物联网传感器数据和实时分析等领域中的时间序列数据在速度、高可用存储和检索方面进行了优化。</p><h4 id="31-10-1、连接-InfluxDB"><a href="#31-10-1、连接-InfluxDB" class="headerlink" title="31.10.1、连接 InfluxDB"></a>31.10.1、连接 InfluxDB</h4><p>Spring Boot 自动配置 <code>InfluxDB</code> 实例，前提是 <code>Influxdb-java</code> 客户端在 classpath 上并且设置了数据库的 URL，如下所示：</p><pre><code>spring.influx.url=HTTP://172.0.0.1:8086</code></pre><p>如果与 InfluxDB 的连接需要用户和密码，则可以相应地设置 <code>spring.influx.user</code> 和 <code>spring.influx.password</code> 属性。</p><p>InfluxDB 依赖于 OkHttp。如果你需要调整 <code>InfluxDB</code> 在底层使用的 http 客户端，则可以注册一个 <code>InfluxDbOkHttpClientBuilderProvider</code> bean。</p><h2 id="32、缓存"><a href="#32、缓存" class="headerlink" title="32、缓存"></a>32、缓存</h2><p>Spring Framework 支持以透明的方式向应用程序添加缓存。从本质上讲，将缓存应用于方法上，根据缓存数据减少方法的执行次数。缓存逻辑是透明的，不会对调用者造成任何干扰。通过 <code>@EnableCaching</code> 注解启用缓存支持，Spring Boot 就会自动配置缓存设置。</p><p><strong>注意</strong></p><blockquote><p>有关更多详细信息，请查看 Spring Framework 参考文档的<a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/integration.html#cache" target="_blank" rel="noopener">相关部分</a>。</p></blockquote><p>简而言之，为服务添加缓存的操作就像在其方法中添加注解一样简单，如下所示：</p><pre><code>import org.springframework.cache.annotation.Cacheable;import org.springframework.stereotype.Component;@Componentpublic class MathService {    @Cacheable(&quot;piDecimals&quot;)    public int computePiDecimal(int i) {        // ...    }}</code></pre><p>此示例展示了如何在代价可能高昂的操作上使用缓存。在调用 <code>computePiDecimal</code> 之前，缓存支持会在 <code>piDecimals</code> 缓存中查找与 <code>i</code> 参数匹配的项。如果找到，则缓存中的内容会立即返回给调用者，并不会调用该方法。否则，将调用该方法，并在返回值之前更新缓存。</p><p><strong>注意</strong></p><blockquote><p>您还可以使用标准 JSR-107（JCache）注解（例如 <code>@CacheResult</code>）。但是，我们强烈建议您<strong>不要</strong>将 Spring Cache 和 JCache 注解混合使用。</p></blockquote><p>如果您不添加任何指定的缓存库，Spring Boot 会自动配置一个使用并发 map 的 <a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-caching-provider-simple" target="_blank" rel="noopener">simple provider</a>。当需要缓存时（例如前面示例中的 <code>piDecimals</code>），该 simple provider 会为您创建缓存。不推荐将 simple provider 用于生产环境，但它非常适合入门并帮助您了解这些功能。当您决定使用缓存提供者时，请务必阅读其文档以了解如何配置应用程序。几乎所有提供者都要求您显式配置应用程序中使用的每个缓存。有些提供了自定义 <code>spring.cache.cache-names</code> 属性以定义默认缓存。</p><p><strong>提示</strong></p><blockquote><p>还可以透明地<a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/integration.html#cache-annotations-put" target="_blank" rel="noopener">更新</a>或<a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/integration.html#cache-annotations-evict" target="_blank" rel="noopener">回收</a>缓存中的数据。</p></blockquote><h3 id="32-1、支持的缓存提供者"><a href="#32-1、支持的缓存提供者" class="headerlink" title="32.1、支持的缓存提供者"></a>32.1、支持的缓存提供者</h3><p>缓存抽象不提供存储实现，其依赖于 <code>org.springframework.cache.Cache</code> 和 <code>org.springframework.cache.CacheManager</code> 接口实现的抽象。</p><p>如果您未定义 <code>CacheManager</code> 类型的 bean 或名为 <code>cacheResolver</code> 的 <code>CacheResolver</code>（请参阅 <a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/javadoc-api/org/springframework/cache/annotation/CachingConfigurer.html" target="_blank" rel="noopener"><code>CachingConfigurer</code></a>），则 Spring Boot 会尝试检测以下提供者（按序号顺序）：</p><ol><li><a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-caching-provider-generic" target="_blank" rel="noopener">Generic</a></li><li><a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-caching-provider-jcache" target="_blank" rel="noopener">JCache (JSR-107)</a>(EhCache 3、Hazelcast、Infinispan 或其他)</li><li><a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-caching-provider-ehcache2" target="_blank" rel="noopener">EhCache 2.x</a></li><li><a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-caching-provider-hazelcast" target="_blank" rel="noopener">Hazelcast</a></li><li><a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-caching-provider-infinispan" target="_blank" rel="noopener">Infinispan</a></li><li><a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-caching-provider-couchbase" target="_blank" rel="noopener">Couchbase</a></li><li><a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-caching-provider-redis" target="_blank" rel="noopener">Redis</a> 8 <a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-caching-provider-caffeine" target="_blank" rel="noopener">Caffeine</a></li><li><a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-caching-provider-simple" target="_blank" rel="noopener">Simple</a></li></ol><p><strong>提示</strong></p><blockquote><p>也可以通过设置 <code>spring.cache.type</code> 属性来强制指定缓存提供者。如果您需要在某些环境（比如测试）中<a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-caching-provider-none" target="_blank" rel="noopener">完全禁用缓存</a>，请使用此属性。</p></blockquote><p><strong>提示</strong></p><blockquote><p>使用 <code>spring-boot-starter-cache</code> starter 快速添加基本的缓存依赖。starter 引入了 <code>spring-context-support</code>。如果手动添加依赖，则必须包含 <code>spring-context-support</code> 才能使用 JCache、EhCache 2.x 或 Guava 支持。</p></blockquote><p>如果通过 Spring Boot 自动配置 <code>CacheManager</code>，则可以通过暴露一个实现了 <code>CacheManagerCustomizer</code> 接口的 bean，在完全初始化之前进一步调整其配置。以下示例设置了一个 flag，表示应将 null 值传递给底层 map：</p><pre><code>@Beanpublic CacheManagerCustomizer&lt;ConcurrentMapCacheManager&gt; cacheManagerCustomizer() {    return new CacheManagerCustomizer&lt;ConcurrentMapCacheManager&gt;() {        @Override        public void customize(ConcurrentMapCacheManager cacheManager) {            cacheManager.setAllowNullValues(false);        }    };}</code></pre><p><strong>注意</strong></p><blockquote><p>在前面示例中，需要一个自动配置的 <code>ConcurrentMapCacheManager</code>。如果不是这种情况（您提供了自己的配置或自动配置了不同的缓存提供者），则根本不会调用 customizer。您可以拥有多个 customizer，也可以使用 <code>@Order</code> 或 <code>Ordered</code> 来排序它们。</p></blockquote><h4 id="32-1-1、Generic"><a href="#32-1-1、Generic" class="headerlink" title="32.1.1、Generic"></a>32.1.1、Generic</h4><p>如果上下文定义了<strong>至少</strong>一个 <code>org.springframework.cache.Cache</code> bean，则使用 Generic 缓存。将创建一个包装所有该类型 bean 的 <code>CacheManager</code>。</p><h4 id="32-1-2、JCache-JSR-107"><a href="#32-1-2、JCache-JSR-107" class="headerlink" title="32.1.2、JCache (JSR-107)"></a>32.1.2、JCache (JSR-107)</h4><p><a href="https://jcp.org/en/jsr/detail?id=107" target="_blank" rel="noopener">JCache</a> 通过 classpath 上的 <code>javax.cache.spi.CachingProvider</code>（即 classpath 上存在符合 JSR-107 的缓存库）来引导，<code>jCacheCacheManager</code> 由 <code>spring-boot-starter-cache</code> starter 提供。您可以使用各种兼容库，Spring Boot 为 Ehcache 3、Hazelcast 和 Infinispan 提供依赖管理。您还可以添加任何其他兼容库。</p><p>可能存在多个提供者，在这种情况下必须明确指定提供者。即使 JSR-107 标准没有强制规定一个定义配置文件位置的标准化方法，Spring Boot 也会尽其所能设置一个包含实现细节的缓存，如下所示：</p><pre><code># 存在多个 provider 才需要这样做spring.cache.jcache.provider=com.acme.MyCachingProviderspring.cache.jcache.config=classpath:acme.xml</code></pre><p><strong>注意</strong></p><blockquote><p>当缓存库同时提供原生实现和 JSR-107 支持时，Spring Boot 更倾向 JSR-107 支持，因此当您切换到不同的 JSR-107 实现时，还可以使用相同的功能。</p></blockquote><p><strong>提示</strong></p><blockquote><p>Spring Boot 对 <a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-hazelcast" target="_blank" rel="noopener">Hazelcast</a> 的支持一般。如果有一个 <code>HazelcastInstance</code> 可用，它也会自动为 <code>CacheManager</code> 复用，除非指定了 <code>spring.cache.jcache.config</code> 属性。</p></blockquote><p>有两种方法可以自定义底层的 <code>javax.cache.cacheManager</code>：</p><ul><li>可以通过设置 <code>spring.cache.cache-names</code> 属性在启动时创建缓存。如果定义了自定义 <code>javax.cache.configuration.Configuration</code> bean，则会使用它来自定义。</li><li>使用 <code>CacheManager</code> 的引用调用 <code>org.springframework.boot.autoconfigure.cache.JCacheManagerCustomizer</code> bean 以进行完全自定义。</li></ul><p><strong>提示</strong></p><blockquote><p>如果定义了一个标准的 <code>javax.cache.CacheManager</code> bean，它将自动包装进一个抽象所需的 <code>org.springframework.cache.CacheManager</code> 实现中，而不会应用自定义配置。</p></blockquote><h4 id="32-1-3、EhCache-2-x"><a href="#32-1-3、EhCache-2-x" class="headerlink" title="32.1.3、EhCache 2.x"></a>32.1.3、EhCache 2.x</h4><p>如果可以在 classpath 的根目录中找到名为 <code>ehcache.xml</code> 的文件，则使用 EhCache 2.x。如果找到 EhCache 2.x，则使用 <code>spring-boot-starter-cache</code> starter 提供的 <code>EhCacheCacheManager</code> 来启动缓存管理器。还可以提供其他配置文件，如下所示：</p><pre><code>spring.cache.ehcache.config=classpath:config/another-config.xml</code></pre><h4 id="32-1-4、Hazelcast"><a href="#32-1-4、Hazelcast" class="headerlink" title="32.1.4、Hazelcast"></a>32.1.4、Hazelcast</h4><p>Spring Boot 对 <a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-hazelcast" target="_blank" rel="noopener">Hazelcast</a> 的支持一般。如果自动配置了一个 <code>HazelcastInstance</code>，它将自动包装进 <code>CacheManager</code> 中。</p><h4 id="32-1-5、Infinispan"><a href="#32-1-5、Infinispan" class="headerlink" title="32.1.5、Infinispan"></a>32.1.5、Infinispan</h4><p><a href="http://infinispan.org/" target="_blank" rel="noopener">Infinispan</a> 没有默认的配置文件位置，因此必须明确指定。否则将使用默认配置引导。</p><pre><code>spring.cache.infinispan.config=infinispan.xml</code></pre><p>可以通过设置 <code>spring.cache.cache-names</code> 属性在启动时创建缓存。如果定义了自定义 <code>ConfigurationBuilder</code> bean，则它将用于自定义缓存。</p><p><strong>注意</strong></p><blockquote><p>Infinispan 在 Spring Boot 中的支持仅限于内嵌模式，非常简单。如果你想要更多选项，你应该使用官方的 Infinispan Spring Boot starter。有关更多详细信息，请参阅 <a href="https://github.com/infinispan/infinispan-spring-boot" target="_blank" rel="noopener">Infinispan 文档</a>。</p></blockquote><h4 id="32-1-6、Couchbase"><a href="#32-1-6、Couchbase" class="headerlink" title="32.1.6、Couchbase"></a>32.1.6、Couchbase</h4><p>如果 <a href="https://www.couchbase.com/" target="_blank" rel="noopener">Couchbase</a> Java 客户端和 <code>couchbase-spring-cache</code> 实现可用且已经<a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-couchbase" target="_blank" rel="noopener">配置</a>了 Couchbase，则应用程序会自动配置一个 <code>CouchbaseCacheManager</code>。也可以通过设置 <code>spring.cache.cache-names</code> 属性在启动时创建其他缓存。这些缓存在自动配置的 Bucket 上操作。您<strong>还</strong>可以使用 customizer 在其他 <code>Bucket</code> 上创建缓存。假设您需要在 <strong>main</strong> <code>Bucket</code> 上有两个缓存（<code>cache1</code> 和 <code>cache2</code>），并且 <strong>another</strong> <code>Bucket</code> 有一个过期时间为 2 秒的缓存（<code>cache3</code>）。您可以通过配置创建这两个缓存，如下所示：</p><pre><code>spring.cache.cache-names=cache1,cache2</code></pre><p>然后，您可以定义一个 <code>@Configuration</code> 类来配置其他 <code>Bucket</code> 和 <code>cache3</code> 缓存，如下所示：</p><pre><code>@Configurationpublic class CouchbaseCacheConfiguration {    private final Cluster cluster;    public CouchbaseCacheConfiguration(Cluster cluster) {        this.cluster = cluster;    }    @Bean    public Bucket anotherBucket() {        return this.cluster.openBucket(&quot;another&quot;, &quot;secret&quot;);    }    @Bean    public CacheManagerCustomizer&lt;CouchbaseCacheManager&gt; cacheManagerCustomizer() {        return c -&gt; {            c.prepareCache(&quot;cache3&quot;, CacheBuilder.newInstance(anotherBucket())                    .withExpiration(2));        };    }}</code></pre><p>此示例配置复用了通过自动配置创建的 <code>Cluster</code>。</p><h4 id="32-1-7、Redis"><a href="#32-1-7、Redis" class="headerlink" title="32.1.7、Redis"></a>32.1.7、Redis</h4><p>如果 <a href="http://redis.io/" target="_blank" rel="noopener">Redis</a> 可用并已经配置，则应用程序会自动配置一个 <code>RedisCacheManager</code>。通过设置 <code>spring.cache.cache-names</code> 属性可以在启动时创建其他缓存，并且可以使用 <code>spring.cache.redis.*</code> 属性配置缓存默认值。例如，以下配置创建 <code>cache1</code> 和 <code>cache2</code> 缓存，他们的<strong>有效时间</strong>为 10 分钟：</p><pre><code>spring.cache.cache-names=cache1,cache2spring.cache.redis.time-to-live=600000</code></pre><p><strong>注意</strong></p><blockquote><p>默认情况下，会添加一个 key 前缀，这样做是因为如果两个单独的缓存使用了相同的键，Redis 不支持重叠 key，而缓存也不能返回无效值。如果您创建自己的 <code>RedisCacheManager</code>，我们强烈建议您启用此设置。</p></blockquote><p><strong>提示</strong></p><blockquote><p>您可以通过添加自己的 <code>RedisCacheConfiguration</code> <code>@Bean</code> 来完全控制配置。如果您想自定义序列化策略，这种方式可能很有用。</p></blockquote><h4 id="32-1-8、Caffeine"><a href="#32-1-8、Caffeine" class="headerlink" title="32.1.8、Caffeine"></a>32.1.8、Caffeine</h4><p><a href="https://github.com/ben-manes/caffeine" target="_blank" rel="noopener">Caffeine</a> 是一个使用了 Java 8 重写 Guava 缓存，用于取代 Guava 支持的缓存库。如果 Caffeine 存在，则应用程序会自动配置一个 <code>CaffeineCacheManager</code>（由 <code>spring-boot-starter-cache</code> starter 提供）。可以通过设置 <code>spring.cache.cache-names</code> 属性在启动时创建缓存，并且可以通过以下方式之一（按序号顺序）自定义缓存：</p><ol><li>一个由 <code>spring.cache.caffeine.spec</code> 定义的缓存规范</li><li>一个已定义的 <code>com.github.benmanes.caffeine.cache.CaffeineSpec</code> bean</li><li>一个已定义的 <code>com.github.benmanes.caffeine.cache.Caffeine</code> bean</li></ol><p>例如，以下配置创建 <code>cache1</code> 和 <code>cache2</code> 缓存，最大大小为 500，<strong>有效时间</strong> 为 10 分钟：</p><pre><code>spring.cache.cache-names=cache1,cache2spring.cache.caffeine.spec=maximumSize=500,expireAfterAccess=600s</code></pre><p>如果定义了 <code>com.github.benmanes.caffeine.cache.CacheLoader</code> bean，它将自动与 <code>CaffeineCacheManager</code> 关联。由于 <code>CacheLoader</code> 将与缓存管理器管理的<strong>所有</strong>缓存相关联，因此必须将其定义为 <code>CacheLoader&lt;Object, Object&gt;</code>。自动配置会忽略所有其他泛型类型。</p><h4 id="32-1-9、Simple"><a href="#32-1-9、Simple" class="headerlink" title="32.1.9、Simple"></a>32.1.9、Simple</h4><p>如果找不到其他提供者，则配置使用一个 <code>ConcurrentHashMap</code> 作为缓存存储的简单实现。如果您的应用程序中没有缓存库，则该项为默认值。默认情况下，会根据需要创建缓存，但您可以通过设置 <code>cache-names</code> 属性来限制可用缓存的列表。例如，如果只需要 <code>cache1</code> 和 <code>cache2</code> 缓存，请按如下设置 <code>cache-names</code> 属性：</p><pre><code>spring.cache.cache-names=cache1,cache2</code></pre><p>如果这样做了，并且您的应用程序使用了未列出的缓存，则运行时在它需要缓存时会触发失败，但在启动时则不会。这类似于<strong>真实</strong>缓存提供者在使用未声明的缓存时触发的行为方式。</p><h4 id="32-1-10、None"><a href="#32-1-10、None" class="headerlink" title="32.1.10、None"></a>32.1.10、None</h4><p>当配置中存在 <code>@EnableCaching</code> 时，也需要合适的缓存配置。如果需要在某些环境中完全禁用缓存，请将缓存类型强制设置为 <code>none</code> 以使用 no-op 实现，如下所示：</p><pre><code>spring.cache.type=none</code></pre><h2 id="33、消息传递"><a href="#33、消息传递" class="headerlink" title="33、消息传递"></a>33、消息传递</h2><p>Spring Framework 为消息传递系统集成提供了广泛的支持，从使用 <code>JmsTemplate</code> 简化 JMS API 的使用到异步接收消息的完整基础设施。Spring AMQP 为高级消息队列协议（Advanced Message Queuing Protocol，AMQP）提供了类似的功能集合。Spring Boot 还为 <code>RabbitTemplate</code> 和 RabbitMQ 提供自动配置选项。Spring WebSocket 本身包含了对 STOMP 消息传递的支持，Spring Boot 通过 starter 和少量自动配置即可支持它。Spring Boot 同样支持 Apache Kafka。</p><h3 id="33-1、JMS"><a href="#33-1、JMS" class="headerlink" title="33.1、JMS"></a>33.1、JMS</h3><p><code>javax.jms.ConnectionFactory</code> 接口提供了一种创建 <code>javax.jms.Connection</code> 的标准方法，可与 JMS broker（代理）进行交互。虽然 Spring 需要一个 <code>ConnectionFactory</code> 来与 JMS 一同工作，但是您通常不需要自己直接使用它，而是可以依赖更高级别的消息传递抽象。（有关详细信息，请参阅 Spring Framework 参考文档的<a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/integration.html#jms" target="_blank" rel="noopener">相关部分</a>。）Spring Boot 还会自动配置发送和接收消息所需的基础设施。</p><h4 id="33-1-1、ActiveMQ-支持"><a href="#33-1-1、ActiveMQ-支持" class="headerlink" title="33.1.1、ActiveMQ 支持"></a>33.1.1、ActiveMQ 支持</h4><p>当 <a href="http://activemq.apache.org/" target="_blank" rel="noopener">ActiveMQ</a> 在 classpath 上可用时，Spring Boot 也可以配置一个 <code>ConnectionFactory</code>。如果 broker 存在，则会自动启动并配置一个内嵌式 broker（前提是未通过配置指定 broder URL）。</p><p><strong>注意</strong></p><blockquote><p>如果使用 <code>spring-boot-starter-activemq</code>，则提供了连接到 ActiveMQ 实例必须依赖或内嵌一个 ActiveMQ 实例，以及与 JMS 集成的 Spring 基础设施。</p></blockquote><p>ActiveMQ 配置由 <code>spring.activemq.*</code> 中的外部配置属性控制。例如，您可以在 <code>application.properties</code> 中声明以下部分：</p><pre><code>spring.activemq.broker-url=tcp://192.168.1.210:9876spring.activemq.user=adminspring.activemq.password=secret</code></pre><p>默认情况下，<code>CachingConnectionFactory</code> 将原生的 <code>ConnectionFactory</code> 使用可由 <code>spring.jms.*</code> 中的外部配置属性控制的合理设置包装起来：</p><pre><code>spring.jms.cache.session-cache-size=5</code></pre><p>如果您更愿意使用原生池，则可以通过向 <code>org.messaginghub:pooled-jms</code> 添加一个依赖并相应地配置 <code>JmsPoolConnectionFactory</code> 来实现，如下所示：</p><pre><code>spring.activemq.pool.enabled=truespring.activemq.pool.max-connections=50</code></pre><p><strong>提示</strong></p><blockquote><p>有关更多支持的选项，请参阅 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQProperties.java" target="_blank" rel="noopener"><code>ActiveMQProperties</code></a>。您还可以注册多个实现了 <code>ActiveMQConnectionFactoryCustomizer</code> 的的 bean，以进行更高级的自定义。</p></blockquote><p>默认情况下，ActiveMQ 会创建一个 destination（目标）（如果它尚不存在），以便根据提供的名称解析 destination。</p><h4 id="33-1-2、Artemis-支持"><a href="#33-1-2、Artemis-支持" class="headerlink" title="33.1.2、Artemis 支持"></a>33.1.2、Artemis 支持</h4><p>Spring Boot 可以在检测到 <a href="http://activemq.apache.org/artemis/" target="_blank" rel="noopener">Artemis</a> 在 classpath 上可用时自动配置一个 <code>ConnectionFactory</code>。如果存在 broker，则会自动启动并配置一个内嵌 broker（除非已明确设置 mode 属性）。支持的 mode 为 <code>embedded</code>（明确表示需要一个内嵌 broker，如果 broker 在 classpath 上不可用则发生错误）和 <code>native</code>（使用 netty 传输协议连接到 broker）。配置后者后，Spring Boot 会使用默认设置配置一个 <code>ConnectionFactory</code>，该 <code>ConnectionFactory</code> 连接到在本地计算机上运行的 broker。</p><p><strong>注意</strong></p><blockquote><p>如果使用了 <code>spring-boot-starter-artemis</code>，则会提供连接到现有的 Artemis 实例的必须依赖，以及与 JMS 集成的Spring 基础设施。将 <code>org.apache.activemq:artemis-jms-server</code> 添加到您的应用程序可让您使用内嵌模式。</p></blockquote><p>Artemis 配置由 <code>spring.artemis.*</code> 中的外部配置属性控制。例如，您可以在 <code>application.properties</code> 中声明以下部分：</p><pre><code>spring.artemis.mode=nativespring.artemis.host=192.168.1.210spring.artemis.port=9876spring.artemis.user=adminspring.artemis.password=secret</code></pre><p>内嵌 broker 时，您可以选择是否要启用持久化并列出应该可用的 destination。可以将这些指定为以逗号分隔的列表，以使用默认选项创建它们，也可以定义类型为 <code>org.apache.activemq.artemis.jms.server.config.JMSQueueConfiguration</code> 或 <code>org.apache.activemq.artemis.jms.server.config.TopicConfiguration</code> 的 bean，分别用于高级队列和 topic（主题）配置。</p><p>默认情况下，<code>CachingConnectionFactory</code> 将原生的 <code>ConnectionFactory</code> 使用可由 <code>spring.jms.*</code> 中的外部配置属性控制的合理设置包装起来：</p><pre><code>spring.jms.cache.session-cache-size=5</code></pre><p>如果您更愿意使用原生池，则可以通过向 <code>org.messaginghub:pooled-jms</code> 添加一个依赖并相应地配置 <code>JmsPoolConnectionFactory</code> 来实现，如下所示：</p><pre><code>spring.artemis.pool.enabled=truespring.artemis.pool.max-connections=50</code></pre><p>有关更多支持的选项，请参阅 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisProperties.java" target="_blank" rel="noopener"><code>ArtemisProperties</code></a>。</p><p>不涉及 JNDI 查找，使用 Artemis 配置中的 <code>name</code> 属性或通过配置提供的名称来解析目标（destination）名称。</p><h4 id="33-1-3、使用-JNDI-ConnectionFactory"><a href="#33-1-3、使用-JNDI-ConnectionFactory" class="headerlink" title="33.1.3、使用 JNDI ConnectionFactory"></a>33.1.3、使用 JNDI ConnectionFactory</h4><p>如果您在应用程序服务器中运行应用程序，Spring Boot 会尝试使用 JNDI 找到 JMS <code>ConnectionFactory</code>。默认情况下，将检查 <code>java:/JmsXA</code> 和 <code>java:/XAConnectionFactory</code> 这两个位置。如果需要指定其他位置，可以使用 <code>spring.jms.jndi-name</code> 属性，如下所示：</p><pre><code>spring.jms.jndi-name=java:/MyConnectionFactory</code></pre><h4 id="33-1-4、发送消息"><a href="#33-1-4、发送消息" class="headerlink" title="33.1.4、发送消息"></a>33.1.4、发送消息</h4><p>Spring 的 <code>JmsTemplate</code> 是自动配置的，你可以直接将它注入到你自己的 bean 中，如下所示：</p><pre><code>import org.springframework.beans.factory.annotation.Autowired;import org.springframework.jms.core.JmsTemplate;import org.springframework.stereotype.Component;@Componentpublic class MyBean {    private final JmsTemplate jmsTemplate;    @Autowired    public MyBean(JmsTemplate jmsTemplate) {        this.jmsTemplate = jmsTemplate;    }    // ...}</code></pre><p><strong>注意</strong></p><blockquote><p><code>JmsMessagingTemplate</code> 可以以类似的方式注入。如果定义了 <code>DestinationResolver</code> 或 <code>MessageConverter</code> bean，它将自动关联到自动配置的 <code>JmsTemplate</code>。</p></blockquote><h4 id="33-1-5、接收消息"><a href="#33-1-5、接收消息" class="headerlink" title="33.1.5、接收消息"></a>33.1.5、接收消息</h4><p>当存在 JMS 基础设施时，可以使用 <code>@JmsListener</code> 对任何 bean 进行注解以创建监听器（listener）端点。如果未定义 <code>JmsListenerContainerFactory</code>，则会自动配置一个默认的（factory）。如果定义了 <code>DestinationResolver</code> 或 <code>MessageConverter</code> bean，它将自动关联到默认的 factory。</p><p>默认情况下，默认 factory 是具有事务特性的。如果您在存在有 <code>JtaTransactionManager</code> 的基础设施中运行，则默认情况下它与监听器容器相关联。如果不是，则 <code>sessionTransacted</code> flag 将为启用（enabled）。在后一种情况下，您可以通过在监听器方法（或其委托）上添加 <code>@Transactional</code>，将本地数据存储事务与传入消息的处理相关联。这确保了在本地事务完成后传入消息能被告知。这还包括了发送已在同一 JMS 会话上执行的响应消息。</p><p>以下组件在 <code>someQueue</code> destination 上创建一个监听器端点：</p><pre><code>@Componentpublic class MyBean {    @JmsListener(destination = &quot;someQueue&quot;)    public void processMessage(String content) {        // ...    }}</code></pre><p><strong>提示</strong></p><blockquote><p>有关更多详细信息，请参阅 <a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/javadoc-api/org/springframework/jms/annotation/EnableJms.html" target="_blank" rel="noopener"><code>@EnableJms</code> 的 Javadoc</a>。</p></blockquote><p>如果需要创建更多 <code>JmsListenerContainerFactory</code> 实例或覆盖缺省值，Spring Boot 会提供一个 <code>DefaultJmsListenerContainerFactoryConfigurer</code>，您可以使用它来初始化 <code>DefaultJmsListenerContainerFactory</code>，其设置与自动配置的 factory 设置相同。</p><p>例如，以下示例暴露了另一个使用特定 <code>MessageConverter</code> 的 factory：</p><pre><code>@Configurationstatic class JmsConfiguration {    @Bean    public DefaultJmsListenerContainerFactory myFactory(            DefaultJmsListenerContainerFactoryConfigurer configurer) {        DefaultJmsListenerContainerFactory factory =                new DefaultJmsListenerContainerFactory();        configurer.configure(factory, connectionFactory());        factory.setMessageConverter(myMessageConverter());        return factory;    }}</code></pre><p>然后，您可以在任何 <code>@JmsListener</code> 注解的方法中使用该 factory，如下所示：</p><pre><code>@Componentpublic class MyBean {    @JmsListener(destination = &quot;someQueue&quot;, containerFactory=&quot;myFactory&quot;)    public void processMessage(String content) {        // ...    }}</code></pre><h3 id="33-2、AMQP"><a href="#33-2、AMQP" class="headerlink" title="33.2、AMQP"></a>33.2、AMQP</h3><p>高级消息队列协议（Advanced Message Queuing Protocol，AMQP）是一个平台无关，面向消息中间件的连接级协议。Spring AMQP 项目将核心 Spring 概念应用于基于 AMQP 消息传递解决方案的开发。Spring Boot 为通过 RabbitMQ 使用 AMQP 提供了一些快捷方法，包括 <code>spring-boot-starter-amqp</code> starter。</p><h4 id="33-2-1、RabbitMQ-支持"><a href="#33-2-1、RabbitMQ-支持" class="headerlink" title="33.2.1、RabbitMQ 支持"></a>33.2.1、RabbitMQ 支持</h4><p><a href="https://www.rabbitmq.com/" target="_blank" rel="noopener">RabbitMQ</a> 是一个基于 AMQP 协议的轻量级、可靠、可扩展且可移植的消息代理。Spring 使用 RabbitMQ 通过 AMQP 协议进行通信。</p><p>RabbitMQ 配置由 <code>spring.rabbitmq.*</code> 中的外部配置属性控制。例如，您可以在 <code>application.properties</code> 中声明以下部分：</p><pre><code>spring.rabbitmq.host=localhostspring.rabbitmq.port=5672spring.rabbitmq.username=adminspring.rabbitmq.password=secret</code></pre><p>如果上下文中存在 <code>ConnectionNameStrategy</code> bean，它将自动用于命名由自动配置的 <code>ConnectionFactory</code> 所创建的连接。有关更多支持的选项，请参阅 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java" target="_blank" rel="noopener">RabbitProperties</a>。</p><p><strong>提示</strong></p><blockquote><p>有关详细信息，请参阅<a href="https://spring.io/blog/2010/06/14/understanding-amqp-the-protocol-used-by-rabbitmq/" target="_blank" rel="noopener">理解 AMQP、RabbitMQ 使用的协议</a>。</p></blockquote><h4 id="33-2-2、发送消息"><a href="#33-2-2、发送消息" class="headerlink" title="33.2.2、发送消息"></a>33.2.2、发送消息</h4><p>Spring 的 <code>AmqpTemplate</code> 和 <code>AmqpAdmin</code> 是自动配置的，您可以将它们直接注入自己的 bean 中，如下所示：</p><pre><code>import org.springframework.amqp.core.AmqpAdmin;import org.springframework.amqp.core.AmqpTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;@Componentpublic class MyBean {    private final AmqpAdmin amqpAdmin;    private final AmqpTemplate amqpTemplate;    @Autowired    public MyBean(AmqpAdmin amqpAdmin, AmqpTemplate amqpTemplate) {        this.amqpAdmin = amqpAdmin;        this.amqpTemplate = amqpTemplate;    }    // ...}</code></pre><p><strong>注意</strong></p><blockquote><p>RabbitMessagingTemplate 可以以类似的方式注入。如果定义了 <code>MessageConverter</code> bean，它将自动关联到自动配置的 <code>AmqpTemplate</code>。</p></blockquote><p>如有必要，所有定义为 bean 的 <code>org.springframework.amqp.core.Queue</code> 都会自动在 RabbitMQ 实例上声明相应的队列。</p><p>要重试操作，可以在 <code>AmqpTemplate</code> 上启用重试（例如，在 broker 连接丢失的情况下）：</p><pre><code>spring.rabbitmq.template.retry.enabled=truespring.rabbitmq.template.retry.initial-interval=2s</code></pre><p>默认情况下禁用重试。您还可以通过声明 <code>RabbitRetryTemplateCustomizer</code> bean 以编程方式自定义 <code>RetryTemplate</code>。</p><h4 id="33-2-3、接收消息"><a href="#33-2-3、接收消息" class="headerlink" title="33.2.3、接收消息"></a>33.2.3、接收消息</h4><p>当 Rabbit 基础设施存在时，可以使用 <code>@RabbitListener</code> 注解任何 bean 以创建监听器端点。如果未定义 <code>RabbitListenerContainerFactory</code>，则会自动配置一个默认的 <code>SimpleRabbitListenerContainerFactory</code>，您可以使用 <code>spring.rabbitmq.listener.type</code> 属性切换到一个直接容器。如果定义了 <code>MessageConverter</code> 或 <code>MessageRecoverer</code> bean，它将自动与默认 factory 关联。</p><p>以下示例组件在 <code>someQueue</code> 队列上创建一个侦听监听器端点：</p><pre><code>@Componentpublic class MyBean {    @RabbitListener(queues = &quot;someQueue&quot;)    public void processMessage(String content) {        // ...    }}</code></pre><p><strong>提示</strong></p><blockquote><p>有关更多详细信息，请参阅 <a href="https://docs.spring.io/spring-amqp/docs/current/api/org/springframework/amqp/rabbit/annotation/EnableRabbit.html" target="_blank" rel="noopener"><code>@EnableRabbit</code> 的 Javadoc</a>。</p></blockquote><p>如果需要创建更多 <code>RabbitListenerContainerFactory</code> 实例或覆盖缺省值，Spring Boot 提供了一个 <code>SimpleRabbitListenerContainerFactoryConfigurer</code> 和一个 <code>DirectRabbitListenerContainerFactoryConfigurer</code>，您可以使用它来初始化 <code>SimpleRabbitListenerContainerFactory</code> 和 <code>DirectRabbitListenerContainerFactory</code>，其设置与使用自动配置的 factory 相同。</p><p><strong>提示</strong></p><blockquote><p>这两个 bean 与您选择的容器类型没有关系，它们通过自动配置暴露。</p></blockquote><p>例如，以下配置类暴露了另一个使用特定 <code>MessageConverter</code> 的 factory：</p><pre><code>@Configurationstatic class RabbitConfiguration {    @Bean    public SimpleRabbitListenerContainerFactory myFactory(            SimpleRabbitListenerContainerFactoryConfigurer configurer) {        SimpleRabbitListenerContainerFactory factory =                new SimpleRabbitListenerContainerFactory();        configurer.configure(factory, connectionFactory);        factory.setMessageConverter(myMessageConverter());        return factory;    }}</code></pre><p>然后，您可以在任何 <code>@RabbitListener</code> 注解的方法中使用该 factory，如下所示：</p><pre><code>@Componentpublic class MyBean {    @RabbitListener(queues = &quot;someQueue&quot;, containerFactory=&quot;myFactory&quot;)    public void processMessage(String content) {        // ...    }}</code></pre><p>您可以启用重试机制来处理监听器的异常抛出情况。默认情况下使用 <code>RejectAndDontRequeueRecoverer</code>，但您可以定义自己的 <code>MessageRecoverer</code>。如果 broker 配置了重试机制，当重试次数耗尽时，则拒绝消息并将其丢弃或路由到死信（dead-letter）exchange 中。默认情况下重试机制为禁用。您还可以通过声明 <code>RabbitRetryTemplateCustomizer</code> bean 以编程方式自定义 <code>RetryTemplate</code>。</p><p><strong>重要</strong></p><blockquote><p>默认情况下，如果禁用重试并且监听器异常抛出，则会无限期地重试传递。您可以通过两种方式修改此行为：将 <code>defaultRequeueRejected</code> 属性设置为 <code>false</code>，以便尝试零重传或抛出 <code>AmqpRejectAndDontRequeueException</code> 以指示拒绝该消息。后者是启用重试并且达到最大传递尝试次数时使用的机制。</p></blockquote><h3 id="33-3、Apache-Kafka-支持"><a href="#33-3、Apache-Kafka-支持" class="headerlink" title="33.3、Apache Kafka 支持"></a>33.3、Apache Kafka 支持</h3><p>通过提供 <code>spring-kafka</code> 项目的自动配置来支持 <a href="https://kafka.apache.org/" target="_blank" rel="noopener">Apache Kafka</a>。</p><p>Kafka 配置由 <code>spring.kafka.*</code> 中的外部配置属性控制。例如，您可以在 <code>application.properties</code> 中声明以下部分：</p><pre><code>spring.kafka.bootstrap-servers=localhost:9092spring.kafka.consumer.group-id=myGroup</code></pre><p><strong>提示</strong></p><blockquote><p>要在启动时创建主题（topic），请添加 <code>NewTopic</code> 类型的 Bean。如果主题已存在，则忽略该 bean。</p></blockquote><p>有关更多支持的选项，请参阅 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java" target="_blank" rel="noopener"><code>KafkaProperties</code></a>。</p><h4 id="33-3-1、发送消息"><a href="#33-3-1、发送消息" class="headerlink" title="33.3.1、发送消息"></a>33.3.1、发送消息</h4><p>Spring 的 <code>KafkaTemplate</code> 是自动配置的，您可以直接在自己的 bean 中装配它，如下所示：</p><pre><code>@Componentpublic class MyBean {    private final KafkaTemplate kafkaTemplate;    @Autowired    public MyBean(KafkaTemplate kafkaTemplate) {        this.kafkaTemplate = kafkaTemplate;    }    // ...}</code></pre><p><strong>注意</strong></p><blockquote><p>如果定义了属性 <code>spring.kafka.producer.transaction-id-prefix</code>，则会自动配置一个 <code>KafkaTransactionManager</code>。此外，如果定义了 <code>RecordMessageConverter</code> bean，它将自动关联到自动配置的 <code>KafkaTemplate</code>。</p></blockquote><h4 id="33-3-2、接收消息"><a href="#33-3-2、接收消息" class="headerlink" title="33.3.2、接收消息"></a>33.3.2、接收消息</h4><p>当存在 Apache Kafka 基础设施时，可以使用 <code>@KafkaListener</code> 注解任何 bean 以创监听器端点。如果未定义 <code>KafkaListenerContainerFactory</code>，则会使用 <code>spring.kafka.listener.*</code> 中定义的 key 自动配置一个默认的 factory。</p><p>以下组件在 <code>someTopic</code> topic 上创建一个监听器端点：</p><pre><code>@Componentpublic class MyBean {    @KafkaListener(topics = &quot;someTopic&quot;)    public void processMessage(String content) {        // ...    }}</code></pre><p>如果定义了 <code>KafkaTransactionManager</code> bean，它将自动关联到容器 factory。同样，如果定义了 <code>RecordMessageConverter</code>、<code>ErrorHandler</code> 或 <code>AfterRollbackProcessor</code> bean，它将自动关联到默认的 factory。</p><p><strong>提示</strong></p><blockquote><p>自定义 <code>ChainedKafkaTransactionManager</code> 必须标记为 <code>@Primary</code>，因为它通常引用自动配置的 <code>KafkaTransactionManager</code> bean。</p></blockquote><h3 id="33-3-3、Kafka-Stream"><a href="#33-3-3、Kafka-Stream" class="headerlink" title="33.3.3、Kafka Stream"></a>33.3.3、Kafka Stream</h3><p>Spring for Apache Kafka 提供了一个工厂 bean 来创建 <code>StreamsBuilder</code> 对象并管理其 stream（流）的生命周期。只要 <code>kafka-streams</code> 在 classpath 上并且通过 <code>@EnableKafkaStreams</code> 注解启用了 Kafka Stream，Spring Boot 就会自动配置所需的 <code>KafkaStreamsConfiguration</code> bean。</p><p>启用 Kafka Stream 意味着必须设置应用程序 id 和引导服务器（bootstrap server）。可以使用 <code>spring.kafka.streams.application-id</code> 配置前者，如果未设置则默认为 <code>spring.application.name</code>。后者可以全局设置或专门为 stream 而重写。</p><p>使用专用 properties 可以设置多个其他属性，可以使用 <code>spring.kafka.streams.properties</code> 命名空间设置其他任意 Kafka 属性。有关更多信息，另请参见<a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-kafka-extra-props" target="_blank" rel="noopener">第 33.3.4 节：其他 Kafka 属性</a>。</p><p>要使用 factory bean，只需将 <code>StreamsBuilder</code> 装配到您的 <code>@Bean</code> 中，如下所示：</p><pre><code>@Configuration@EnableKafkaStreamsstatic class KafkaStreamsExampleConfiguration {    @Bean    public KStream&lt;Integer, String&gt; kStream(StreamsBuilder streamsBuilder) {        KStream&lt;Integer, String&gt; stream = streamsBuilder.stream(&quot;ks1In&quot;);        stream.map((k, v) -&gt; new KeyValue&lt;&gt;(k, v.toUpperCase())).to(&quot;ks1Out&quot;,                Produced.with(Serdes.Integer(), new JsonSerde&lt;&gt;()));        return stream;    }}</code></pre><p>默认情况下，由其创建的 <code>StreamBuilder</code> 对象管理的流会自动启动。您可以使用 <code>spring.kafka.streams.auto-startup</code> 属性自定义此行为。</p><h3 id="33-3-4、其他-Kafka-属性"><a href="#33-3-4、其他-Kafka-属性" class="headerlink" title="33.3.4、其他 Kafka 属性"></a>33.3.4、其他 Kafka 属性</h3><p>自动配置支持的属性可在<a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#common-application-properties" target="_blank" rel="noopener">附录 A、常见应用程序属性</a>中找到。请注意，在大多数情况下，这些属性（连接符或驼峰命名）直接映射到 Apache Kafka 点连形式属性。有关详细信息，请参阅 Apache Kafka 文档。</p><p>这些属性中的前几个适用于所有组件（生产者【producer】、使用者【consumer】、管理者【admin】和流【stream】），但如果您希望使用不同的值，则可以在组件级别指定。Apache Kafka 重要性（优先级）属性设定为 HIGH、MEDIUM 或 LOW。Spring Boot 自动配置支持所有 HIGH 重要性属性，一些选择的 MEDIUM 和 LOW 属性，以及所有没有默认值的属性。</p><p>只有 Kafka 支持的属性的子集可以直接通过 <code>KafkaProperties</code> 类获得。如果您希望使用不受支持的其他属性配置生产者或消费者，请使用以下属性：</p><pre><code>spring.kafka.properties.prop.one=firstspring.kafka.admin.properties.prop.two=secondspring.kafka.consumer.properties.prop.three=thirdspring.kafka.producer.properties.prop.four=fourthspring.kafka.streams.properties.prop.five=fifth</code></pre><p>这将常见的 <code>prop.one</code> Kafka 属性设置为 <code>first</code>（适用于生产者、消费者和管理者），<code>prop.two</code> 管理者属性为 <code>second</code>，<code>prop.three</code> 消费者属性为 <code>third</code>，<code>prop.four</code> 生产者属性为 <code>fourth</code>，<code>prop.five</code> 流属性为 <code>fifth</code>。</p><p>您还可以按如下方式配置 Spring Kafka <code>JsonDeserializer</code>：</p><pre><code>spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializerspring.kafka.consumer.properties.spring.json.value.default.type=com.example.Invoicespring.kafka.consumer.properties.spring.json.trusted.packages=com.example,org.acme</code></pre><p>同样，您可以禁用 <code>JsonSerializer</code> 在 header 中发送类型信息的默认行为：</p><pre><code>spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializerspring.kafka.producer.properties.spring.json.add.type.headers=false</code></pre><p><strong>重要</strong></p><blockquote><p>以这种方式设置的属性将覆盖 Spring Boot 明确支持的任何配置项。</p></blockquote><h2 id="34、使用-RestTemplate-调用-REST-服务"><a href="#34、使用-RestTemplate-调用-REST-服务" class="headerlink" title="34、使用 RestTemplate 调用 REST 服务"></a>34、使用 <code>RestTemplate</code> 调用 REST 服务</h2><p>如果您的应用程序需要调用远程 REST 服务，这可以使用 Spring Framework 的 <a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html" target="_blank" rel="noopener"><code>RestTemplate</code></a> 类。由于 <code>RestTemplate</code> 实例在使用之前通常需要进行自定义，因此 Spring Boot 不提供任何自动配置的 <code>RestTemplate</code> bean。但是，它会自动配置 <code>RestTemplateBuilder</code>，可在需要时创建 <code>RestTemplate</code> 实例。自动配置的 <code>RestTemplateBuilder</code> 确保将合适的 <code>HttpMessageConverters</code> 应用于 <code>RestTemplate</code> 实例。</p><p>以下代码展示了一个典型示例：</p><pre><code>@Servicepublic class MyService {    private final RestTemplate restTemplate;    public MyService(RestTemplateBuilder restTemplateBuilder) {        this.restTemplate = restTemplateBuilder.build();    }    public Details someRestCall(String name) {        return this.restTemplate.getForObject(&quot;/{name}/details&quot;, Details.class, name);    }}</code></pre><p><strong>提示</strong></p><blockquote><p><code>RestTemplateBuilder</code> 包含许多可用于快速配置 ·RestTemplate· 的方法。例如，要添加 BASIC auth 支持，可以使用 <code>builder.basicAuthentication(&quot;user&quot;, &quot;password&quot;).build()</code>。</p></blockquote><h3 id="34-1、自定义-RestTemplate"><a href="#34-1、自定义-RestTemplate" class="headerlink" title="34.1、自定义 RestTemplate"></a>34.1、自定义 RestTemplate</h3><p><code>RestTemplate</code> 自定义有三种主要方法，具体取决于您希望自定义的程度。</p><p>要想自定义的范围尽可能地窄，请注入自动配置的 <code>RestTemplateBuilder</code>，然后根据需要调用其方法。每个方法调用都返回一个新的 <code>RestTemplateBuilder</code> 实例，因此自定义只会影响当前构建器。</p><p>要在应用程序范围内添加自定义配置，请使用 <code>RestTemplateCustomizer</code> bean。所有这些 bean 都会自动注册到自动配置的 <code>RestTemplateBuilder</code>，并应用于使用它构建的所有模板。</p><p>以下示例展示了一个 customizer，它为除 <code>192.168.0.5</code> 之外的所有主机配置代理：</p><pre><code>static class ProxyCustomizer implements RestTemplateCustomizer {    @Override    public void customize(RestTemplate restTemplate) {        HttpHost proxy = new HttpHost(&quot;proxy.example.com&quot;);        HttpClient httpClient = HttpClientBuilder.create()                .setRoutePlanner(new DefaultProxyRoutePlanner(proxy) {                    @Override                    public HttpHost determineProxy(HttpHost target,                            HttpRequest request, HttpContext context)                            throws HttpException {                        if (target.getHostName().equals(&quot;192.168.0.5&quot;)) {                            return null;                        }                        return super.determineProxy(target, request, context);                    }                }).build();        restTemplate.setRequestFactory(                new HttpComponentsClientHttpRequestFactory(httpClient));    }}</code></pre><p>最后，最极端（也很少使用）的选择是创建自己的 <code>RestTemplateBuilder</code> bean。这样做会关闭 <code>RestTemplateBuilder</code> 的自动配置，并阻止使用任何 <code>RestTemplateCustomizer</code> bean。</p><h2 id="35、使用-WebClient-调用-REST-服务"><a href="#35、使用-WebClient-调用-REST-服务" class="headerlink" title="35、使用 WebClient 调用 REST 服务"></a>35、使用 <code>WebClient</code> 调用 REST 服务</h2><p>如果在 classpath 上存在 Spring WebFlux，则还可以选择使用 <code>WebClient</code> 来调用远程 REST 服务。与 <code>RestTemplate</code> 相比，该客户端更具函数式风格并且完全响应式。您可以在 <a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/web-reactive.html#webflux-client" target="_blank" rel="noopener">Spring Framework 文档的相关部分</a>中了解有关 <code>WebClient</code> 的更多信息。</p><p>Spring Boot 为您创建并预配置了一个 <code>WebClient.Builder</code>。强烈建议将其注入您的组件中并使用它来创建 <code>WebClient</code> 实例。Spring Boot 配置该构建器以共享 HTTP 资源，以与服务器相同的方式反射编解码器设置（请参阅 <a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-webflux-httpcodecs" target="_blank" rel="noopener">WebFlux HTTP 编解码器自动配置</a>）等。</p><p>以下代码是一个典型示例：</p><pre><code>@Servicepublic class MyService {    private final WebClient webClient;    public MyService(WebClient.Builder webClientBuilder) {        this.webClient = webClientBuilder.baseUrl(&quot;http://example.org&quot;).build();    }    public Mono&lt;Details&gt; someRestCall(String name) {        return this.webClient.get().uri(&quot;/{name}/details&quot;, name)                        .retrieve().bodyToMono(Details.class);    }}</code></pre><h3 id="35-1、WebClient-运行时"><a href="#35-1、WebClient-运行时" class="headerlink" title="35.1、WebClient 运行时"></a>35.1、WebClient 运行时</h3><p>Spring Boot 将自动检测用于驱动 <code>WebClient</code> 的 <code>ClientHttpConnector</code>，具体取决于应用程序 classpath 上可用的类库。目前支持 Reactor Netty 和 Jetty RS 客户端。</p><p>默认情况下 <code>spring-boot-starter-webflux</code> starter 依赖于 <code>io.projectreactor.netty:reactor-netty</code>，它包含了服务器和客户端的实现。如果您选择将 <code>Jetty</code> 用作响应式服务器，则应添加 Jetty Reactive HTTP 客户端库依赖项 <code>org.eclipse.jetty:jetty-reactive-httpclient</code>。服务器和客户端使用相同的技术具有一定优势，因为它会自动在客户端和服务器之间共享 HTTP 资源。</p><p>开发人员可以通过提供自定义的 <code>ReactorResourceFactory</code> 或 <code>JettyResourceFactory</code> bean 来覆盖 Jetty 和 Reactor Netty 的资源配置 —— 这将同时应用于客户端和服务器。</p><p>如果您只希望覆盖客户端选项，则可以定义自己的 <code>ClientHttpConnector</code> bean 并完全控制客户端配置。</p><p>您可以在 <a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/web-reactive.html#webflux-client-builder" target="_blank" rel="noopener">Spring Framework 参考文档中了解有关 <code>WebClient</code> 配置选项的更多信息</a>。</p><h3 id="35-2、自定义-WebClient"><a href="#35-2、自定义-WebClient" class="headerlink" title="35.2、自定义 WebClient"></a>35.2、自定义 WebClient</h3><p><code>WebClient</code> 自定义有三种主要方法，具体取决于您希望自定义的程度。</p><p>要想自定义的范围尽可能地窄，请注入自动配置的 <code>WebClient.Builder</code>，然后根据需要调用其方法。<code>WebClient.Builder</code> 实例是有状态的：构建器上的任何更改都会影响到之后所有使用它创建的客户端。如果要使用相同的构建器创建多个客户端，可以考虑使用 <code>WebClient.Builder other = builder.clone();</code> 的方式克隆构建器。</p><p>要在应用程序范围内对所有 <code>WebClient.Builder</code> 实例添加自定义，可以声明 <code>WebClientCustomizer</code> bean 并在注入点局部更改 <code>WebClient.Builder</code>。</p><p>最后，您可以回退到原始 API 并使用 <code>WebClient.create()</code>。在这种情况下，不会应用自动配置或 <code>WebClientCustomizer</code>。</p><h2 id="36、验证"><a href="#36、验证" class="headerlink" title="36、验证"></a>36、验证</h2><p>只要 classpath 上存在 JSR-303 实现（例如 Hibernate 验证器），就会自动启用 Bean Validation 1.1 支持的方法验证功能。这允许 bean 方法在其参数和/或返回值上使用 <code>javax.validation</code> 约束进行注解。带有此类注解方法的目标类需要在类级别上使用 <code>@Validated</code> 进行注解，以便搜索其内联约束注解的方法。</p><p>例如，以下服务触发第一个参数的验证，确保其大小在 8 到 10 之间：</p><pre><code>@Service@Validatedpublic class MyBean {    public Archive findByCodeAndAuthor(@Size(min = 8, max = 10) String code,            Author author) {        ...    }}</code></pre><h2 id="37、发送邮件"><a href="#37、发送邮件" class="headerlink" title="37、发送邮件"></a>37、发送邮件</h2><p>Spring Framework 提供了一个使用 <code>JavaMailSender</code> 接口发送电子邮件的简单抽象，Spring Boot 为其提供了自动配置以及一个 starter 模块。</p><p><strong>提示</strong></p><blockquote><p>有关如何使用 <code>JavaMailSender</code> 的详细说明，请参阅<a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/integration.html#mail" target="_blank" rel="noopener">参考文档</a>。</p></blockquote><p>如果 <code>spring.mail.host</code> 和相关库（由 <code>spring-boot-starter-mail</code> 定义）可用，则创建默认的 <code>JavaMailSender</code>（如果不存在）。可以通过 <code>spring.mail</code> 命名空间中的配置项进一步自定义发件人。有关更多详细信息，请参阅 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailProperties.java" target="_blank" rel="noopener"><code>MailProperties</code></a>。</p><p>特别是，某些默认超时时间的值是无限的，您可能想更改它以避免线程被无响应的邮件服务器阻塞，如下示例所示：</p><pre><code>spring.mail.properties.mail.smtp.connectiontimeout=5000spring.mail.properties.mail.smtp.timeout=3000spring.mail.properties.mail.smtp.writetimeout=5000</code></pre><p>也可以使用 JNDI 中的现有 <code>Session</code> 配置一个 <code>JavaMailSender</code>：</p><pre><code>spring.mail.jndi-name=mail/Session</code></pre><p>设置 <code>jndi-name</code> 时，它优先于所有其他与 <code>Session</code> 相关的设置。</p><h2 id="38、JTA-分布式事务"><a href="#38、JTA-分布式事务" class="headerlink" title="38、JTA 分布式事务"></a>38、JTA 分布式事务</h2><p>Spring Boot 通过使用 <a href="http://www.atomikos.com/" target="_blank" rel="noopener">Atomikos</a> 或 <a href="https://github.com/bitronix/btm" target="_blank" rel="noopener">Bitronix</a> 嵌入式事务管理器来支持跨多个 XA 资源的分布式 JTA 事务。部署在某些 Java EE 应用服务器（Application Server）上也支持 JTA 事务。</p><p>当检测到 JTA 环境时，Spring 的 <code>JtaTransactionManager</code> 将用于管理事务。自动配置的 JMS、DataSource 和 JPA bean 已升级为支持 XA 事务。您可以使用标准的 Spring 方式（例如 <code>@Transactional</code>）来使用分布式事务。如果您处于 JTA 环境中并且仍想使用本地事务，则可以将 <code>spring.jta.enabled</code> 属性设置为 <code>false</code> 以禁用 JTA 自动配置。</p><h3 id="38-1、使用-Atomikos-事务管理器"><a href="#38-1、使用-Atomikos-事务管理器" class="headerlink" title="38.1、使用 Atomikos 事务管理器"></a>38.1、使用 Atomikos 事务管理器</h3><p><a href="https://www.atomikos.com/" target="_blank" rel="noopener">Atomikos</a> 是一个流行的开源事务管理器，可以嵌入到 Spring Boot 应用程序中。您可以使用 <code>spring-boot-starter-jta-atomikos</code> starter 来获取相应的 Atomikos 库。Spring Boot 自动配置 Atomikos 并确保将合适的依赖设置应用于 Spring bean，以确保启动和关闭顺序正确。</p><p>默认情况下，Atomikos 事务日志将写入应用程序主目录（应用程序 jar 文件所在的目录）中的 <code>transaction-logs</code> 目录。您可以通过在 <code>application.properties</code> 文件中设置 <code>spring.jta.log-dir</code> 属性来自定义此目录的位置。也可用 <code>spring.jta.atomikos.properties</code> 开头的属性来自定义 Atomikos <code>UserTransactionServiceImp</code>。有关完整的详细信息，请参阅 <a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/api/org/springframework/boot/jta/atomikos/AtomikosProperties.html" target="_blank" rel="noopener">AtomikosProperties Javadoc</a>。</p><p><strong>注意</strong></p><blockquote><p>为确保多个事务管理器可以安全地协调相同的资源管理器，必须为每个 Atomikos 实例配置唯一 ID。默认情况下，此 ID 是运行 Atomikos 的计算机的 IP 地址。在生产环境中要确保唯一性，应为应用程序的每个实例配置 <code>spring.jta.transaction-manager-id</code> 属性，并使用不同的值。</p></blockquote><h3 id="38-2、使用-Bitronix-事务管理器"><a href="#38-2、使用-Bitronix-事务管理器" class="headerlink" title="38.2、使用 Bitronix 事务管理器"></a>38.2、使用 Bitronix 事务管理器</h3><p><a href="https://github.com/bitronix/btm" target="_blank" rel="noopener">Bitronix</a> 是一个流行的开源 JTA 事务管理器实现。您可以使用 <code>spring-boot-starter-jta-bitronix</code> starter 为您的项目添加合适的 Bitronix 依赖。与 Atomikos 一样，Spring Boot 会自动配置 Bitronix 并对 bean 进行后处理（post-processes），以确保启动和关闭顺序正确。</p><p>默认情况下，Bitronix 事务日志文件（<code>part1.btm</code> 和 <code>part2.btm</code>）将写入应用程序主目录中的 <code>transaction-logs</code> 目录。您可以通过设置 <code>spring.jta.log-dir</code> 属性来自定义此目录的位置。以 <code>spring.jta.bitronix.properties</code> 开头的属性绑定到了 <code>bitronix.tm.Configuration</code> bean，允许完全自定义。有关详细信息，请参阅 <a href="https://github.com/bitronix/btm/wiki/Transaction-manager-configuration" target="_blank" rel="noopener">Bitronix 文档</a>。</p><p><strong>注意</strong></p><blockquote><p>为确保多个事务管理器能够安全地协调相同的资源管理器，必须为每个 Bitronix 实例配置唯一的 ID。默认情况下，此 ID 是运行 Bitronix 的计算机的 IP 地址。生产环境要确保唯一性，应为应用程序的每个实例配置 <code>spring.jta.transaction-manager-id</code> 属性，并使用不同的值。</p></blockquote><h3 id="38-3、使用-Java-EE-管理的事务管理器"><a href="#38-3、使用-Java-EE-管理的事务管理器" class="headerlink" title="38.3、使用 Java EE 管理的事务管理器"></a>38.3、使用 Java EE 管理的事务管理器</h3><p>如果将 Spring Boot 应用程序打包为 <code>war</code> 或 <code>ear</code> 文件并将其部署到 Java EE 应用程序服务器，则可以使用应用程序服务器的内置事务管理器。Spring Boot 尝试通过查找常见的 JNDI 位置（<code>java:comp/UserTransaction</code>、<code>java:comp/TransactionManager</code> 等）来自动配置事务管理器。如果使用应用程序服务器提供的事务服务，通常还需要确保所有资源都由服务器管理并通过 JNDI 暴露。Spring Boot 尝试通过在 JNDI 路径（<code>java:/JmsXA</code> 或 <code>java:/JmsXA</code>）中查找 <code>ConnectionFactory</code> 来自动配置 JMS，并且可以使用 <a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-connecting-to-a-jndi-datasource" target="_blank" rel="noopener"><code>spring.datasource.jndi-name</code> 属性</a>来配置 <code>DataSource</code>。</p><h3 id="38-4、混合使用-XA-与非-XA-JMS-连接"><a href="#38-4、混合使用-XA-与非-XA-JMS-连接" class="headerlink" title="38.4、混合使用 XA 与非 XA JMS 连接"></a>38.4、混合使用 XA 与非 XA JMS 连接</h3><p>使用 JTA 时，主 JMS <code>ConnectionFactory</code> bean 可识别 XA 并参与分布式事务。在某些情况下，您可能希望使用非 XA <code>ConnectionFactory</code> 处理某些 JMS 消息。例如，您的 JMS 处理逻辑可能需要比 XA 超时时间更长的时间。</p><p>如果要使用非 XA <code>ConnectionFactory</code>，可以注入 <code>nonXaJmsConnectionFactory</code> bean 而不是 <code>@Primary</code> <code>jmsConnectionFactory</code> bean。为了保持一致性，提供的 <code>jmsConnectionFactory</code> bean 还需要使用 <code>xaJmsConnectionFactory</code> 别名。</p><p>以下示例展示了如何注入 <code>ConnectionFactory</code> 实例：</p><pre><code>// Inject the primary (XA aware) ConnectionFactory@Autowiredprivate ConnectionFactory defaultConnectionFactory;// Inject the XA aware ConnectionFactory (uses the alias and injects the same as above)@Autowired@Qualifier(&quot;xaJmsConnectionFactory&quot;)private ConnectionFactory xaConnectionFactory;// Inject the non-XA aware ConnectionFactory@Autowired@Qualifier(&quot;nonXaJmsConnectionFactory&quot;)private ConnectionFactory nonXaConnectionFactory;</code></pre><h3 id="38-5、支持嵌入式事务管理器"><a href="#38-5、支持嵌入式事务管理器" class="headerlink" title="38.5、支持嵌入式事务管理器"></a>38.5、支持嵌入式事务管理器</h3><p><a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jms/XAConnectionFactoryWrapper.java" target="_blank" rel="noopener"><code>XAConnectionFactoryWrapper</code></a> 和 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/XADataSourceWrapper.java" target="_blank" rel="noopener"><code>XADataSourceWrapper</code></a> 接口可用于支持其他嵌入式事务管理器。接口负责包装 <code>XAConnectionFactory</code> 和 <code>XADataSource</code> bean，并将它们公开为普通的 <code>ConnectionFactory</code> 和 <code>DataSource</code> bean，它们透明地加入分布式事务。<code>DataSource</code> 和 JMS 自动配置使用 JTA 变体，前提是您需要有一个 <code>JtaTransactionManager</code> bean 和在 <code>ApplicationContext</code> 中注册有的相应 XA 包装器（wrapper） bean。</p><p><a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jta/bitronix/BitronixXAConnectionFactoryWrapper.java" target="_blank" rel="noopener">BitronixXAConnectionFactoryWrapper</a> 和 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jta/bitronix/BitronixXADataSourceWrapper.java" target="_blank" rel="noopener">BitronixXADataSourceWrapper</a> 为如何编写 XA 包装器提供了很好示例。</p><h2 id="39、Hazelcast"><a href="#39、Hazelcast" class="headerlink" title="39、Hazelcast"></a>39、Hazelcast</h2><p>如果 <a href="https://hazelcast.com/" target="_blank" rel="noopener">Hazelcast</a> 在 classpath 上并有合适的配置，则 Spring Boot 会自动配置一个可以在应用程序中注入的 <code>HazelcastInstance</code>。</p><p>如果定义了 <code>com.hazelcast.config.Config</code> bean，则 Spring Boot 会使用它。如果您的配置定义了实例名称，Spring Boot 会尝试查找现有的实例，而不是创建新实例。</p><p>您还可以通过配置指定要使用的 <code>hazelcast.xml</code> 配置文件，如下所示：</p><pre><code>spring.hazelcast.config=classpath:config/my-hazelcast.xml</code></pre><p>否则，Spring Boot 会尝试从默认位置查找 Hazelcast 配置：工作目录或 classpath 根目录中的 <code>hazelcast.xml</code> 。我们还检查是否设置了 <code>hazelcast.config</code> 系统属性。有关更多详细信息，请参阅 <a href="http://docs.hazelcast.org/docs/latest/manual/html-single/" target="_blank" rel="noopener">Hazelcast 文档</a>。</p><p>如果 classpath 中存在 <code>hazelcast-client</code>，则 Spring Boot 会首先尝试通过检查以下配置项来创建客户端：</p><ul><li>存在 <code>com.hazelcast.client.config.ClientConfig</code> bean。</li><li><code>spring.hazelcast.config</code> 属性定义的配置文件。</li><li>存在 <code>hazelcast.client.config</code> 系统属性。</li><li>工作目录中或 classpath 根目录下的 <code>hazelcast-client.xml</code>。</li></ul><p><strong>注意</strong></p><blockquote><p>Spring Boot 还为 Hazelcast 提供了<a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-caching-provider-hazelcast" target="_blank" rel="noopener">缓存支持</a>。如果启用了缓存，<code>HazelcastInstance</code> 将自动包装在 <code>CacheManager</code> 实现中。</p></blockquote><h2 id="40、Quartz-调度器"><a href="#40、Quartz-调度器" class="headerlink" title="40、Quartz 调度器"></a>40、Quartz 调度器</h2><p>Spring Boot 提供了几种使用 <a href="http://www.quartz-scheduler.org/" target="_blank" rel="noopener">Quartz 调度器</a>的便捷方式，它们来自 <code>spring-boot-starter-quartz</code> starter。如果 Quartz 可用，则 Spring Boot 将自动配置 <code>Scheduler</code>（通过 <code>SchedulerFactoryBean</code> 抽象）。</p><p>自动选取以下类型的 Bean 并将其与 <code>Scheduler</code> 关联起来：</p><ul><li><code>JobDetail</code>：定义一个特定的 job。可以使用 <code>JobBuilder</code> API 构建 <code>JobDetail</code> 实例。</li><li><code>Calendar</code>。</li><li><code>Trigger</code>：定义何时触发 job。</li></ul><p>默认使用内存存储方式的 <code>JobStore</code>。 但如果应用程序中有 <code>DataSource</code> bean，并且配置了 <code>spring.quartz.job-store-type</code> 属性，则可以配置基于 JDBC 的存储，如下所示：</p><pre><code>spring.quartz.job-store-type=jdbc</code></pre><p>使用 JDBC 存储时，可以在启动时初始化 schema（表结构），如下所示：</p><pre><code>spring.quartz.jdbc.initialize-schema=always</code></pre><p><strong>警告</strong></p><blockquote><p>默认将使用 Quartz 库提供的标准脚本检测并初始化数据库。这些脚本会删除现有表，在每次重启时删除所有触发器。可以通过设置 <code>spring.quartz.jdbc.schema</code> 属性来提供自定义脚本。</p></blockquote><p>要让 Quartz 使用除应用程序主 <code>DataSource</code> 之外的 <code>DataSource</code>，请声明一个 <code>DataSource</code> bean，使用 <code>@QuartzDataSource</code> 注解其 <code>@Bean</code> 方法。这样做可确保 <code>SchedulerFactoryBean</code> 和 schema 初始化都使用 Quartz 指定的 <code>DataSource</code>。</p><p>默认情况下，配置创建的 job 不会覆盖已从持久 job 存储读取的已注册的 job。要启用覆盖现有的 job 定义，请设置 <code>spring.quartz.overwrite-existing-jobs</code> 属性。</p><p>Quartz 调取器配置可以使用 <code>spring.quartz</code> 属性和 <code>SchedulerFactoryBeanCustomizer</code> bean 进行自定义，它们允许以编程方式的 SchedulerFactoryBean 自定义。可以使用 <code>spring.quartz.properties.*</code> 自定义高级 Quartz 配置属性。</p><p><strong>注意</strong></p><blockquote><p>需要强调的是，<code>Executor</code> bean 与调度程序没有关联，因为 Quartz 提供了通过 <code>spring.quartz.properties</code> 配置调度器的方法。如果需要自定义执行器，请考虑实现 <code>SchedulerFactoryBeanCustomizer</code>。</p></blockquote><p>job 可以定义 <code>setter</code> 以注入数据映射属性。也可以以类似的方式注入常规的 bean，如下所示：</p><pre><code>public class SampleJob extends QuartzJobBean {    private MyService myService;    private String name;    // Inject &quot;MyService&quot; bean    public void setMyService(MyService myService) { ... }    // Inject the &quot;name&quot; job data property    public void setName(String name) { ... }    @Override    protected void executeInternal(JobExecutionContext context)            throws JobExecutionException {        ...    }}</code></pre><h2 id="41、任务执行与调度"><a href="#41、任务执行与调度" class="headerlink" title="41、任务执行与调度"></a>41、任务执行与调度</h2><p>在上下文中没有 <code>Executor</code> bean 的情况下，Spring Boot 会自动配置一个有合理默认值的 <code>ThreadPoolTask​​Executor</code>，它可以自动与异步任务执行（<code>@EnableAsync</code>）和 Spring MVC 异步请求处理相关联。</p><p><strong>提示</strong></p><blockquote><p>如果您在上下文中定义了自定义 `Executor`，则常规任务执行（即 <code>@EnableAsync</code>）将透明地使用它，但不会配置 Spring MVC 支持，因为它需要 `AsyncTaskExecutor` 实现（名为 `applicationTaskExecutor`）。根据您的目标安排，您可以将 `Executor` 更改为 `ThreadPoolTask​​Executor`，或者定义 `Executor的ThreadPoolTask​​Executor` 和 `AsyncConfigurer` 来包装自定义的 `Executor`。 您可以使用自动配置的 `TaskExecutorBuilder` 来轻松创建实例，以复制默认的自动配置。</p></blockquote><p>线程池使用 8 个核心线程，可根据负载情况增加和减少。可以使用 <code>spring.task.execution</code> 命名空间对这些默认设置进行微调，如下所示：</p><pre><code>spring.task.execution.pool.max-threads=16spring.task.execution.pool.queue-capacity=100spring.task.execution.pool.keep-alive=10s</code></pre><p>这会将线程池更改为使用有界队列，在队列满（100 个任务）时，线程池将增加到最多 16 个线程。当线程在闲置10 秒（而不是默认的 60 秒）时回收线程，池的收缩更为明显。</p><p>如果需要与调度任务执行（<code>@EnableScheduling</code>）相关联，可以自动配置一个 <code>ThreadPoolTaskScheduler</code>。默认情况下，线程池使用一个线程，可以使用 <code>spring.task.scheduling</code> 命名空间对这些设置进行微调。</p><p>如果需要创建自定义执行器或调度器，则在上下文中可以使用 <code>TaskExecutorBuilder</code> bean 和 <code>TaskSchedulerBuilder</code> bean。</p><h2 id="42、Spring-Integration"><a href="#42、Spring-Integration" class="headerlink" title="42、Spring Integration"></a>42、Spring Integration</h2><p>Spring Boot 为 <a href="https://projects.spring.io/spring-integration/" target="_blank" rel="noopener">Spring Integration</a> 提供了一些便捷的使用方式，它们包含在 <code>spring-boot-starter-integration</code> starter 中。Spring Integration 为消息传递以及其他传输（如 HTTP、TCP 等）提供了抽象。如果 classpath 上存在 Spring Integration，则 Spring Boot 会通过 <code>@EnableIntegration</code> 注解对其进行初始化。</p><p>Spring Boot 还配置了一些由其他 Spring Integration 模块触发的功能。如果 <code>spring-integration-jmx</code> 也在 classpath 上，则消息处理统计信息将通过 JMX 发布。如果 <code>spring-integration-jdbc</code> 可用，则可以在启动时创建默认数据库模式，如下所示：</p><pre><code>spring.integration.jdbc.initialize-schema=always</code></pre><p>有关更多详细信息，请参阅 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.2.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java" target="_blank" rel="noopener">IntegrationAutoConfiguration</a> 和 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.2.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationProperties.java" target="_blank" rel="noopener">IntegrationProperties</a> 类。</p><p>默认情况下，如果存在 Micrometer <code>meterRegistry</code> bean，则 Micrometer 将管理 Spring Integration 的指标。如果您希望使用旧版 Spring Integration 度量，请将 <code>DefaultMetricsFactory</code> bean 添加到应用程序上下文中。</p><h2 id="43、Spring-Session"><a href="#43、Spring-Session" class="headerlink" title="43、Spring Session"></a>43、Spring Session</h2><p>Spring Boot 为各种数据存储提供 <a href="https://projects.spring.io/spring-session/" target="_blank" rel="noopener">Spring Session</a> 自动配置。在构建 Servlet Web 应用程序时，可以自动配置以下存储：</p><ul><li>JDBC</li><li>Redis</li><li>Hazelcast</li><li>MongoDB</li></ul><p>构建响应式 Web 应用程序时，可以自动配置以下存储：</p><ul><li>Redis</li><li>MongoDB</li></ul><p>如果 classpath 上存在单个 Spring Session 模块，则 Spring Boot 会自动使用该存储实现。如果您有多个实现，则必须选择要用于存储会话的 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.2.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/StoreType.java" target="_blank" rel="noopener"><code>StoreType</code></a>。 例如，要使用 JDBC 作为后端存储，您可以按如下方式配置应用程序：</p><pre><code>spring.session.store-type=jdbc</code></pre><p><strong>提示</strong></p><blockquote><p>可以将 <code>store-type</code> 设置为 <code>none</code> 来禁用 Spring Session。</p></blockquote><p>每个 store 都有自己的额外设置。例如，可以为 JDBC 存储定制表的名称，如下所示：</p><pre><code>spring.session.jdbc.table-name=SESSIONS</code></pre><p>可以使用 <code>spring.session.timeout</code> 属性来设置会话的超时时间。如果未设置该属性，则自动配置将使用 <code>server.servlet.session.timeout</code> 的值。</p><h2 id="44、通过-JMX-监控和管理"><a href="#44、通过-JMX-监控和管理" class="headerlink" title="44、通过 JMX 监控和管理"></a>44、通过 JMX 监控和管理</h2><p>Java Management Extensions（JMX，Java 管理扩展）提供了一种监视和管理应用程序的标准机制。默认情况下，Spring Boot 会创建一个 ID 为 <code>mbeanServer</code> 的 <code>MBeanServer</code> bean，并暴露使用 Spring JMX 注解（<code>@ManagedResource</code>、<code>@ManagedAttribute</code> 或 <code>@ManagedOperation</code>）的 bean。</p><p>有关更多详细信息，请参阅 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.2.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfiguration.java" target="_blank" rel="noopener"><code>JmxAutoConfiguration</code></a> 类。</p><h2 id="45、测试"><a href="#45、测试" class="headerlink" title="45、测试"></a>45、测试</h2><h2 id="46、WebSocket"><a href="#46、WebSocket" class="headerlink" title="46、WebSocket"></a>46、WebSocket</h2><p>Spring Boot 为内嵌式 Tomcat、Jetty 和 Undertow 提供了 WebSocket 自动配置。如果将 war 文件部署到独立容器，则 Spring Boot 假定容器负责配置其 WebSocket 支持。</p><p>Spring Framework 为 MVC Web 应用程序提供了<a href="https://docs.spring.io/spring/docs/5.1.4.RELEASE/spring-framework-reference/web.html#websocket" target="_blank" rel="noopener">丰富的 WebSocket 支持</a>，可以通过 <code>spring-boot-starter-websocket</code> 模块轻松访问。</p><p>WebSocket 支持也可用于<a href="https://docs.spring.io/spring/docs/5.1.4.RELEASE/spring-framework-reference/web-reactive.html#webflux-websocket" target="_blank" rel="noopener">响应式 Web 应用程序</a>，并且引入 WebSocket API 以及 <code>spring-boot-starter-webflux</code>：</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;javax.websocket&lt;/groupId&gt;    &lt;artifactId&gt;javax.websocket-api&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><h2 id="47、Web-Service"><a href="#47、Web-Service" class="headerlink" title="47、Web Service"></a>47、Web Service</h2><p>Spring Boot 提供 Web Service 自动配置，因此您要做的就是定义 <code>Endpoints</code>。</p><p>可以使用 <code>spring-boot-starter-webservices</code> 模块轻松访问 <a href="https://docs.spring.io/spring-ws/docs/3.0.6.RELEASE/reference/" target="_blank" rel="noopener">Spring Web Service 功能</a>。</p><p>可以分别为 WSDL 和 XSD 自动创建 <code>SimpleWsdl11Definition</code> 和 <code>SimpleXsdSchema</code> bean。为此，请配置其位置，如下所示：</p><pre><code>spring.webservices.wsdl-locations=classpath:/wsdl</code></pre><h3 id="47-1、使用-WebServiceTemplate-调用-Web-Service"><a href="#47-1、使用-WebServiceTemplate-调用-Web-Service" class="headerlink" title="47.1、使用 WebServiceTemplate 调用 Web Service"></a>47.1、使用 <code>WebServiceTemplate</code> 调用 Web Service</h3><p>如果您需要从应用程序调用远程 Web 服务，则可以使用 <code>WebServiceTemplate</code> 类。由于 <code>WebServiceTemplate</code> 实例在使用之前通常需要进行自定义，因此 Spring Boot 不提供任何自动配置的 <code>WebServiceTemplate</code> bean。但是，它会自动配置 <code>WebServiceTemplateBuilder</code>，可在需要创建 <code>WebServiceTemplate</code> 实例时使用。</p><p>以下代码为一个典型示例：</p><pre><code>@Servicepublic class MyService {    private final WebServiceTemplate webServiceTemplate;    public MyService(WebServiceTemplateBuilder webServiceTemplateBuilder) {        this.webServiceTemplate = webServiceTemplateBuilder.build();    }    public DetailsResp someWsCall(DetailsReq detailsReq) {         return (DetailsResp) this.webServiceTemplate.marshalSendAndReceive(detailsReq, new SoapActionCallback(ACTION));    }}</code></pre><p>默认情况下，<code>WebServiceTemplateBuilder</code> 使用 classpath 上的可用 HTTP 客户端库检测合适的基于 HTTP 的 <code>WebServiceMessageSender</code>。您还可以按如下方式自定义读取和连接的超时时间：</p><pre><code>@Beanpublic WebServiceTemplate webServiceTemplate(WebServiceTemplateBuilder builder) {    return builder.messageSenders(new HttpWebServiceMessageSenderBuilder()            .setConnectTimeout(5000).setReadTimeout(2000).build()).build();}</code></pre><h2 id="49、创建自己的自动配置"><a href="#49、创建自己的自动配置" class="headerlink" title="49、创建自己的自动配置"></a>49、创建自己的自动配置</h2><p>如果您在公司负责开发公共类库，或者如果您在开发一个开源或商业库，您可能希望开发自己的自动配置。自动配置类可以捆绑在外部 jar 中，他仍然可以被 Spring Boot 获取。</p><p>自动配置可以与提供自动配置代码的 starter 以及您将使用的类库库相关联。我们首先介绍构建自己的自动配置需要了解的内容，然后我们将继续介绍<a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-custom-starter" target="_blank" rel="noopener">创建自定义 starter 所需的步骤</a>。</p><p><strong>提示</strong></p><blockquote><p>这里有一个<a href="https://github.com/snicoll-demos/spring-boot-master-auto-configuration" target="_blank" rel="noopener">演示项目</a>展示了如何逐步创建 starter。</p></blockquote><h3 id="49-1、理解自定配置-Bean"><a href="#49-1、理解自定配置-Bean" class="headerlink" title="49.1、理解自定配置 Bean"></a>49.1、理解自定配置 Bean</h3><p>在内部，自动配置使用了标准的 <code>@Configuration</code> 类来实现。<code>@Conditional</code> 注解用于约束何时应用自动配置。通常，自动配置类使用 <code>@ConditionalOnClass</code> 和 <code>@ConditionalOnMissingBean</code> 注解。这可确保仅在找到相关类时以及未声明您自己的 <code>@Configuration</code> 时才应用自动配置。</p><p>您可以浏览 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure" target="_blank" rel="noopener"><code>spring-boot-autoconfigure</code></a> 的源代码，以查看 Spring 提供的 <code>@Configuration</code> 类（请参阅 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories" target="_blank" rel="noopener"><code>META-INF/spring.factories</code></a> 文件）。</p><h3 id="49-2、找到候选的自动配置"><a href="#49-2、找到候选的自动配置" class="headerlink" title="49.2、找到候选的自动配置"></a>49.2、找到候选的自动配置</h3><p>Spring Boot 会检查已发布 jar 中是否存在 <code>META-INF/spring.factories</code> 文件。该文件应列出 <code>EnableAutoConfiguration</code> key 下的配置类，如下所示：</p><pre><code>org.springframework.boot.autoconfigure.EnableAutoConfiguration=\com.mycorp.libx.autoconfigure.LibXAutoConfiguration,\com.mycorp.libx.autoconfigure.LibXWebAutoConfiguration</code></pre><p><strong>注意</strong></p><blockquote><p><strong>必须</strong>以这种方式加载自动配置。确保它们在特定的包空间中定义，并且它们不能是组件扫描的目标。此外，自动配置类不应启用组件扫描以查找其他组件。应该使用特定的<code>@Imports</code> 来代替。</p></blockquote><p>如果需要按特定顺序应用配置，则可以使用 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigureAfter.java" target="_blank" rel="noopener"><code>@AutoConfigureAfter</code></a> 或 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigureBefore.java" target="_blank" rel="noopener"><code>@AutoConfigureBefore</code></a> 注解。例如，如果您提供特定于 Web 的配置，则可能需要在<code>WebMvcAutoConfiguration</code> 之后应用您的类。</p><p>如果您想排序某些不应该彼此直接了解的自动配置，您也可以使用 <code>@AutoConfigureOrder</code>。该注解与常规 <code>@Order</code> 注解有相同的语义，但它为自动配置类提供了专用顺序。</p><h3 id="49-3、条件注解"><a href="#49-3、条件注解" class="headerlink" title="49.3、条件注解"></a>49.3、条件注解</h3><p>您几乎总希望在自动配置类中包含一个或多个 <code>@Conditional</code> 注解。<code>@ConditionalOnMissingBean</code> 是一个常用的注解，其允许开发人员在对您的默认值不满意用于覆盖自动配置。</p><p>Spring Boot 包含许多 <code>@Conditional</code> 注解，您可以通过注解 <code>@Configuration</code> 类或单独的 <code>@Bean</code> 方法在您自己的代码中复用它们。这些注解包括：</p><ul><li><a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-class-conditions" target="_blank" rel="noopener">第 49.3.1 节，类条件</a></li><li><a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-bean-conditions" target="_blank" rel="noopener">第 49.3.2 节，Bean 条件</a></li><li><a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-property-conditions" target="_blank" rel="noopener">第 49.3.3 节，属性条件</a></li><li><a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-resource-conditions" target="_blank" rel="noopener">第 49.3.4 节，资源条件</a></li><li><a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-web-application-conditions" target="_blank" rel="noopener">第 49.3.5 节，Web 应用程序条件</a></li><li><a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-spel-conditions" target="_blank" rel="noopener">第 49.3.6 节，SpEL 表达式条件</a></li></ul><h4 id="49-3-1、类条件"><a href="#49-3-1、类条件" class="headerlink" title="49.3.1、类条件"></a>49.3.1、类条件</h4><p><code>@ConditionalOnClass</code> 和 <code>@ConditionalOnMissingClass</code> 注解允许根据特定类的是否存在来包含 <code>@Configuration</code> 类。由于使用 <a href="http://asm.ow2.org/" target="_blank" rel="noopener">ASM</a> 解析注解元数据，您可以使用 <code>value</code> 属性来引用真实类，即使该类实际上可能不会出现在正在运行的应用程序的 classpath 中。如果您希望使用 <code>String</code> 值来指定类名，也可以使用 <code>name</code> 属性。</p><p>此机制不会以相同的方式应用于返回类型是条件的目标的 <code>@Bean</code> 方法：在方法上的条件应用之前，JVM 将加载类和可能处理的方法引用，如果找不到类，将发生失败。</p><p>要处理这种情况，可以使用单独的 <code>@Configuration</code> 类来隔离条件，如下所示：</p><pre><code>@Configuration// Some conditionspublic class MyAutoConfiguration {    // Auto-configured beans    @Configuration    @ConditionalOnClass(EmbeddedAcmeService.class)    static class EmbeddedConfiguration {        @Bean        @ConditionalOnMissingBean        public EmbeddedAcmeService embeddedAcmeService() { ... }    }}</code></pre><p><strong>提示</strong></p><blockquote><p>如果使用 <code>@ConditionalOnClass</code> 或 <code>@ConditionalOnMissingClass</code> 作为元注解的一部分来组成自己的组合注解，则必须使用 <code>name</code> 来引用类，在这种情况将不作处理。</p></blockquote><h4 id="49-3-2、Bean-条件"><a href="#49-3-2、Bean-条件" class="headerlink" title="49.3.2、Bean 条件"></a>49.3.2、Bean 条件</h4><p><code>@ConditionalOnBean</code> 和 <code>@ConditionalOnMissingBean</code> 注解允许根据特定 bean 是否存在来包含 bean。您可以使用 <code>value</code> 属性按类型或使用 <code>name</code> 来指定 bean。<code>search</code> 属性允许您限制在搜索 bean 时应考虑的 <code>ApplicationContext</code> 层次结构。</p><p>放置在 <code>@Bean</code> 方法上时，目标类型默认为方法的返回类型，如下所示：</p><pre><code>@Configurationpublic class MyAutoConfiguration {    @Bean    @ConditionalOnMissingBean    public MyService myService() { ... }}</code></pre><p>在前面的示例中，如果 <code>ApplicationContext</code> 中不包含 <code>MyService</code> 类型的 bean，则将创建 <code>myService</code> bean。</p><p><strong>提示</strong></p><blockquote><p>您需要非常小心地添加 bean 定义的顺序，因为这些条件是根据到目前为止已处理的内容进行计算的。因此，我们建议在自动配置类上仅使用 <code>@ConditionalOnBean</code> 和 <code>@ConditionalOnMissingBean</code> 注解（因为这些注解保证在添加所有用户定义的 bean 定义后加载）。</p></blockquote><p><strong>注意</strong></p><blockquote><p><code>@ConditionalOnBean</code> 和 <code>@ConditionalOnMissingBean</code> 不会阻止创建 <code>@Configuration</code> 类。在类级别使用这些条件并使用注解标记每个包含 <code>@Bean</code> 方法的唯一区别是，如果条件不匹配，前者会阻止将 <code>@Configuration</code> 类注册为 bean。</p></blockquote><h4 id="49-3-3、属性条件"><a href="#49-3-3、属性条件" class="headerlink" title="49.3.3、属性条件"></a>49.3.3、属性条件</h4><p><code>@ConditionalOnProperty</code> 注解允许基于 Spring Environment 属性包含配置。使用 <code>prefix</code> 和 <code>name</code> 属性指定需要检查的属性。默认情况下，匹配存在且不等于 <code>false</code> 的所有属性。您还可以使用 <code>havingValue</code> 和 <code>matchIfMissing</code> 属性创建更高级的检查。</p><h4 id="49-3-4、资源条件"><a href="#49-3-4、资源条件" class="headerlink" title="49.3.4、资源条件"></a>49.3.4、资源条件</h4><p><code>@ConditionalOnResource</code> 注解仅允许在存在特定资源时包含配置。可以使用常用的 Spring 约定来指定资源，如下所示：<code>file:/home/user/test.dat</code>。</p><h4 id="49-3-5、Web-应用程序条件"><a href="#49-3-5、Web-应用程序条件" class="headerlink" title="49.3.5、Web 应用程序条件"></a>49.3.5、Web 应用程序条件</h4><p><code>@ConditionalOnWebApplication</code> 和 <code>@ConditionalOnNotWebApplication</code> 注解在应用程序为 <strong>Web 应用程序</strong>的情况下是否包含配置。Web 应用程序是使用 Spring <code>WebApplicationContext</code>，定义一个 <code>session</code> 范围或具有 <code>StandardServletEnvironment</code> 的任何应用程序。</p><h4 id="49-3-6、SpEL-表达式条件"><a href="#49-3-6、SpEL-表达式条件" class="headerlink" title="49.3.6、SpEL 表达式条件"></a>49.3.6、SpEL 表达式条件</h4><p><code>@ConditionalOnExpression</code> 注解允许根据 <a href="https://docs.spring.io/spring/docs/5.1.5.RELEASE/spring-framework-reference/core.html#expressions" target="_blank" rel="noopener">SpEL 表达式</a>的结果包含配置。</p><h4 id="49-4、测试自动配置"><a href="#49-4、测试自动配置" class="headerlink" title="49.4、测试自动配置"></a>49.4、测试自动配置</h4><p>自动配置可能受许多因素的影响：用户配置（<code>@Bean</code> 定义和 <code>Environment</code> 自定义）、条件评估（存在特定的类库）等。具体而言，每个测试都应该创建一个定义良好的 <code>ApplicationContext</code>，它表示这些自定义的组合。<code>ApplicationContextRunner</code> 提供了一个好的实现方法。</p><p><code>ApplicationContextRunner</code> 通常被定义为测试类的一个字段，用于收集基本的通用配置。以下示例确保始终调用 <code>UserServiceAutoConfiguration</code>：</p><pre><code>private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()        .withConfiguration(AutoConfigurations.of(UserServiceAutoConfiguration.class));</code></pre><p><strong>提示</strong></p><blockquote><p>如果必须定义多个自动配置，则无需按照与运行应用程序时完全相同的顺序调用它们的声明。</p></blockquote><p>每个测试都可以使用 runner 来表示特定的用例。例如，下面的示例调用用户配置（<code>UserConfiguration</code>）并检查自动配置是否正确退回。调用 <code>run</code> 提供了一个可以与 <code>Assert4J</code> 一起使用的回调上下文。</p><pre><code>@Testpublic void defaultServiceBacksOff() {    this.contextRunner.withUserConfiguration(UserConfiguration.class)            .run((context) -&gt; {                assertThat(context).hasSingleBean(UserService.class);                assertThat(context.getBean(UserService.class)).isSameAs(                        context.getBean(UserConfiguration.class).myUserService());            });}@Configurationstatic class UserConfiguration {    @Bean    public UserService myUserService() {        return new UserService(&quot;mine&quot;);    }}</code></pre><p>也可以轻松自定义 <code>Environment</code>，如下所示：</p><pre><code>@Testpublic void serviceNameCanBeConfigured() {    this.contextRunner.withPropertyValues(&quot;user.name=test123&quot;).run((context) -&gt; {        assertThat(context).hasSingleBean(UserService.class);        assertThat(context.getBean(UserService.class).getName()).isEqualTo(&quot;test123&quot;);    });}</code></pre><p>runner 还可用于展示 <code>ConditionEvaluationReport</code>。报告可以在 <code>INFO</code> 或 <code>DEBUG</code> 级别下打印。以下示例展示如何使用 <code>ConditionEvaluationReportLoggingListener</code> 在自动配置测试中打印报表。</p><pre><code>@Testpublic void autoConfigTest {    ConditionEvaluationReportLoggingListener initializer = new ConditionEvaluationReportLoggingListener(            LogLevel.INFO);    ApplicationContextRunner contextRunner = new ApplicationContextRunner()            .withInitializer(initializer).run((context) -&gt; {                    // Do something...            });}</code></pre><h4 id="49-4-1、模拟一个-Web-上下文"><a href="#49-4-1、模拟一个-Web-上下文" class="headerlink" title="49.4.1、模拟一个 Web 上下文"></a>49.4.1、模拟一个 Web 上下文</h4><p>如果需要测试一个仅在 Servlet 或响应式 Web 应用程序上下文中运行的自动配置，请分别使用 <code>WebApplicationContextRunner</code> 或 <code>ReactiveWebApplicationContextRunner</code>。</p><h4 id="49-4-2、覆盖-Classpath"><a href="#49-4-2、覆盖-Classpath" class="headerlink" title="49.4.2、覆盖 Classpath"></a>49.4.2、覆盖 Classpath</h4><p>还可以测试在运行时不存在特定类和/或包时发生的情况。 Spring Boot附带了一个可以由跑步者轻松使用的FilteredClassLoader。 在以下示例中，我们声明如果UserService不存在，则会正确禁用自动配置：</p><pre><code>@Testpublic void serviceIsIgnoredIfLibraryIsNotPresent() {    this.contextRunner.withClassLoader(new FilteredClassLoader(UserService.class))            .run((context) -&gt; assertThat(context).doesNotHaveBean(&quot;userService&quot;));}</code></pre><h3 id="49-5、创建自己的-Starter"><a href="#49-5、创建自己的-Starter" class="headerlink" title="49.5、创建自己的 Starter"></a>49.5、创建自己的 Starter</h3><p>一个完整的 Spring Boot starter 类库可能包含以下组件：</p><ul><li><code>autoconfigure</code> 模块，包含自动配置代码。</li><li><code>starter</code> 模块，它提供对 <code>autoconfigure</code> 模块依赖关系以及类库和常用的其他依赖关系。简而言之，添加 starter 应该提供该库开始使用所需的一切。</li></ul><p><strong>提示</strong></p><blockquote><p>如果您不想将这两个模块分开，则可以将自动配置代码和依赖关系管理组合在一个模块中。</p></blockquote><h4 id="49-5-1、命名"><a href="#49-5-1、命名" class="headerlink" title="49.5.1、命名"></a>49.5.1、命名</h4><p>您应该确保为您的 starter 提供一个合适的命名空间。即使您使用其他 Maven <code>groupId</code>，也不要使用 <code>spring-boot</code> 作为模块名称的开头。我们可能会为您以后自动配置的内容提供官方支持。</p><p>根据经验，您应该在 starter 后命名一个组合模块。例如，假设您正在为 <strong>acme</strong> 创建一个 starter，并且您将自动配置模块命名为 <code>acme-spring-boot-autoconfigure</code>，将 starter 命名为 <code>acme-spring-boot-starter</code>。如果您只有一个组合这两者的模块，请将其命名为 <code>acme-spring-boot-starter</code>。</p><p>此外，如果您的 starter 提供配置 key，请为它们使用唯一的命名空间。尤其是，不要将您的 key 包含在 Spring Boot 使用的命名空间中（例如 <code>server</code>、<code>management</code>、<code>spring</code> 等）。如果您使用了相同的命名空间，我们将来可能会以破坏您的模块的方式来修改这些命名空间。</p><p>确<a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#configuration-metadata-annotation-processor" target="_blank" rel="noopener">保触发元数据生成</a>，以便为您的 key 提供 IDE 帮助。您可能想查看生成的元数据（<code>META-INF/spring-configuration-metadata.json</code>）以确保您的 key 记录是否正确。</p><h4 id="49-5-2、autoconfigure-模块"><a href="#49-5-2、autoconfigure-模块" class="headerlink" title="49.5.2、autoconfigure 模块"></a>49.5.2、<code>autoconfigure</code> 模块</h4><p><code>autoconfigure</code> 模块包含类库开始使用所需的所有内容。它还可以包含配置 key 定义（例如 <code>@ConfigurationProperties</code>）和任何可用于进一步自定义组件初始化方式的回调接口。</p><p><strong>提示</strong></p><blockquote><p>您应该将类库的依赖项标记为可选，以便您可以更轻松地在项目中包含 <code>autoconfigure</code> 模块。如果以这种方式执行，则不提供类库，默认情况下，Spring Boot 将会退出。</p></blockquote><p>Spring Boot 使用注解处理器来收集元数据文件（<code>META-INF/spring-autoconfigure-metadata.properties</code>）中自动配置的条件。如果该文件存在，则用于快速过滤不匹配的自动配置，缩短启动时间。建议在包含自动配置的模块中添加以下依赖项：</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-autoconfigure-processor&lt;/artifactId&gt;    &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt;</code></pre><p>使用 Gradle 4.5 及更早版本时，应在 <code>compileOnly</code> 配置中声明依赖项，如下所示：</p><pre><code>dependencies {    compileOnly &quot;org.springframework.boot:spring-boot-autoconfigure-processor&quot;}</code></pre><p>使用 Gradle 4.6 及更高版本时，应在 <code>annotationProcessor</code> 配置中声明依赖项，如下所示：</p><pre><code>dependencies {    annotationProcessor &quot;org.springframework.boot:spring-boot-autoconfigure-processor&quot;}</code></pre><h4 id="49-5-3、Starter-模块"><a href="#49-5-3、Starter-模块" class="headerlink" title="49.5.3、Starter 模块"></a>49.5.3、Starter 模块</h4><p>starter 真的是一个空 jar。它的唯一目的是为使用类库提供必要的依赖项。您可以将其视为使用类库的一切基础。</p><p>不要对添加 starter 的项目抱有假设想法。如果您自动配置的库经常需要其他 starter，请一并声明它们。如果可选依赖项的数量很多，则提供一组适当的默认依赖项可能很难，因为您本应该避免包含对常用库的使用不必要的依赖项。换而言之，您不应该包含可选的依赖项。</p><p><strong>注意</strong></p><blockquote><p>无论哪种方式，您的 starter 必须直接或间接引用核心 Spring Boot starter（<code>spring-boot-starter</code>）（如果您的 starter 依赖于另一个 starter ，则无需添加它）。如果只使用自定义 starter 创建项目，则 Spring Boot 的核心功能将通过存在的核心 starter 来实现。</p></blockquote><h2 id="50、Kotlin-支持"><a href="#50、Kotlin-支持" class="headerlink" title="50、Kotlin 支持"></a>50、Kotlin 支持</h2><p><a href="https://kotlinlang.org/" target="_blank" rel="noopener">Kotlin</a> 是一种针对 JVM（和其他平台）的静态类型语言，它可编写出简洁而优雅的代码，同时提供与使用 Java 编写的现有库的<a href="https://kotlinlang.org/docs/reference/java-interop.html" target="_blank" rel="noopener">互操作性</a>。</p><p>Spring Boot 通过利用其他 Spring 项目（如 Spring Framework、Spring Data 和 Reactor）的支持来提供 Kotlin 支持。有关更多信息，请参阅 <a href="https://docs.spring.io/spring/docs/5.1.5.RELEASE/spring-framework-reference/languages.html#kotlin" target="_blank" rel="noopener">Spring Framework Kotlin 支持文档</a>。</p><p>开始学习 Spring Boot 和 Kotlin 最简单方法是遵循这个<a href="https://spring.io/guides/tutorials/spring-boot-kotlin/" target="_blank" rel="noopener">全面教程</a>。您可以通过 <a href="https://start.spring.io/#!language=kotlin" target="_blank" rel="noopener">start.spring.io</a> 创建新的 Kotlin 项目。如果您需要支持，请免费加入 <a href="http://slack.kotlinlang.org/" target="_blank" rel="noopener">Kotlin Slack</a> 的 #spring 频道或使用 <a href="https://stackoverflow.com/questions/tagged/spring+kotlin" target="_blank" rel="noopener">Stack Overflow</a> 上的 <code>spring</code> 和 <code>kotlin</code> 标签提问。</p><h3 id="50-1、要求"><a href="#50-1、要求" class="headerlink" title="50.1、要求"></a>50.1、要求</h3><p>Spring Boot 支持 Kotlin 1.2.x。要使用 Kotlin，classpath 下必须存在 <code>org.jetbrains.kotlin:kotlin-stdlib</code> 和 <code>org.jetbrains.kotlin:kotlin-reflect</code>。也可以使用 <code>kotlin-stdlib</code> 的变体 <code>kotlin-stdlib-jdk7</code> 和 <code>kotlin-stdlib-jdk8</code>。</p><p>由于 <a href="https://discuss.kotlinlang.org/t/classes-final-by-default/166" target="_blank" rel="noopener">Kotlin 类默认为 final</a>，因此您可能需要配置 <a href="https://kotlinlang.org/docs/reference/compiler-plugins.html#spring-support" target="_blank" rel="noopener">kotlin-spring</a> 插件以自动打开 <code>Spring-annotated</code> 类，以便可以代理它们。</p><p>在 Kotlin 中序列化/反序列化 JSON 数据需要使用 <a href="https://github.com/FasterXML/jackson-module-kotlin" target="_blank" rel="noopener">Jackson 的 Kotlin 模块</a>。在 classpath 中找到它时会自动注册。如果 Jackson 和 Kotlin 存在但 Jackson Kotlin 模块不存在，则会记录警告消息。</p><p><strong>提示</strong></p><blockquote><p>如果在 <a href="https://start.spring.io/#!language=kotlin" target="_blank" rel="noopener">start.spring.io</a> 上创建 Kotlin 项目，则默认提供这些依赖项和插件。</p></blockquote><h3 id="50-2、Null-安全"><a href="#50-2、Null-安全" class="headerlink" title="50.2、Null 安全"></a>50.2、Null 安全</h3><p>Kotlin 的一个关键特性是 <a href="https://kotlinlang.org/docs/reference/null-safety.html" target="_blank" rel="noopener">null 安全</a>。它在编译时处理空值，而不是将问题推迟到运行时并遇到 <code>NullPointerException</code>。这有助于消除常见的错误来源，而无需支付像 <code>Optional</code> 这样的包装器的成本。Kotlin 还允许使用有可空值的，如 <a href="http://www.baeldung.com/kotlin-null-safety" target="_blank" rel="noopener">Kotlin null 安全综合指南</a>中所述。</p><p>虽然 Java 不允许在其类型系统中表示 null 安全，但 Spring Framework、Spring Data 和 Reactor 现在通过易于使用的工具的注解提供其 API 的安全性。默认情况下，Kotlin 中使用的 Java API 类型被识别为放宽空检查的<a href="https://kotlinlang.org/docs/reference/java-interop.html#null-safety-and-platform-types" target="_blank" rel="noopener">平台类型</a>。<a href="https://kotlinlang.org/docs/reference/java-interop.html#jsr-305-support" target="_blank" rel="noopener">Kotlin 对 JSR 305 注解的支持</a>与可空注解相结合，为 Kotlin 中 Spring API 相关的代码提供了空安全。</p><p>可以通过使用以下选项添加 <code>-Xjsr305</code> 编译器标志来配置 JSR 305 检查：<code>-Xjsr305={strict|warn|ignore}</code>。默认行为与 <code>-Xjsr305=warn</code> 相同。在从 Spring API 推断出的 Kotlin 类型中需要考虑 null 安全的 <code>strict</code> 值，但是应该使用 Spring API 可空声明甚至可以在次要版本之间发展并且将来可能添加更多检查的方案。</p><p><strong>警告</strong></p><blockquote><p>尚不支持泛型类型参数、<code>varargs</code> 和数组元素可空性。有关最新信息，请参见 <a href="https://jira.spring.io/browse/SPR-15942" target="_blank" rel="noopener">SPR-15942</a>。另请注意，Spring Boot 自己的 API <a href="https://github.com/spring-projects/spring-boot/issues/10712" target="_blank" rel="noopener">尚未注解</a>。</p></blockquote><h3 id="50-3、Kotlin-API"><a href="#50-3、Kotlin-API" class="headerlink" title="50.3、Kotlin API"></a>50.3、Kotlin API</h3><h4 id="50-3-1、runApplication"><a href="#50-3-1、runApplication" class="headerlink" title="50.3.1、runApplication"></a>50.3.1、runApplication</h4><p>Spring Boot 提供了使用 <code>runApplication&lt;MyApplication&gt;(*args)</code> 运行应用程序的惯用方法，如下所示：</p><pre><code>import org.springframework.boot.autoconfigure.SpringBootApplicationimport org.springframework.boot.runApplication@SpringBootApplicationclass MyApplicationfun main(args: Array&lt;String&gt;) {    runApplication&lt;MyApplication&gt;(*args)}</code></pre><p>这是 <code>SpringApplication.run(MyApplication::class.java, *args)</code> 的替代方式。它还允许自定义应用程序，如下所示：</p><pre><code>runApplication&lt;MyApplication&gt;(*args) {    setBannerMode(OFF)}</code></pre><h4 id="50-3-2、扩展"><a href="#50-3-2、扩展" class="headerlink" title="50.3.2、扩展"></a>50.3.2、扩展</h4><p>Kotlin <a href="https://kotlinlang.org/docs/reference/extensions.html" target="_blank" rel="noopener">扩展</a>提供了使用附加功能扩展现有类的能力。Spring Boot Kotlin API 利用这些扩展为现有 API 添加新的 Kotlin 特定便利。</p><p>提供的 <code>TestRestTemplate</code> 扩展类似于 Spring Framework 为 <code>RestOperations</code> 提供的。除此之外，扩展使得利用 Kotlin reified 类型参数变为可能。</p><h3 id="50-4、依赖管理"><a href="#50-4、依赖管理" class="headerlink" title="50.4、依赖管理"></a>50.4、依赖管理</h3><p>为了避免在 classpath 上混合不同版本的 Kotlin 依赖项，提供了以下 Kotlin 依赖项的依赖项管理：</p><ul><li><code>kotlin-reflect</code></li><li><code>kotlin-runtime</code></li><li><code>kotlin-stdlib</code></li><li><code>kotlin-stdlib-jdk7</code></li><li><code>kotlin-stdlib-jdk8</code></li><li><code>kotlin-stdlib-jre7</code></li><li><code>kotlin-stdlib-jre8</code></li></ul><p>使用 Maven，可以通过 <code>kotlin.version</code> 属性自定义 Kotlin 版本，并为 <code>kotlin-maven-plugin</code> 提供插件管理。使用 Gradle，Spring Boot 插件会自动将 <code>kotlin.version</code> 与 Kotlin 插件的版本保一致。</p><h3 id="50-5、-ConfigurationProperties"><a href="#50-5、-ConfigurationProperties" class="headerlink" title="50.5、@ConfigurationProperties"></a>50.5、<code>@ConfigurationProperties</code></h3><p><code>@ConfigurationProperties</code> 目前仅适用于 <code>lateinit</code> 或可空的 <code>var</code> 属性（建议使用前者），因为<a href="https://github.com/spring-projects/spring-boot/issues/8762" target="_blank" rel="noopener">尚不支持</a>由构造函数初始化的不可变类。</p><pre><code>@ConfigurationProperties(&quot;example.kotlin&quot;)class KotlinExampleProperties {    lateinit var name: String    lateinit var description: String    val myService = MyService()    class MyService {        lateinit var apiToken: String        lateinit var uri: URI    }}</code></pre><p><strong>提示</strong></p><blockquote><p>要使用注解处理器生成<a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#configuration-metadata-annotation-processor" target="_blank" rel="noopener">您自己的元数据</a>，应使用 <code>spring-boot-configuration-processor</code> 依赖<a href="https://kotlinlang.org/docs/reference/kapt.html" target="_blank" rel="noopener">配置 <code>kapt</code></a>。</p></blockquote><h3 id="50-6、测试"><a href="#50-6、测试" class="headerlink" title="50.6、测试"></a>50.6、测试</h3><p>虽然可以使用 JUnit 4（<code>spring-boot-starter-test</code> 提供的默认配置）来测试 Kotlin 代码，但建议使用 JUnit 5。JUnit 5 允许测试类实例化一次，并在所有类的测试中复用。这使得可以在非静态方法上使用 <code>@BeforeAll</code> 和 <code>@AfterAll</code> 注解，这非常适合 Kotlin。</p><p>要使用 JUnit 5，请从 <code>spring-boot-starter-test</code> 中排除 <code>junit:junit</code> 依赖项，然后添加 JUnit 5 依赖项，并相应地配置 Maven 或 Gradle 插件。有关更多详细信息，请参阅 <a href="https://junit.org/junit5/docs/current/user-guide/#dependency-metadata-junit-jupiter-samples" target="_blank" rel="noopener">JUnit 5 文档</a>。您还需要<a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-test-instance-lifecycle-changing-default" target="_blank" rel="noopener">将测试实例生命周期切换为 <strong>per-class</strong></a>。</p><p>为了模拟 Kotlin 类，建议使用 <a href="https://mockk.io/" target="_blank" rel="noopener">Mockk</a>。如果需要 Mockk 等效的 Mockito 特定的 <a href="https://docshome.gitbooks.io/springboot/content/pages/boot-features-testing-spring-boot-applications-mocking-beans" target="_blank" rel="noopener"><code>@MockBean</code> 和 <code>@SpyBean</code> 注解</a>，则可以使用 <a href="https://github.com/Ninja-Squad/springmockk" target="_blank" rel="noopener">SpringMockK</a>，它提供类似的 <code>@MockkBean</code> 和 <code>@SpykBean</code> 注解。</p><h3 id="50-7、资源"><a href="#50-7、资源" class="headerlink" title="50.7、资源"></a>50.7、资源</h3><h4 id="50-7-1、进阶阅读"><a href="#50-7-1、进阶阅读" class="headerlink" title="50.7.1、进阶阅读"></a>50.7.1、进阶阅读</h4><ul><li><a href="https://kotlinlang.org/docs/reference/" target="_blank" rel="noopener">Kotlin 语言参考</a></li><li><a href="http://slack.kotlinlang.org/" target="_blank" rel="noopener">Kotlin Slack</a>（有专用的 #spring 频道）</li><li><a href="https://stackoverflow.com/questions/tagged/spring+kotlin" target="_blank" rel="noopener">Stackoverflow 上 <code>spring</code> 和 <code>kotlin</code> 标签</a></li><li><a href="https://try.kotlinlang.org/" target="_blank" rel="noopener">在浏览器中尝试 Kotlin</a></li><li><a href="https://blog.jetbrains.com/kotlin/" target="_blank" rel="noopener">Kotlin 博客</a></li><li><a href="https://kotlin.link/" target="_blank" rel="noopener">Awesome Kotlin</a></li><li><a href="https://spring.io/guides/tutorials/spring-boot-kotlin/" target="_blank" rel="noopener">教程：使用 Spring Boot 和 Kotlin 构建 Web 应用程序</a></li><li><a href="https://spring.io/blog/2016/02/15/developing-spring-boot-applications-with-kotlin" target="_blank" rel="noopener">使用 Kotlin 开发 Spring Boot 应用程序</a></li><li><a href="https://spring.io/blog/2016/03/20/a-geospatial-messenger-with-kotlin-spring-boot-and-postgresql" target="_blank" rel="noopener">使用 Kotlin、Spring Boot 和 PostgreSQL 开发地理信使</a></li><li><a href="https://spring.io/blog/2017/01/04/introducing-kotlin-support-in-spring-framework-5-0" target="_blank" rel="noopener">在 Spring Framework 5.0 中引入 Kotlin 支持</a></li><li><a href="https://spring.io/blog/2017/08/01/spring-framework-5-kotlin-apis-the-functional-way" target="_blank" rel="noopener">Spring Framework 5 Kotlin API 实现函数式</a></li></ul><h4 id="50-7-2、示例"><a href="#50-7-2、示例" class="headerlink" title="50.7.2、示例"></a>50.7.2、示例</h4><ul><li><a href="https://github.com/sdeleuze/spring-boot-kotlin-demo" target="_blank" rel="noopener">spring-boot-kotlin-demo</a>：常规的 Spring Boot + Spring Data JPA 项目</li><li><a href="https://github.com/mixitconf/mixit" target="_blank" rel="noopener">mixit</a>：Spring Boot 2 + WebFlux + Reactive Spring Data MongoDB</li><li><a href="https://github.com/sdeleuze/spring-kotlin-fullstack" target="_blank" rel="noopener">spring-kotlin-fullstack</a>：WebFlux Kotlin 全栈示例，在前端使用 Kotlin2js 代替 JavaScript 和 TypeScript</li><li><a href="https://github.com/spring-petclinic/spring-petclinic-kotlin" target="_blank" rel="noopener">spring-petclinic-kotlin</a>：Spring PetClinic 示例应用的 Kotlin 版本</li><li><a href="https://github.com/sdeleuze/spring-kotlin-deepdive" target="_blank" rel="noopener">spring-kotlin-deepdive</a>：将Boot 1.0 + Java 逐步迁移到 Boot 2.0 + Kotlin</li></ul><h2 id="51、下一步"><a href="#51、下一步" class="headerlink" title="51、下一步"></a>51、下一步</h2><p>如果您想了解本节中讨论的任何类目的更多信息，可以查看 <a href="https://docs.spring.io/spring-boot/docs/2.1.3.RELEASE/api" target="_blank" rel="noopener">Spring Boot API 文档</a>，也可以直接浏览<a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE" target="_blank" rel="noopener">源代码</a>。如果您有具体问题，请查看 <a href="https://docshome.gitbooks.io/springboot/content/pages/howto.md" target="_blank" rel="noopener">how-to</a> 部分。</p><p>如果您对 Spring Boot 的核心功能感到满意，可以继续阅读有关生产就绪功能的内容。</p><p>powered by GitbookFile Modify: 2019-04-01 16:25:39</p><p><a href="https://docshome.gitbooks.io/springboot/content/pages/using-spring-boot.html#using-boot-whats-next" target="_blank" rel="noopener"></a><a href="https://docshome.gitbooks.io/springboot/content/pages/spring-boot-features.html#boot-features-spring-application" target="_blank" rel="noopener"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="springboot" scheme="https://lijinhongpassion.github.io/tags/springboot/"/>
    
      <category term="文档" scheme="https://lijinhongpassion.github.io/tags/%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>Java-nginx+tomcat集群的简单实现(包括解决session共享问题)</title>
    <link href="https://lijinhongpassion.github.io/codeant/7f99.html"/>
    <id>https://lijinhongpassion.github.io/codeant/7f99.html</id>
    <published>2019-04-02T11:08:29.000Z</published>
    <updated>2019-06-04T08:30:08.069Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1554196694-aa2baaa903a6?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1049&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p><strong>服务器集群：</strong>就是指将很多服务器集中起来一起进行同一种服务，在客户端看来就像是只有一个服务器。集群可以利用多个计算机进行并行计算从而获得很高的计算速度，也可以用多个计算机做备份，从而使得任何一个机器坏了整个系统还是能正常运行。</p><p>关于nginx+tomcat的集群实现配置可以看<a href="https://lijinhongpassion.github.io/codeant/7339.html">之前的文章(Java的nginx的基础配置详解)</a>,下面是本次实现的简单架构图：<br><img src="/codeant/7f99/1.png" title="1.png"></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a><strong>问题</strong></h1><p>当服务器集群过后会发生这样一种现象，当用户在tomcat-A上登录过后，用户下一次请求未必会被nginx发送给tomcat-A，假如发送给tomcat-B处理，而tomcat-B上并没有用户的会话信息，就会导致用户重新验证信息，这样大大降低了用户体验。所以我们需要解决session共享问题。</p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a><strong>方法</strong></h1><ol><li>ip hash：针对nginx进行配置，每个ip只能访问固定的服务器，也就是说用户A通过ip hash第一次访问tomcat-A，在他后面的请求就只能发送给tomcat-A。这种方式是session不共享。缺点是会导致nginx负载不均衡。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#配置nginx.conf配置文件</span><br><span class="line">upstream tomcatserver&#123;</span><br><span class="line">ip hash;</span><br><span class="line">server 127.0.0.1:8080 weight=1;</span><br><span class="line">server 192.168.26.101:8080 weight=5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>redis：如图所示，tomcat-A,B,C都有共同的数据源，将session存储到数据源中共同管理，就实现了session共享。为什么选择非关系型数据库redis作为数据源？首先redis的读写性能，读110000次/秒，写80000次/秒，相比mysql快速很多。其次数据的特性，session数据主要提供的是验证功能，针对这一类数据并没有持久化的需求，所以存储在缓存中会更快速的响应用户。</li></ol><img src="/codeant/7f99/1.png" title="1.png"><p>例子：<a href="https://github.com/LiJinHongPassion/test_ssm_redis" target="_blank" rel="noopener">https://github.com/LiJinHongPassion/test_ssm_redis</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1554196694-aa2baaa903a6?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1049&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="集群" scheme="https://lijinhongpassion.github.io/tags/%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>Java-nginx详解（转载）</title>
    <link href="https://lijinhongpassion.github.io/codeant/6ab.html"/>
    <id>https://lijinhongpassion.github.io/codeant/6ab.html</id>
    <published>2019-03-31T10:33:57.000Z</published>
    <updated>2019-03-31T11:03:01.168Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="https://images.unsplash.com/photo-1553949333-0510da388b82?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1350&amp;q=80" alt></p><a id="more"></a><center><br><br>​    <span id="m_name"></span><br><br>​    <audio id="m_url_id" controls> <source src> <source src="horse.ogg" type="audio/ogg"> Your browser does not support this audio format.<br><br>​    </audio><br><br></center>  <hr><h2 id="Nginx是什么"><a href="#Nginx是什么" class="headerlink" title="Nginx是什么"></a>Nginx是什么</h2><p><strong>代理服务器</strong>：一般是指局域网内部的机器通过代理服务器发送请求到互联网上的服务器,代理服务器一般作用在客户端。应用比如：GoAgent，FQ神器.</p> <img src="/codeant/6ab/1.png" title="1.png"><p> <strong>一个完整的代理请求过程为</strong>：客户端首先与代理服务器创建连接，接着根据代理服务器所使用的代理协议，请求对目标服务器创建连接、或者获得目标服务器的指定资源。 Web代理（proxy）服务器是网络的中间实体。 代理位于Web客户端和Web服务器之间，扮演“中间人”的角色。HTTP的代理服务器即是Web服务器又是Web客户端。</p><p>代理服务器是介于客户端和Web服务器之间的另一台服务器，有了它之后，浏览器不是直接到Web服务器去取回网页而是向代理服务器发出请求，信号会先送到代理服务器，由代理服务器来取回浏览器所需要的信息并传送给你的浏览器。</p><p><strong>正向代理</strong> ：是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。</p><p>反向代理服务器：在服务器端接受客户端的请求，然后把请求分发给具体的服务器进行处理，然后再将服务器的响应结果反馈给客户端。Nginx就是其中的一种反向代理服务器软件。</p><p>Nginx：Nginx (“engine x”) ，Nginx (“engine x”) 是俄罗斯人Igor Sysoev(塞索耶夫)编写的一款高性能的 HTTP 和反向代理服务器。也是一个IMAP/POP3/SMTP代理服务器；也就是说，Nginx本身就可以托管网站，进行HTTP服务处理，也可以作为反向代理服务器使用。</p><p><strong>说明：</strong>客户端必须设置正向代理服务器，当然前提是要知道正向代理服务器的IP地址，还有代理程序的端口。</p><p>反向代理正好与正向代理相反，对于客户端而言代理服务器就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理的命名空间(name-space)中的内容发送普通请求，接着反向代理将判断向何处(原始服务器)转交请求，并将获得的内容返回给客户端。</p>  <img src="/codeant/6ab/2.png" title="2.png"><p>用户A始终认为它访问的是原始服务器B而不是代理服务器Z，但实用际上反向代理服务器接受用户A的应答，从原始资源服务器B中取得用户A的需求资源，然后发送给用户A。由于防火墙的作用，只允许代理服务器Z访问原始资源服务器B。尽管在这个虚拟的环境下，防火墙和反向代理的共同作用保护了原始资源服务器B，但用户A并不知情。 </p><h2 id="Nginx的应用现状"><a href="#Nginx的应用现状" class="headerlink" title="Nginx的应用现状"></a>Nginx的应用现状</h2><p>​    Nginx 已经在俄罗斯最大的门户网站── Rambler Media（<a href="http://www.rambler.ru）上运行了3年时间，同时俄罗斯超过20%的虚拟主机平台采用Nginx作为反向代理服务器。在国内，已经有" target="_blank" rel="noopener">www.rambler.ru）上运行了3年时间，同时俄罗斯超过20%的虚拟主机平台采用Nginx作为反向代理服务器。在国内，已经有</a> 淘宝、新浪博客、新浪播客、网易新闻、六间房、56.com、Discuz!、水木社区、豆瓣、YUPOO、海内、迅雷在线 等多家网站使用 Nginx 作为Web服务器或反向代理服务器。</p><h2 id="Nginx的特点"><a href="#Nginx的特点" class="headerlink" title="Nginx的特点"></a>Nginx的特点</h2><ul><li>跨平台：Nginx 可以在大多数 Unix like OS编译运行，而且也有Windows的移植版本。</li><li>配置异常简单：非常容易上手。配置风格跟程序开发一样，神一般的配置</li><li>非阻塞、高并发连接：数据复制时，磁盘I/O的第一阶段是非阻塞的。官方测试能够支撑5万并发连接，在实际生产环境中跑到2～3万并发连接数.(这得益于Nginx使用了最新的epoll模型)</li><li>事件驱动：通信机制采用epoll模型，支持更大的并发连接。</li></ul><h2 id="Nginx的事件处理机制"><a href="#Nginx的事件处理机制" class="headerlink" title="Nginx的事件处理机制"></a>Nginx的事件处理机制</h2><p>对于一个基本的web服务器来说，事件通常有三种类型，网络事件、信号、定时器。 </p><p>首先看一个请求的基本过程：建立连接—接收数据—发送数据 。</p><p>再次看系统底层的操作 ：上述过程（建立连接—接收数据—发送数据）在系统底层就是读写事件。</p><p> 1）如果采用阻塞调用的方式，当读写事件没有准备好时，必然不能够进行读写事件，那么久只好等待，等事件准备好了，才能进行读写事件。那么请求就会被耽搁 。阻塞调用会进入内核等待，cpu就会让出去给别人用了，对单线程的worker来说，显然不合适，当网络事件越多时，大家都在等待呢，cpu空闲下来没人用，cpu利用率自然上不去了，更别谈高并发了 。</p><p> 2）既然没有准备好阻塞调用不行，那么采用非阻塞方式。非阻塞就是，事件，马上返回EAGAIN， 告诉你，事件还没准备好呢，你慌什么，过会再来吧。好吧，你过一会，再来检查一下事件，直到事件准备好了为止，在这期间，你就可以先去做其它事情，然后再 来看看事件好了没。虽然不阻塞了，但你得不时地过来检查一下事件的状态，你可以做更多的事情了，但带来的开销也是不小的 </p><p><strong>小结：</strong>非阻塞通过不断检查事件的状态来判断是否进行读写操作，这样带来的开销很大。 </p><p>3）因此才有了异步非阻塞的事件处理机制。具体到系统调用就是像select/poll/epoll/kqueue这样的系统调用。他们提供了一种机制，让你可以同时监控多个事件，调用他们是阻塞的，但可以设置超时时间，在超时时间之内，如果有事件准备好了，就返回。这种机制解决了我们上面两个问题。 </p><p>以epoll为例：当事件没有准备好时，就放入epoll(队列)里面。如果有事件准备好了，那么就去处理；如果事件返回的是EAGAIN，那么继续将其放入epoll里面。从而，只要有事件准备好了，我们就去处理她，只有当所有时间都没有准备好时，才在epoll里 面等着。这样，我们就可以并发处理大量的并发了，当然，这里的并发请求，是指未处理完的请求，线程只有一个，所以同时能处理的请求当然只有一个了，只是在 请求间进行不断地切换而已，切换也是因为异步事件未准备好，而主动让出的。这里的切换是没有任何代价，你可以理解为循环处理多个准备好的事件，事实上就是 这样的。 </p><p>4）与多线程的比较：</p><p>​     与多线程相比，这种事件处理方式是有很大的优势的，不需要创建线程，每个请求占用的内存也很少，没有上下文切换，事件处理非常的轻量级。并发数再多也不会导致无谓的资源浪费（上下文切换）。</p><p><strong>小结：</strong>通过异步非阻塞的事件处理机制，Nginx实现由进程循环处理多个准备好的事件，从而实现高并发和轻量级。 </p><p>master/worker结构：一个master进程，生成一个或多个worker进程</p><p>内存消耗小：处理大并发的请求内存消耗非常小。在3万并发连接下，开启的10个Nginx 进程才消耗150M内存（15M*10=150M） 成本低廉：Nginx为开源软件，可以免费使用。而购买F5 BIG-IP、NetScaler等硬件负载均衡交换机则需要十多万至几十万人民币</p><p>内置的健康检查功能：如果 Nginx Proxy 后端的某台 Web 服务器宕机了，不会影响前端访问。</p><p>节省带宽：支持 GZIP 压缩，可以添加浏览器本地缓存的 Header 头。</p><p>稳定性高：用于反向代理，宕机的概率微乎其微</p><h2 id="Nginx的不为人知的特点"><a href="#Nginx的不为人知的特点" class="headerlink" title="Nginx的不为人知的特点"></a>Nginx的不为人知的特点</h2><p>1、nginx代理和后端web服务器间无需长连接；</p><p>2、接收用户请求是异步的，即先将用户请求全部接收下来，再一次性发送后后端web服务器，极大的减轻后端web服务器的压力</p><p>3、发送响应报文时，是边接收来自后端web服务器的数据，边发送给客户端的</p><p>4、网络依赖型低。NGINX对网络的依赖程度非常低，理论上讲，只要能够ping通就可以实施负载均衡，而且可以有效区分内网和外网流量</p><p>5、支持服务器检测。NGINX能够根据应用服务器处理页面返回的状态码、超时信息等检测服务器是否出现故障，并及时返回错误的请求重新提交到其它节点上</p><h2 id="Nginx的内部-进程-模型"><a href="#Nginx的内部-进程-模型" class="headerlink" title="Nginx的内部(进程)模型"></a>Nginx的内部(进程)模型</h2><img src="/codeant/6ab/3.png" title="3.png"><p>nginx是以多进程的方式来工作的，当然nginx也是支持多线程的方式的,只是我们主流的方式还是多进程的方式，也是nginx的默认方式。nginx采用多进程的方式有诸多好处 .</p><p> (1) nginx在启动后，会有一个master进程和多个worker进程。master进程主要用来管理worker进程，包含：接收来自外界的信号，向各worker进程发送信号，监控 worker进程的运行状态,当worker进程退出后(异常情况下)，会自动重新启动新的worker进程。而基本的网络事件，则是放在worker进程中来处理了 。多个worker进程之间是对等的，他们同等竞争来自客户端的请求，各进程互相之间是独立的 。一个请求，只可能在一个worker进程中处理，一个worker进程，不可能处理其它进程的请求。 worker进程的个数是可以设置的，一般我们会设置与机器cpu核数一致，这里面的原因与nginx的进程模型以及事件处理模型是分不开的 。</p><p>(2)Master接收到信号以后怎样进行处理（./nginx -s reload ）?首先master进程在接到信号后，会先重新加载配置文件，然后再启动新的进程，并向所有老的进程发送信号，告诉他们可以光荣退休了。新的进程在启动后，就开始接收新的请求，而老的进程在收到来自master的信号后，就不再接收新的请求，并且在当前进程中的所有未处理完的请求处理完成后，再退出 .</p><p>(3) worker进程又是如何处理请求的呢？我们前面有提到，worker进程之间是平等的，每个进程，处理请求的机会也是一样的。当我们提供80端口的http服务时，一个连接请求过来，每个进程都有可能处理这个连接，怎么做到的呢？首先，每个worker进程都是从master进程fork过来，在master进程里面，先建立好需要listen的socket之后，然后再fork出多个worker进程，这样每个worker进程都可以去accept这个socket(当然不是同一个socket，只是每个进程的这个socket会监控在同一个ip地址与端口，这个在网络协议里面是允许的)。一般来说，当一个连接进来后，所有在accept在这个socket上面的进程，都会收到通知，而只有一个进程可以accept这个连接，其它的则accept失败，这是所谓的惊群现象。当然，nginx也不会视而不见，所以nginx提供了一个accept_mutex这个东西，从名字上，我们可以看这是一个加在accept上的一把共享锁。有了这把锁之后，同一时刻，就只会有一个进程在accpet连接，这样就不会有惊群问题了。accept_mutex是一个可控选项，我们可以显示地关掉，默认是打开的。当一个worker进程在accept这个连接之后，就开始读取请求，解析请求，处理请求，产生数据后，再返回给客户端，最后才断开连接，这样一个完整的请求就是这样的了。我们可以看到，一个请求，完全由worker进程来处理，而且只在一个worker进程中处理。</p><p>(4):，nginx采用这种进程模型有什么好处呢？采用独立的进程，可以让互相之间不会影响，一个进程退出后，其它进程还在工作，服务不会中断，master进程则很快重新启动新的worker进程。当然，worker进程的异常退出，肯定是程序有bug了，异常退出，会导致当前worker上的所有请求失败，不过不会影响到所有请求，所以降低了风险。当然，好处还有很多，大家可以慢慢体会。</p><p>(5).有人可能要问了，nginx采用多worker的方式来处理请求，每个worker里面只有一个主线程，那能够处理的并发数很有限啊，多少个worker就能处理多少个并发，何来高并发呢？非也，这就是nginx的高明之处，nginx采用了异步非阻塞的方式来处理请求，也就是说，nginx是可以同时处理成千上万个请求的 .对于IIS服务器每个请求会独占一个工作线程，当并发数上到几千时，就同时有几千的线程在处理请求了。这对操作系统来说，是个不小的挑战，线程带来的内存占用非常大，线程的上下文切换带来的cpu开销很大，自然性能就上不去了，而这些开销完全是没有意义的。我们之前说过，推荐设置worker的个数为cpu的核数，在这里就很容易理解了，更多的worker数，只会导致进程来竞争cpu资源了，从而带来不必要的上下文切换。而且，nginx为了更好的利用多核特性，提供了cpu亲缘性的绑定选项，我们可以将某一个进程绑定在某一个核上，这样就不会因为进程的切换带来cache的失效 </p><h2 id="Nginx是如何处理一个请求"><a href="#Nginx是如何处理一个请求" class="headerlink" title="Nginx是如何处理一个请求"></a>Nginx是如何处理一个请求</h2><p>首先，nginx在启动时，会解析配置文件，得到需要监听的端口与ip地址，然后在nginx的master进程里面，先初始化好这个监控的socket(创建socket，设置addrreuse等选项，绑定到指定的ip地址端口，再listen)，然后再fork(一个现有进程可以调用fork函数创建一个新进程。由fork创建的新进程被称为子进程 )出多个子进程出来，然后子进程会竞争accept新的连接。此时，客户端就可以向nginx发起连接了。当客户端与nginx进行三次握手，与nginx建立好一个连接后，此时，某一个子进程会accept成功，得到这个建立好的连接的socket，然后创建nginx对连接的封装，即ngx_connection_t结构体。接着，设置读写事件处理函数并添加读写事件来与客户端进行数据的交换。最后，nginx或客户端来主动关掉连接，到此，一个连接就寿终正寝了。 </p><p>当然，nginx也是可以作为客户端来请求其它server的数据的（如upstream模块），此时，与其它server创建的连接，也封装在ngx_connection_t中。作为客户端，nginx先获取一个ngx_connection_t结构体，然后创建socket，并设置socket的属性（ 比如非阻塞）。然后再通过添加读写事件，调用connect/read/write来调用连接，最后关掉连接，并释放ngx_connection_t。 </p><p><strong>说明</strong>：nginx在实现时，是通过一个连接池来管理的，每个worker进程都有一个独立的连接池，连接池的大小是worker_connections。这里的连接池里面保存的其实不是真实的连接，它只是一个worker_connections大小的一个ngx_connection_t结构的数组。并且，nginx会通过一个链表free_connections来保存所有的空闲ngx_connection_t，每次获取一个连接时，就从空闲连接链表中获取一个，用完后，再放回空闲连接链表里面。 </p><p>在这里，很多人会误解worker_connections这个参数的意思，认为这个值就是nginx所能建立连接的最大值。其实不然，这个值是表示每个worker进程所能建立连接的最大值，所以，一个nginx能建立的最大连接数，应该是worker_connections <em> worker_processes。当然，这里说的是最大连接数，对于HTTP请求本地资源来说，能够支持的最大并发数量是worker_connections </em> worker_processes，而如果是HTTP作为反向代理来说，最大并发数量应该是worker_connections * worker_processes/2。因为作为反向代理服务器，每个并发会建立与客户端的连接和与后端服务的连接，会占用两个连接。 </p><h2 id="Nginx典型的应用场景"><a href="#Nginx典型的应用场景" class="headerlink" title="Nginx典型的应用场景"></a>Nginx典型的应用场景</h2><img src="/codeant/6ab/4.png" title="4.png"><p>负载均衡技术在现有网络结构之上提供了一种廉价、有效、透明的方法，来扩展网络设备和服务器的带宽、增加吞吐量、加强网络数据处理能力、提高网络的 灵活性和可用性。它有两方面的含义：首先，大量的并发访问或数据流量分担到多台节点设备上分别处理，减少用户等待响应的时间；其次，单个重负载的运算分担 到多台节点设备上做并行处理，每个节点设备处理结束后，将结果汇总，返回给用户，系统处理能力得到大幅度提高 </p><h2 id="Nginx的应用"><a href="#Nginx的应用" class="headerlink" title="Nginx的应用"></a>Nginx的应用</h2><p>1、到官网下载Windows版本，下载地址：<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">http://nginx.org/en/download.html</a></p><p>2、解压到磁盘任一目录</p><p>3、修改配置文件：具体参考备注。</p><p>4、启动服务：直接运行nginx.exe，缺点控制台窗口关闭，服务关闭。守护进程的方式启动：start nginx.exe</p><p>5、停止服务：nginx -s stop</p><p>重新加载配置：nginx -s  reload</p><h3 id="Nginx常见配置说明"><a href="#Nginx常见配置说明" class="headerlink" title="Nginx常见配置说明"></a>Nginx常见配置说明</h3><p>worker_processes 8;</p><p>#nginx进程数，建议设置为等于CPU总核心数</p><p>worker_connections 65535;</p><p>#单个进程最大连接数（最大连接数=连接数*进程数）</p><p>client_header_buffer_size 32k; #上传文件大小限制</p><p>large_client_header_buffers 4 64k; #设定请求缓</p><p>client_max_body_size 8m; #设定请求缓</p><p>autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。</p><p>tcp_nopush on; #防止网络阻塞</p><p>tcp_nodelay on; #防止网络阻塞</p><p>keepalive_timeout 120; #长连接超时时间，单位是秒</p><p>gzip on; #开启gzip压缩输出</p><p>gzip_min_length 1k; #最小压缩文件大小</p><p>gzip_buffers 4 16k; #压缩缓冲区</p><p>gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</p><p>gzip_comp_level 2; #压缩等级</p><p>upstream blog.ha97.com {</p><p>#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</p><p>server 192.168.80.121:80 weight=3;</p><p>server 192.168.80.122:80 weight=2;</p><p>server 192.168.80.123:80 weight=3;</p><p>}</p><p>#虚拟主机的配置</p><p>server</p><p>{</p><p>#监听端口</p><p>listen 80;</p><p>#域名可以有多个，用空格隔开</p><p>server_name <a href="http://www.ha97.com" target="_blank" rel="noopener">www.ha97.com</a> ha97.com;</p><p>index index.html index.htm index.php;</p><p>root /data/www/ha97;</p><p>location ~ .*.(php|php5)?$</p><p>{</p><p>fastcgi_pass 127.0.0.1:9000;</p><p>fastcgi_index index.php;</p><p>include fastcgi.conf;</p><p>}</p><h3 id="模块参数"><a href="#模块参数" class="headerlink" title="模块参数"></a>模块参数</h3><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line">#定义Nginx运行的用户和用户组        </span><br><span class="line">user www www;              </span><br><span class="line">#nginx进程数，建议设置为等于CPU总核心数。        </span><br><span class="line">worker_processes 8;        </span><br><span class="line">  </span><br><span class="line">#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]  </span><br><span class="line">  </span><br><span class="line">error_log ar/loginx/error.log info;  </span><br><span class="line">         </span><br><span class="line">#进程文件  </span><br><span class="line">  </span><br><span class="line">pid ar/runinx.pid;        </span><br><span class="line">   </span><br><span class="line">#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，但是nginx分配请求并不均匀，  </span><br><span class="line">所以建议与ulimit -n的值保持一致。  </span><br><span class="line">  </span><br><span class="line">worker_rlimit_nofile 65535;               </span><br><span class="line">  </span><br><span class="line">#工作模式与连接数上限        </span><br><span class="line">events        </span><br><span class="line">&#123;        </span><br><span class="line">#参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，  </span><br><span class="line">如果跑在FreeBSD上面，就用kqueue模型。  </span><br><span class="line">  </span><br><span class="line">use epoll;        </span><br><span class="line">#单个进程最大连接数（最大连接数=连接数*进程数）       </span><br><span class="line">worker_connections 65535;        </span><br><span class="line">&#125;  </span><br><span class="line">         </span><br><span class="line">#设定http服务器        </span><br><span class="line">http        </span><br><span class="line">&#123;        </span><br><span class="line">include mime.types; #文件扩展名与文件类型映射表       </span><br><span class="line">default_type application/octet-stream; #默认文件类型        </span><br><span class="line">#charset utf-8; #默认编码        </span><br><span class="line">server_names_hash_bucket_size 128; #服务器名字的hash表大小        </span><br><span class="line">client_header_buffer_size 32k; #上传文件大小限制        </span><br><span class="line">large_client_header_buffers 4 64k; #设定请求缓       </span><br><span class="line">client_max_body_size 8m; #设定请求缓        </span><br><span class="line">sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，  </span><br><span class="line">可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。        </span><br><span class="line">autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。        </span><br><span class="line">tcp_nopush on; #防止网络阻塞        </span><br><span class="line">tcp_nodelay on; #防止网络阻塞        </span><br><span class="line">keepalive_timeout 120; #长连接超时时间，单位是秒       </span><br><span class="line">        </span><br><span class="line">#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。        </span><br><span class="line">fastcgi_connect_timeout 300;        </span><br><span class="line">fastcgi_send_timeout 300;        </span><br><span class="line">fastcgi_read_timeout 300;        </span><br><span class="line">fastcgi_buffer_size 64k;        </span><br><span class="line">fastcgi_buffers 4 64k;        </span><br><span class="line">fastcgi_busy_buffers_size 128k;        </span><br><span class="line">fastcgi_temp_file_write_size 128k;         </span><br><span class="line">  </span><br><span class="line">#gzip模块设置        </span><br><span class="line">gzip on; #开启gzip压缩输出        </span><br><span class="line">gzip_min_length 1k; #最小压缩文件大小        </span><br><span class="line">gzip_buffers 4 16k; #压缩缓冲区        </span><br><span class="line">gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）        </span><br><span class="line">gzip_comp_level 2; #压缩等级        </span><br><span class="line">gzip_types text/plain application/x-javascript text/css application/xml;  </span><br><span class="line">  </span><br><span class="line">#压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。        </span><br><span class="line">gzip_vary on;        </span><br><span class="line">#limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用        </span><br><span class="line">   </span><br><span class="line">  </span><br><span class="line">upstream blog.ha97.com &#123;        </span><br><span class="line">#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。        </span><br><span class="line">server 192.168.80.121:80 weight=3;        </span><br><span class="line">server 192.168.80.122:80 weight=2;        </span><br><span class="line">server 192.168.80.123:80 weight=3;        </span><br><span class="line">&#125;               </span><br><span class="line">  </span><br><span class="line">#虚拟主机的配置        </span><br><span class="line">server       </span><br><span class="line">&#123;        </span><br><span class="line">#监听端口        </span><br><span class="line">listen 80;        </span><br><span class="line">#域名可以有多个，用空格隔开        </span><br><span class="line">server_name www.ha97.com ha97.com;       </span><br><span class="line">index index.html index.htm index.php;        </span><br><span class="line">root /data/www/ha97;        </span><br><span class="line">location ~ .*.(php|php5)?$        </span><br><span class="line">&#123;        </span><br><span class="line">fastcgi_pass 127.0.0.1:9000;        </span><br><span class="line">fastcgi_index index.php;        </span><br><span class="line">include fastcgi.conf;        </span><br><span class="line">&#125;        </span><br><span class="line">#图片缓存时间设置        </span><br><span class="line">location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$        </span><br><span class="line">&#123;        </span><br><span class="line">expires 10d;        </span><br><span class="line">&#125;        </span><br><span class="line">#JS和CSS缓存时间设置        </span><br><span class="line">location ~ .*.(js|css)?$        </span><br><span class="line">&#123;        </span><br><span class="line">expires 1h;        </span><br><span class="line">&#125;        </span><br><span class="line">#日志格式设定        </span><br><span class="line">log_format access &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;        </span><br><span class="line">&apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;        </span><br><span class="line">&apos;&quot;$http_user_agent&quot; $http_x_forwarded_for&apos;;  </span><br><span class="line">  </span><br><span class="line">#定义本虚拟主机的访问日志       </span><br><span class="line">access_log ar/loginx/ha97access.log access;               </span><br><span class="line">  </span><br><span class="line">#对 &quot;/&quot; 启用反向代理        </span><br><span class="line">location / &#123;        </span><br><span class="line">proxy_pass http://127.0.0.1:88;        </span><br><span class="line">proxy_redirect off;        </span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;  </span><br><span class="line">  </span><br><span class="line">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP        </span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  </span><br><span class="line">  </span><br><span class="line">#以下是一些反向代理的配置，可选。  </span><br><span class="line">  </span><br><span class="line">proxy_set_header Host $host;        </span><br><span class="line">client_max_body_size 10m; #允许客户端请求的最大单文件字节数        </span><br><span class="line">client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，        </span><br><span class="line">proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)        </span><br><span class="line">proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)        </span><br><span class="line">proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)        </span><br><span class="line">proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小        </span><br><span class="line">proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置        </span><br><span class="line">proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）        </span><br><span class="line">proxy_temp_file_write_size 64k;  </span><br><span class="line">  </span><br><span class="line">#设定缓存文件夹大小，大于这个值，将从upstream服务器传        </span><br><span class="line">&#125;  </span><br><span class="line">             </span><br><span class="line">#设定查看Nginx状态的地址        </span><br><span class="line">location /NginxStatus &#123;        </span><br><span class="line">stub_status on;        </span><br><span class="line">access_log on;        </span><br><span class="line">auth_basic &quot;NginxStatus&quot;;        </span><br><span class="line">auth_basic_user_file confpasswd;        </span><br><span class="line">#htpasswd文件的内容可以用apache提供的htpasswd工具来产生。        </span><br><span class="line">&#125;  </span><br><span class="line">               </span><br><span class="line">#本地动静分离反向代理配置        </span><br><span class="line">#所有jsp的页面均交由tomcat或resin处理        </span><br><span class="line">location ~ .(jsp|jspx|do)?$ &#123;        </span><br><span class="line">proxy_set_header Host $host;        </span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;        </span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        </span><br><span class="line">proxy_pass http://127.0.0.1:8080;        </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">#所有静态文件由nginx直接读取不经过tomcat或resin        </span><br><span class="line">location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$        </span><br><span class="line">&#123; expires 15d; &#125;        </span><br><span class="line">location ~ .*.(js|css)?$        </span><br><span class="line">&#123; expires 1h; &#125;        </span><br><span class="line">&#125;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p>更详细的模块参数请参考：<a href="http://wiki.nginx.org/Main" target="_blank" rel="noopener">http://wiki.nginx.org/Main</a></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>Nginx+IIS服务器搭建服务器集群</p> <img src="/codeant/6ab/5.png" title="5.png"><h2 id="配置静态资源"><a href="#配置静态资源" class="headerlink" title="配置静态资源"></a>配置静态资源</h2><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location ~ \.(jpg|png|jpeg|bmp|gif|swf|css)$  </span><br><span class="line">          &#123;  </span><br><span class="line">              expires 30d;  </span><br><span class="line">               root /nginx-1.4.7;#root:  </span><br><span class="line">              break;  </span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>负载均衡策略：<a href="http://baidutech.blog.51cto.com/4114344/1033718/" target="_blank" rel="noopener">http://baidutech.blog.51cto.com/4114344/1033718/</a></p><p>转载来源：<a href="https://www.cnblogs.com/jiekzou/p/4486447.html" target="_blank" rel="noopener">https://www.cnblogs.com/jiekzou/p/4486447.html</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1553949333-0510da388b82?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1350&amp;amp;q=80&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://lijinhongpassion.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://lijinhongpassion.github.io/tags/java/"/>
    
      <category term="nginx" scheme="https://lijinhongpassion.github.io/tags/nginx/"/>
    
  </entry>
  
</feed>
